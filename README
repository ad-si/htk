This directory contains Uni, the central part of the UniForM workbench.
The source of Uni and the MMiSS Workbench is in the following directories,
which are listed in the order they are compiled.  


   directory    |  contents
   
   mk           |  Makefile magic which set up default rules and variables
   util         |  Miscellanous Haskell functions used all over Uni
   events       |  Events, providing a way for concurrent events to 
                |  communicated
   reactor      |  Miscellaneous things for running processes and tools
   posixutil    |  Various utilities that only work under Posix.
   htk          |  This is an encapsulation of Tcl/Tk in Haskell
                |  See htk/examples for a few short introductory examples.
                |  The htk code is divided among several sub-directories.
   HaXml-1.11   |  This contains the complete source of HaXml.  This is
                |  included by uni, but is completely unchanged from the
                |  official distribution, which is currently the responsibility
                |  of Malcolm Wallace. 
                |
                |  (Actually "completely unchanged" is a lie; I just changed
                |  two comments for Haddock, and also replaced a reference
                |  to FiniteMap with the full qualified name Data.FiniteMap.)
                |
   HaXml        |  We compile HaXml, if necessary, in this directory.
   server       |  Stuff for client-server relationships
   graphs       |  General framework for shared graphs.
   davinci      |  This is an encapsulation of DaVinci in Haskell
   simpledb     |  A very simple database system.
   imports      | 
   types        |  Repository
   emacs        |  Contains the code for editing MMiSS objects with XEmacs
   mmiss/parser |  (Un)Parses LaTeX sources for MMiSS objects.
   mmiss        |  General code for MMiSS objects.
   mmiss/api    |  Code for interfacing MMiSS via an API

Requirements for compiling UniForM
----------------------------------

At the moment, the Uni sources and the MMiSS workbench have been 
successfully compiled and run on Linux/x86, Microsoft Windows XP (running
MinGW),  Sparc Solaris, and MacOS Darwin.  The HTk part also works on
FreeBSD.

The following things are specifically required if you want to compile 
everything.  If you just want HTk, you only need (1)-(3).  If you just want
HTk + daVinci + HaXml, you only need (1)-(4).  

(1) Glasgow Haskell.   
    
    http://www.haskell.org/ghc/docs/latest/html/building/sec-port-info.html

    This release specifically requires version 6.3 of Glasgow Haskell or
    later.  At the time of writing (14th December 2004) there is no
    official release on this branch; instead the code has been compiled
    with a version of GHC compiled from source.  However the code should
    work with version 6.4, which will be officially released shortly.

    If that hasn't happened yet or you like living dangerously, you can get
    detailed instructions for compiling GHC from source from here:

       http://research.microsoft.com/%7Esimonpj/tmp/building/

    or here (specifically for Windows)

       http://raintown.org/wiki/index.php/Building_The_Glasgow_Haskell_Compiler_from_source_on_Windows

    NB.  Be *very* careful to follow instructions carefully and don't attempt
    to be clever or use short cuts.  Compiling the Glasgow Haskell Compiler
    takes a very long time (maybe as much as several hours) and deviating
    from the instructions may well cause your compilation to fall over 
    mysteriously some time later, meaning you'll have to go back to the
    beginning and repeat the process.

(2) A standard Unix-ish environment.  On 
    Linux/Solaris/MacOS Darwin/FreeBSD this is a given.  On Windows there is 
    a choice between MinGW and Cygwin, both of which provide you with 
    Unix-like shells, gcc, libraries, and so on.  For compiling the Workbench,
    I recommend MinGW, which seems to be simpler than Cygwin, and friendlier 
    about working with other (non MinGW/Cygwin) programs.  MinGW is also, by
    the way, capable of compiling GHC.  You can get it from
     
       http://www.mingw.org

    You will need at least MSYS, MinGW and the MSYS Developer Tool Kit.
    You will probably also want TclTK (for (3).
    
    However Cygwin (http://www.cygwin.com) may well work as well.

(3) Tcl/Tk.  htk uses the (very common) "wish" program for all its basic user
    interaction.  Typing "wish" at your command prompt should produce
    a small empty window called "wish" if you have it (typing "exit" will
    then allow you to escape).  If you don't have it, you should be able to
    find somewhere to download it from 

       http://www.tcl.tk

    If you want another look-and-feel, try tixwish 
    ( http://tix.sourceforge.net ).

(4) daVinci.  This is what the Workbench uses to display graphs.  You can
    get version 2.1 from 

       http://www.informatik.uni-bremen.de/daVinci/

    The commercial version of daVinci, daVinci Presenter, is no longer
    available, but also works with the Workbench.  A new, free, version
    of daVinci is hopefully on the way.

(5) The Berkeley Database is used for all storage by the repository.
    You can get this from

       http://www.sleepycat.com

    I recommend using the option --disable-shared when you compile it,
    since that will prevent you needing to the BDB shared library around
    when you run executables.

    Thus in BDB's directory [BDB source]/build-unix, you might use
    the command

       ../dist/configure --disable-shared

    configure has other useful, sometimes essential, options, which
    you can find out by type 
   
       ../dist/configure --help

    For example if you are using MinGW, you need the --enable-mingw option;
    if you want the compiled code to go somewhere other than the standard
    system locations (for example, because you don't have administrator
    permissions on your machine) you will need --prefix, and so on.

    Versions of BDB including 4.1.25, 4.2.52, and 4.3.21 have all been
    found to work with the Workbench.  You do not need a version with
    cryptography.

    The Workbench still needs to be able to FIND the BDB files, if they
    are not installed in the standard place.  You can tell it either
    by setting the environment variable BDBDIR, or by giving UniForM's
    ./configure script an option --with-bdb=[directory path].

(6) XEmacs.  This is used directly by the Workbench for editing objects.
    At the moment I am using XEmacs 21.4 patch 8, but I've had no
    trouble with other versions which are slightly earlier or slightly later.
    Do not, however, expect normal GNU Emacs to work, as it won't.
    (This is mainly because we make heavy use of XEmacs' extent mechanism.
    GNU Emacs has a similar mechanism, but it has a different interface.
    Anyone wishing to convert uni/emacs/extents.el to GNU Emacs is welcome
    to try.)   You can get XEmacs from

       http://www.xemacs.org

    The Workbench communicates with XEmacs using the "gnuserv".
    This needs to be enabled from XEmacs. You can do this by running
    the Lisp command "(gnuserv-start)" within XEmacs.  Alternatively you
    can add the same command to your .xemacs/init.el so that it is run
    every time XEmacs start.  

    Annoyingly, there are some releases of XEmacs which do not include
    gnuserv, in particular the Netinstaller version of XEmacs currently 
    available for Windows.  I have however been able to get an XEmacs working
    with gnuserv on Windows by compiling the Netinstaller version with a 
    version of gnuclient/gnuserv compiled from source.  For the latter, I
    followed the instructions for compiling XEmacs on cygwin, but instead
    of compiling all the XEmacs sources I just went to the xemacs-21.4.5/
    directory, ran ./configure (following carefully the instructions here

       http://www.xemacs.org/Documentation/21.5/html/xemacs-faq_3.html#SEC76

    ), and then went into lib-src directory and typed "make".  This saves
    you the bother of compiling all the rest of XEmacs, which you don't want,
    since the Netinstaller version has them.  Make sure when you've done that
    that the cygwin1.dll file is where you keep DLLs on your Windows system
    (such as C:\WINDOWS\SYSTEM), that gnuserv.exe is where your Netinstaller
    version of XEmacs can find it (look for mmencode.exe and put it in the
    same directory), and that gnuclient.exe is on your PATH.  Yes, as I said
    it's annoying.

(7) To run the Workbench and TeX the output, you will need MMiSS TeX.  This is 
    *not* currently in the public domain.  However assuming you have it,
    and have configure'd it, UniForM again needs to know where to find it.
    It will guess /usr/local/MMISS/tex, but if MMiSS-LaTeX is not there
    you can specify its location with the environment variable MMISSLATEXDIR,
    or by a ./configure option --with-MMiSS-LaTeX=[MMiSS-LaTeX directory]).
    (The name of this directory will most likely end "MMISS/tex".)

    If you don't have MMiSS TeX, you can still compile and run the Workbench,
    but won't be able to TeX anything.

(8) A thing you should ideally have is a lot of memory (like 250 MB). 
    Everyone has that much these days, don't they?  But if you don't and
    a compilation falls over because of it, try "gmake slow".

Of course you also need the sources to Uni!  They should be with this
README file, but in case they are not, or in case you want to update
your copies, here are details.  The Uni sources are kept in a 
publicly accessible CVS repository at cvs-agbkb.informatik.uni-bremen.de.  
For general details about this repository, see
   http://www.informatik.uni-bremen.de/~ger/cvs/CVS.html
So for example to get a complete set of the latest version of the sources you 
type (in bash or sh)

export CVSROOT=:pserver:cvsread@cvs-agbkb.informatik.uni-bremen.de:/repository
cvs login
# when cvs login asks for a password, type "cvsread"   
cvs checkout -rghc-6-04 uni

This will create a directory uni in your current directory containing
the latest sources for uni.

NB.  The "-rghc-6-04" is specific to this release, and indicates that
you specifically want the branch that works for ghc-6.4 style versions of the
Glasgow Haskell compiler.  (Or, perhaps, later ones.)

Type "man cvs" to find out other CVS commands.

What To Do Before Compiling
----------------------------

1) Do you want a debugging version of Uni?  By default you won't
   get it.  To compile a debugging version, 
      cd uni/mk
      cp local.mk.debug local.mk
   The file local.mk is included, if present, by every Makefile.
   Thus it's also a good thing to use for other Makefile hacking.
2) How much do you want to compile?  The default is everything,
   but you can give configure the option --enable-HTk, if all you
   want to compile is HTk or --enable-Het if you just want to 
   compile the things needed for HetCATS (HTk + daVinci + HaXml).
   If ./configure can't find the files it needs it may decide not
   to compile everything anyway; for example if it can't find daVinci
   it will just compile HTk.
3) The programs (ghc, wish, daVinci, gnuclient) need to be in your PATH
   when you run ./configure.  (After that, ./configure makes sure they
   are remembered.)   If you want to compile everything, you will also 
   need to tell ./configure where to find the Berkeley Data Base, see 
   (5) in the "Requirements section".

   You can also specify these using environment variables.  For example,
   if you want to use tixwish rather than wish, set the environment variable
   UNIWISH to the location of your tixwish executable.

Compiling
---------

Once you've done all that, the following commands are supposed to do
it, assuming that you are in the same directory as this README file
(that is, at the top of the Uni distribution).  Here, and elsewhere in this
document, I shall use "gmake" to mean "whatever command corresponds to
GNU make on your system".  Other versions of make, such as that called "make"
on Solaris, do not work.
   
# Configure the Makefiles
./configure
# Compile Uni
gmake all

Compiling the Emacs Lisp files
------------------------------

You can compile the Emacs lisp files by starting the XEmacs server
(see instructions above) and then typing
gmake objsemacs


Other Make targets for UniForM developers
-----------------------------------------

The 
   ./configure
   gmake all
sequence described above is just if you want to build the whole thing from
scratch.  Once you've done this, you may want to modify a file and then
recompile. 

The Make targets described in this section all work in any directory of uni
that contains a Makefile.  If you use then in a subdirectory, they will only
apply to that subdirectory.  For example, if you have modified a file, you
can do
   gmake all
in the directory containing that file

As described in the next section "Makefiles for uni", source files are
divided into package files, test files and main files.  You can use
   gmake package
   gmake test
or
   gmake main
to compile just the files you are interested in.  Of course, to compile
the test or main files, you should already have compiled the package files.

You can also compile any individual file.  This is often useful when you
modify one file and want to get GHC to check it.  First, as preparation, you
need to do
   gmake depend
and then you can use
   gmake [object file]
where the object file for, say, Foo.hs is Foo.o.

If you add a source file, or want to add a whole new subdirectory with its
own Makefile, you will need to modify a Makefile.  These are described in
the next section.

Makefiles for uni
-----------------

In each subdirectory of uni there is a file Makefile.in.  If you want to
create another new package you will need to copy this file.  It normally has
the following format:

---- cut here --------------
SRCS = foo1.hs foo2.hs foo3.lhs . . .
PACKAGE = [package name]
PACKAGES = package1 package2 . . .

include @TOP@/mk/boilerplate.mk
---- cut here --------------
Thus we have a list of variable settings (which may be in any order),
then we include the general Make magic.  

SRCS contains all the Haskell source files in this directory.
   The Makefiles interpret these specially according to name.
   Files with names of the type "Test*.hs" or "Test*.lhs" are test programs,
      should contain a module Main, and will be compiled to an executable
      with name "test*", or "test*.exe" on Windows, for example "TestFoo.hs"
      will go to "Foo" or "Foo.exe"
   Files with names "Main*.hs" or "Main*.lhs" are just the same
      as files "Test*.hs" or "Test*.hs", except that the final executable
      is just called "*", so "MainFoo.hs" goes to "Foo".
   All other files are package files.  They should contain a module with the
      name of the file (so the file Foo.hs must contain the module Foo; the
      module subdir/Bar.hs must contain the module Bar).

PACKAGE is the name you want to give to the package contained in this 
   directory.  Normally this name begins with "uni-". This should be
   specified if and only if the directory contains library files.
PACKAGES is the list of packages you will need.  This includes
   GHC packages (net and posix for example) and also UniForM packages
   (like uni-htk).  You only have to give direct dependencies here; for
   example uni-htk imports uni-util, so if you specify uni-htk, you do not
   need uni-util.   

The following variables also occur occasionally:
SUBDIRS specifies a list of subdirectories of this directory also containing
   Makefiles, into which we should recurse.
SRCSC is like SRCS, but expects a list of C files.

Some special targets are occasionally optionally defined.  These include
   dochere
If a Makefile defines this target it will be executed when gmake doc is
done; it should compile any documentation in this directory.
   wwwhere
If a Makefile defines this target it will be executed when gmake www is done.
This should copy any appropriate files over to the Web page.

Makefile.in can also contain variable settings which, for example, specify
   special GHC options to use, but I shall not explain this here.  You may
   be able to work some of them out by looking at the Makefiles, for example
   htk/Makefile.in.

After you've modified a Makefile, if you have time on your hands you should run
   ./configure 
(from the top directory)
followed by 
   gmake packagesquick
to reset the package file.  You may also need to run
   gmake depend
if the import dependencies between the files you are working on have changed
and you want Make targets "lib" or individual object files to work.
 
However in many cases it will be possible to get away with
   gmake makefilequick
to regenerate the Makefile in the current directory.  (This assumes that
one is already there.)  This technique assumes you've changed that Makefile, 
and nothing else relevant to configuration.  (For example, it assumes you
haven't added any new Makefiles.) 

Making documentation
--------------------

You need to use Haddock, which is available from 

   http://www.haskell.org/haddock/

We are using Haddock 0.6 with some extra extensions which will hopefully
make it into Haddock 0.7.  Haddock 0.6 should however work, but the output
will not look as good; the "Description" fields will not appear in the
contents lists as they should.

Make sure Haddock is in your path and then type

   ./configure 
   ./runhaddock.sh

The output may be even better if you can find where Glasgow Haskell installs
its HTML documentation and, instead of "./configure", use 
"./configure --with-ghc-html=[directory]".  ./configure tries to figure out
where the HTML documentation is anyway, but it doesn't always get it right.


Other Specific Issues for Windows
---------------------------------

For wish, daVinci, gnuclient, programs which the Workbench calls externally, 
there is a problem because the Workbench uses GHC, which expects the
native Windows file names of their executables, while when you ran ./configure
it will have hardwired the MinGW (or perhaps CygWin) names, which are tweaked
to make them look more Unix-y.  The solution is to specify the file names
directly, by setting the environment variables UNIWISH, UNIDAVINCI and
UNIGNUCLIENT to the location of the executables.  If they are in your PATH,
you can in fact just set them to "wish", "daVinci" and "gnuclient".


How to Make a Binary Distribution
---------------------------------

The following (should) work.

# of course you can skip the next three commands if you've already done them
   ./configure
   gmake packages
#
   gmake doc
   gmake prepareexports
   gmake exports

This will create .tar.gz and .zip files containing a binary distribution
(the names begin with uni- and includes version numbers and so on).  
You should afterwards re-run ./configure as gmake prepareexports (currently) 
alters the default_options code in util, to put in generic locations for wish,
daVinci & co.

Other documentation
-------------------

The htk/doc directory contains various documentation about htk.

You should start with htk/doc/intro, which is an introduction.

htk/doc/hdoc contains hdoc-style information indexing modules, variables,
   classes and so on.  The files (once documentation is made) are in HTML.

htk/doc/internal/HOWTO.tex contains a description of the internals of the HTk
   encapsulation; this will be most useful if you want to modify this
   encapsulation in some way.  Hence it is heavily technical.  Just to make
   things more fun, it is in German.  Do let us know if you want a translation.


docs/future contains some notes on the future development of UniForM
(some of which has already happened).

More information about Make targets
-----------------------------------

Make targets are those names you put after "gmake", like "depend" and "all"
in the above instructions.

Most Make targets can be used in any directory of the UniForM source
containing a makefile, not just the top one.  
"depend" does various necessary setting up.
"all" does the actual compilation, once depend has been run.
"packages" is like "all", but just compiles the packages, not the stand-alone
   executables.
"test" makes all the test programs, that is stand-alone executables compiled
   from Haskell modules beginning with "Test".
"main" makes all the main programs, that is stand-alone executables compiled
   from Haskell modules beginning with "Main".  (The prefix "Main" is removed)

"clean" deletes all the output of "all".

The following two options fall into this class, but are experimental and
likely to change in the near future.
The following targets are provided by the top-level Makefile:

"tarball.tar.gz" makes a tarball (with that name) of all UniForM sources.

There are some other targets, but you will have to look in mk/suffix.mk
and Makefile.in to see what they are.

Other Makefile Hacking
----------------------

The file mk/local.mk (mentioned above) is included in every Makefile if
present, and can be used to change the options and provide extra targets.

Conclusion
----------

Please report problems to me.  I am George Russell and my e-mail
address is ger@tzi.de .

Good luck!


