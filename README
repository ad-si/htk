This directory contains Uni, the central part of the UniForM workbench.
The source of Uni is in the following directories:


   directory    |  contents
   
   mk           |  Makefile magic which set up default rules and variables
   util         |  Miscellanous Haskell functions used all over Uni
   events       |  Events, providing a way for concurrent events to 
                |  communicated
   server       |  Stuff for client-server relationships
   reactor      |  Miscellaneous things for running processes and tools
   htk          |  This is an encapsulation of Tcl/Tk in Haskell
                   See htk/examples for a few short introductory examples.
   graphs       |  General framework for shared graphs.
   davinci      |  This is an encapsulation of DaVinci in Haskell
   (from here on, things aren't known to work yet)
   cvs          |  encapsulation of cvs
   types        |  Repository (UNDER CONSTRUCTION)
   tools        |  Encapsulations of some tools in Haskell.
   appl         |  Stand-alone UniForM applications
   database     |  Data for various Uni components

Requirements
------------

The following are required or at least recommended. 
(1) A Unix box (probably it has to be Linux/x86 or Solaris).  Nearly
    all development has been done on Solaris so that is most likely to
    work.
(2) gcc.  Ideally what I use -- gcc version 2.95.2.
    Do not use 2.8* versions since they are known not to work at all with 
    Glasgow Haskell.  Version 2.71 might work but I suspect Glasgow Haskell 
    will not support it for much longer.
(3) gmake.  Again, use the latest one - 3.77.  But I think slightly earlier
    ones may well work.
(4) A recent version of Glasgow Haskell.  You should try to get the
    latest binary release, which is currently 5.02.1.

Of course you also need the sources to Uni!  They should be with this
README file, but in case they are not, or in case you want to update
your copies, here are details.  The Uni sources are kept in a 
publicly accessible CVS repository at cvs-agbkb.informatik.uni-bremen.de.  
For general details about this repository, see
   http://www.informatik.uni-bremen.de/~ger/cvs/CVS.html
So for example to get a complete set of the latest version of the sources you 
type (in bash or sh)

export CVSROOT=:pserver:cvsread@cvs-agbkb.informatik.uni-bremen.de:/repository
cvs login
# when cvs login asks for a password, type "cvsread"   
cvs checkout uni

This will create a directory uni in your current directory containing
the latest sources for uni.  

Type "man cvs" to find out other CVS commands.

What To Ask Before Compiling
----------------------------

1) Do you want a debugging version of Uni?  By default you won't
   get it.  To compile a debugging version, 
      cd uni/mk
      cp local.mk.debug local.mk
   The file local.mk is included, if present, by every Makefile.
   Thus it's also a good thing to use for other Makefile hacking.
2) Do you want to use the Tk-encapsulation (in directory "htk")?  
   Then you will need to a copy of Wish, which should be provided as 
   part of your X-system.  It needs to be in your PATH when you
   run the ./configure step (see the next section).  If, when you
   type "wish", a square blank window pops up with the title "wish"
   then you should be alright.
3) Do you want to draw graphs using Uni's daVinci encapsulation
   (in directory "davinci")?  Then you need DaVinci.  You can get 
   this from:
      http://www.informatik.uni-bremen.de/daVinci/
   Once you have it, put it in your PATH, with the name "daVinci",
   for the ./configure step.
4) Do you want to use our versioning system (in "cvs" and "versions")?
   Then you need cvs, probably version 10.7 or thereabouts.
   Again, put it in your PATH for the configure step.

Compiling
---------

Once you've done all that, the following commands are supposed to do
it, assuming that you are in the same directory as this README file
(that is, at the top of the Uni distribution).
   
# Configure the Makefiles
./configure
# Work out what order to do compilation in
gmake depend
# Compile Uni
gmake all

More information about Make targets
-----------------------------------

Make targets are those names you put after "gmake", like "depend" and "all"
in the above instructions.

Most Make targets can be used in any directory of the UniForM source
containing a makefile, not just the top one.  
"depend" does various necessary setting up.
"all" does the actual compilation, once depend has been run.
"lib" is like "all", but just compiles the libraries, not the stand-alone
   executables.
"test" makes all the stand-alone executables; thus it does everything
   "all" does that "lib" doesn't do.
"clean" deletes all the output of "all".

The following two options fall into this class, but are experimental and
likely to change in the near future.
"libfast" is a version of "lib" which uses ghc --make to compile all
   of the Haskell files needed for the libraries at once.
"librealfast" compiles all the Haskell files needed for the libraries
   at once, whatever directory they are in.
The reason for libfast and librealfast is that GHC spends a lot of time
initialising, in particular reading in interface files; this can be
especially bad where you are reading interface files in over a network.  If
you compile all the files in one go, you only have to do this once, so 
compilation can go several times faster.  The downside is that GHC needs memory
(perhaps about 200MB for librealfast) to store all those parsed interface 
files, so unless you have lots of memory, you might find the compilation going
slower because of swapping in and out.  

Thus if you want to make just the executables in a particular directory,
you can try

gmake depend 
gmake librealfast
cd [the directory you're interested in]
gmake test

so as to not compile any executables in any other directories.

The following targets are provided by the top-level Makefile:

"tarball.tar.gz" makes a tarball (with that name) of all UniForM sources.

There are some other targets, but you will have to look in mk/suffix.mk
and Makefile.in to see what they are.

Other Makefile Hacking
----------------------

The file mk/local.mk (mentioned above) is included in every Makefile if
present, and can be used to change the options and provide extra targets.

If you use FAST=YES on the Make command line, this makes make IGNORE all 
Haskell dependencies.  Suppose you have made some small change to A.hs.  You 
think that the interface to A has no significant changes; for example the 
inlined functions exported from A have not changed; so that it really 
shouldn't be necessary to recompile any other module.  Then if you like living
dangerously or are in a hurry you can use FAST=YES to prevent this, as in
   cd [directory containing A.hs]
   gmake FAST=YES A.o
   gmake FAST=YES lib
   gmake FAST=YES testProgram
or whatever to recompile testProgram with the new A.o, without recompiling
anything else.

If it falls over don't blame me, take out FAST=YES and do it the slow way . . .

Conclusion
----------

Please report problems to me.  I am George Russell and my e-mail
address is ger@tzi.de .

Good luck!


