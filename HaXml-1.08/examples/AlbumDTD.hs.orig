module AlbumDTD where

import Text.Xml.HaXml.Xml2Haskell


{-Type decls-}

data Album = Album Title Artist (Maybe Recordingdate)
		   Coverart [Catalogno] Personnel [Track] Notes
	   deriving (Eq,Show)
data Title = Title String
	   deriving (Eq,Show)
data Artist = Artist String
	    deriving (Eq,Show)
newtype Recordingdate = Recordingdate Recordingdate_Attrs
		      deriving (Eq,Show)
data Recordingdate_Attrs = Recordingdate_Attrs
    { date :: (Maybe String)
    , place :: (Maybe String)
    } deriving (Eq,Show)
newtype Coverart = Coverart (Coverart_Attrs,(Maybe Coverart_))
		 deriving (Eq,Show)
data Coverart_ = Coverart_ Location
	       deriving (Eq,Show)
data Coverart_Attrs = Coverart_Attrs
    { style :: String
    } deriving (Eq,Show)
newtype Location = Location Location_Attrs
		 deriving (Eq,Show)
data Location_Attrs = Location_Attrs
    { thumbnail :: (Maybe String)
    , fullsize :: (Maybe String)
    } deriving (Eq,Show)
newtype Catalogno = Catalogno Catalogno_Attrs
		  deriving (Eq,Show)
data Catalogno_Attrs = Catalogno_Attrs
    { label :: String
    , number :: String
    , format :: (Maybe Format)
    , releasedate :: (Maybe String)
    , country :: (Maybe String)
    } deriving (Eq,Show)
data Format = CD  |  LP  |  MiniDisc
	    deriving (Eq,Show)
newtype Personnel = Personnel [Personnel_]
		  deriving (Eq,Show)
data Personnel_ = Personnel_ Player
		deriving (Eq,Show)
newtype Player = Player Player_Attrs
	       deriving (Eq,Show)
data Player_Attrs = Player_Attrs
    { name :: String
    , instrument :: String
    } deriving (Eq,Show)
newtype Track = Track Track_Attrs
	      deriving (Eq,Show)
data Track_Attrs = Track_Attrs
    { title :: String
    , credit :: (Maybe String)
    , timing :: (Maybe String)
    } deriving (Eq,Show)
newtype Notes = Notes (Notes_Attrs,[Notes_])
	      deriving (Eq,Show)
data Notes_ = Notes_Str String
	    | Notes_Albumref Albumref
	    | Notes_Trackref Trackref
	    deriving (Eq,Show)
data Notes_Attrs = Notes_Attrs
    { author :: (Maybe String)
    } deriving (Eq,Show)
newtype Albumref = Albumref (Albumref_Attrs,Albumref_)
		 deriving (Eq,Show)
data Albumref_ = Albumref_ String
	       deriving (Eq,Show)
data Albumref_Attrs = Albumref_Attrs
    { alink :: String
    } deriving (Eq,Show)
newtype Trackref = Trackref (Trackref_Attrs,Trackref_)
		 deriving (Eq,Show)
data Trackref_ = Trackref_ String
	       deriving (Eq,Show)
data Trackref_Attrs = Trackref_Attrs
    { tlink :: (Maybe String)
    } deriving (Eq,Show)


{-Instance decls-}

instance XmlContent Album where
    fromElem (CElem (Elem "album" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (\(d,cd)->
		    (\(e,ce)->
		       (\(f,cf)->
			  (\(g,cg)->
			     (\(h,ch)->
				(Just (Album a b c d e f g h), rest))
			     (definite fromElem "<notes>" "album" cg))
			  (many fromElem cf))
		       (definite fromElem "<personnel>" "album" ce))
		    (many fromElem cd))
		 (definite fromElem "<coverart>" "album" cc))
	      (fromElem cb))
	   (definite fromElem "<artist>" "album" ca))
	(definite fromElem "<title>" "album" c0)
    fromElem rest = (Nothing, rest)
    toElem (Album a b c d e f g h) =
	[CElem (Elem "album" [] (toElem a ++ toElem b ++
				 maybe [] toElem c ++ toElem d ++
				 concatMap toElem e ++ toElem f ++
				 concatMap toElem g ++ toElem h))]
instance XmlContent Title where
    fromElem (CElem (Elem "title" as c0):rest) =
	(\(a,ca)->
	   (Just (Title a), rest))
	(definite fromText "text" "title" c0)
    fromElem rest = (Nothing, rest)
    toElem (Title a) =
	[CElem (Elem "title" [] (toText a))]
instance XmlContent Artist where
    fromElem (CElem (Elem "artist" as c0):rest) =
	(\(a,ca)->
	   (Just (Artist a), rest))
	(definite fromText "text" "artist" c0)
    fromElem rest = (Nothing, rest)
    toElem (Artist a) =
	[CElem (Elem "artist" [] (toText a))]
instance XmlContent Recordingdate where
    fromElem (CElem (Elem "recordingdate" as c0):rest) =
	(Just (Recordingdate (fromAttrs as)), rest)
    fromElem rest = (Nothing, rest)
    toElem (Recordingdate as) =
	[CElem (Elem "recordingdate" (toAttrs as) [])]
instance XmlAttributes Recordingdate_Attrs where
    fromAttrs as =
	Recordingdate_Attrs
	  { date = possibleA fromAttrToStr "date" as
	  , place = possibleA fromAttrToStr "place" as
	  }
    toAttrs v = catMaybes 
	[ maybeA toAttrFrStr "date" (date v)
	, maybeA toAttrFrStr "place" (place v)
	]
instance XmlContent Coverart where
    fromElem (CElem (Elem "coverart" as c0):rest) =
	(\(a,ca)->
	   (Just (Coverart (fromAttrs as, a)), rest))
	(fromElem c0)
    fromElem rest = (Nothing, rest)
    toElem (Coverart (as, a)) =
	[CElem (Elem "coverart" (toAttrs as) (maybe [] toElem a))]
instance XmlContent Coverart_ where
    fromElem c0 =
	case (fromElem c0) of
	(Nothing,_) -> (Nothing, c0)
	(Just a,rest) -> (Just (Coverart_ a), rest)
    toElem (Coverart_ a) = toElem a
instance XmlAttributes Coverart_Attrs where
    fromAttrs as =
	Coverart_Attrs
	  { style = definiteA fromAttrToStr "coverart" "style" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "style" (style v)
	]
instance XmlContent Location where
    fromElem (CElem (Elem "location" as c0):rest) =
	(Just (Location (fromAttrs as)), rest)
    fromElem rest = (Nothing, rest)
    toElem (Location as) =
	[CElem (Elem "location" (toAttrs as) [])]
instance XmlAttributes Location_Attrs where
    fromAttrs as =
	Location_Attrs
	  { thumbnail = possibleA fromAttrToStr "thumbnail" as
	  , fullsize = possibleA fromAttrToStr "fullsize" as
	  }
    toAttrs v = catMaybes 
	[ maybeA toAttrFrStr "thumbnail" (thumbnail v)
	, maybeA toAttrFrStr "fullsize" (fullsize v)
	]
instance XmlContent Catalogno where
    fromElem (CElem (Elem "catalogno" as c0):rest) =
	(Just (Catalogno (fromAttrs as)), rest)
    fromElem rest = (Nothing, rest)
    toElem (Catalogno as) =
	[CElem (Elem "catalogno" (toAttrs as) [])]
instance XmlAttributes Catalogno_Attrs where
    fromAttrs as =
	Catalogno_Attrs
	  { label = definiteA fromAttrToStr "catalogno" "label" as
	  , number = definiteA fromAttrToStr "catalogno" "number" as
	  , format = possibleA fromAttrToTyp "format" as
	  , releasedate = possibleA fromAttrToStr "releasedate" as
	  , country = possibleA fromAttrToStr "country" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "label" (label v)
	, toAttrFrStr "number" (number v)
	, maybeA toAttrFrTyp "format" (format v)
	, maybeA toAttrFrStr "releasedate" (releasedate v)
	, maybeA toAttrFrStr "country" (country v)
	]
instance XmlAttrType Format where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "CD" = Just CD
	    translate "LP" = Just LP
	    translate "MiniDisc" = Just MiniDisc
	    translate _ = Nothing
    toAttrFrTyp n CD = Just (n, str2attr "CD")
    toAttrFrTyp n LP = Just (n, str2attr "LP")
    toAttrFrTyp n MiniDisc = Just (n, str2attr "MiniDisc")
instance XmlContent Personnel where
    fromElem (CElem (Elem "personnel" as c0):rest) =
	(\(a,ca)->
	   (Just (Personnel a), rest))
	(many fromElem c0)
    fromElem rest = (Nothing, rest)
    toElem (Personnel a) =
	[CElem (Elem "personnel" [] (concatMap toElem a))]
instance XmlContent Personnel_ where
    fromElem c0 =
	case (fromElem c0) of
	(Nothing,_) -> (Nothing, c0)
	(Just a,rest) -> (Just (Personnel_ a), rest)
    toElem (Personnel_ a) = toElem a
instance XmlContent Player where
    fromElem (CElem (Elem "player" as c0):rest) =
	(Just (Player (fromAttrs as)), rest)
    fromElem rest = (Nothing, rest)
    toElem (Player as) =
	[CElem (Elem "player" (toAttrs as) [])]
instance XmlAttributes Player_Attrs where
    fromAttrs as =
	Player_Attrs
	  { name = definiteA fromAttrToStr "player" "name" as
	  , instrument = definiteA fromAttrToStr "player" "instrument" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "name" (name v)
	, toAttrFrStr "instrument" (instrument v)
	]
instance XmlContent Track where
    fromElem (CElem (Elem "track" as c0):rest) =
	(Just (Track (fromAttrs as)), rest)
    fromElem rest = (Nothing, rest)
    toElem (Track as) =
	[CElem (Elem "track" (toAttrs as) [])]
instance XmlAttributes Track_Attrs where
    fromAttrs as =
	Track_Attrs
	  { title = definiteA fromAttrToStr "track" "title" as
	  , credit = possibleA fromAttrToStr "credit" as
	  , timing = possibleA fromAttrToStr "timing" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "title" (title v)
	, maybeA toAttrFrStr "credit" (credit v)
	, maybeA toAttrFrStr "timing" (timing v)
	]
instance XmlContent Notes where
    fromElem (CElem (Elem "notes" as c0):rest) =
	(\(a,ca)->
	   (Just (Notes (fromAttrs as, a)), rest))
	(many fromElem c0)
    fromElem rest = (Nothing, rest)
    toElem (Notes (as, a)) =
	[CElem (Elem "notes" (toAttrs as) (concatMap toElem a))]
instance XmlContent Notes_ where
    fromElem c0 =
	case (fromText c0) of
	(Nothing,_) -> case (fromElem c0) of
		       (Nothing,_) -> case (fromElem c0) of
				      (Nothing,_) -> (Nothing, c0)
				      (Just a,rest) -> (Just (Notes_Trackref a), rest)
		       (Just a,rest) -> (Just (Notes_Albumref a), rest)
	(Just a,rest) -> (Just (Notes_Str a), rest)
    toElem (Notes_Str a) = toText a
    toElem (Notes_Albumref a) = toElem a
    toElem (Notes_Trackref a) = toElem a
instance XmlAttributes Notes_Attrs where
    fromAttrs as =
	Notes_Attrs
	  { author = possibleA fromAttrToStr "author" as
	  }
    toAttrs v = catMaybes 
	[ maybeA toAttrFrStr "author" (author v)
	]
instance XmlContent Albumref where
    fromElem (CElem (Elem "albumref" as c0):rest) =
	(\(a,ca)->
	   (Just (Albumref (fromAttrs as, a)), rest))
	(definite fromElem "<albumref>" "albumref" c0)
    fromElem rest = (Nothing, rest)
    toElem (Albumref (as, a)) =
	[CElem (Elem "albumref" (toAttrs as) (toElem a))]
instance XmlContent Albumref_ where
    fromElem c0 =
	case (fromText c0) of
	(Nothing,_) -> (Nothing, c0)
	(Just a,rest) -> (Just (Albumref_ a), rest)
    toElem (Albumref_ a) = toText a
instance XmlAttributes Albumref_Attrs where
    fromAttrs as =
	Albumref_Attrs
	  { alink = definiteA fromAttrToStr "albumref" "alink" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "alink" (alink v)
	]
instance XmlContent Trackref where
    fromElem (CElem (Elem "trackref" as c0):rest) =
	(\(a,ca)->
	   (Just (Trackref (fromAttrs as, a)), rest))
	(definite fromElem "<trackref>" "trackref" c0)
    fromElem rest = (Nothing, rest)
    toElem (Trackref (as, a)) =
	[CElem (Elem "trackref" (toAttrs as) (toElem a))]
instance XmlContent Trackref_ where
    fromElem c0 =
	case (fromText c0) of
	(Nothing,_) -> (Nothing, c0)
	(Just a,rest) -> (Just (Trackref_ a), rest)
    toElem (Trackref_ a) = toText a
instance XmlAttributes Trackref_Attrs where
    fromAttrs as =
	Trackref_Attrs
	  { tlink = possibleA fromAttrToStr "tlink" as
	  }
    toAttrs v = catMaybes 
	[ maybeA toAttrFrStr "tlink" (tlink v)
	]


{-Done-}
