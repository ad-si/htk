module Office where

import Text.XML.HaXml.Xml2Haskell
import Text.XML.HaXml.OneOfN
import Text.XML.HaXml.OneOf22
import Text.XML.HaXml.OneOf40


{-Type decls-}

data Office'document = Office'document Office'document_Attrs
				       (Maybe Office'meta) (Maybe Office'settings)
				       (Maybe Office'script) (Maybe Office'font_decls)
				       (Maybe Office'styles) (Maybe Office'automatic_styles)
				       (Maybe Office'master_styles) Office'body
		     deriving (Eq,Show)
data Office'document_Attrs = Office'document_Attrs
    { office'documentXmlns'office :: (Defaultable String)
    , office'documentXmlns'meta :: (Defaultable String)
    , office'documentXmlns'script :: (Defaultable String)
    , office'documentXmlns'style :: (Defaultable String)
    , office'documentXmlns'text :: (Defaultable String)
    , office'documentXmlns'table :: (Defaultable String)
    , office'documentXmlns'draw :: (Defaultable String)
    , office'documentXmlns'chart :: (Defaultable String)
    , office'documentXmlns'number :: (Defaultable String)
    , office'documentXmlns'fo :: (Defaultable String)
    , office'documentXmlns'xlink :: (Defaultable String)
    , office'documentXmlns'svg :: (Defaultable String)
    , office'documentXmlns'dc :: (Defaultable String)
    , office'documentXmlns'dr3d :: (Defaultable String)
    , office'documentXmlns'math :: (Defaultable String)
    , office'documentXmlns'form :: (Defaultable String)
    , office'documentXmlns'config :: (Defaultable String)
    , office'documentOffice'class :: Office'document_office'class
    , office'documentOffice'version :: (Maybe String)
    } deriving (Eq,Show)
data Office'document_office'class = Office'document_office'class_text
				     |  Office'document_office'class_text_global  | 
				    Office'document_office'class_drawing  | 
				    Office'document_office'class_presentation  | 
				    Office'document_office'class_spreadsheet  | 
				    Office'document_office'class_chart
				  deriving (Eq,Show)
data Office'document_styles = Office'document_styles Office'document_styles_Attrs
						     (Maybe Office'font_decls) (Maybe Office'styles)
						     (Maybe Office'automatic_styles)
						     (Maybe Office'master_styles)
			    deriving (Eq,Show)
data Office'document_styles_Attrs = Office'document_styles_Attrs
    { office'document_stylesXmlns'office :: (Defaultable String)
    , office'document_stylesXmlns'meta :: (Defaultable String)
    , office'document_stylesXmlns'script :: (Defaultable String)
    , office'document_stylesXmlns'style :: (Defaultable String)
    , office'document_stylesXmlns'text :: (Defaultable String)
    , office'document_stylesXmlns'table :: (Defaultable String)
    , office'document_stylesXmlns'draw :: (Defaultable String)
    , office'document_stylesXmlns'chart :: (Defaultable String)
    , office'document_stylesXmlns'number :: (Defaultable String)
    , office'document_stylesXmlns'fo :: (Defaultable String)
    , office'document_stylesXmlns'xlink :: (Defaultable String)
    , office'document_stylesXmlns'svg :: (Defaultable String)
    , office'document_stylesXmlns'dc :: (Defaultable String)
    , office'document_stylesXmlns'dr3d :: (Defaultable String)
    , office'document_stylesXmlns'math :: (Defaultable String)
    , office'document_stylesXmlns'form :: (Defaultable String)
    , office'document_stylesOffice'version :: (Maybe String)
    } deriving (Eq,Show)
data Office'document_content = Office'document_content Office'document_content_Attrs
						       (Maybe Office'script)
						       (Maybe Office'font_decls)
						       (Maybe Office'automatic_styles) Office'body
			     deriving (Eq,Show)
data Office'document_content_Attrs = Office'document_content_Attrs
    { office'document_contentXmlns'office :: (Defaultable String)
    , office'document_contentXmlns'meta :: (Defaultable String)
    , office'document_contentXmlns'script :: (Defaultable String)
    , office'document_contentXmlns'style :: (Defaultable String)
    , office'document_contentXmlns'text :: (Defaultable String)
    , office'document_contentXmlns'table :: (Defaultable String)
    , office'document_contentXmlns'draw :: (Defaultable String)
    , office'document_contentXmlns'chart :: (Defaultable String)
    , office'document_contentXmlns'number :: (Defaultable String)
    , office'document_contentXmlns'fo :: (Defaultable String)
    , office'document_contentXmlns'xlink :: (Defaultable String)
    , office'document_contentXmlns'svg :: (Defaultable String)
    , office'document_contentXmlns'dc :: (Defaultable String)
    , office'document_contentXmlns'dr3d :: (Defaultable String)
    , office'document_contentXmlns'math :: (Defaultable String)
    , office'document_contentXmlns'form :: (Defaultable String)
    , office'document_contentOffice'class :: Office'document_content_office'class
    , office'document_contentOffice'version :: (Maybe String)
    } deriving (Eq,Show)
data Office'document_content_office'class = Office'document_content_office'class_text
					     |  Office'document_content_office'class_text_global  | 
					    Office'document_content_office'class_drawing  | 
					    Office'document_content_office'class_presentation  | 
					    Office'document_content_office'class_spreadsheet  | 
					    Office'document_content_office'class_chart
					  deriving (Eq,Show)
data Office'document_meta = Office'document_meta Office'document_meta_Attrs
						 (Maybe Office'meta)
			  deriving (Eq,Show)
data Office'document_meta_Attrs = Office'document_meta_Attrs
    { office'document_metaXmlns'office :: (Defaultable String)
    , office'document_metaXmlns'meta :: (Defaultable String)
    , office'document_metaXmlns'script :: (Defaultable String)
    , office'document_metaXmlns'style :: (Defaultable String)
    , office'document_metaXmlns'text :: (Defaultable String)
    , office'document_metaXmlns'table :: (Defaultable String)
    , office'document_metaXmlns'draw :: (Defaultable String)
    , office'document_metaXmlns'chart :: (Defaultable String)
    , office'document_metaXmlns'number :: (Defaultable String)
    , office'document_metaXmlns'fo :: (Defaultable String)
    , office'document_metaXmlns'xlink :: (Defaultable String)
    , office'document_metaXmlns'svg :: (Defaultable String)
    , office'document_metaXmlns'dc :: (Defaultable String)
    , office'document_metaXmlns'dr3d :: (Defaultable String)
    , office'document_metaXmlns'math :: (Defaultable String)
    , office'document_metaXmlns'form :: (Defaultable String)
    , office'document_metaOffice'version :: (Maybe String)
    } deriving (Eq,Show)
data Office'document_settings = Office'document_settings Office'document_settings_Attrs
							 Office'settings
			      deriving (Eq,Show)
data Office'document_settings_Attrs = Office'document_settings_Attrs
    { office'document_settingsXmlns'office :: (Defaultable String)
    , office'document_settingsXmlns'xlink :: (Defaultable String)
    , office'document_settingsXmlns'config :: (Defaultable String)
    , office'document_settingsOffice'version :: (Maybe String)
    } deriving (Eq,Show)
data Office'meta = Office'meta (Maybe Meta'generator)
			       (Maybe Dc'title) (Maybe Dc'description) (Maybe Dc'subject)
			       (Maybe Meta'initial_creator) (Maybe Meta'creation_date)
			       (Maybe Dc'creator) (Maybe Dc'date) (Maybe Meta'printed_by)
			       (Maybe Meta'print_date) (Maybe Meta'keywords) (Maybe Dc'language)
			       (Maybe Meta'editing_cycles) (Maybe Meta'editing_duration)
			       (Maybe Meta'hyperlink_behaviour) (Maybe Meta'auto_reload)
			       (Maybe Meta'template) [Meta'user_defined]
			       (Maybe Meta'document_statistic)
		 deriving (Eq,Show)
data Office'script = Office'script [(OneOf2 Script'library_embedded Script'library_linked)]
				   (Maybe Office'events)
		   deriving (Eq,Show)
newtype Office'font_decls = Office'font_decls [Style'font_decl] 		deriving (Eq,Show)
newtype Office'styles = Office'styles [Office'styles_] 		deriving (Eq,Show)
data Office'styles_ = Office'styles_Style'default_style_Style'style_Text'list_style_Number'number_style_Number'currency_style_Number'percentage_style_Number'date_style_Number'time_style_Number'boolean_style_Number'text_style_Draw'gradient_Draw'hatch_Draw'fill_image_Draw'marker_Draw'stroke_dash_Style'presentation_page_layout_Draw'transparency (OneOf17 Style'default_style Style'style Text'list_style Number'number_style Number'currency_style Number'percentage_style Number'date_style Number'time_style Number'boolean_style Number'text_style Draw'gradient Draw'hatch Draw'fill_image Draw'marker Draw'stroke_dash Style'presentation_page_layout Draw'transparency)
		    | Office'styles_Text'outline_style Text'outline_style
		    | Office'styles_Text'footnotes_configuration Text'footnotes_configuration
		    | Office'styles_Text'endnotes_configuration Text'endnotes_configuration
		    | Office'styles_Text'bibliography_configuration Text'bibliography_configuration
		    | Office'styles_Text'linenumbering_configuration Text'linenumbering_configuration
		    deriving (Eq,Show)
newtype Office'automatic_styles = Office'automatic_styles [Office'automatic_styles_] 		deriving (Eq,Show)
data Office'automatic_styles_ = Office'automatic_styles_Style'default_style_Style'style_Text'list_style_Number'number_style_Number'currency_style_Number'percentage_style_Number'date_style_Number'time_style_Number'boolean_style_Number'text_style_Draw'gradient_Draw'hatch_Draw'fill_image_Draw'marker_Draw'stroke_dash_Style'presentation_page_layout_Draw'transparency (OneOf17 Style'default_style Style'style Text'list_style Number'number_style Number'currency_style Number'percentage_style Number'date_style Number'time_style Number'boolean_style Number'text_style Draw'gradient Draw'hatch Draw'fill_image Draw'marker Draw'stroke_dash Style'presentation_page_layout Draw'transparency)
			      | Office'automatic_styles_Style'page_master Style'page_master
			      deriving (Eq,Show)
data Office'master_styles = Office'master_styles (Maybe Draw'layer_set)
						 (Maybe Style'handout_master) [Style'master_page]
			  deriving (Eq,Show)
data Office'body = Office'body Office'body_Attrs
			       (Maybe Office'forms)
			       (Maybe (OneOf2 Text'tracked_changes Table'tracked_changes))
			       (Maybe Text'variable_decls) (Maybe Text'sequence_decls)
			       (Maybe Text'user_field_decls) (Maybe Text'dde_connection_decls)
			       (Maybe Text'alphabetical_index_auto_mark_file)
			       (Maybe Table'calculation_settings)
			       (Maybe Table'content_validations) (Maybe Table'label_ranges)
			       [(OneOf40 Text'h Text'p Text'ordered_list Text'unordered_list Table'table Draw'page Draw'a Draw'rect Draw'line Draw'polyline Draw'polygon Draw'path Draw'circle Draw'ellipse Draw'g Draw'page_thumbnail Draw'text_box Draw'image Draw'object Draw'object_ole Draw'applet Draw'floating_frame Draw'plugin Draw'measure Draw'caption Draw'connector Chart'chart Dr3d'scene Draw'control Text'section Text'table_of_content Text'illustration_index Text'table_index Text'object_index Text'user_index Text'alphabetical_index Text'bibliography Text'change Text'change_start Text'change_end)]
			       (Maybe Table'named_expressions) (Maybe Table'database_ranges)
			       (Maybe Table'data_pilot_tables) (Maybe Table'consolidation)
			       (Maybe Table'dde_links) (Maybe Presentation'settings)
		 deriving (Eq,Show)
data Office'body_Attrs = Office'body_Attrs
    { office'bodyTable'structure_protected :: (Defaultable String)
    , office'bodyTable'protection_key :: (Maybe String)
    } deriving (Eq,Show)
newtype Office'events = Office'events [Office'events_] 		deriving (Eq,Show)
data Office'events_ = Office'events_Script'event Script'event
		    | Office'events_Presentation'event Presentation'event
		    deriving (Eq,Show)
data Office'dde_source = Office'dde_source
    { office'dde_sourceOffice'dde_application :: (Maybe String)
    , office'dde_sourceOffice'dde_topic :: (Maybe String)
    , office'dde_sourceOffice'dde_item :: (Maybe String)
    , office'dde_sourceOffice'automatic_update :: (Defaultable String)
    , office'dde_sourceOffice'name :: (Maybe String)
    , office'dde_sourceTable'conversion_mode :: (Defaultable Office'dde_source_table'conversion_mode)
    } deriving (Eq,Show)
data Office'dde_source_table'conversion_mode = Office'dde_source_table'conversion_mode_into_default_style_data_style
					        | 
					       Office'dde_source_table'conversion_mode_into_english_number
					        |  Office'dde_source_table'conversion_mode_let_text
					     deriving (Eq,Show)
data Office'annotation = Office'annotation Office'annotation_Attrs
					   [Text'p]
		       deriving (Eq,Show)
data Office'annotation_Attrs = Office'annotation_Attrs
    { office'annotationOffice'author :: (Maybe String)
    , office'annotationOffice'create_date :: (Maybe String)
    , office'annotationOffice'create_date_string :: (Maybe String)
    , office'annotationOffice'display :: (Defaultable String)
    } deriving (Eq,Show)
data Office'change_info = Office'change_info Office'change_info_Attrs
					     [Text'p]
			deriving (Eq,Show)
data Office'change_info_Attrs = Office'change_info_Attrs
    { office'change_infoOffice'chg_author :: String
    , office'change_infoOffice'chg_date_time :: String
    } deriving (Eq,Show)
newtype Office'binary_data = Office'binary_data String 		deriving (Eq,Show)
data Style'font_decl = Style'font_decl
    { style'font_declStyle'name :: String
    , style'font_declFo'font_family :: String
    , style'font_declStyle'font_style_name :: (Maybe String)
    , style'font_declStyle'font_family_generic :: (Maybe Style'font_decl_style'font_family_generic)
    , style'font_declStyle'font_pitch :: (Maybe Style'font_decl_style'font_pitch)
    , style'font_declStyle'font_charset :: (Maybe String)
    } deriving (Eq,Show)
data Style'font_decl_style'font_family_generic = Style'font_decl_style'font_family_generic_roman
						  |  Style'font_decl_style'font_family_generic_swiss
						  | 
						 Style'font_decl_style'font_family_generic_modern
						  | 
						 Style'font_decl_style'font_family_generic_decorative
						  | 
						 Style'font_decl_style'font_family_generic_script
						  | 
						 Style'font_decl_style'font_family_generic_system
					       deriving (Eq,Show)
data Style'font_decl_style'font_pitch = Style'font_decl_style'font_pitch_fixed
					 |  Style'font_decl_style'font_pitch_variable
				      deriving (Eq,Show)
data Style'style = Style'style Style'style_Attrs
			       (Maybe Style'properties) (Maybe Office'events) [Style'map]
		 deriving (Eq,Show)
data Style'style_Attrs = Style'style_Attrs
    { style'styleStyle'name :: String
    , style'styleStyle'family :: Style'style_style'family
    , style'styleStyle'parent_style_name :: (Maybe String)
    , style'styleStyle'master_page_name :: (Maybe String)
    , style'styleStyle'next_style_name :: (Maybe String)
    , style'styleStyle'list_style_name :: (Maybe String)
    , style'styleStyle'data_style_name :: (Maybe String)
    , style'styleStyle'auto_update :: (Defaultable String)
    , style'styleStyle'class :: (Maybe String)
    } deriving (Eq,Show)
data Style'style_style'family = Style'style_style'family_paragraph
				 |  Style'style_style'family_text  | 
				Style'style_style'family_section  |  Style'style_style'family_table
				 |  Style'style_style'family_table_column  | 
				Style'style_style'family_table_row  | 
				Style'style_style'family_table_cell  | 
				Style'style_style'family_table_page  | 
				Style'style_style'family_chart  | 
				Style'style_style'family_graphics  | 
				Style'style_style'family_default  | 
				Style'style_style'family_drawing_page  | 
				Style'style_style'family_presentation  | 
				Style'style_style'family_control  |  Style'style_style'family_ruby
			      deriving (Eq,Show)
data Style'default_style = Style'default_style Style'default_style_Attrs
					       (Maybe Style'properties)
			 deriving (Eq,Show)
data Style'default_style_Attrs = Style'default_style_Attrs
    { style'default_styleStyle'family :: Style'default_style_style'family
    } deriving (Eq,Show)
data Style'default_style_style'family = Style'default_style_style'family_paragraph
					 |  Style'default_style_style'family_text  | 
					Style'default_style_style'family_section  | 
					Style'default_style_style'family_table  | 
					Style'default_style_style'family_table_column  | 
					Style'default_style_style'family_table_row  | 
					Style'default_style_style'family_table_cell  | 
					Style'default_style_style'family_table_page  | 
					Style'default_style_style'family_chart  | 
					Style'default_style_style'family_graphics  | 
					Style'default_style_style'family_default  | 
					Style'default_style_style'family_drawing_page  | 
					Style'default_style_style'family_presentation  | 
					Style'default_style_style'family_control  | 
					Style'default_style_style'family_ruby
				      deriving (Eq,Show)
data Style'map = Style'map
    { style'mapStyle'condition :: String
    , style'mapStyle'apply_style_name :: String
    , style'mapStyle'base_cell_address :: (Maybe String)
    } deriving (Eq,Show)
data Style'properties = Style'properties Style'properties_Attrs
					 ANYContent
		      deriving (Eq,Show)
data Style'properties_Attrs = Style'properties_Attrs
    { style'propertiesStyle'num_prefix :: (Maybe String)
    , style'propertiesStyle'num_suffix :: (Maybe String)
    , style'propertiesStyle'num_format :: (Maybe String)
    , style'propertiesStyle'num_letter_sync :: (Maybe String)
    , style'propertiesFo'width :: (Maybe String)
    , style'propertiesFo'height :: (Maybe String)
    , style'propertiesStyle'vertical_pos :: (Maybe Style'properties_style'vertical_pos)
    , style'propertiesStyle'vertical_rel :: (Maybe Style'properties_style'vertical_rel)
    , style'propertiesStyle'horizontal_pos :: (Maybe Style'properties_style'horizontal_pos)
    , style'propertiesStyle'horizontal_rel :: (Maybe Style'properties_style'horizontal_rel)
    , style'propertiesSvg'width :: (Maybe String)
    , style'propertiesSvg'height :: (Maybe String)
    , style'propertiesFo'min_height :: (Maybe String)
    , style'propertiesFo'min_width :: (Maybe String)
    , style'propertiesFo'max_height :: (Maybe String)
    , style'propertiesFo'max_width :: (Maybe String)
    , style'propertiesText'anchor_type :: (Maybe Style'properties_text'anchor_type)
    , style'propertiesText'anchor_page_number :: (Maybe String)
    , style'propertiesSvg'x :: (Maybe String)
    , style'propertiesSvg'y :: (Maybe String)
    , style'propertiesStyle'print_content :: (Maybe String)
    , style'propertiesStyle'protect :: (Maybe String)
    , style'propertiesStyle'wrap :: (Maybe Style'properties_style'wrap)
    , style'propertiesStyle'number_wrapped_paragraphs :: (Maybe String)
    , style'propertiesStyle'wrap_contour :: (Maybe String)
    , style'propertiesStyle'wrap_contour_mode :: (Maybe Style'properties_style'wrap_contour_mode)
    , style'propertiesStyle'run_through :: (Maybe Style'properties_style'run_through)
    , style'propertiesStyle'editable :: (Maybe String)
    , style'propertiesStyle'mirror :: (Maybe String)
    , style'propertiesFo'clip :: (Maybe String)
    , style'propertiesText'animation :: (Maybe Style'properties_text'animation)
    , style'propertiesText'animation_direction :: (Maybe Style'properties_text'animation_direction)
    , style'propertiesText'animation_start_inside :: (Maybe String)
    , style'propertiesText'animation_stop_inside :: (Maybe String)
    , style'propertiesText'animation_repeat :: (Maybe String)
    , style'propertiesText'animation_delay :: (Maybe String)
    , style'propertiesText'animation_steps :: (Maybe String)
    , style'propertiesFo'font_variant :: (Maybe Style'properties_fo'font_variant)
    , style'propertiesFo'text_transform :: (Maybe Style'properties_fo'text_transform)
    , style'propertiesFo'color :: (Maybe String)
    , style'propertiesStyle'use_window_font_color :: (Maybe String)
    , style'propertiesStyle'text_outline :: (Maybe String)
    , style'propertiesStyle'text_crossing_out :: (Maybe Style'properties_style'text_crossing_out)
    , style'propertiesStyle'text_position :: (Maybe String)
    , style'propertiesStyle'text_align :: (Maybe Style'properties_style'text_align)
    , style'propertiesStyle'font_name :: (Maybe String)
    , style'propertiesFo'font_family :: (Maybe String)
    , style'propertiesStyle'font_family_generic :: (Maybe Style'properties_style'font_family_generic)
    , style'propertiesStyle'font_style_name :: (Maybe String)
    , style'propertiesStyle'font_pitch :: (Maybe Style'properties_style'font_pitch)
    , style'propertiesStyle'font_charset :: (Maybe String)
    , style'propertiesStyle'font_name_asian :: (Maybe String)
    , style'propertiesStyle'font_family_asian :: (Maybe String)
    , style'propertiesStyle'font_family_generic_asian :: (Maybe Style'properties_style'font_family_generic_asian)
    , style'propertiesStyle'font_style_name_asian :: (Maybe String)
    , style'propertiesStyle'font_pitch_asian :: (Maybe Style'properties_style'font_pitch_asian)
    , style'propertiesStyle'font_charset_asian :: (Maybe String)
    , style'propertiesStyle'font_name_complex :: (Maybe String)
    , style'propertiesStyle'font_family_complex :: (Maybe String)
    , style'propertiesStyle'font_family_generic_complex :: (Maybe Style'properties_style'font_family_generic_complex)
    , style'propertiesStyle'font_style_name_complex :: (Maybe String)
    , style'propertiesStyle'font_pitch_complex :: (Maybe Style'properties_style'font_pitch_complex)
    , style'propertiesStyle'font_charset_complex :: (Maybe String)
    , style'propertiesFo'font_size :: (Maybe String)
    , style'propertiesStyle'font_size_rel :: (Maybe String)
    , style'propertiesStyle'font_size_asian :: (Maybe String)
    , style'propertiesStyle'font_size_rel_asian :: (Maybe String)
    , style'propertiesStyle'font_size_complex :: (Maybe String)
    , style'propertiesStyle'font_size_rel_complex :: (Maybe String)
    , style'propertiesFo'letter_spacing :: (Maybe String)
    , style'propertiesFo'language :: (Maybe String)
    , style'propertiesStyle'language_asian :: (Maybe String)
    , style'propertiesStyle'language_complex :: (Maybe String)
    , style'propertiesFo'country :: (Maybe String)
    , style'propertiesStyle'country_asian :: (Maybe String)
    , style'propertiesStyle'country_complex :: (Maybe String)
    , style'propertiesFo'font_style :: (Maybe Style'properties_fo'font_style)
    , style'propertiesStyle'font_style_asian :: (Maybe Style'properties_style'font_style_asian)
    , style'propertiesStyle'font_style_complex :: (Maybe Style'properties_style'font_style_complex)
    , style'propertiesStyle'font_relief :: (Maybe Style'properties_style'font_relief)
    , style'propertiesFo'text_shadow :: (Maybe String)
    , style'propertiesStyle'text_underline :: (Maybe Style'properties_style'text_underline)
    , style'propertiesStyle'text_autospace :: (Maybe Style'properties_style'text_autospace)
    , style'propertiesStyle'punctuation_wrap :: (Maybe Style'properties_style'punctuation_wrap)
    , style'propertiesStyle'line_break :: (Maybe Style'properties_style'line_break)
    , style'propertiesStyle'text_underline_color :: (Maybe String)
    , style'propertiesFo'font_weight :: (Maybe String)
    , style'propertiesStyle'font_weight_asian :: (Maybe String)
    , style'propertiesStyle'font_weight_complex :: (Maybe String)
    , style'propertiesFo'score_spaces :: (Maybe String)
    , style'propertiesStyle'letter_kerning :: (Maybe String)
    , style'propertiesStyle'text_blinking :: (Maybe String)
    , style'propertiesStyle'text_background_color :: (Maybe String)
    , style'propertiesStyle'text_combine :: (Maybe Style'properties_style'text_combine)
    , style'propertiesStyle'text_combine_start_char :: (Maybe String)
    , style'propertiesStyle'text_combine_end_char :: (Maybe String)
    , style'propertiesStyle'text_emphasize :: (Maybe String)
    , style'propertiesStyle'text_scale :: (Maybe String)
    , style'propertiesStyle'text_rotation_angle :: (Maybe String)
    , style'propertiesStyle'text_rotation_scale :: (Maybe Style'properties_style'text_rotation_scale)
    , style'propertiesFo'line_height :: (Maybe String)
    , style'propertiesStyle'line_height_at_least :: (Maybe String)
    , style'propertiesStyle'line_spacing :: (Maybe String)
    , style'propertiesFo'text_align :: (Maybe Style'properties_fo'text_align)
    , style'propertiesFo'text_align_last :: (Maybe Style'properties_fo'text_align_last)
    , style'propertiesStyle'text_align_source :: (Maybe Style'properties_style'text_align_source)
    , style'propertiesStyle'justify_single_word :: (Maybe String)
    , style'propertiesStyle'break_inside :: (Maybe Style'properties_style'break_inside)
    , style'propertiesFo'widows :: (Maybe String)
    , style'propertiesFo'orphans :: (Maybe String)
    , style'propertiesFo'hyphenate :: (Maybe String)
    , style'propertiesFo'hyphenate_keep :: (Maybe Style'properties_fo'hyphenate_keep)
    , style'propertiesFo'hyphenation_remain_char_count :: (Maybe String)
    , style'propertiesFo'hyphenation_push_char_count :: (Maybe String)
    , style'propertiesFo'hyphenation_ladder_count :: (Maybe String)
    , style'propertiesStyle'page_number :: (Maybe String)
    , style'propertiesStyle'register_true :: (Maybe String)
    , style'propertiesStyle'register_truth_ref_style_name :: (Maybe String)
    , style'propertiesFo'margin_left :: (Maybe String)
    , style'propertiesFo'margin_right :: (Maybe String)
    , style'propertiesFo'text_indent :: (Maybe String)
    , style'propertiesStyle'auto_text_indent :: (Maybe String)
    , style'propertiesFo'margin_top :: (Maybe String)
    , style'propertiesFo'margin_bottom :: (Maybe String)
    , style'propertiesFo'break_before :: (Maybe Style'properties_fo'break_before)
    , style'propertiesFo'break_after :: (Maybe Style'properties_fo'break_after)
    , style'propertiesFo'background_color :: (Maybe String)
    , style'propertiesStyle'background_transparency :: (Maybe String)
    , style'propertiesStyle'dynamic_spacing :: (Maybe String)
    , style'propertiesFo'border :: (Maybe String)
    , style'propertiesFo'border_top :: (Maybe String)
    , style'propertiesFo'border_bottom :: (Maybe String)
    , style'propertiesFo'border_left :: (Maybe String)
    , style'propertiesFo'border_right :: (Maybe String)
    , style'propertiesStyle'border_line_width :: (Maybe String)
    , style'propertiesStyle'border_line_width_top :: (Maybe String)
    , style'propertiesStyle'border_line_width_bottom :: (Maybe String)
    , style'propertiesStyle'border_line_width_left :: (Maybe String)
    , style'propertiesStyle'border_line_width_right :: (Maybe String)
    , style'propertiesFo'padding :: (Maybe String)
    , style'propertiesFo'padding_top :: (Maybe String)
    , style'propertiesFo'padding_bottom :: (Maybe String)
    , style'propertiesFo'padding_left :: (Maybe String)
    , style'propertiesFo'padding_right :: (Maybe String)
    , style'propertiesStyle'shadow :: (Maybe String)
    , style'propertiesFo'keep_with_next :: (Maybe String)
    , style'propertiesText'number_lines :: (Defaultable String)
    , style'propertiesText'line_number :: (Maybe String)
    , style'propertiesStyle'decimal_places :: (Maybe String)
    , style'propertiesStyle'tab_stop_distance :: (Maybe String)
    , style'propertiesText'dont_balance_text_columns :: (Maybe String)
    , style'propertiesStyle'ruby_align :: (Maybe Style'properties_style'ruby_align)
    , style'propertiesStyle'ruby_position :: (Maybe Style'properties_style'ruby_position)
    , style'propertiesStyle'width :: (Maybe String)
    , style'propertiesStyle'rel_width :: (Maybe String)
    , style'propertiesStyle'may_break_between_rows :: (Maybe String)
    , style'propertiesTable'page_style_name :: (Maybe String)
    , style'propertiesTable'display :: (Maybe String)
    , style'propertiesStyle'column_width :: (Maybe String)
    , style'propertiesStyle'rel_column_width :: (Maybe String)
    , style'propertiesStyle'use_optimal_column_width :: (Maybe String)
    , style'propertiesStyle'row_height :: (Maybe String)
    , style'propertiesStyle'min_row_height :: (Maybe String)
    , style'propertiesStyle'use_optimal_row_height :: (Maybe String)
    , style'propertiesTable'align :: (Maybe Style'properties_table'align)
    , style'propertiesTable'border_model :: (Maybe Style'properties_table'border_model)
    , style'propertiesFo'vertical_align :: (Maybe Style'properties_fo'vertical_align)
    , style'propertiesFo'direction :: (Maybe Style'properties_fo'direction)
    , style'propertiesStyle'glyph_orientation_vertical :: (Maybe Style'properties_style'glyph_orientation_vertical)
    , style'propertiesStyle'rotation_angle :: (Maybe String)
    , style'propertiesStyle'rotation_align :: (Maybe Style'properties_style'rotation_align)
    , style'propertiesStyle'cell_protect :: (Maybe String)
    , style'propertiesFo'wrap_option :: (Maybe Style'properties_fo'wrap_option)
    , style'propertiesFo'page_width :: (Maybe String)
    , style'propertiesFo'page_height :: (Maybe String)
    , style'propertiesStyle'paper_tray_name :: (Maybe String)
    , style'propertiesStyle'print_orientation :: (Maybe Style'properties_style'print_orientation)
    , style'propertiesStyle'print :: (Maybe String)
    , style'propertiesStyle'print_page_order :: (Maybe Style'properties_style'print_page_order)
    , style'propertiesStyle'first_page_number :: (Maybe String)
    , style'propertiesStyle'scale_to :: (Maybe String)
    , style'propertiesStyle'scale_to_pages :: (Maybe String)
    , style'propertiesStyle'table_centering :: (Maybe Style'properties_style'table_centering)
    , style'propertiesStyle'footnote_max_height :: (Maybe String)
    , style'propertiesStyle'vertical_align :: (Maybe Style'properties_style'vertical_align)
    , style'propertiesStyle'writing_mode :: (Defaultable Style'properties_style'writing_mode)
    , style'propertiesStyle'layout_grid_mode :: (Maybe Style'properties_style'layout_grid_mode)
    , style'propertiesStyle'layout_grid_base_height :: (Maybe String)
    , style'propertiesStyle'layout_grid_ruby_height :: (Maybe String)
    , style'propertiesStyle'layout_grid_lines :: (Maybe String)
    , style'propertiesStyle'layout_grid_color :: (Maybe String)
    , style'propertiesStyle'layout_grid_ruby_below :: (Maybe String)
    , style'propertiesStyle'layout_grid_print :: (Maybe String)
    , style'propertiesStyle'layout_grid_display :: (Maybe String)
    , style'propertiesStyle'snap_to_layout_grid :: (Maybe String)
    , style'propertiesDraw'stroke :: (Maybe Style'properties_draw'stroke)
    , style'propertiesDraw'stroke_dash :: (Maybe String)
    , style'propertiesSvg'stroke_width :: (Maybe String)
    , style'propertiesSvg'stroke_color :: (Maybe String)
    , style'propertiesDraw'marker_start :: (Maybe String)
    , style'propertiesDraw'marker_end :: (Maybe String)
    , style'propertiesDraw'marker_start_width :: (Maybe String)
    , style'propertiesDraw'marker_end_width :: (Maybe String)
    , style'propertiesDraw'marker_start_center :: (Maybe String)
    , style'propertiesDraw'marker_end_center :: (Maybe String)
    , style'propertiesSvg'stroke_opacity :: (Maybe String)
    , style'propertiesSvg'stroke_linejoin :: (Maybe Style'properties_svg'stroke_linejoin)
    , style'propertiesDraw'auto_grow_width :: (Maybe String)
    , style'propertiesDraw'auto_grow_height :: (Maybe String)
    , style'propertiesDraw'fit_to_size :: (Maybe String)
    , style'propertiesDraw'fit_to_contour :: (Maybe String)
    , style'propertiesDraw'textarea_horizontal_align :: (Maybe Style'properties_draw'textarea_horizontal_align)
    , style'propertiesDraw'textarea_vertical_align :: (Maybe Style'properties_draw'textarea_vertical_align)
    , style'propertiesDraw'writing_mode :: (Defaultable Style'properties_draw'writing_mode)
    , style'propertiesDraw'fill :: (Maybe Style'properties_draw'fill)
    , style'propertiesDraw'fill_color :: (Maybe String)
    , style'propertiesDraw'fill_gradient_name :: (Maybe String)
    , style'propertiesDraw'gradient_step_count :: (Maybe String)
    , style'propertiesDraw'fill_hatch_name :: (Maybe String)
    , style'propertiesDraw'fill_hatch_solid :: (Maybe String)
    , style'propertiesDraw'fill_image_name :: (Maybe String)
    , style'propertiesStyle'repeat :: (Maybe Style'properties_style'repeat)
    , style'propertiesDraw'fill_image_width :: (Maybe String)
    , style'propertiesDraw'fill_image_height :: (Maybe String)
    , style'propertiesDraw'fill_image_ref_point_x :: (Maybe String)
    , style'propertiesDraw'fill_image_ref_point_y :: (Maybe String)
    , style'propertiesDraw'fill_image_ref_point :: (Maybe Style'properties_draw'fill_image_ref_point)
    , style'propertiesDraw'tile_repeat_offset :: (Maybe String)
    , style'propertiesDraw'transparency :: (Maybe String)
    , style'propertiesDraw'transparency_name :: (Maybe String)
    , style'propertiesDraw'color_mode :: (Maybe Style'properties_draw'color_mode)
    , style'propertiesDraw'luminance :: (Maybe String)
    , style'propertiesDraw'contrast :: (Maybe String)
    , style'propertiesDraw'gamma :: (Maybe String)
    , style'propertiesDraw'red :: (Maybe String)
    , style'propertiesDraw'green :: (Maybe String)
    , style'propertiesDraw'blue :: (Maybe String)
    , style'propertiesDraw'color_inversion :: (Maybe String)
    , style'propertiesDraw'mirror :: (Maybe String)
    , style'propertiesDraw'shadow :: (Maybe Style'properties_draw'shadow)
    , style'propertiesDraw'shadow_offset_x :: (Maybe String)
    , style'propertiesDraw'shadow_offset_y :: (Maybe String)
    , style'propertiesDraw'shadow_color :: (Maybe String)
    , style'propertiesDraw'shadow_transparency :: (Maybe String)
    , style'propertiesDraw'start_line_spacing_horizontal :: (Maybe String)
    , style'propertiesDraw'start_line_spacing_vertical :: (Maybe String)
    , style'propertiesDraw'end_line_spacing_horizontal :: (Maybe String)
    , style'propertiesDraw'end_line_spacing_vertical :: (Maybe String)
    , style'propertiesDraw'line_distance :: (Maybe String)
    , style'propertiesDraw'guide_overhang :: (Maybe String)
    , style'propertiesDraw'guide_distance :: (Maybe String)
    , style'propertiesDraw'start_guide :: (Maybe String)
    , style'propertiesDraw'end_guide :: (Maybe String)
    , style'propertiesDraw'measure_align :: (Maybe Style'properties_draw'measure_align)
    , style'propertiesDraw'measure_vertical_align :: (Maybe Style'properties_draw'measure_vertical_align)
    , style'propertiesDraw'unit :: (Maybe Style'properties_draw'unit)
    , style'propertiesDraw'show_unit :: (Maybe String)
    , style'propertiesDraw'placing :: (Maybe Style'properties_draw'placing)
    , style'propertiesDraw'parallel :: (Maybe String)
    , style'propertiesDraw'decimal_places :: (Maybe String)
    , style'propertiesDraw'frame_display_scrollbar :: (Maybe String)
    , style'propertiesDraw'frame_display_border :: (Maybe String)
    , style'propertiesDraw'frame_margin_horizontal :: (Maybe String)
    , style'propertiesDraw'frame_margin_vertical :: (Maybe String)
    , style'propertiesDraw'size_protect :: (Maybe String)
    , style'propertiesDraw'move_protect :: (Maybe String)
    , style'propertiesDraw'visible_area_left :: (Maybe String)
    , style'propertiesDraw'visible_area_top :: (Maybe String)
    , style'propertiesDraw'visible_area_width :: (Maybe String)
    , style'propertiesDraw'visible_area_height :: (Maybe String)
    , style'propertiesDraw'fontwork_style :: (Maybe Style'properties_draw'fontwork_style)
    , style'propertiesDraw'fontwork_adjust :: (Maybe Style'properties_draw'fontwork_adjust)
    , style'propertiesDraw'fontwork_distance :: (Maybe String)
    , style'propertiesDraw'fontwork_start :: (Maybe String)
    , style'propertiesDraw'fontwork_mirror :: (Maybe String)
    , style'propertiesDraw'fontwork_outline :: (Maybe String)
    , style'propertiesDraw'fontwork_shadow :: (Maybe Style'properties_draw'fontwork_shadow)
    , style'propertiesDraw'fontwork_shadow_color :: (Maybe String)
    , style'propertiesDraw'fontwork_shadow_offset_x :: (Maybe String)
    , style'propertiesDraw'fontwork_shadow_offset_y :: (Maybe String)
    , style'propertiesDraw'fontwork_form :: (Maybe Style'properties_draw'fontwork_form)
    , style'propertiesDraw'fontwork_hide_form :: (Maybe String)
    , style'propertiesDraw'fontwork_shadow_transparence :: (Maybe String)
    , style'propertiesDraw'caption_type :: (Maybe Style'properties_draw'caption_type)
    , style'propertiesDraw'caption_angle_type :: (Maybe Style'properties_draw'caption_angle_type)
    , style'propertiesDraw'caption_angle :: (Maybe String)
    , style'propertiesDraw'caption_gap :: (Maybe String)
    , style'propertiesDraw'caption_escape_direction :: (Maybe Style'properties_draw'caption_escape_direction)
    , style'propertiesDraw'caption_escape :: (Maybe String)
    , style'propertiesDraw'caption_line_length :: (Maybe String)
    , style'propertiesDraw'caption_fit_line_length :: (Maybe String)
    , style'propertiesPresentation'transition_type :: (Maybe Style'properties_presentation'transition_type)
    , style'propertiesPresentation'transition_style :: (Maybe Style'properties_presentation'transition_style)
    , style'propertiesPresentation'transition_speed :: (Maybe Style'properties_presentation'transition_speed)
    , style'propertiesPresentation'duration :: (Maybe String)
    , style'propertiesPresentation'visibility :: (Maybe Style'properties_presentation'visibility)
    , style'propertiesDraw'background_size :: (Maybe Style'properties_draw'background_size)
    , style'propertiesPresentation'background_objects_visible :: (Maybe String)
    , style'propertiesPresentation'background_visible :: (Maybe String)
    , style'propertiesDr3d'horizontal_segments :: (Maybe String)
    , style'propertiesDr3d'vertical_segments :: (Maybe String)
    , style'propertiesDr3d'edge_rounding :: (Maybe String)
    , style'propertiesDr3d'edge_rounding_mode :: (Maybe Style'properties_dr3d'edge_rounding_mode)
    , style'propertiesDr3d'back_scale :: (Maybe String)
    , style'propertiesDr3d'end_angle :: (Maybe String)
    , style'propertiesDr3d'depth :: (Maybe String)
    , style'propertiesDr3d'backface_culling :: (Maybe Style'properties_dr3d'backface_culling)
    , style'propertiesDr3d'lighting_mode :: (Maybe Style'properties_dr3d'lighting_mode)
    , style'propertiesDr3d'normals_kind :: (Maybe Style'properties_dr3d'normals_kind)
    , style'propertiesDr3d'normals_direction :: (Maybe Style'properties_dr3d'normals_direction)
    , style'propertiesDr3d'texture_generation_mode_x :: (Maybe Style'properties_dr3d'texture_generation_mode_x)
    , style'propertiesDr3d'texture_generation_mode_y :: (Maybe Style'properties_dr3d'texture_generation_mode_y)
    , style'propertiesDr3d'texture_kind :: (Maybe Style'properties_dr3d'texture_kind)
    , style'propertiesDr3d'texture_filter :: (Maybe Style'properties_dr3d'texture_filter)
    , style'propertiesDr3d'texture_mode :: (Maybe Style'properties_dr3d'texture_mode)
    , style'propertiesDr3d'ambient_color :: (Maybe String)
    , style'propertiesDr3d'emissive_color :: (Maybe String)
    , style'propertiesDr3d'specular_color :: (Maybe String)
    , style'propertiesDr3d'diffuse_color :: (Maybe String)
    , style'propertiesDr3d'shininess :: (Maybe String)
    , style'propertiesDr3d'shadow :: (Maybe Style'properties_dr3d'shadow)
    , style'propertiesDr3d'close_front :: (Maybe String)
    , style'propertiesDr3d'close_back :: (Maybe String)
    , style'propertiesText'space_before :: (Maybe String)
    , style'propertiesText'min_label_width :: (Maybe String)
    , style'propertiesText'min_label_distance :: (Maybe String)
    , style'propertiesText'enable_numbering :: (Maybe String)
    , style'propertiesStyle'list_style_name :: (Maybe String)
    , style'propertiesChart'scale_text :: (Defaultable String)
    , style'propertiesChart'stock_updown_bars :: (Defaultable String)
    , style'propertiesChart'stock_with_volume :: (Defaultable String)
    , style'propertiesChart'three_dimensional :: (Defaultable String)
    , style'propertiesChart'deep :: (Defaultable String)
    , style'propertiesChart'lines :: (Defaultable String)
    , style'propertiesChart'percentage :: (Defaultable String)
    , style'propertiesChart'solid_type :: (Defaultable Style'properties_chart'solid_type)
    , style'propertiesChart'splines :: (Defaultable String)
    , style'propertiesChart'stacked :: (Defaultable String)
    , style'propertiesChart'symbol :: (Defaultable String)
    , style'propertiesChart'vertical :: (Defaultable String)
    , style'propertiesChart'lines_used :: (Defaultable String)
    , style'propertiesChart'connect_bars :: (Defaultable String)
    , style'propertiesChart'spline_order :: (Defaultable String)
    , style'propertiesChart'spline_resolution :: (Defaultable String)
    , style'propertiesChart'pie_offset :: (Defaultable String)
    , style'propertiesChart'series_source :: (Defaultable Style'properties_chart'series_source)
    , style'propertiesChart'tick_marks_major_inner :: (Defaultable String)
    , style'propertiesChart'tick_marks_major_outer :: (Defaultable String)
    , style'propertiesChart'tick_marks_minor_inner :: (Defaultable String)
    , style'propertiesChart'tick_marks_minor_outer :: (Defaultable String)
    , style'propertiesChart'logarithmic :: (Defaultable String)
    , style'propertiesChart'maximum :: (Maybe String)
    , style'propertiesChart'minimum :: (Maybe String)
    , style'propertiesChart'origin :: (Maybe String)
    , style'propertiesChart'interval_major :: (Maybe String)
    , style'propertiesChart'interval_minor :: (Maybe String)
    , style'propertiesChart'gap_width :: (Maybe String)
    , style'propertiesChart'overlap :: (Maybe String)
    , style'propertiesText'line_break :: (Defaultable String)
    , style'propertiesChart'display_label :: (Defaultable String)
    , style'propertiesChart'label_arrangement :: (Defaultable Style'properties_chart'label_arrangement)
    , style'propertiesChart'text_overlap :: (Defaultable String)
    , style'propertiesChart'visible :: (Defaultable String)
    , style'propertiesChart'link_data_style_to_source :: (Defaultable String)
    , style'propertiesChart'mean_value :: (Maybe String)
    , style'propertiesChart'error_category :: (Defaultable Style'properties_chart'error_category)
    , style'propertiesChart'error_percentage :: (Maybe String)
    , style'propertiesChart'error_margin :: (Maybe String)
    , style'propertiesChart'error_lower_limit :: (Maybe String)
    , style'propertiesChart'error_upper_limit :: (Maybe String)
    , style'propertiesChart'error_upper_indicator :: (Maybe String)
    , style'propertiesChart'error_lower_indicator :: (Maybe String)
    , style'propertiesChart'regression_type :: (Defaultable Style'properties_chart'regression_type)
    , style'propertiesChart'data_label_number :: (Defaultable Style'properties_chart'data_label_number)
    , style'propertiesChart'data_label_text :: (Defaultable String)
    , style'propertiesChart'data_label_symbol :: (Defaultable String)
    , style'propertiesText'rotation_angle :: (Defaultable String)
    , style'propertiesChart'symbol_width :: (Maybe String)
    , style'propertiesChart'symbol_height :: (Maybe String)
    , style'propertiesChart'symbol_image_name :: (Maybe String)
    } deriving (Eq,Show)
data Style'properties_style'vertical_pos = Style'properties_style'vertical_pos_top
					    |  Style'properties_style'vertical_pos_middle  | 
					   Style'properties_style'vertical_pos_bottom  | 
					   Style'properties_style'vertical_pos_from_top  | 
					   Style'properties_style'vertical_pos_below
					 deriving (Eq,Show)
data Style'properties_style'vertical_rel = Style'properties_style'vertical_rel_page
					    |  Style'properties_style'vertical_rel_page_content  | 
					   Style'properties_style'vertical_rel_frame  | 
					   Style'properties_style'vertical_rel_frame_content  | 
					   Style'properties_style'vertical_rel_paragraph  | 
					   Style'properties_style'vertical_rel_paragraph_content  | 
					   Style'properties_style'vertical_rel_char  | 
					   Style'properties_style'vertical_rel_line  | 
					   Style'properties_style'vertical_rel_baseline  | 
					   Style'properties_style'vertical_rel_text
					 deriving (Eq,Show)
data Style'properties_style'horizontal_pos = Style'properties_style'horizontal_pos_left
					      |  Style'properties_style'horizontal_pos_center  | 
					     Style'properties_style'horizontal_pos_right  | 
					     Style'properties_style'horizontal_pos_from_left  | 
					     Style'properties_style'horizontal_pos_inside  | 
					     Style'properties_style'horizontal_pos_outside  | 
					     Style'properties_style'horizontal_pos_from_inside
					   deriving (Eq,Show)
data Style'properties_style'horizontal_rel = Style'properties_style'horizontal_rel_page
					      |  Style'properties_style'horizontal_rel_page_content
					      | 
					     Style'properties_style'horizontal_rel_page_start_margin
					      | 
					     Style'properties_style'horizontal_rel_page_end_margin
					      |  Style'properties_style'horizontal_rel_frame  | 
					     Style'properties_style'horizontal_rel_frame_content  | 
					     Style'properties_style'horizontal_rel_frame_start_margin
					      | 
					     Style'properties_style'horizontal_rel_frame_end_margin
					      |  Style'properties_style'horizontal_rel_paragraph  | 
					     Style'properties_style'horizontal_rel_paragraph_content
					      | 
					     Style'properties_style'horizontal_rel_paragraph_start_margin
					      | 
					     Style'properties_style'horizontal_rel_paragraph_end_margin
					      |  Style'properties_style'horizontal_rel_char
					   deriving (Eq,Show)
data Style'properties_text'anchor_type = Style'properties_text'anchor_type_page
					  |  Style'properties_text'anchor_type_frame  | 
					 Style'properties_text'anchor_type_paragraph  | 
					 Style'properties_text'anchor_type_char  | 
					 Style'properties_text'anchor_type_as_char
				       deriving (Eq,Show)
data Style'properties_style'wrap = Style'properties_style'wrap_none
				    |  Style'properties_style'wrap_left  | 
				   Style'properties_style'wrap_right  | 
				   Style'properties_style'wrap_parallel  | 
				   Style'properties_style'wrap_dynamic  | 
				   Style'properties_style'wrap_run_through
				 deriving (Eq,Show)
data Style'properties_style'wrap_contour_mode = Style'properties_style'wrap_contour_mode_full
						 |  Style'properties_style'wrap_contour_mode_outside
					      deriving (Eq,Show)
data Style'properties_style'run_through = Style'properties_style'run_through_foreground
					   |  Style'properties_style'run_through_background
					deriving (Eq,Show)
data Style'properties_text'animation = Style'properties_text'animation_none
				        |  Style'properties_text'animation_scroll  | 
				       Style'properties_text'animation_alternate  | 
				       Style'properties_text'animation_slide
				     deriving (Eq,Show)
data Style'properties_text'animation_direction = Style'properties_text'animation_direction_left
						  |  Style'properties_text'animation_direction_right
						  |  Style'properties_text'animation_direction_up
						  |  Style'properties_text'animation_direction_down
					       deriving (Eq,Show)
data Style'properties_fo'font_variant = Style'properties_fo'font_variant_normal
					 |  Style'properties_fo'font_variant_small_caps
				      deriving (Eq,Show)
data Style'properties_fo'text_transform = Style'properties_fo'text_transform_none
					   |  Style'properties_fo'text_transform_lowercase  | 
					  Style'properties_fo'text_transform_uppercase  | 
					  Style'properties_fo'text_transform_capitalize
					deriving (Eq,Show)
data Style'properties_style'text_crossing_out = Style'properties_style'text_crossing_out_none
						 | 
						Style'properties_style'text_crossing_out_single_line
						 | 
						Style'properties_style'text_crossing_out_double_line
						 | 
						Style'properties_style'text_crossing_out_thick_line
						 |  Style'properties_style'text_crossing_out_slash
						 |  Style'properties_style'text_crossing_out_X
					      deriving (Eq,Show)
data Style'properties_style'text_align = Style'properties_style'text_align_left
					  |  Style'properties_style'text_align_right  | 
					 Style'properties_style'text_align_start  | 
					 Style'properties_style'text_align_center  | 
					 Style'properties_style'text_align_end  | 
					 Style'properties_style'text_align_justify  | 
					 Style'properties_style'text_align_justified
				       deriving (Eq,Show)
data Style'properties_style'font_family_generic = Style'properties_style'font_family_generic_roman
						   | 
						  Style'properties_style'font_family_generic_swiss
						   | 
						  Style'properties_style'font_family_generic_modern
						   | 
						  Style'properties_style'font_family_generic_decorative
						   | 
						  Style'properties_style'font_family_generic_script
						   | 
						  Style'properties_style'font_family_generic_system
						deriving (Eq,Show)
data Style'properties_style'font_pitch = Style'properties_style'font_pitch_fixed
					  |  Style'properties_style'font_pitch_variable
				       deriving (Eq,Show)
data Style'properties_style'font_family_generic_asian = Style'properties_style'font_family_generic_asian_roman
							 | 
							Style'properties_style'font_family_generic_asian_swiss
							 | 
							Style'properties_style'font_family_generic_asian_modern
							 | 
							Style'properties_style'font_family_generic_asian_decorative
							 | 
							Style'properties_style'font_family_generic_asian_script
							 | 
							Style'properties_style'font_family_generic_asian_system
						      deriving (Eq,Show)
data Style'properties_style'font_pitch_asian = Style'properties_style'font_pitch_asian_fixed
					        |  Style'properties_style'font_pitch_asian_variable
					     deriving (Eq,Show)
data Style'properties_style'font_family_generic_complex = Style'properties_style'font_family_generic_complex_roman
							   | 
							  Style'properties_style'font_family_generic_complex_swiss
							   | 
							  Style'properties_style'font_family_generic_complex_modern
							   | 
							  Style'properties_style'font_family_generic_complex_decorative
							   | 
							  Style'properties_style'font_family_generic_complex_script
							   | 
							  Style'properties_style'font_family_generic_complex_system
							deriving (Eq,Show)
data Style'properties_style'font_pitch_complex = Style'properties_style'font_pitch_complex_fixed
						  | 
						 Style'properties_style'font_pitch_complex_variable
					       deriving (Eq,Show)
data Style'properties_fo'font_style = Style'properties_fo'font_style_normal
				       |  Style'properties_fo'font_style_italic  | 
				      Style'properties_fo'font_style_oblique
				    deriving (Eq,Show)
data Style'properties_style'font_style_asian = Style'properties_style'font_style_asian_normal
					        |  Style'properties_style'font_style_asian_italic
					        |  Style'properties_style'font_style_asian_oblique
					     deriving (Eq,Show)
data Style'properties_style'font_style_complex = Style'properties_style'font_style_complex_normal
						  | 
						 Style'properties_style'font_style_complex_italic
						  | 
						 Style'properties_style'font_style_complex_oblique
					       deriving (Eq,Show)
data Style'properties_style'font_relief = Style'properties_style'font_relief_none
					   |  Style'properties_style'font_relief_embossed  | 
					  Style'properties_style'font_relief_engraved
					deriving (Eq,Show)
data Style'properties_style'text_underline = Style'properties_style'text_underline_none
					      |  Style'properties_style'text_underline_single  | 
					     Style'properties_style'text_underline_double  | 
					     Style'properties_style'text_underline_dotted  | 
					     Style'properties_style'text_underline_dash  | 
					     Style'properties_style'text_underline_long_dash  | 
					     Style'properties_style'text_underline_dot_dash  | 
					     Style'properties_style'text_underline_dot_dot_dash  | 
					     Style'properties_style'text_underline_wave  | 
					     Style'properties_style'text_underline_bold  | 
					     Style'properties_style'text_underline_bold_dotted  | 
					     Style'properties_style'text_underline_bold_dash  | 
					     Style'properties_style'text_underline_bold_long_dash
					      |  Style'properties_style'text_underline_bold_dot_dash
					      | 
					     Style'properties_style'text_underline_bold_dot_dot_dash
					      |  Style'properties_style'text_underline_bold_wave  | 
					     Style'properties_style'text_underline_double_wave  | 
					     Style'properties_style'text_underline_small_wave
					   deriving (Eq,Show)
data Style'properties_style'text_autospace = Style'properties_style'text_autospace_none
					      | 
					     Style'properties_style'text_autospace_ideograph_alpha
					   deriving (Eq,Show)
data Style'properties_style'punctuation_wrap = Style'properties_style'punctuation_wrap_simple
					        |  Style'properties_style'punctuation_wrap_hanging
					     deriving (Eq,Show)
data Style'properties_style'line_break = Style'properties_style'line_break_normal
					  |  Style'properties_style'line_break_strict
				       deriving (Eq,Show)
data Style'properties_style'text_combine = Style'properties_style'text_combine_none
					    |  Style'properties_style'text_combine_letters  | 
					   Style'properties_style'text_combine_lines
					 deriving (Eq,Show)
data Style'properties_style'text_rotation_scale = Style'properties_style'text_rotation_scale_fixed
						   | 
						  Style'properties_style'text_rotation_scale_line_height
						deriving (Eq,Show)
data Style'properties_fo'text_align = Style'properties_fo'text_align_start
				       |  Style'properties_fo'text_align_end  | 
				      Style'properties_fo'text_align_center  | 
				      Style'properties_fo'text_align_justify
				    deriving (Eq,Show)
data Style'properties_fo'text_align_last = Style'properties_fo'text_align_last_start
					    |  Style'properties_fo'text_align_last_center  | 
					   Style'properties_fo'text_align_last_justify
					 deriving (Eq,Show)
data Style'properties_style'text_align_source = Style'properties_style'text_align_source_fix
						 | 
						Style'properties_style'text_align_source_value_type
					      deriving (Eq,Show)
data Style'properties_style'break_inside = Style'properties_style'break_inside_auto
					    |  Style'properties_style'break_inside_avoid
					 deriving (Eq,Show)
data Style'properties_fo'hyphenate_keep = Style'properties_fo'hyphenate_keep_none
					   |  Style'properties_fo'hyphenate_keep_page
					deriving (Eq,Show)
data Style'properties_fo'break_before = Style'properties_fo'break_before_auto
					 |  Style'properties_fo'break_before_column  | 
					Style'properties_fo'break_before_page
				      deriving (Eq,Show)
data Style'properties_fo'break_after = Style'properties_fo'break_after_auto
				        |  Style'properties_fo'break_after_column  | 
				       Style'properties_fo'break_after_page
				     deriving (Eq,Show)
data Style'properties_style'ruby_align = Style'properties_style'ruby_align_left
					  |  Style'properties_style'ruby_align_center  | 
					 Style'properties_style'ruby_align_right  | 
					 Style'properties_style'ruby_align_distribute_letter  | 
					 Style'properties_style'ruby_align_distribute_space
				       deriving (Eq,Show)
data Style'properties_style'ruby_position = Style'properties_style'ruby_position_above
					     |  Style'properties_style'ruby_position_below
					  deriving (Eq,Show)
data Style'properties_table'align = Style'properties_table'align_left
				     |  Style'properties_table'align_center  | 
				    Style'properties_table'align_right  | 
				    Style'properties_table'align_margins
				  deriving (Eq,Show)
data Style'properties_table'border_model = Style'properties_table'border_model_collapsing
					    |  Style'properties_table'border_model_separating
					 deriving (Eq,Show)
data Style'properties_fo'vertical_align = Style'properties_fo'vertical_align_top
					   |  Style'properties_fo'vertical_align_middle  | 
					  Style'properties_fo'vertical_align_bottom  | 
					  Style'properties_fo'vertical_align_automatic
					deriving (Eq,Show)
data Style'properties_fo'direction = Style'properties_fo'direction_ltr
				      |  Style'properties_fo'direction_ttb
				   deriving (Eq,Show)
data Style'properties_style'glyph_orientation_vertical = Style'properties_style'glyph_orientation_vertical_auto
							  | 
							 Style'properties_style'glyph_orientation_vertical_0
						       deriving (Eq,Show)
data Style'properties_style'rotation_align = Style'properties_style'rotation_align_none
					      |  Style'properties_style'rotation_align_bottom  | 
					     Style'properties_style'rotation_align_top  | 
					     Style'properties_style'rotation_align_center
					   deriving (Eq,Show)
data Style'properties_fo'wrap_option = Style'properties_fo'wrap_option_no_wrap
				        |  Style'properties_fo'wrap_option_wrap
				     deriving (Eq,Show)
data Style'properties_style'print_orientation = Style'properties_style'print_orientation_portrait
						 | 
						Style'properties_style'print_orientation_landscape
					      deriving (Eq,Show)
data Style'properties_style'print_page_order = Style'properties_style'print_page_order_ttb
					        |  Style'properties_style'print_page_order_ltr
					     deriving (Eq,Show)
data Style'properties_style'table_centering = Style'properties_style'table_centering_horizontal
					       |  Style'properties_style'table_centering_vertical
					       |  Style'properties_style'table_centering_both  | 
					      Style'properties_style'table_centering_none
					    deriving (Eq,Show)
data Style'properties_style'vertical_align = Style'properties_style'vertical_align_top
					      |  Style'properties_style'vertical_align_bottom  | 
					     Style'properties_style'vertical_align_middle  | 
					     Style'properties_style'vertical_align_basline  | 
					     Style'properties_style'vertical_align_auto
					   deriving (Eq,Show)
data Style'properties_style'writing_mode = Style'properties_style'writing_mode_lr_tb
					    |  Style'properties_style'writing_mode_rl_tb  | 
					   Style'properties_style'writing_mode_tb_rl  | 
					   Style'properties_style'writing_mode_tb_lr  | 
					   Style'properties_style'writing_mode_lr  | 
					   Style'properties_style'writing_mode_rl  | 
					   Style'properties_style'writing_mode_tb  | 
					   Style'properties_style'writing_mode_page
					 deriving (Eq,Show)
data Style'properties_style'layout_grid_mode = Style'properties_style'layout_grid_mode_none
					        |  Style'properties_style'layout_grid_mode_line  | 
					       Style'properties_style'layout_grid_mode_both
					     deriving (Eq,Show)
data Style'properties_draw'stroke = Style'properties_draw'stroke_none
				     |  Style'properties_draw'stroke_dash  | 
				    Style'properties_draw'stroke_solid
				  deriving (Eq,Show)
data Style'properties_svg'stroke_linejoin = Style'properties_svg'stroke_linejoin_miter
					     |  Style'properties_svg'stroke_linejoin_round  | 
					    Style'properties_svg'stroke_linejoin_bevel  | 
					    Style'properties_svg'stroke_linejoin_middle  | 
					    Style'properties_svg'stroke_linejoin_none  | 
					    Style'properties_svg'stroke_linejoin_inherit
					  deriving (Eq,Show)
data Style'properties_draw'textarea_horizontal_align = Style'properties_draw'textarea_horizontal_align_left
						        | 
						       Style'properties_draw'textarea_horizontal_align_center
						        | 
						       Style'properties_draw'textarea_horizontal_align_right
						        | 
						       Style'properties_draw'textarea_horizontal_align_justify
						     deriving (Eq,Show)
data Style'properties_draw'textarea_vertical_align = Style'properties_draw'textarea_vertical_align_top
						      | 
						     Style'properties_draw'textarea_vertical_align_middle
						      | 
						     Style'properties_draw'textarea_vertical_align_bottom
						      | 
						     Style'properties_draw'textarea_vertical_align_justify
						   deriving (Eq,Show)
data Style'properties_draw'writing_mode = Style'properties_draw'writing_mode_lr_tb
					   |  Style'properties_draw'writing_mode_tb_rl
					deriving (Eq,Show)
data Style'properties_draw'fill = Style'properties_draw'fill_none
				   |  Style'properties_draw'fill_solid  | 
				  Style'properties_draw'fill_bitmap  | 
				  Style'properties_draw'fill_gradient  | 
				  Style'properties_draw'fill_hatch
				deriving (Eq,Show)
data Style'properties_style'repeat = Style'properties_style'repeat_no_repeat
				      |  Style'properties_style'repeat_repeat  | 
				     Style'properties_style'repeat_stretch
				   deriving (Eq,Show)
data Style'properties_draw'fill_image_ref_point = Style'properties_draw'fill_image_ref_point_top_left
						   |  Style'properties_draw'fill_image_ref_point_top
						   | 
						  Style'properties_draw'fill_image_ref_point_top_right
						   | 
						  Style'properties_draw'fill_image_ref_point_left
						   | 
						  Style'properties_draw'fill_image_ref_point_center
						   | 
						  Style'properties_draw'fill_image_ref_point_right
						   | 
						  Style'properties_draw'fill_image_ref_point_bottom_left
						   | 
						  Style'properties_draw'fill_image_ref_point_bottom
						   | 
						  Style'properties_draw'fill_image_ref_point_bottom_right
						deriving (Eq,Show)
data Style'properties_draw'color_mode = Style'properties_draw'color_mode_greyscale
					 |  Style'properties_draw'color_mode_mono  | 
					Style'properties_draw'color_mode_watermark  | 
					Style'properties_draw'color_mode_standard
				      deriving (Eq,Show)
data Style'properties_draw'shadow = Style'properties_draw'shadow_visible
				     |  Style'properties_draw'shadow_hidden
				  deriving (Eq,Show)
data Style'properties_draw'measure_align = Style'properties_draw'measure_align_automatic
					    |  Style'properties_draw'measure_align_left_outside  | 
					   Style'properties_draw'measure_align_inside  | 
					   Style'properties_draw'measure_align_right_outside
					 deriving (Eq,Show)
data Style'properties_draw'measure_vertical_align = Style'properties_draw'measure_vertical_align_automatic
						     | 
						    Style'properties_draw'measure_vertical_align_above
						     | 
						    Style'properties_draw'measure_vertical_align_below
						     | 
						    Style'properties_draw'measure_vertical_align_center
						  deriving (Eq,Show)
data Style'properties_draw'unit = Style'properties_draw'unit_automatic
				   |  Style'properties_draw'unit_mm  | 
				  Style'properties_draw'unit_cm  |  Style'properties_draw'unit_m  | 
				  Style'properties_draw'unit_km  |  Style'properties_draw'unit_pt
				   |  Style'properties_draw'unit_pc  | 
				  Style'properties_draw'unit_inch  |  Style'properties_draw'unit_ft
				   |  Style'properties_draw'unit_mi
				deriving (Eq,Show)
data Style'properties_draw'placing = Style'properties_draw'placing_below
				      |  Style'properties_draw'placing_above
				   deriving (Eq,Show)
data Style'properties_draw'fontwork_style = Style'properties_draw'fontwork_style_rotate
					     |  Style'properties_draw'fontwork_style_upright  | 
					    Style'properties_draw'fontwork_style_slant_x  | 
					    Style'properties_draw'fontwork_style_slant_y  | 
					    Style'properties_draw'fontwork_style_none
					  deriving (Eq,Show)
data Style'properties_draw'fontwork_adjust = Style'properties_draw'fontwork_adjust_left
					      |  Style'properties_draw'fontwork_adjust_right  | 
					     Style'properties_draw'fontwork_adjust_autosize  | 
					     Style'properties_draw'fontwork_adjust_center
					   deriving (Eq,Show)
data Style'properties_draw'fontwork_shadow = Style'properties_draw'fontwork_shadow_normal
					      |  Style'properties_draw'fontwork_shadow_slant  | 
					     Style'properties_draw'fontwork_shadow_none
					   deriving (Eq,Show)
data Style'properties_draw'fontwork_form = Style'properties_draw'fontwork_form_none
					    |  Style'properties_draw'fontwork_form_top_circle  | 
					   Style'properties_draw'fontwork_form_bottom_circle  | 
					   Style'properties_draw'fontwork_form_left_circle  | 
					   Style'properties_draw'fontwork_form_right_circle  | 
					   Style'properties_draw'fontwork_form_top_arc  | 
					   Style'properties_draw'fontwork_form_bottom_arc  | 
					   Style'properties_draw'fontwork_form_left_arc  | 
					   Style'properties_draw'fontwork_form_right_arc  | 
					   Style'properties_draw'fontwork_form_button1  | 
					   Style'properties_draw'fontwork_form_button2  | 
					   Style'properties_draw'fontwork_form_button3  | 
					   Style'properties_draw'fontwork_form_button4
					 deriving (Eq,Show)
data Style'properties_draw'caption_type = Style'properties_draw'caption_type_straight_line
					   |  Style'properties_draw'caption_type_angled_line  | 
					  Style'properties_draw'caption_type_angled_connector_line
					deriving (Eq,Show)
data Style'properties_draw'caption_angle_type = Style'properties_draw'caption_angle_type_fixed
						 |  Style'properties_draw'caption_angle_type_free
					      deriving (Eq,Show)
data Style'properties_draw'caption_escape_direction = Style'properties_draw'caption_escape_direction_horizontal
						       | 
						      Style'properties_draw'caption_escape_direction_vertical
						       | 
						      Style'properties_draw'caption_escape_direction_auto
						    deriving (Eq,Show)
data Style'properties_presentation'transition_type = Style'properties_presentation'transition_type_manual
						      | 
						     Style'properties_presentation'transition_type_automatic
						      | 
						     Style'properties_presentation'transition_type_semi_automatic
						   deriving (Eq,Show)
data Style'properties_presentation'transition_style = Style'properties_presentation'transition_style_none
						       | 
						      Style'properties_presentation'transition_style_fade_from_left
						       | 
						      Style'properties_presentation'transition_style_fade_from_top
						       | 
						      Style'properties_presentation'transition_style_fade_from_right
						       | 
						      Style'properties_presentation'transition_style_fade_from_bottom
						       | 
						      Style'properties_presentation'transition_style_fade_to_center
						       | 
						      Style'properties_presentation'transition_style_fade_from_center
						       | 
						      Style'properties_presentation'transition_style_move_from_left
						       | 
						      Style'properties_presentation'transition_style_move_from_top
						       | 
						      Style'properties_presentation'transition_style_move_from_right
						       | 
						      Style'properties_presentation'transition_style_move_from_bottom
						       | 
						      Style'properties_presentation'transition_style_roll_from_top
						       | 
						      Style'properties_presentation'transition_style_roll_from_left
						       | 
						      Style'properties_presentation'transition_style_roll_from_right
						       | 
						      Style'properties_presentation'transition_style_roll_from_bottom
						       | 
						      Style'properties_presentation'transition_style_vertical_stripes
						       | 
						      Style'properties_presentation'transition_style_horizontal_stripes
						       | 
						      Style'properties_presentation'transition_style_clockwise
						       | 
						      Style'properties_presentation'transition_style_counterclockwise
						       | 
						      Style'properties_presentation'transition_style_fade_from_upperleft
						       | 
						      Style'properties_presentation'transition_style_fade_from_upperright
						       | 
						      Style'properties_presentation'transition_style_fade_from_lowerleft
						       | 
						      Style'properties_presentation'transition_style_fade_from_lowerright
						       | 
						      Style'properties_presentation'transition_style_close_vertical
						       | 
						      Style'properties_presentation'transition_style_close_horizontal
						       | 
						      Style'properties_presentation'transition_style_open_vertical
						       | 
						      Style'properties_presentation'transition_style_open_horizontal
						       | 
						      Style'properties_presentation'transition_style_spiralin_left
						       | 
						      Style'properties_presentation'transition_style_spiralin_right
						       | 
						      Style'properties_presentation'transition_style_spiralout_left
						       | 
						      Style'properties_presentation'transition_style_spiralout_right
						       | 
						      Style'properties_presentation'transition_style_dissolve
						       | 
						      Style'properties_presentation'transition_style_wavyline_from_left
						       | 
						      Style'properties_presentation'transition_style_wavyline_from_top
						       | 
						      Style'properties_presentation'transition_style_wavyline_from_right
						       | 
						      Style'properties_presentation'transition_style_wavyline_from_bottom
						       | 
						      Style'properties_presentation'transition_style_random
						       | 
						      Style'properties_presentation'transition_style_stretch_from_left
						       | 
						      Style'properties_presentation'transition_style_stretch_from_top
						       | 
						      Style'properties_presentation'transition_style_stretch_from_right
						       | 
						      Style'properties_presentation'transition_style_stretch_from_bottom
						       | 
						      Style'properties_presentation'transition_style_vertical_lines
						       | 
						      Style'properties_presentation'transition_style_horizontal_lines
						    deriving (Eq,Show)
data Style'properties_presentation'transition_speed = Style'properties_presentation'transition_speed_slow
						       | 
						      Style'properties_presentation'transition_speed_medium
						       | 
						      Style'properties_presentation'transition_speed_fast
						    deriving (Eq,Show)
data Style'properties_presentation'visibility = Style'properties_presentation'visibility_visible
						 |  Style'properties_presentation'visibility_hidden
					      deriving (Eq,Show)
data Style'properties_draw'background_size = Style'properties_draw'background_size_full
					      |  Style'properties_draw'background_size_border
					   deriving (Eq,Show)
data Style'properties_dr3d'edge_rounding_mode = Style'properties_dr3d'edge_rounding_mode_correct
						 | 
						Style'properties_dr3d'edge_rounding_mode_attractive
					      deriving (Eq,Show)
data Style'properties_dr3d'backface_culling = Style'properties_dr3d'backface_culling_enabled
					       |  Style'properties_dr3d'backface_culling_disabled
					    deriving (Eq,Show)
data Style'properties_dr3d'lighting_mode = Style'properties_dr3d'lighting_mode_standard
					    |  Style'properties_dr3d'lighting_mode_double_sided
					 deriving (Eq,Show)
data Style'properties_dr3d'normals_kind = Style'properties_dr3d'normals_kind_object
					   |  Style'properties_dr3d'normals_kind_flat  | 
					  Style'properties_dr3d'normals_kind_sphere
					deriving (Eq,Show)
data Style'properties_dr3d'normals_direction = Style'properties_dr3d'normals_direction_normal
					        |  Style'properties_dr3d'normals_direction_inverse
					     deriving (Eq,Show)
data Style'properties_dr3d'texture_generation_mode_x = Style'properties_dr3d'texture_generation_mode_x_object
						        | 
						       Style'properties_dr3d'texture_generation_mode_x_parallel
						        | 
						       Style'properties_dr3d'texture_generation_mode_x_sphere
						     deriving (Eq,Show)
data Style'properties_dr3d'texture_generation_mode_y = Style'properties_dr3d'texture_generation_mode_y_object
						        | 
						       Style'properties_dr3d'texture_generation_mode_y_parallel
						        | 
						       Style'properties_dr3d'texture_generation_mode_y_sphere
						     deriving (Eq,Show)
data Style'properties_dr3d'texture_kind = Style'properties_dr3d'texture_kind_luminance
					   |  Style'properties_dr3d'texture_kind_intesity  | 
					  Style'properties_dr3d'texture_kind_color
					deriving (Eq,Show)
data Style'properties_dr3d'texture_filter = Style'properties_dr3d'texture_filter_enabled
					     |  Style'properties_dr3d'texture_filter_disabled
					  deriving (Eq,Show)
data Style'properties_dr3d'texture_mode = Style'properties_dr3d'texture_mode_replace
					   |  Style'properties_dr3d'texture_mode_modulate  | 
					  Style'properties_dr3d'texture_mode_blend
					deriving (Eq,Show)
data Style'properties_dr3d'shadow = Style'properties_dr3d'shadow_visible
				     |  Style'properties_dr3d'shadow_hidden
				  deriving (Eq,Show)
data Style'properties_chart'solid_type = Style'properties_chart'solid_type_cuboid
					  |  Style'properties_chart'solid_type_cylinder  | 
					 Style'properties_chart'solid_type_cone  | 
					 Style'properties_chart'solid_type_pyramid
				       deriving (Eq,Show)
data Style'properties_chart'series_source = Style'properties_chart'series_source_columns
					     |  Style'properties_chart'series_source_rows
					  deriving (Eq,Show)
data Style'properties_chart'label_arrangement = Style'properties_chart'label_arrangement_side_by_side
						 | 
						Style'properties_chart'label_arrangement_stagger_even
						 | 
						Style'properties_chart'label_arrangement_stagger_odd
					      deriving (Eq,Show)
data Style'properties_chart'error_category = Style'properties_chart'error_category_none
					      |  Style'properties_chart'error_category_variance  | 
					     Style'properties_chart'error_category_standard_deviation
					      |  Style'properties_chart'error_category_percentage
					      |  Style'properties_chart'error_category_error_margin
					      |  Style'properties_chart'error_category_constant
					   deriving (Eq,Show)
data Style'properties_chart'regression_type = Style'properties_chart'regression_type_none
					       |  Style'properties_chart'regression_type_linear  | 
					      Style'properties_chart'regression_type_logarithmic  | 
					      Style'properties_chart'regression_type_exponential  | 
					      Style'properties_chart'regression_type_power
					    deriving (Eq,Show)
data Style'properties_chart'data_label_number = Style'properties_chart'data_label_number_none
						 |  Style'properties_chart'data_label_number_value
						 | 
						Style'properties_chart'data_label_number_percentage
					      deriving (Eq,Show)
newtype Style'tab_stops = Style'tab_stops [Style'tab_stop] 		deriving (Eq,Show)
data Style'tab_stop = Style'tab_stop
    { style'tab_stopStyle'position :: String
    , style'tab_stopStyle'type :: (Defaultable Style'tab_stop_style'type)
    , style'tab_stopStyle'char :: (Maybe String)
    , style'tab_stopStyle'leader_char :: (Defaultable String)
    } deriving (Eq,Show)
data Style'tab_stop_style'type = Style'tab_stop_style'type_left  | 
				 Style'tab_stop_style'type_center  | 
				 Style'tab_stop_style'type_right  |  Style'tab_stop_style'type_char
				  |  Style'tab_stop_style'type_default
			       deriving (Eq,Show)
data Style'drop_cap = Style'drop_cap
    { style'drop_capStyle'length :: (Defaultable String)
    , style'drop_capStyle'lines :: (Defaultable String)
    , style'drop_capStyle'distance :: (Defaultable String)
    , style'drop_capStyle'style_name :: (Maybe String)
    } deriving (Eq,Show)
data Style'background_image = Style'background_image Style'background_image_Attrs
						     (Maybe Office'binary_data)
			    deriving (Eq,Show)
data Style'background_image_Attrs = Style'background_image_Attrs
    { style'background_imageXlink'type :: (Maybe Style'background_image_xlink'type)
    , style'background_imageXlink'href :: (Maybe String)
    , style'background_imageXlink'show :: (Maybe Style'background_image_xlink'show)
    , style'background_imageXlink'actuate :: (Maybe Style'background_image_xlink'actuate)
    , style'background_imageStyle'repeat :: (Defaultable Style'background_image_style'repeat)
    , style'background_imageStyle'position :: (Defaultable String)
    , style'background_imageStyle'filter_name :: (Maybe String)
    , style'background_imageDraw'transparency :: (Maybe String)
    } deriving (Eq,Show)
data Style'background_image_xlink'type = Style'background_image_xlink'type_simple
				       deriving (Eq,Show)
data Style'background_image_xlink'show = Style'background_image_xlink'show_embed
				       deriving (Eq,Show)
data Style'background_image_xlink'actuate = Style'background_image_xlink'actuate_onLoad
					  deriving (Eq,Show)
data Style'background_image_style'repeat = Style'background_image_style'repeat_no_repeat
					    |  Style'background_image_style'repeat_repeat  | 
					   Style'background_image_style'repeat_stretch
					 deriving (Eq,Show)
data Style'symbol_image = Style'symbol_image Style'symbol_image_Attrs
					     (Maybe Office'binary_data)
			deriving (Eq,Show)
data Style'symbol_image_Attrs = Style'symbol_image_Attrs
    { style'symbol_imageXlink'type :: (Maybe Style'symbol_image_xlink'type)
    , style'symbol_imageXlink'href :: (Maybe String)
    , style'symbol_imageXlink'show :: (Maybe Style'symbol_image_xlink'show)
    , style'symbol_imageXlink'actuate :: (Maybe Style'symbol_image_xlink'actuate)
    } deriving (Eq,Show)
data Style'symbol_image_xlink'type = Style'symbol_image_xlink'type_simple
				   deriving (Eq,Show)
data Style'symbol_image_xlink'show = Style'symbol_image_xlink'show_embed
				   deriving (Eq,Show)
data Style'symbol_image_xlink'actuate = Style'symbol_image_xlink'actuate_onLoad
				      deriving (Eq,Show)
data Style'columns = Style'columns Style'columns_Attrs
				   (Maybe Style'column_sep) [Style'column]
		   deriving (Eq,Show)
data Style'columns_Attrs = Style'columns_Attrs
    { style'columnsFo'column_count :: (Maybe String)
    , style'columnsFo'column_gap :: (Maybe String)
    } deriving (Eq,Show)
data Style'column = Style'column
    { style'columnStyle'rel_width :: (Maybe String)
    , style'columnFo'margin_left :: (Maybe String)
    , style'columnFo'margin_right :: (Maybe String)
    } deriving (Eq,Show)
data Style'column_sep = Style'column_sep
    { style'column_sepStyle'style :: (Defaultable Style'column_sep_style'style)
    , style'column_sepStyle'width :: String
    , style'column_sepStyle'height :: (Defaultable String)
    , style'column_sepStyle'vertical_align :: (Defaultable Style'column_sep_style'vertical_align)
    , style'column_sepStyle'color :: (Defaultable String)
    } deriving (Eq,Show)
data Style'column_sep_style'style = Style'column_sep_style'style_none
				     |  Style'column_sep_style'style_solid  | 
				    Style'column_sep_style'style_dotted  | 
				    Style'column_sep_style'style_dashed  | 
				    Style'column_sep_style'style_dot_dashed
				  deriving (Eq,Show)
data Style'column_sep_style'vertical_align = Style'column_sep_style'vertical_align_top
					      |  Style'column_sep_style'vertical_align_middle  | 
					     Style'column_sep_style'vertical_align_bottom
					   deriving (Eq,Show)
data Style'page_master = Style'page_master Style'page_master_Attrs
					   (Maybe Style'properties) (Maybe Style'header_style)
					   (Maybe Style'footer_style)
		       deriving (Eq,Show)
data Style'page_master_Attrs = Style'page_master_Attrs
    { style'page_masterStyle'name :: String
    , style'page_masterStyle'page_usage :: (Defaultable Style'page_master_style'page_usage)
    } deriving (Eq,Show)
data Style'page_master_style'page_usage = Style'page_master_style'page_usage_all
					   |  Style'page_master_style'page_usage_left  | 
					  Style'page_master_style'page_usage_right  | 
					  Style'page_master_style'page_usage_mirrored
					deriving (Eq,Show)
newtype Style'header_style = Style'header_style (Maybe Style'properties) 		deriving (Eq,Show)
newtype Style'footer_style = Style'footer_style (Maybe Style'properties) 		deriving (Eq,Show)
data Style'footnote_sep = Style'footnote_sep
    { style'footnote_sepStyle'width :: (Maybe String)
    , style'footnote_sepStyle'rel_width :: (Maybe String)
    , style'footnote_sepStyle'color :: (Maybe String)
    , style'footnote_sepStyle'adjustment :: (Defaultable Style'footnote_sep_style'adjustment)
    , style'footnote_sepStyle'distance_before_sep :: (Maybe String)
    , style'footnote_sepStyle'distance_after_sep :: (Maybe String)
    } deriving (Eq,Show)
data Style'footnote_sep_style'adjustment = Style'footnote_sep_style'adjustment_left
					    |  Style'footnote_sep_style'adjustment_center  | 
					   Style'footnote_sep_style'adjustment_right
					 deriving (Eq,Show)
data Style'master_page = Style'master_page Style'master_page_Attrs
					   (Maybe (Style'header,(Maybe Style'header_left)))
					   (Maybe (Style'footer,(Maybe Style'footer_left)))
					   (Maybe Office'forms) [Style'style]
					   [((OneOf22 Draw'rect Draw'line Draw'polyline Draw'polygon Draw'path Draw'circle Draw'ellipse Draw'g Draw'page_thumbnail Draw'text_box Draw'image Draw'object Draw'object_ole Draw'applet Draw'floating_frame Draw'plugin Draw'measure Draw'caption Draw'connector Chart'chart Dr3d'scene Draw'control))]
					   (Maybe Presentation'notes)
		       deriving (Eq,Show)
data Style'master_page_Attrs = Style'master_page_Attrs
    { style'master_pageStyle'name :: String
    , style'master_pageStyle'page_master_name :: String
    , style'master_pageStyle'next_style_name :: (Maybe String)
    , style'master_pageDraw'style_name :: (Maybe String)
    } deriving (Eq,Show)
data Style'handout_master = Style'handout_master Style'handout_master_Attrs
						 [(OneOf22 Draw'rect Draw'line Draw'polyline Draw'polygon Draw'path Draw'circle Draw'ellipse Draw'g Draw'page_thumbnail Draw'text_box Draw'image Draw'object Draw'object_ole Draw'applet Draw'floating_frame Draw'plugin Draw'measure Draw'caption Draw'connector Chart'chart Dr3d'scene Draw'control)]
			  deriving (Eq,Show)
data Style'handout_master_Attrs = Style'handout_master_Attrs
    { style'handout_masterPresentation'presentation_page_layout_name :: (Maybe String)
    , style'handout_masterStyle'page_master_name :: (Maybe String)
    } deriving (Eq,Show)
data Style'header = Style'headerText'variable_decls_Text'sequence_decls_Text'user_field_decls_Text'dde_connection_decls_Text'alphabetical_index_auto_mark_file_Text'h_Text'p_Text'ordered_list_Text'unordered_list_Table'table_Text'section_Text'table_of_content_Text'illustration_index_Text'table_index_Text'object_index_Text'user_index_Text'alphabetical_index_Text'bibliography_Text'index_title_Text'change_Text'change_start_Text'change_end Style'header_Attrs
																																																						      (Maybe Text'variable_decls)
																																																						      (Maybe Text'sequence_decls)
																																																						      (Maybe Text'user_field_decls)
																																																						      (Maybe Text'dde_connection_decls)
																																																						      (Maybe Text'alphabetical_index_auto_mark_file)
																																																						      [(OneOf17 Text'h Text'p Text'ordered_list Text'unordered_list Table'table Text'section Text'table_of_content Text'illustration_index Text'table_index Text'object_index Text'user_index Text'alphabetical_index Text'bibliography Text'index_title Text'change Text'change_start Text'change_end)]
		  | Style'headerStyle'region_left_Style'region_center_Style'region_right Style'header_Attrs
											 (Maybe Style'region_left)
											 (Maybe Style'region_center)
											 (Maybe Style'region_right)
		  deriving (Eq,Show)
data Style'header_Attrs = Style'header_Attrs
    { style'headerStyle'display :: (Defaultable String)
    } deriving (Eq,Show)
data Style'footer = Style'footerText'variable_decls_Text'sequence_decls_Text'user_field_decls_Text'dde_connection_decls_Text'alphabetical_index_auto_mark_file_Text'h_Text'p_Text'ordered_list_Text'unordered_list_Table'table_Text'section_Text'table_of_content_Text'illustration_index_Text'table_index_Text'object_index_Text'user_index_Text'alphabetical_index_Text'bibliography_Text'index_title_Text'change_Text'change_start_Text'change_end Style'footer_Attrs
																																																						      (Maybe Text'variable_decls)
																																																						      (Maybe Text'sequence_decls)
																																																						      (Maybe Text'user_field_decls)
																																																						      (Maybe Text'dde_connection_decls)
																																																						      (Maybe Text'alphabetical_index_auto_mark_file)
																																																						      [(OneOf17 Text'h Text'p Text'ordered_list Text'unordered_list Table'table Text'section Text'table_of_content Text'illustration_index Text'table_index Text'object_index Text'user_index Text'alphabetical_index Text'bibliography Text'index_title Text'change Text'change_start Text'change_end)]
		  | Style'footerStyle'region_left_Style'region_center_Style'region_right Style'footer_Attrs
											 (Maybe Style'region_left)
											 (Maybe Style'region_center)
											 (Maybe Style'region_right)
		  deriving (Eq,Show)
data Style'footer_Attrs = Style'footer_Attrs
    { style'footerStyle'display :: (Defaultable String)
    } deriving (Eq,Show)
data Style'header_left = Style'header_leftText'variable_decls_Text'sequence_decls_Text'user_field_decls_Text'dde_connection_decls_Text'alphabetical_index_auto_mark_file_Text'h_Text'p_Text'ordered_list_Text'unordered_list_Table'table_Text'section_Text'table_of_content_Text'illustration_index_Text'table_index_Text'object_index_Text'user_index_Text'alphabetical_index_Text'bibliography_Text'index_title_Text'change_Text'change_start_Text'change_end Style'header_left_Attrs
																																																								(Maybe Text'variable_decls)
																																																								(Maybe Text'sequence_decls)
																																																								(Maybe Text'user_field_decls)
																																																								(Maybe Text'dde_connection_decls)
																																																								(Maybe Text'alphabetical_index_auto_mark_file)
																																																								[(OneOf17 Text'h Text'p Text'ordered_list Text'unordered_list Table'table Text'section Text'table_of_content Text'illustration_index Text'table_index Text'object_index Text'user_index Text'alphabetical_index Text'bibliography Text'index_title Text'change Text'change_start Text'change_end)]
		       | Style'header_leftStyle'region_left_Style'region_center_Style'region_right Style'header_left_Attrs
												   (Maybe Style'region_left)
												   (Maybe Style'region_center)
												   (Maybe Style'region_right)
		       deriving (Eq,Show)
data Style'header_left_Attrs = Style'header_left_Attrs
    { style'header_leftStyle'display :: (Defaultable String)
    } deriving (Eq,Show)
data Style'footer_left = Style'footer_leftText'variable_decls_Text'sequence_decls_Text'user_field_decls_Text'dde_connection_decls_Text'alphabetical_index_auto_mark_file_Text'h_Text'p_Text'ordered_list_Text'unordered_list_Table'table_Text'section_Text'table_of_content_Text'illustration_index_Text'table_index_Text'object_index_Text'user_index_Text'alphabetical_index_Text'bibliography_Text'index_title_Text'change_Text'change_start_Text'change_end Style'footer_left_Attrs
																																																								(Maybe Text'variable_decls)
																																																								(Maybe Text'sequence_decls)
																																																								(Maybe Text'user_field_decls)
																																																								(Maybe Text'dde_connection_decls)
																																																								(Maybe Text'alphabetical_index_auto_mark_file)
																																																								[(OneOf17 Text'h Text'p Text'ordered_list Text'unordered_list Table'table Text'section Text'table_of_content Text'illustration_index Text'table_index Text'object_index Text'user_index Text'alphabetical_index Text'bibliography Text'index_title Text'change Text'change_start Text'change_end)]
		       | Style'footer_leftStyle'region_left_Style'region_center_Style'region_right Style'footer_left_Attrs
												   (Maybe Style'region_left)
												   (Maybe Style'region_center)
												   (Maybe Style'region_right)
		       deriving (Eq,Show)
data Style'footer_left_Attrs = Style'footer_left_Attrs
    { style'footer_leftStyle'display :: (Defaultable String)
    } deriving (Eq,Show)
newtype Style'region_left = Style'region_left [Text'p] 		deriving (Eq,Show)
newtype Style'region_center = Style'region_center [Text'p] 		deriving (Eq,Show)
newtype Style'region_right = Style'region_right [Text'p] 		deriving (Eq,Show)
newtype Meta'generator = Meta'generator String 		deriving (Eq,Show)
newtype Dc'title = Dc'title String 		deriving (Eq,Show)
newtype Dc'description = Dc'description String 		deriving (Eq,Show)
newtype Dc'subject = Dc'subject String 		deriving (Eq,Show)
newtype Meta'keywords = Meta'keywords [Meta'keyword] 		deriving (Eq,Show)
newtype Meta'keyword = Meta'keyword String 		deriving (Eq,Show)
newtype Meta'initial_creator = Meta'initial_creator String 		deriving (Eq,Show)
newtype Dc'creator = Dc'creator String 		deriving (Eq,Show)
newtype Meta'printed_by = Meta'printed_by String 		deriving (Eq,Show)
newtype Meta'creation_date = Meta'creation_date String 		deriving (Eq,Show)
newtype Dc'date = Dc'date String 		deriving (Eq,Show)
newtype Meta'print_date = Meta'print_date String 		deriving (Eq,Show)
data Meta'template = Meta'template
    { meta'templateXlink'type :: (Defaultable Meta'template_xlink'type)
    , meta'templateXlink'actuate :: (Defaultable Meta'template_xlink'actuate)
    , meta'templateXlink'href :: String
    , meta'templateXlink'title :: (Maybe String)
    , meta'templateMeta'date :: (Maybe String)
    } deriving (Eq,Show)
data Meta'template_xlink'type = Meta'template_xlink'type_simple
			      deriving (Eq,Show)
data Meta'template_xlink'actuate = Meta'template_xlink'actuate_onRequest
				 deriving (Eq,Show)
data Meta'auto_reload = Meta'auto_reload
    { meta'auto_reloadXlink'type :: (Maybe Meta'auto_reload_xlink'type)
    , meta'auto_reloadXlink'show :: (Maybe Meta'auto_reload_xlink'show)
    , meta'auto_reloadXlink'actuate :: (Maybe Meta'auto_reload_xlink'actuate)
    , meta'auto_reloadXlink'href :: (Maybe String)
    , meta'auto_reloadMeta'delay :: (Defaultable String)
    } deriving (Eq,Show)
data Meta'auto_reload_xlink'type = Meta'auto_reload_xlink'type_simple
				 deriving (Eq,Show)
data Meta'auto_reload_xlink'show = Meta'auto_reload_xlink'show_replace
				 deriving (Eq,Show)
data Meta'auto_reload_xlink'actuate = Meta'auto_reload_xlink'actuate_onLoad
				    deriving (Eq,Show)
data Meta'hyperlink_behaviour = Meta'hyperlink_behaviour
    { meta'hyperlink_behaviourOffice'target_frame_name :: (Maybe String)
    , meta'hyperlink_behaviourXlink'show :: (Maybe Meta'hyperlink_behaviour_xlink'show)
    } deriving (Eq,Show)
data Meta'hyperlink_behaviour_xlink'show = Meta'hyperlink_behaviour_xlink'show_new
					    |  Meta'hyperlink_behaviour_xlink'show_replace
					 deriving (Eq,Show)
newtype Dc'language = Dc'language String 		deriving (Eq,Show)
newtype Meta'editing_cycles = Meta'editing_cycles String 		deriving (Eq,Show)
newtype Meta'editing_duration = Meta'editing_duration String 		deriving (Eq,Show)
data Meta'user_defined = Meta'user_defined Meta'user_defined_Attrs
					   String
		       deriving (Eq,Show)
data Meta'user_defined_Attrs = Meta'user_defined_Attrs
    { meta'user_definedMeta'name :: String
    } deriving (Eq,Show)
data Meta'document_statistic = Meta'document_statistic
    { meta'document_statisticMeta'page_count :: (Maybe String)
    , meta'document_statisticMeta'table_count :: (Maybe String)
    , meta'document_statisticMeta'draw_count :: (Maybe String)
    , meta'document_statisticMeta'image_count :: (Maybe String)
    , meta'document_statisticMeta'ole_object_count :: (Maybe String)
    , meta'document_statisticMeta'paragraph_count :: (Maybe String)
    , meta'document_statisticMeta'word_count :: (Maybe String)
    , meta'document_statisticMeta'character_count :: (Maybe String)
    , meta'document_statisticMeta'row_count :: (Maybe String)
    , meta'document_statisticMeta'cell_count :: (Maybe String)
    , meta'document_statisticMeta'object_count :: (Maybe String)
    } deriving (Eq,Show)
data Script'library_embedded = Script'library_embedded Script'library_embedded_Attrs
						       [Script'module]
			     deriving (Eq,Show)
data Script'library_embedded_Attrs = Script'library_embedded_Attrs
    { script'library_embeddedScript'name :: String
    , script'library_embeddedScript'password :: (Maybe String)
    } deriving (Eq,Show)
data Script'library_linked = Script'library_linked
    { script'library_linkedScript'name :: String
    , script'library_linkedXlink'href :: String
    , script'library_linkedXlink'type :: (Defaultable Script'library_linked_xlink'type)
    } deriving (Eq,Show)
data Script'library_linked_xlink'type = Script'library_linked_xlink'type_simple
				      deriving (Eq,Show)
data Script'module = Script'module Script'module_Attrs String
		   deriving (Eq,Show)
data Script'module_Attrs = Script'module_Attrs
    { script'moduleScript'name :: String
    , script'moduleScript'language :: (Maybe String)
    } deriving (Eq,Show)
data Script'event = Script'event Script'event_Attrs String
		  deriving (Eq,Show)
data Script'event_Attrs = Script'event_Attrs
    { script'eventScript'language :: String
    , script'eventScript'event_name :: String
    , script'eventScript'location :: Script'event_script'location
    , script'eventScript'macro_name :: String
    } deriving (Eq,Show)
data Script'event_script'location = Script'event_script'location_document
				     |  Script'event_script'location_application
				  deriving (Eq,Show)
data Draw'rect = Draw'rect Draw'rect_Attrs (Maybe Office'events)
			   [(OneOf3 Text'p Text'unordered_list Text'ordered_list)]
	       deriving (Eq,Show)
data Draw'rect_Attrs = Draw'rect_Attrs
    { draw'rectSvg'x :: (Maybe String)
    , draw'rectSvg'y :: (Maybe String)
    , draw'rectTable'end_cell_address :: (Maybe String)
    , draw'rectTable'end_x :: (Maybe String)
    , draw'rectTable'end_y :: (Maybe String)
    , draw'rectTable'table_background :: (Maybe Draw'rect_table'table_background)
    , draw'rectSvg'width :: (Maybe String)
    , draw'rectSvg'height :: (Maybe String)
    , draw'rectDraw'style_name :: (Maybe String)
    , draw'rectPresentation'style_name :: (Maybe String)
    , draw'rectDraw'text_style_name :: (Maybe String)
    , draw'rectDraw'transform :: (Maybe String)
    , draw'rectDraw'corner_radius :: (Maybe String)
    , draw'rectDraw'z_index :: (Maybe String)
    , draw'rectDraw'id :: (Maybe String)
    , draw'rectText'anchor_type :: (Maybe Draw'rect_text'anchor_type)
    , draw'rectText'anchor_page_number :: (Maybe String)
    , draw'rectDraw'layer :: (Maybe String)
    } deriving (Eq,Show)
data Draw'rect_table'table_background = Draw'rect_table'table_background_true
					 |  Draw'rect_table'table_background_false
				      deriving (Eq,Show)
data Draw'rect_text'anchor_type = Draw'rect_text'anchor_type_page
				   |  Draw'rect_text'anchor_type_frame  | 
				  Draw'rect_text'anchor_type_paragraph  | 
				  Draw'rect_text'anchor_type_char  | 
				  Draw'rect_text'anchor_type_as_char
				deriving (Eq,Show)
data Draw'line = Draw'line Draw'line_Attrs (Maybe Office'events)
			   [(OneOf3 Text'p Text'unordered_list Text'ordered_list)]
	       deriving (Eq,Show)
data Draw'line_Attrs = Draw'line_Attrs
    { draw'lineSvg'x1 :: (Maybe String)
    , draw'lineSvg'y1 :: (Maybe String)
    , draw'lineSvg'x2 :: String
    , draw'lineSvg'y2 :: String
    , draw'lineSvg'y :: (Maybe String)
    , draw'lineDraw'style_name :: (Maybe String)
    , draw'linePresentation'style_name :: (Maybe String)
    , draw'lineDraw'text_style_name :: (Maybe String)
    , draw'lineDraw'transform :: (Maybe String)
    , draw'lineDraw'z_index :: (Maybe String)
    , draw'lineTable'end_cell_address :: (Maybe String)
    , draw'lineTable'end_x :: (Maybe String)
    , draw'lineTable'end_y :: (Maybe String)
    , draw'lineTable'table_background :: (Maybe Draw'line_table'table_background)
    , draw'lineDraw'id :: (Maybe String)
    , draw'lineText'anchor_type :: (Maybe Draw'line_text'anchor_type)
    , draw'lineText'anchor_page_number :: (Maybe String)
    , draw'lineDraw'layer :: (Maybe String)
    } deriving (Eq,Show)
data Draw'line_table'table_background = Draw'line_table'table_background_true
					 |  Draw'line_table'table_background_false
				      deriving (Eq,Show)
data Draw'line_text'anchor_type = Draw'line_text'anchor_type_page
				   |  Draw'line_text'anchor_type_frame  | 
				  Draw'line_text'anchor_type_paragraph  | 
				  Draw'line_text'anchor_type_char  | 
				  Draw'line_text'anchor_type_as_char
				deriving (Eq,Show)
data Draw'polyline = Draw'polyline Draw'polyline_Attrs
				   (Maybe Office'events)
				   [(OneOf3 Text'p Text'unordered_list Text'ordered_list)]
		   deriving (Eq,Show)
data Draw'polyline_Attrs = Draw'polyline_Attrs
    { draw'polylineSvg'x :: (Maybe String)
    , draw'polylineSvg'y :: (Maybe String)
    , draw'polylineSvg'width :: (Maybe String)
    , draw'polylineSvg'height :: (Maybe String)
    , draw'polylineSvg'viewBox :: String
    , draw'polylineDraw'points :: String
    , draw'polylineDraw'style_name :: (Maybe String)
    , draw'polylinePresentation'style_name :: (Maybe String)
    , draw'polylineDraw'text_style_name :: (Maybe String)
    , draw'polylineDraw'transform :: (Maybe String)
    , draw'polylineDraw'z_index :: (Maybe String)
    , draw'polylineTable'end_cell_address :: (Maybe String)
    , draw'polylineTable'end_x :: (Maybe String)
    , draw'polylineTable'end_y :: (Maybe String)
    , draw'polylineTable'table_background :: (Maybe Draw'polyline_table'table_background)
    , draw'polylineDraw'id :: (Maybe String)
    , draw'polylineText'anchor_type :: (Maybe Draw'polyline_text'anchor_type)
    , draw'polylineText'anchor_page_number :: (Maybe String)
    , draw'polylineDraw'layer :: (Maybe String)
    } deriving (Eq,Show)
data Draw'polyline_table'table_background = Draw'polyline_table'table_background_true
					     |  Draw'polyline_table'table_background_false
					  deriving (Eq,Show)
data Draw'polyline_text'anchor_type = Draw'polyline_text'anchor_type_page
				       |  Draw'polyline_text'anchor_type_frame  | 
				      Draw'polyline_text'anchor_type_paragraph  | 
				      Draw'polyline_text'anchor_type_char  | 
				      Draw'polyline_text'anchor_type_as_char
				    deriving (Eq,Show)
data Draw'polygon = Draw'polygon Draw'polygon_Attrs
				 (Maybe Office'events)
				 [(OneOf3 Text'p Text'unordered_list Text'ordered_list)]
		  deriving (Eq,Show)
data Draw'polygon_Attrs = Draw'polygon_Attrs
    { draw'polygonSvg'x :: (Maybe String)
    , draw'polygonSvg'y :: (Maybe String)
    , draw'polygonTable'end_cell_address :: (Maybe String)
    , draw'polygonTable'end_x :: (Maybe String)
    , draw'polygonTable'end_y :: (Maybe String)
    , draw'polygonTable'table_background :: (Maybe Draw'polygon_table'table_background)
    , draw'polygonSvg'width :: (Maybe String)
    , draw'polygonSvg'height :: (Maybe String)
    , draw'polygonSvg'viewBox :: String
    , draw'polygonDraw'points :: String
    , draw'polygonDraw'style_name :: (Maybe String)
    , draw'polygonPresentation'style_name :: (Maybe String)
    , draw'polygonDraw'text_style_name :: (Maybe String)
    , draw'polygonDraw'transform :: (Maybe String)
    , draw'polygonDraw'z_index :: (Maybe String)
    , draw'polygonDraw'id :: (Maybe String)
    , draw'polygonText'anchor_type :: (Maybe Draw'polygon_text'anchor_type)
    , draw'polygonText'anchor_page_number :: (Maybe String)
    , draw'polygonDraw'layer :: (Maybe String)
    } deriving (Eq,Show)
data Draw'polygon_table'table_background = Draw'polygon_table'table_background_true
					    |  Draw'polygon_table'table_background_false
					 deriving (Eq,Show)
data Draw'polygon_text'anchor_type = Draw'polygon_text'anchor_type_page
				      |  Draw'polygon_text'anchor_type_frame  | 
				     Draw'polygon_text'anchor_type_paragraph  | 
				     Draw'polygon_text'anchor_type_char  | 
				     Draw'polygon_text'anchor_type_as_char
				   deriving (Eq,Show)
data Draw'path = Draw'path Draw'path_Attrs (Maybe Office'events)
			   [(OneOf3 Text'p Text'unordered_list Text'ordered_list)]
	       deriving (Eq,Show)
data Draw'path_Attrs = Draw'path_Attrs
    { draw'pathSvg'x :: (Maybe String)
    , draw'pathSvg'y :: (Maybe String)
    , draw'pathTable'end_cell_address :: (Maybe String)
    , draw'pathTable'end_x :: (Maybe String)
    , draw'pathTable'end_y :: (Maybe String)
    , draw'pathTable'table_background :: (Maybe Draw'path_table'table_background)
    , draw'pathSvg'width :: (Maybe String)
    , draw'pathSvg'height :: (Maybe String)
    , draw'pathSvg'viewBox :: String
    , draw'pathSvg'd :: String
    , draw'pathDraw'style_name :: (Maybe String)
    , draw'pathPresentation'style_name :: (Maybe String)
    , draw'pathDraw'text_style_name :: (Maybe String)
    , draw'pathDraw'transform :: (Maybe String)
    , draw'pathDraw'z_index :: (Maybe String)
    , draw'pathDraw'id :: (Maybe String)
    , draw'pathText'anchor_type :: (Maybe Draw'path_text'anchor_type)
    , draw'pathText'anchor_page_number :: (Maybe String)
    , draw'pathDraw'layer :: (Maybe String)
    } deriving (Eq,Show)
data Draw'path_table'table_background = Draw'path_table'table_background_true
					 |  Draw'path_table'table_background_false
				      deriving (Eq,Show)
data Draw'path_text'anchor_type = Draw'path_text'anchor_type_page
				   |  Draw'path_text'anchor_type_frame  | 
				  Draw'path_text'anchor_type_paragraph  | 
				  Draw'path_text'anchor_type_char  | 
				  Draw'path_text'anchor_type_as_char
				deriving (Eq,Show)
data Draw'circle = Draw'circle Draw'circle_Attrs
			       (Maybe Office'events)
			       [(OneOf3 Text'p Text'unordered_list Text'ordered_list)]
		 deriving (Eq,Show)
data Draw'circle_Attrs = Draw'circle_Attrs
    { draw'circleSvg'x :: (Maybe String)
    , draw'circleSvg'y :: (Maybe String)
    , draw'circleSvg'width :: (Maybe String)
    , draw'circleSvg'height :: (Maybe String)
    , draw'circleDraw'style_name :: (Maybe String)
    , draw'circlePresentation'style_name :: (Maybe String)
    , draw'circleDraw'text_style_name :: (Maybe String)
    , draw'circleDraw'transform :: (Maybe String)
    , draw'circleDraw'z_index :: (Maybe String)
    , draw'circleTable'end_cell_address :: (Maybe String)
    , draw'circleTable'end_x :: (Maybe String)
    , draw'circleTable'end_y :: (Maybe String)
    , draw'circleTable'table_background :: (Maybe Draw'circle_table'table_background)
    , draw'circleDraw'id :: (Maybe String)
    , draw'circleDraw'kind :: (Defaultable Draw'circle_draw'kind)
    , draw'circleDraw'start_angle :: (Maybe String)
    , draw'circleDraw'end_angle :: (Maybe String)
    , draw'circleText'anchor_type :: (Maybe Draw'circle_text'anchor_type)
    , draw'circleText'anchor_page_number :: (Maybe String)
    , draw'circleDraw'layer :: (Maybe String)
    } deriving (Eq,Show)
data Draw'circle_table'table_background = Draw'circle_table'table_background_true
					   |  Draw'circle_table'table_background_false
					deriving (Eq,Show)
data Draw'circle_draw'kind = Draw'circle_draw'kind_full  | 
			     Draw'circle_draw'kind_section  |  Draw'circle_draw'kind_cut  | 
			     Draw'circle_draw'kind_arc
			   deriving (Eq,Show)
data Draw'circle_text'anchor_type = Draw'circle_text'anchor_type_page
				     |  Draw'circle_text'anchor_type_frame  | 
				    Draw'circle_text'anchor_type_paragraph  | 
				    Draw'circle_text'anchor_type_char  | 
				    Draw'circle_text'anchor_type_as_char
				  deriving (Eq,Show)
data Draw'ellipse = Draw'ellipse Draw'ellipse_Attrs
				 (Maybe Office'events)
				 [(OneOf3 Text'p Text'unordered_list Text'ordered_list)]
		  deriving (Eq,Show)
data Draw'ellipse_Attrs = Draw'ellipse_Attrs
    { draw'ellipseSvg'x :: (Maybe String)
    , draw'ellipseSvg'y :: (Maybe String)
    , draw'ellipseSvg'width :: (Maybe String)
    , draw'ellipseSvg'height :: (Maybe String)
    , draw'ellipseDraw'style_name :: (Maybe String)
    , draw'ellipsePresentation'style_name :: (Maybe String)
    , draw'ellipseDraw'text_style_name :: (Maybe String)
    , draw'ellipseDraw'transform :: (Maybe String)
    , draw'ellipseDraw'z_index :: (Maybe String)
    , draw'ellipseTable'end_cell_address :: (Maybe String)
    , draw'ellipseTable'end_x :: (Maybe String)
    , draw'ellipseTable'end_y :: (Maybe String)
    , draw'ellipseTable'table_background :: (Maybe Draw'ellipse_table'table_background)
    , draw'ellipseDraw'id :: (Maybe String)
    , draw'ellipseDraw'kind :: (Defaultable Draw'ellipse_draw'kind)
    , draw'ellipseDraw'start_angle :: (Maybe String)
    , draw'ellipseDraw'end_angle :: (Maybe String)
    , draw'ellipseText'anchor_type :: (Maybe Draw'ellipse_text'anchor_type)
    , draw'ellipseText'anchor_page_number :: (Maybe String)
    , draw'ellipseDraw'layer :: (Maybe String)
    } deriving (Eq,Show)
data Draw'ellipse_table'table_background = Draw'ellipse_table'table_background_true
					    |  Draw'ellipse_table'table_background_false
					 deriving (Eq,Show)
data Draw'ellipse_draw'kind = Draw'ellipse_draw'kind_full  | 
			      Draw'ellipse_draw'kind_section  |  Draw'ellipse_draw'kind_cut  | 
			      Draw'ellipse_draw'kind_arc
			    deriving (Eq,Show)
data Draw'ellipse_text'anchor_type = Draw'ellipse_text'anchor_type_page
				      |  Draw'ellipse_text'anchor_type_frame  | 
				     Draw'ellipse_text'anchor_type_paragraph  | 
				     Draw'ellipse_text'anchor_type_char  | 
				     Draw'ellipse_text'anchor_type_as_char
				   deriving (Eq,Show)
data Draw'connector = Draw'connector Draw'connector_Attrs
				     (Maybe Office'events)
				     [(OneOf3 Text'p Text'unordered_list Text'ordered_list)]
		    deriving (Eq,Show)
data Draw'connector_Attrs = Draw'connector_Attrs
    { draw'connectorDraw'type :: (Defaultable Draw'connector_draw'type)
    , draw'connectorDraw'line_skew :: (Maybe String)
    , draw'connectorDraw'style_name :: (Maybe String)
    , draw'connectorPresentation'style_name :: (Maybe String)
    , draw'connectorDraw'text_style_name :: (Maybe String)
    , draw'connectorSvg'x1 :: String
    , draw'connectorSvg'y1 :: String
    , draw'connectorSvg'x2 :: String
    , draw'connectorSvg'y2 :: String
    , draw'connectorDraw'start_shape :: (Maybe String)
    , draw'connectorDraw'start_glue_point :: (Maybe String)
    , draw'connectorDraw'end_shape :: (Maybe String)
    , draw'connectorDraw'end_glue_point :: (Maybe String)
    , draw'connectorDraw'z_index :: (Maybe String)
    , draw'connectorTable'end_cell_address :: (Maybe String)
    , draw'connectorTable'end_x :: (Maybe String)
    , draw'connectorTable'end_y :: (Maybe String)
    , draw'connectorTable'table_background :: (Maybe Draw'connector_table'table_background)
    , draw'connectorDraw'id :: (Maybe String)
    , draw'connectorText'anchor_type :: (Maybe Draw'connector_text'anchor_type)
    , draw'connectorText'anchor_page_number :: (Maybe String)
    , draw'connectorDraw'layer :: (Maybe String)
    } deriving (Eq,Show)
data Draw'connector_draw'type = Draw'connector_draw'type_standard
				 |  Draw'connector_draw'type_lines  | 
				Draw'connector_draw'type_line  |  Draw'connector_draw'type_curve
			      deriving (Eq,Show)
data Draw'connector_table'table_background = Draw'connector_table'table_background_true
					      |  Draw'connector_table'table_background_false
					   deriving (Eq,Show)
data Draw'connector_text'anchor_type = Draw'connector_text'anchor_type_page
				        |  Draw'connector_text'anchor_type_frame  | 
				       Draw'connector_text'anchor_type_paragraph  | 
				       Draw'connector_text'anchor_type_char  | 
				       Draw'connector_text'anchor_type_as_char
				     deriving (Eq,Show)
data Draw'control = Draw'control
    { draw'controlDraw'style_name :: (Maybe String)
    , draw'controlPresentation'style_name :: (Maybe String)
    , draw'controlDraw'text_style_name :: (Maybe String)
    , draw'controlSvg'x :: (Maybe String)
    , draw'controlSvg'y :: (Maybe String)
    , draw'controlSvg'width :: (Maybe String)
    , draw'controlSvg'height :: (Maybe String)
    , draw'controlForm'id :: String
    , draw'controlDraw'z_index :: (Maybe String)
    , draw'controlTable'end_cell_address :: (Maybe String)
    , draw'controlTable'end_x :: (Maybe String)
    , draw'controlTable'end_y :: (Maybe String)
    , draw'controlTable'table_background :: (Maybe Draw'control_table'table_background)
    , draw'controlDraw'id :: (Maybe String)
    , draw'controlText'anchor_type :: (Maybe Draw'control_text'anchor_type)
    , draw'controlText'anchor_page_number :: (Maybe String)
    , draw'controlDraw'layer :: (Maybe String)
    } deriving (Eq,Show)
data Draw'control_table'table_background = Draw'control_table'table_background_true
					    |  Draw'control_table'table_background_false
					 deriving (Eq,Show)
data Draw'control_text'anchor_type = Draw'control_text'anchor_type_page
				      |  Draw'control_text'anchor_type_frame  | 
				     Draw'control_text'anchor_type_paragraph  | 
				     Draw'control_text'anchor_type_char  | 
				     Draw'control_text'anchor_type_as_char
				   deriving (Eq,Show)
data Draw'g = Draw'g Draw'g_Attrs (Maybe Office'events)
		     [((OneOf22 Draw'rect Draw'line Draw'polyline Draw'polygon Draw'path Draw'circle Draw'ellipse Draw'g Draw'page_thumbnail Draw'text_box Draw'image Draw'object Draw'object_ole Draw'applet Draw'floating_frame Draw'plugin Draw'measure Draw'caption Draw'connector Chart'chart Dr3d'scene Draw'control))]
	    deriving (Eq,Show)
data Draw'g_Attrs = Draw'g_Attrs
    { draw'gSvg'y :: (Maybe String)
    , draw'gDraw'transform :: (Maybe String)
    , draw'gDraw'name :: (Maybe String)
    , draw'gDraw'style_name :: (Maybe String)
    , draw'gPresentation'style_name :: (Maybe String)
    , draw'gDraw'text_style_name :: (Maybe String)
    , draw'gDraw'z_index :: (Maybe String)
    , draw'gTable'end_cell_address :: (Maybe String)
    , draw'gTable'end_x :: (Maybe String)
    , draw'gTable'end_y :: (Maybe String)
    , draw'gTable'table_background :: (Maybe Draw'g_table'table_background)
    , draw'gDraw'id :: (Maybe String)
    , draw'gText'anchor_type :: (Maybe Draw'g_text'anchor_type)
    , draw'gText'anchor_page_number :: (Maybe String)
    , draw'gDraw'layer :: (Maybe String)
    } deriving (Eq,Show)
data Draw'g_table'table_background = Draw'g_table'table_background_true
				      |  Draw'g_table'table_background_false
				   deriving (Eq,Show)
data Draw'g_text'anchor_type = Draw'g_text'anchor_type_page  | 
			       Draw'g_text'anchor_type_frame  |  Draw'g_text'anchor_type_paragraph
			        |  Draw'g_text'anchor_type_char  | 
			       Draw'g_text'anchor_type_as_char
			     deriving (Eq,Show)
data Draw'page_thumbnail = Draw'page_thumbnail
    { draw'page_thumbnailDraw'page_number :: (Maybe String)
    , draw'page_thumbnailSvg'x :: (Maybe String)
    , draw'page_thumbnailSvg'y :: (Maybe String)
    , draw'page_thumbnailSvg'width :: (Maybe String)
    , draw'page_thumbnailSvg'height :: (Maybe String)
    , draw'page_thumbnailDraw'style_name :: (Maybe String)
    , draw'page_thumbnailPresentation'style_name :: (Maybe String)
    , draw'page_thumbnailDraw'text_style_name :: (Maybe String)
    , draw'page_thumbnailPresentation'class :: (Maybe Draw'page_thumbnail_presentation'class)
    , draw'page_thumbnailPresentation'placeholder :: (Maybe Draw'page_thumbnail_presentation'placeholder)
    , draw'page_thumbnailPresentation'user_transformed :: (Maybe Draw'page_thumbnail_presentation'user_transformed)
    , draw'page_thumbnailDraw'z_index :: (Maybe String)
    , draw'page_thumbnailTable'end_cell_address :: (Maybe String)
    , draw'page_thumbnailTable'end_x :: (Maybe String)
    , draw'page_thumbnailTable'end_y :: (Maybe String)
    , draw'page_thumbnailTable'table_background :: (Maybe Draw'page_thumbnail_table'table_background)
    , draw'page_thumbnailDraw'id :: (Maybe String)
    , draw'page_thumbnailText'anchor_type :: (Maybe Draw'page_thumbnail_text'anchor_type)
    , draw'page_thumbnailText'anchor_page_number :: (Maybe String)
    , draw'page_thumbnailDraw'layer :: (Maybe String)
    } deriving (Eq,Show)
data Draw'page_thumbnail_presentation'class = Draw'page_thumbnail_presentation'class_title
					       |  Draw'page_thumbnail_presentation'class_outline  | 
					      Draw'page_thumbnail_presentation'class_subtitle  | 
					      Draw'page_thumbnail_presentation'class_text  | 
					      Draw'page_thumbnail_presentation'class_graphic  | 
					      Draw'page_thumbnail_presentation'class_object  | 
					      Draw'page_thumbnail_presentation'class_chart  | 
					      Draw'page_thumbnail_presentation'class_table  | 
					      Draw'page_thumbnail_presentation'class_orgchart  | 
					      Draw'page_thumbnail_presentation'class_page  | 
					      Draw'page_thumbnail_presentation'class_notes
					    deriving (Eq,Show)
data Draw'page_thumbnail_presentation'placeholder = Draw'page_thumbnail_presentation'placeholder_true
						     | 
						    Draw'page_thumbnail_presentation'placeholder_false
						  deriving (Eq,Show)
data Draw'page_thumbnail_presentation'user_transformed = Draw'page_thumbnail_presentation'user_transformed_true
							  | 
							 Draw'page_thumbnail_presentation'user_transformed_false
						       deriving (Eq,Show)
data Draw'page_thumbnail_table'table_background = Draw'page_thumbnail_table'table_background_true
						   | 
						  Draw'page_thumbnail_table'table_background_false
						deriving (Eq,Show)
data Draw'page_thumbnail_text'anchor_type = Draw'page_thumbnail_text'anchor_type_page
					     |  Draw'page_thumbnail_text'anchor_type_frame  | 
					    Draw'page_thumbnail_text'anchor_type_paragraph  | 
					    Draw'page_thumbnail_text'anchor_type_char  | 
					    Draw'page_thumbnail_text'anchor_type_as_char
					  deriving (Eq,Show)
data Draw'caption = Draw'caption Draw'caption_Attrs
				 (Maybe Office'events)
				 [(OneOf3 Text'p Text'unordered_list Text'ordered_list)]
		  deriving (Eq,Show)
data Draw'caption_Attrs = Draw'caption_Attrs
    { draw'captionSvg'x :: (Maybe String)
    , draw'captionSvg'y :: (Maybe String)
    , draw'captionTable'end_cell_address :: (Maybe String)
    , draw'captionTable'end_x :: (Maybe String)
    , draw'captionTable'end_y :: (Maybe String)
    , draw'captionTable'table_background :: (Maybe Draw'caption_table'table_background)
    , draw'captionSvg'width :: (Maybe String)
    , draw'captionSvg'height :: (Maybe String)
    , draw'captionDraw'style_name :: (Maybe String)
    , draw'captionPresentation'style_name :: (Maybe String)
    , draw'captionDraw'text_style_name :: (Maybe String)
    , draw'captionDraw'transform :: (Maybe String)
    , draw'captionDraw'caption_point_x :: (Maybe String)
    , draw'captionDraw'caption_point_y :: (Maybe String)
    , draw'captionDraw'z_index :: (Maybe String)
    , draw'captionDraw'id :: (Maybe String)
    , draw'captionText'anchor_type :: (Maybe Draw'caption_text'anchor_type)
    , draw'captionText'anchor_page_number :: (Maybe String)
    , draw'captionDraw'layer :: (Maybe String)
    , draw'captionDraw'corner_radius :: (Maybe String)
    } deriving (Eq,Show)
data Draw'caption_table'table_background = Draw'caption_table'table_background_true
					    |  Draw'caption_table'table_background_false
					 deriving (Eq,Show)
data Draw'caption_text'anchor_type = Draw'caption_text'anchor_type_page
				      |  Draw'caption_text'anchor_type_frame  | 
				     Draw'caption_text'anchor_type_paragraph  | 
				     Draw'caption_text'anchor_type_char  | 
				     Draw'caption_text'anchor_type_as_char
				   deriving (Eq,Show)
data Draw'measure = Draw'measure Draw'measure_Attrs
				 (Maybe Office'events)
				 [(OneOf3 Text'p Text'unordered_list Text'ordered_list)]
		  deriving (Eq,Show)
data Draw'measure_Attrs = Draw'measure_Attrs
    { draw'measureSvg'x1 :: String
    , draw'measureSvg'y1 :: String
    , draw'measureSvg'x2 :: String
    , draw'measureSvg'y2 :: String
    , draw'measureTable'end_cell_address :: (Maybe String)
    , draw'measureTable'end_x :: (Maybe String)
    , draw'measureTable'end_y :: (Maybe String)
    , draw'measureTable'table_background :: (Maybe Draw'measure_table'table_background)
    , draw'measureDraw'style_name :: (Maybe String)
    , draw'measurePresentation'style_name :: (Maybe String)
    , draw'measureDraw'text_style_name :: (Maybe String)
    , draw'measureDraw'transform :: (Maybe String)
    , draw'measureDraw'z_index :: (Maybe String)
    , draw'measureDraw'id :: (Maybe String)
    , draw'measureText'anchor_type :: (Maybe Draw'measure_text'anchor_type)
    , draw'measureText'anchor_page_number :: (Maybe String)
    , draw'measureDraw'layer :: (Maybe String)
    } deriving (Eq,Show)
data Draw'measure_table'table_background = Draw'measure_table'table_background_true
					    |  Draw'measure_table'table_background_false
					 deriving (Eq,Show)
data Draw'measure_text'anchor_type = Draw'measure_text'anchor_type_page
				      |  Draw'measure_text'anchor_type_frame  | 
				     Draw'measure_text'anchor_type_paragraph  | 
				     Draw'measure_text'anchor_type_char  | 
				     Draw'measure_text'anchor_type_as_char
				   deriving (Eq,Show)
data Draw'gradient = Draw'gradient
    { draw'gradientDraw'name :: String
    , draw'gradientDraw'style :: Draw'gradient_draw'style
    , draw'gradientDraw'cx :: (Maybe String)
    , draw'gradientDraw'cy :: (Maybe String)
    , draw'gradientDraw'start_color :: (Maybe String)
    , draw'gradientDraw'end_color :: (Maybe String)
    , draw'gradientDraw'start_intensity :: (Maybe String)
    , draw'gradientDraw'end_intensity :: (Maybe String)
    , draw'gradientDraw'angle :: (Maybe String)
    , draw'gradientDraw'border :: (Maybe String)
    } deriving (Eq,Show)
data Draw'gradient_draw'style = Draw'gradient_draw'style_linear  | 
				Draw'gradient_draw'style_axial  |  Draw'gradient_draw'style_radial
				 |  Draw'gradient_draw'style_ellipsoid  | 
				Draw'gradient_draw'style_square  | 
				Draw'gradient_draw'style_rectangular
			      deriving (Eq,Show)
data Draw'hatch = Draw'hatch
    { draw'hatchDraw'name :: String
    , draw'hatchDraw'style :: Draw'hatch_draw'style
    , draw'hatchDraw'color :: (Maybe String)
    , draw'hatchDraw'distance :: (Maybe String)
    , draw'hatchDraw'rotation :: (Maybe String)
    } deriving (Eq,Show)
data Draw'hatch_draw'style = Draw'hatch_draw'style_single  | 
			     Draw'hatch_draw'style_double  |  Draw'hatch_draw'style_triple
			   deriving (Eq,Show)
data Draw'fill_image = Draw'fill_image
    { draw'fill_imageDraw'name :: String
    , draw'fill_imageXlink'href :: String
    , draw'fill_imageXlink'type :: (Maybe Draw'fill_image_xlink'type)
    , draw'fill_imageXlink'show :: (Maybe Draw'fill_image_xlink'show)
    , draw'fill_imageXlink'actuate :: (Maybe Draw'fill_image_xlink'actuate)
    , draw'fill_imageSvg'width :: (Maybe String)
    , draw'fill_imageSvg'height :: (Maybe String)
    } deriving (Eq,Show)
data Draw'fill_image_xlink'type = Draw'fill_image_xlink'type_simple
				deriving (Eq,Show)
data Draw'fill_image_xlink'show = Draw'fill_image_xlink'show_embed
				deriving (Eq,Show)
data Draw'fill_image_xlink'actuate = Draw'fill_image_xlink'actuate_onLoad
				   deriving (Eq,Show)
data Draw'transparency = Draw'transparency
    { draw'transparencyDraw'name :: String
    , draw'transparencyDraw'style :: Draw'transparency_draw'style
    , draw'transparencyDraw'cx :: (Maybe String)
    , draw'transparencyDraw'cy :: (Maybe String)
    , draw'transparencyDraw'start :: (Maybe String)
    , draw'transparencyDraw'end :: (Maybe String)
    , draw'transparencyDraw'angle :: (Maybe String)
    , draw'transparencyDraw'border :: (Maybe String)
    } deriving (Eq,Show)
data Draw'transparency_draw'style = Draw'transparency_draw'style_linear
				     |  Draw'transparency_draw'style_axial  | 
				    Draw'transparency_draw'style_radial  | 
				    Draw'transparency_draw'style_ellipsoid  | 
				    Draw'transparency_draw'style_square  | 
				    Draw'transparency_draw'style_rectangular
				  deriving (Eq,Show)
data Draw'marker = Draw'marker
    { draw'markerDraw'name :: String
    , draw'markerSvg'viewBox :: String
    , draw'markerSvg'd :: String
    } deriving (Eq,Show)
data Draw'stroke_dash = Draw'stroke_dash
    { draw'stroke_dashDraw'name :: String
    , draw'stroke_dashDraw'style :: (Maybe Draw'stroke_dash_draw'style)
    , draw'stroke_dashDraw'dots1 :: (Maybe String)
    , draw'stroke_dashDraw'dots1_length :: (Maybe String)
    , draw'stroke_dashDraw'dots2 :: (Maybe String)
    , draw'stroke_dashDraw'dots2_length :: (Maybe String)
    , draw'stroke_dashDraw'distance :: (Maybe String)
    } deriving (Eq,Show)
data Draw'stroke_dash_draw'style = Draw'stroke_dash_draw'style_rect
				    |  Draw'stroke_dash_draw'style_round
				 deriving (Eq,Show)
data Presentation'sound = Presentation'sound
    { presentation'soundXlink'href :: String
    , presentation'soundXlink'type :: (Defaultable Presentation'sound_xlink'type)
    , presentation'soundXlink'show :: (Maybe Presentation'sound_xlink'show)
    , presentation'soundXlink'actuate :: (Defaultable Presentation'sound_xlink'actuate)
    , presentation'soundPresentation'play_full :: (Maybe String)
    } deriving (Eq,Show)
data Presentation'sound_xlink'type = Presentation'sound_xlink'type_simple
				   deriving (Eq,Show)
data Presentation'sound_xlink'show = Presentation'sound_xlink'show_new
				      |  Presentation'sound_xlink'show_replace
				   deriving (Eq,Show)
data Presentation'sound_xlink'actuate = Presentation'sound_xlink'actuate_onRequest
				      deriving (Eq,Show)
data Presentation'show_shape = Presentation'show_shape Presentation'show_shape_Attrs
						       (Maybe Presentation'sound)
			     deriving (Eq,Show)
data Presentation'show_shape_Attrs = Presentation'show_shape_Attrs
    { presentation'show_shapeDraw'shape_id :: String
    , presentation'show_shapePresentation'effect :: (Defaultable Presentation'show_shape_presentation'effect)
    , presentation'show_shapePresentation'direction :: (Defaultable Presentation'show_shape_presentation'direction)
    , presentation'show_shapePresentation'speed :: (Defaultable Presentation'show_shape_presentation'speed)
    , presentation'show_shapePresentation'start_scale :: (Defaultable String)
    , presentation'show_shapePresentation'path_id :: (Maybe String)
    } deriving (Eq,Show)
data Presentation'show_shape_presentation'effect = Presentation'show_shape_presentation'effect_none
						    | 
						   Presentation'show_shape_presentation'effect_fade
						    | 
						   Presentation'show_shape_presentation'effect_move
						    | 
						   Presentation'show_shape_presentation'effect_stripes
						    | 
						   Presentation'show_shape_presentation'effect_open
						    | 
						   Presentation'show_shape_presentation'effect_close
						    | 
						   Presentation'show_shape_presentation'effect_dissolve
						    | 
						   Presentation'show_shape_presentation'effect_wavyline
						    | 
						   Presentation'show_shape_presentation'effect_random
						    | 
						   Presentation'show_shape_presentation'effect_lines
						    | 
						   Presentation'show_shape_presentation'effect_laser
						    | 
						   Presentation'show_shape_presentation'effect_appear
						    | 
						   Presentation'show_shape_presentation'effect_hide
						    | 
						   Presentation'show_shape_presentation'effect_move_short
						    | 
						   Presentation'show_shape_presentation'effect_checkerboard
						    | 
						   Presentation'show_shape_presentation'effect_rotate
						    | 
						   Presentation'show_shape_presentation'effect_stretch
						 deriving (Eq,Show)
data Presentation'show_shape_presentation'direction = Presentation'show_shape_presentation'direction_none
						       | 
						      Presentation'show_shape_presentation'direction_from_left
						       | 
						      Presentation'show_shape_presentation'direction_from_top
						       | 
						      Presentation'show_shape_presentation'direction_from_right
						       | 
						      Presentation'show_shape_presentation'direction_from_bottom
						       | 
						      Presentation'show_shape_presentation'direction_from_center
						       | 
						      Presentation'show_shape_presentation'direction_from_upper_left
						       | 
						      Presentation'show_shape_presentation'direction_from_upper_right
						       | 
						      Presentation'show_shape_presentation'direction_from_lower_left
						       | 
						      Presentation'show_shape_presentation'direction_from_lower_right
						       | 
						      Presentation'show_shape_presentation'direction_to_left
						       | 
						      Presentation'show_shape_presentation'direction_to_top
						       | 
						      Presentation'show_shape_presentation'direction_to_right
						       | 
						      Presentation'show_shape_presentation'direction_to_bottom
						       | 
						      Presentation'show_shape_presentation'direction_to_upper_left
						       | 
						      Presentation'show_shape_presentation'direction_to_upper_right
						       | 
						      Presentation'show_shape_presentation'direction_to_lower_right
						       | 
						      Presentation'show_shape_presentation'direction_to_lower_left
						       | 
						      Presentation'show_shape_presentation'direction_path
						       | 
						      Presentation'show_shape_presentation'direction_spiral_inward_left
						       | 
						      Presentation'show_shape_presentation'direction_spiral_inward_right
						       | 
						      Presentation'show_shape_presentation'direction_spiral_outward_left
						       | 
						      Presentation'show_shape_presentation'direction_spiral_outward_right
						       | 
						      Presentation'show_shape_presentation'direction_vertical
						       | 
						      Presentation'show_shape_presentation'direction_horizontal
						       | 
						      Presentation'show_shape_presentation'direction_to_center
						       | 
						      Presentation'show_shape_presentation'direction_clockwise
						       | 
						      Presentation'show_shape_presentation'direction_counter_clockwise
						    deriving (Eq,Show)
data Presentation'show_shape_presentation'speed = Presentation'show_shape_presentation'speed_slow
						   | 
						  Presentation'show_shape_presentation'speed_medium
						   | 
						  Presentation'show_shape_presentation'speed_fast
						deriving (Eq,Show)
data Presentation'show_text = Presentation'show_text Presentation'show_text_Attrs
						     (Maybe Presentation'sound)
			    deriving (Eq,Show)
data Presentation'show_text_Attrs = Presentation'show_text_Attrs
    { presentation'show_textDraw'shape_id :: String
    , presentation'show_textPresentation'effect :: (Defaultable Presentation'show_text_presentation'effect)
    , presentation'show_textPresentation'direction :: (Defaultable Presentation'show_text_presentation'direction)
    , presentation'show_textPresentation'speed :: (Defaultable Presentation'show_text_presentation'speed)
    , presentation'show_textPresentation'start_scale :: (Defaultable String)
    , presentation'show_textPresentation'path_id :: (Maybe String)
    } deriving (Eq,Show)
data Presentation'show_text_presentation'effect = Presentation'show_text_presentation'effect_none
						   | 
						  Presentation'show_text_presentation'effect_fade
						   | 
						  Presentation'show_text_presentation'effect_move
						   | 
						  Presentation'show_text_presentation'effect_stripes
						   | 
						  Presentation'show_text_presentation'effect_open
						   | 
						  Presentation'show_text_presentation'effect_close
						   | 
						  Presentation'show_text_presentation'effect_dissolve
						   | 
						  Presentation'show_text_presentation'effect_wavyline
						   | 
						  Presentation'show_text_presentation'effect_random
						   | 
						  Presentation'show_text_presentation'effect_lines
						   | 
						  Presentation'show_text_presentation'effect_laser
						   | 
						  Presentation'show_text_presentation'effect_appear
						   | 
						  Presentation'show_text_presentation'effect_hide
						   | 
						  Presentation'show_text_presentation'effect_move_short
						   | 
						  Presentation'show_text_presentation'effect_checkerboard
						   | 
						  Presentation'show_text_presentation'effect_rotate
						   | 
						  Presentation'show_text_presentation'effect_stretch
						deriving (Eq,Show)
data Presentation'show_text_presentation'direction = Presentation'show_text_presentation'direction_none
						      | 
						     Presentation'show_text_presentation'direction_from_left
						      | 
						     Presentation'show_text_presentation'direction_from_top
						      | 
						     Presentation'show_text_presentation'direction_from_right
						      | 
						     Presentation'show_text_presentation'direction_from_bottom
						      | 
						     Presentation'show_text_presentation'direction_from_center
						      | 
						     Presentation'show_text_presentation'direction_from_upper_left
						      | 
						     Presentation'show_text_presentation'direction_from_upper_right
						      | 
						     Presentation'show_text_presentation'direction_from_lower_left
						      | 
						     Presentation'show_text_presentation'direction_from_lower_right
						      | 
						     Presentation'show_text_presentation'direction_to_left
						      | 
						     Presentation'show_text_presentation'direction_to_top
						      | 
						     Presentation'show_text_presentation'direction_to_right
						      | 
						     Presentation'show_text_presentation'direction_to_bottom
						      | 
						     Presentation'show_text_presentation'direction_to_upper_left
						      | 
						     Presentation'show_text_presentation'direction_to_upper_right
						      | 
						     Presentation'show_text_presentation'direction_to_lower_right
						      | 
						     Presentation'show_text_presentation'direction_to_lower_left
						      | 
						     Presentation'show_text_presentation'direction_path
						      | 
						     Presentation'show_text_presentation'direction_spiral_inward_left
						      | 
						     Presentation'show_text_presentation'direction_spiral_inward_right
						      | 
						     Presentation'show_text_presentation'direction_spiral_outward_left
						      | 
						     Presentation'show_text_presentation'direction_spiral_outward_right
						      | 
						     Presentation'show_text_presentation'direction_vertical
						      | 
						     Presentation'show_text_presentation'direction_horizontal
						      | 
						     Presentation'show_text_presentation'direction_to_center
						      | 
						     Presentation'show_text_presentation'direction_clockwise
						      | 
						     Presentation'show_text_presentation'direction_counter_clockwise
						   deriving (Eq,Show)
data Presentation'show_text_presentation'speed = Presentation'show_text_presentation'speed_slow
						  | 
						 Presentation'show_text_presentation'speed_medium
						  |  Presentation'show_text_presentation'speed_fast
					       deriving (Eq,Show)
data Presentation'hide_shape = Presentation'hide_shape Presentation'hide_shape_Attrs
						       (Maybe Presentation'sound)
			     deriving (Eq,Show)
data Presentation'hide_shape_Attrs = Presentation'hide_shape_Attrs
    { presentation'hide_shapeDraw'shape_id :: String
    , presentation'hide_shapePresentation'effect :: (Defaultable Presentation'hide_shape_presentation'effect)
    , presentation'hide_shapePresentation'direction :: (Defaultable Presentation'hide_shape_presentation'direction)
    , presentation'hide_shapePresentation'speed :: (Defaultable Presentation'hide_shape_presentation'speed)
    , presentation'hide_shapePresentation'start_scale :: (Defaultable String)
    , presentation'hide_shapePresentation'path_id :: (Maybe String)
    } deriving (Eq,Show)
data Presentation'hide_shape_presentation'effect = Presentation'hide_shape_presentation'effect_none
						    | 
						   Presentation'hide_shape_presentation'effect_fade
						    | 
						   Presentation'hide_shape_presentation'effect_move
						    | 
						   Presentation'hide_shape_presentation'effect_stripes
						    | 
						   Presentation'hide_shape_presentation'effect_open
						    | 
						   Presentation'hide_shape_presentation'effect_close
						    | 
						   Presentation'hide_shape_presentation'effect_dissolve
						    | 
						   Presentation'hide_shape_presentation'effect_wavyline
						    | 
						   Presentation'hide_shape_presentation'effect_random
						    | 
						   Presentation'hide_shape_presentation'effect_lines
						    | 
						   Presentation'hide_shape_presentation'effect_laser
						    | 
						   Presentation'hide_shape_presentation'effect_appear
						    | 
						   Presentation'hide_shape_presentation'effect_hide
						    | 
						   Presentation'hide_shape_presentation'effect_move_short
						    | 
						   Presentation'hide_shape_presentation'effect_checkerboard
						    | 
						   Presentation'hide_shape_presentation'effect_rotate
						    | 
						   Presentation'hide_shape_presentation'effect_stretch
						 deriving (Eq,Show)
data Presentation'hide_shape_presentation'direction = Presentation'hide_shape_presentation'direction_none
						       | 
						      Presentation'hide_shape_presentation'direction_from_left
						       | 
						      Presentation'hide_shape_presentation'direction_from_top
						       | 
						      Presentation'hide_shape_presentation'direction_from_right
						       | 
						      Presentation'hide_shape_presentation'direction_from_bottom
						       | 
						      Presentation'hide_shape_presentation'direction_from_center
						       | 
						      Presentation'hide_shape_presentation'direction_from_upper_left
						       | 
						      Presentation'hide_shape_presentation'direction_from_upper_right
						       | 
						      Presentation'hide_shape_presentation'direction_from_lower_left
						       | 
						      Presentation'hide_shape_presentation'direction_from_lower_right
						       | 
						      Presentation'hide_shape_presentation'direction_to_left
						       | 
						      Presentation'hide_shape_presentation'direction_to_top
						       | 
						      Presentation'hide_shape_presentation'direction_to_right
						       | 
						      Presentation'hide_shape_presentation'direction_to_bottom
						       | 
						      Presentation'hide_shape_presentation'direction_to_upper_left
						       | 
						      Presentation'hide_shape_presentation'direction_to_upper_right
						       | 
						      Presentation'hide_shape_presentation'direction_to_lower_right
						       | 
						      Presentation'hide_shape_presentation'direction_to_lower_left
						       | 
						      Presentation'hide_shape_presentation'direction_path
						       | 
						      Presentation'hide_shape_presentation'direction_spiral_inward_left
						       | 
						      Presentation'hide_shape_presentation'direction_spiral_inward_right
						       | 
						      Presentation'hide_shape_presentation'direction_spiral_outward_left
						       | 
						      Presentation'hide_shape_presentation'direction_spiral_outward_right
						       | 
						      Presentation'hide_shape_presentation'direction_vertical
						       | 
						      Presentation'hide_shape_presentation'direction_horizontal
						       | 
						      Presentation'hide_shape_presentation'direction_to_center
						       | 
						      Presentation'hide_shape_presentation'direction_clockwise
						       | 
						      Presentation'hide_shape_presentation'direction_counter_clockwise
						    deriving (Eq,Show)
data Presentation'hide_shape_presentation'speed = Presentation'hide_shape_presentation'speed_slow
						   | 
						  Presentation'hide_shape_presentation'speed_medium
						   | 
						  Presentation'hide_shape_presentation'speed_fast
						deriving (Eq,Show)
data Presentation'hide_text = Presentation'hide_text Presentation'hide_text_Attrs
						     (Maybe Presentation'sound)
			    deriving (Eq,Show)
data Presentation'hide_text_Attrs = Presentation'hide_text_Attrs
    { presentation'hide_textDraw'shape_id :: String
    , presentation'hide_textPresentation'effect :: (Defaultable Presentation'hide_text_presentation'effect)
    , presentation'hide_textPresentation'direction :: (Defaultable Presentation'hide_text_presentation'direction)
    , presentation'hide_textPresentation'speed :: (Defaultable Presentation'hide_text_presentation'speed)
    , presentation'hide_textPresentation'start_scale :: (Defaultable String)
    , presentation'hide_textPresentation'path_id :: (Maybe String)
    } deriving (Eq,Show)
data Presentation'hide_text_presentation'effect = Presentation'hide_text_presentation'effect_none
						   | 
						  Presentation'hide_text_presentation'effect_fade
						   | 
						  Presentation'hide_text_presentation'effect_move
						   | 
						  Presentation'hide_text_presentation'effect_stripes
						   | 
						  Presentation'hide_text_presentation'effect_open
						   | 
						  Presentation'hide_text_presentation'effect_close
						   | 
						  Presentation'hide_text_presentation'effect_dissolve
						   | 
						  Presentation'hide_text_presentation'effect_wavyline
						   | 
						  Presentation'hide_text_presentation'effect_random
						   | 
						  Presentation'hide_text_presentation'effect_lines
						   | 
						  Presentation'hide_text_presentation'effect_laser
						   | 
						  Presentation'hide_text_presentation'effect_appear
						   | 
						  Presentation'hide_text_presentation'effect_hide
						   | 
						  Presentation'hide_text_presentation'effect_move_short
						   | 
						  Presentation'hide_text_presentation'effect_checkerboard
						   | 
						  Presentation'hide_text_presentation'effect_rotate
						   | 
						  Presentation'hide_text_presentation'effect_stretch
						deriving (Eq,Show)
data Presentation'hide_text_presentation'direction = Presentation'hide_text_presentation'direction_none
						      | 
						     Presentation'hide_text_presentation'direction_from_left
						      | 
						     Presentation'hide_text_presentation'direction_from_top
						      | 
						     Presentation'hide_text_presentation'direction_from_right
						      | 
						     Presentation'hide_text_presentation'direction_from_bottom
						      | 
						     Presentation'hide_text_presentation'direction_from_center
						      | 
						     Presentation'hide_text_presentation'direction_from_upper_left
						      | 
						     Presentation'hide_text_presentation'direction_from_upper_right
						      | 
						     Presentation'hide_text_presentation'direction_from_lower_left
						      | 
						     Presentation'hide_text_presentation'direction_from_lower_right
						      | 
						     Presentation'hide_text_presentation'direction_to_left
						      | 
						     Presentation'hide_text_presentation'direction_to_top
						      | 
						     Presentation'hide_text_presentation'direction_to_right
						      | 
						     Presentation'hide_text_presentation'direction_to_bottom
						      | 
						     Presentation'hide_text_presentation'direction_to_upper_left
						      | 
						     Presentation'hide_text_presentation'direction_to_upper_right
						      | 
						     Presentation'hide_text_presentation'direction_to_lower_right
						      | 
						     Presentation'hide_text_presentation'direction_to_lower_left
						      | 
						     Presentation'hide_text_presentation'direction_path
						      | 
						     Presentation'hide_text_presentation'direction_spiral_inward_left
						      | 
						     Presentation'hide_text_presentation'direction_spiral_inward_right
						      | 
						     Presentation'hide_text_presentation'direction_spiral_outward_left
						      | 
						     Presentation'hide_text_presentation'direction_spiral_outward_right
						      | 
						     Presentation'hide_text_presentation'direction_vertical
						      | 
						     Presentation'hide_text_presentation'direction_horizontal
						      | 
						     Presentation'hide_text_presentation'direction_to_center
						      | 
						     Presentation'hide_text_presentation'direction_clockwise
						      | 
						     Presentation'hide_text_presentation'direction_counter_clockwise
						   deriving (Eq,Show)
data Presentation'hide_text_presentation'speed = Presentation'hide_text_presentation'speed_slow
						  | 
						 Presentation'hide_text_presentation'speed_medium
						  |  Presentation'hide_text_presentation'speed_fast
					       deriving (Eq,Show)
data Presentation'dim = Presentation'dim Presentation'dim_Attrs
					 (Maybe Presentation'sound)
		      deriving (Eq,Show)
data Presentation'dim_Attrs = Presentation'dim_Attrs
    { presentation'dimDraw'shape_id :: String
    , presentation'dimDraw'color :: String
    } deriving (Eq,Show)
data Presentation'play = Presentation'play
    { presentation'playDraw'shape_id :: String
    , presentation'playPresentation'speed :: (Defaultable Presentation'play_presentation'speed)
    } deriving (Eq,Show)
data Presentation'play_presentation'speed = Presentation'play_presentation'speed_slow
					     |  Presentation'play_presentation'speed_medium  | 
					    Presentation'play_presentation'speed_fast
					  deriving (Eq,Show)
newtype Presentation'animations = Presentation'animations [Presentation'animations_] 		deriving (Eq,Show)
data Presentation'animations_ = Presentation'animations_Presentation'show_shape Presentation'show_shape
			      | Presentation'animations_Presentation'show_text Presentation'show_text
			      | Presentation'animations_Presentation'hide_shape Presentation'hide_shape
			      | Presentation'animations_Presentation'hide_text Presentation'hide_text
			      | Presentation'animations_Presentation'dim Presentation'dim
			      | Presentation'animations_Presentation'play Presentation'play
			      deriving (Eq,Show)
data Presentation'show = Presentation'show
    { presentation'showPresentation'name :: String
    , presentation'showPresentation'pages :: String
    } deriving (Eq,Show)
data Presentation'settings = Presentation'settings Presentation'settings_Attrs
						   [Presentation'show]
			   deriving (Eq,Show)
data Presentation'settings_Attrs = Presentation'settings_Attrs
    { presentation'settingsPresentation'start_page :: (Maybe String)
    , presentation'settingsPresentation'show :: (Maybe String)
    , presentation'settingsPresentation'full_screen :: (Defaultable String)
    , presentation'settingsPresentation'endless :: (Defaultable String)
    , presentation'settingsPresentation'pause :: (Maybe String)
    , presentation'settingsPresentation'show_logo :: (Defaultable String)
    , presentation'settingsPresentation'force_manual :: (Defaultable String)
    , presentation'settingsPresentation'mouse_visible :: (Defaultable String)
    , presentation'settingsPresentation'mouse_as_pen :: (Defaultable String)
    , presentation'settingsPresentation'start_with_navigator :: (Defaultable String)
    , presentation'settingsPresentation'animations :: (Defaultable Presentation'settings_presentation'animations)
    , presentation'settingsPresentation'stay_on_top :: (Defaultable String)
    , presentation'settingsPresentation'transition_on_click :: (Defaultable Presentation'settings_presentation'transition_on_click)
    } deriving (Eq,Show)
data Presentation'settings_presentation'animations = Presentation'settings_presentation'animations_enabled
						      | 
						     Presentation'settings_presentation'animations_disabled
						   deriving (Eq,Show)
data Presentation'settings_presentation'transition_on_click = Presentation'settings_presentation'transition_on_click_enabled
							       | 
							      Presentation'settings_presentation'transition_on_click_disabled
							    deriving (Eq,Show)
data Draw'page = Draw'page Draw'page_Attrs (Maybe Office'forms)
			   [((OneOf22 Draw'rect Draw'line Draw'polyline Draw'polygon Draw'path Draw'circle Draw'ellipse Draw'g Draw'page_thumbnail Draw'text_box Draw'image Draw'object Draw'object_ole Draw'applet Draw'floating_frame Draw'plugin Draw'measure Draw'caption Draw'connector Chart'chart Dr3d'scene Draw'control))]
			   (Maybe Presentation'animations) (Maybe Presentation'notes)
	       deriving (Eq,Show)
data Draw'page_Attrs = Draw'page_Attrs
    { draw'pageDraw'name :: (Maybe String)
    , draw'pageDraw'style_name :: (Maybe String)
    , draw'pageDraw'master_page_name :: String
    , draw'pagePresentation'presentation_page_layout_name :: (Maybe String)
    , draw'pageDraw'id :: (Maybe String)
    , draw'pageXlink'href :: (Maybe String)
    , draw'pageXlink'type :: (Maybe Draw'page_xlink'type)
    , draw'pageXlink'show :: (Maybe Draw'page_xlink'show)
    , draw'pageXlink'actuate :: (Maybe Draw'page_xlink'actuate)
    } deriving (Eq,Show)
data Draw'page_xlink'type = Draw'page_xlink'type_simple
			  deriving (Eq,Show)
data Draw'page_xlink'show = Draw'page_xlink'show_replace
			  deriving (Eq,Show)
data Draw'page_xlink'actuate = Draw'page_xlink'actuate_onRequest
			     deriving (Eq,Show)
data Presentation'notes = Presentation'notes Presentation'notes_Attrs
					     [(OneOf22 Draw'rect Draw'line Draw'polyline Draw'polygon Draw'path Draw'circle Draw'ellipse Draw'g Draw'page_thumbnail Draw'text_box Draw'image Draw'object Draw'object_ole Draw'applet Draw'floating_frame Draw'plugin Draw'measure Draw'caption Draw'connector Chart'chart Dr3d'scene Draw'control)]
			deriving (Eq,Show)
data Presentation'notes_Attrs = Presentation'notes_Attrs
    { presentation'notesStyle'page_master_name :: (Maybe String)
    } deriving (Eq,Show)
data Style'presentation_page_layout = Style'presentation_page_layout Style'presentation_page_layout_Attrs
								     [Presentation'placeholder]
				    deriving (Eq,Show)
data Style'presentation_page_layout_Attrs = Style'presentation_page_layout_Attrs
    { style'presentation_page_layoutStyle'name :: String
    } deriving (Eq,Show)
data Presentation'placeholder = Presentation'placeholder
    { presentation'placeholderPresentation'object :: Presentation'placeholder_presentation'object
    , presentation'placeholderSvg'x :: String
    , presentation'placeholderSvg'y :: String
    , presentation'placeholderSvg'width :: String
    , presentation'placeholderSvg'height :: String
    } deriving (Eq,Show)
data Presentation'placeholder_presentation'object = Presentation'placeholder_presentation'object_title
						     | 
						    Presentation'placeholder_presentation'object_outline
						     | 
						    Presentation'placeholder_presentation'object_subtitle
						     | 
						    Presentation'placeholder_presentation'object_text
						     | 
						    Presentation'placeholder_presentation'object_graphic
						     | 
						    Presentation'placeholder_presentation'object_object
						     | 
						    Presentation'placeholder_presentation'object_chart
						     | 
						    Presentation'placeholder_presentation'object_orgchart
						     | 
						    Presentation'placeholder_presentation'object_page
						     | 
						    Presentation'placeholder_presentation'object_notes
						     | 
						    Presentation'placeholder_presentation'object_handout
						  deriving (Eq,Show)
data Draw'text_box = Draw'text_box Draw'text_box_Attrs
				   (Maybe Office'events) (Maybe Draw'image_map)
				   [(OneOf17 Text'h Text'p Text'ordered_list Text'unordered_list Table'table Text'section Text'table_of_content Text'illustration_index Text'table_index Text'object_index Text'user_index Text'alphabetical_index Text'bibliography Text'index_title Text'change Text'change_start Text'change_end)]
		   deriving (Eq,Show)
data Draw'text_box_Attrs = Draw'text_box_Attrs
    { draw'text_boxDraw'style_name :: (Maybe String)
    , draw'text_boxPresentation'style_name :: (Maybe String)
    , draw'text_boxDraw'text_style_name :: (Maybe String)
    , draw'text_boxDraw'transform :: (Maybe String)
    , draw'text_boxDraw'name :: (Maybe String)
    , draw'text_boxDraw'chain_next_name :: (Maybe String)
    , draw'text_boxText'anchor_type :: (Maybe Draw'text_box_text'anchor_type)
    , draw'text_boxText'anchor_page_number :: (Maybe String)
    , draw'text_boxSvg'x :: (Maybe String)
    , draw'text_boxSvg'y :: (Maybe String)
    , draw'text_boxTable'end_cell_address :: (Maybe String)
    , draw'text_boxTable'end_x :: (Maybe String)
    , draw'text_boxTable'end_y :: (Maybe String)
    , draw'text_boxTable'table_background :: (Maybe Draw'text_box_table'table_background)
    , draw'text_boxSvg'width :: (Maybe String)
    , draw'text_boxSvg'height :: (Maybe String)
    , draw'text_boxStyle'rel_width :: (Maybe String)
    , draw'text_boxStyle'rel_height :: (Maybe String)
    , draw'text_boxFo'min_height :: (Maybe String)
    , draw'text_boxDraw'z_index :: (Maybe String)
    , draw'text_boxPresentation'class :: (Maybe Draw'text_box_presentation'class)
    , draw'text_boxPresentation'placeholder :: (Maybe Draw'text_box_presentation'placeholder)
    , draw'text_boxPresentation'user_transformed :: (Maybe Draw'text_box_presentation'user_transformed)
    , draw'text_boxDraw'id :: (Maybe String)
    , draw'text_boxDraw'layer :: (Maybe String)
    , draw'text_boxDraw'corner_radius :: (Maybe String)
    } deriving (Eq,Show)
data Draw'text_box_text'anchor_type = Draw'text_box_text'anchor_type_page
				       |  Draw'text_box_text'anchor_type_frame  | 
				      Draw'text_box_text'anchor_type_paragraph  | 
				      Draw'text_box_text'anchor_type_char  | 
				      Draw'text_box_text'anchor_type_as_char
				    deriving (Eq,Show)
data Draw'text_box_table'table_background = Draw'text_box_table'table_background_true
					     |  Draw'text_box_table'table_background_false
					  deriving (Eq,Show)
data Draw'text_box_presentation'class = Draw'text_box_presentation'class_title
					 |  Draw'text_box_presentation'class_outline  | 
					Draw'text_box_presentation'class_subtitle  | 
					Draw'text_box_presentation'class_text  | 
					Draw'text_box_presentation'class_graphic  | 
					Draw'text_box_presentation'class_object  | 
					Draw'text_box_presentation'class_chart  | 
					Draw'text_box_presentation'class_table  | 
					Draw'text_box_presentation'class_orgchart  | 
					Draw'text_box_presentation'class_page  | 
					Draw'text_box_presentation'class_notes
				      deriving (Eq,Show)
data Draw'text_box_presentation'placeholder = Draw'text_box_presentation'placeholder_true
					       |  Draw'text_box_presentation'placeholder_false
					    deriving (Eq,Show)
data Draw'text_box_presentation'user_transformed = Draw'text_box_presentation'user_transformed_true
						    | 
						   Draw'text_box_presentation'user_transformed_false
						 deriving (Eq,Show)
data Draw'image = Draw'image Draw'image_Attrs
			     (Maybe Office'binary_data) (Maybe Office'events)
			     (Maybe Draw'image_map) (Maybe Svg'desc)
			     (Maybe (OneOf2 Draw'contour_polygon Draw'contour_path))
		deriving (Eq,Show)
data Draw'image_Attrs = Draw'image_Attrs
    { draw'imageDraw'transform :: (Maybe String)
    , draw'imageDraw'style_name :: (Maybe String)
    , draw'imagePresentation'style_name :: (Maybe String)
    , draw'imageDraw'text_style_name :: (Maybe String)
    , draw'imageDraw'name :: (Maybe String)
    , draw'imageXlink'href :: (Maybe String)
    , draw'imageXlink'type :: (Maybe Draw'image_xlink'type)
    , draw'imageXlink'show :: (Maybe Draw'image_xlink'show)
    , draw'imageXlink'actuate :: (Maybe Draw'image_xlink'actuate)
    , draw'imageDraw'filter_name :: (Maybe String)
    , draw'imageText'anchor_type :: (Maybe Draw'image_text'anchor_type)
    , draw'imageText'anchor_page_number :: (Maybe String)
    , draw'imageSvg'x :: (Maybe String)
    , draw'imageSvg'y :: (Maybe String)
    , draw'imageTable'end_cell_address :: (Maybe String)
    , draw'imageTable'end_x :: (Maybe String)
    , draw'imageTable'end_y :: (Maybe String)
    , draw'imageTable'table_background :: (Maybe Draw'image_table'table_background)
    , draw'imageSvg'width :: (Maybe String)
    , draw'imageSvg'height :: (Maybe String)
    , draw'imagePresentation'class :: (Maybe Draw'image_presentation'class)
    , draw'imagePresentation'placeholder :: (Maybe Draw'image_presentation'placeholder)
    , draw'imagePresentation'user_transformed :: (Maybe Draw'image_presentation'user_transformed)
    , draw'imageDraw'z_index :: (Maybe String)
    , draw'imageDraw'id :: (Maybe String)
    , draw'imageDraw'layer :: (Maybe String)
    , draw'imageStyle'rel_width :: (Maybe String)
    , draw'imageStyle'rel_height :: (Maybe String)
    } deriving (Eq,Show)
data Draw'image_xlink'type = Draw'image_xlink'type_simple
			   deriving (Eq,Show)
data Draw'image_xlink'show = Draw'image_xlink'show_embed
			   deriving (Eq,Show)
data Draw'image_xlink'actuate = Draw'image_xlink'actuate_onLoad
			      deriving (Eq,Show)
data Draw'image_text'anchor_type = Draw'image_text'anchor_type_page
				    |  Draw'image_text'anchor_type_frame  | 
				   Draw'image_text'anchor_type_paragraph  | 
				   Draw'image_text'anchor_type_char  | 
				   Draw'image_text'anchor_type_as_char
				 deriving (Eq,Show)
data Draw'image_table'table_background = Draw'image_table'table_background_true
					  |  Draw'image_table'table_background_false
				       deriving (Eq,Show)
data Draw'image_presentation'class = Draw'image_presentation'class_title
				      |  Draw'image_presentation'class_outline  | 
				     Draw'image_presentation'class_subtitle  | 
				     Draw'image_presentation'class_text  | 
				     Draw'image_presentation'class_graphic  | 
				     Draw'image_presentation'class_object  | 
				     Draw'image_presentation'class_chart  | 
				     Draw'image_presentation'class_table  | 
				     Draw'image_presentation'class_orgchart  | 
				     Draw'image_presentation'class_page  | 
				     Draw'image_presentation'class_notes
				   deriving (Eq,Show)
data Draw'image_presentation'placeholder = Draw'image_presentation'placeholder_true
					    |  Draw'image_presentation'placeholder_false
					 deriving (Eq,Show)
data Draw'image_presentation'user_transformed = Draw'image_presentation'user_transformed_true
						 |  Draw'image_presentation'user_transformed_false
					      deriving (Eq,Show)
data Draw'thumbnail = Draw'thumbnail
    { draw'thumbnailXlink'href :: String
    , draw'thumbnailXlink'type :: (Maybe Draw'thumbnail_xlink'type)
    , draw'thumbnailXlink'show :: (Maybe Draw'thumbnail_xlink'show)
    , draw'thumbnailXlink'actuate :: (Maybe Draw'thumbnail_xlink'actuate)
    } deriving (Eq,Show)
data Draw'thumbnail_xlink'type = Draw'thumbnail_xlink'type_simple
			       deriving (Eq,Show)
data Draw'thumbnail_xlink'show = Draw'thumbnail_xlink'show_embed
			       deriving (Eq,Show)
data Draw'thumbnail_xlink'actuate = Draw'thumbnail_xlink'actuate_onLoad
				  deriving (Eq,Show)
newtype Math'math = Math'math ANYContent 		deriving (Eq,Show)
data Draw'object = Draw'object Draw'object_Attrs
			       (Maybe Draw'thumbnail) (Maybe (OneOf2 Office'document Math'math))
			       (Maybe Office'events) (Maybe Draw'image_map) (Maybe Svg'desc)
			       (Maybe (OneOf2 Draw'contour_polygon Draw'contour_path))
		 deriving (Eq,Show)
data Draw'object_Attrs = Draw'object_Attrs
    { draw'objectDraw'style_name :: (Maybe String)
    , draw'objectPresentation'style_name :: (Maybe String)
    , draw'objectDraw'text_style_name :: (Maybe String)
    , draw'objectDraw'name :: (Maybe String)
    , draw'objectXlink'href :: (Maybe String)
    , draw'objectXlink'type :: (Maybe Draw'object_xlink'type)
    , draw'objectXlink'show :: (Maybe Draw'object_xlink'show)
    , draw'objectXlink'actuate :: (Maybe Draw'object_xlink'actuate)
    , draw'objectText'anchor_type :: (Maybe Draw'object_text'anchor_type)
    , draw'objectText'anchor_page_number :: (Maybe String)
    , draw'objectSvg'x :: (Maybe String)
    , draw'objectSvg'y :: (Maybe String)
    , draw'objectTable'end_cell_address :: (Maybe String)
    , draw'objectTable'end_x :: (Maybe String)
    , draw'objectTable'end_y :: (Maybe String)
    , draw'objectTable'table_background :: (Maybe Draw'object_table'table_background)
    , draw'objectSvg'width :: (Maybe String)
    , draw'objectSvg'height :: (Maybe String)
    , draw'objectPresentation'class :: (Maybe Draw'object_presentation'class)
    , draw'objectPresentation'placeholder :: (Maybe Draw'object_presentation'placeholder)
    , draw'objectPresentation'user_transformed :: (Maybe Draw'object_presentation'user_transformed)
    , draw'objectDraw'z_index :: (Maybe String)
    , draw'objectDraw'id :: (Maybe String)
    , draw'objectDraw'layer :: (Maybe String)
    , draw'objectDraw'notify_on_update_of_ranges :: (Maybe String)
    , draw'objectStyle'rel_width :: (Maybe String)
    , draw'objectStyle'rel_height :: (Maybe String)
    } deriving (Eq,Show)
data Draw'object_xlink'type = Draw'object_xlink'type_simple
			    deriving (Eq,Show)
data Draw'object_xlink'show = Draw'object_xlink'show_embed
			    deriving (Eq,Show)
data Draw'object_xlink'actuate = Draw'object_xlink'actuate_onLoad
			       deriving (Eq,Show)
data Draw'object_text'anchor_type = Draw'object_text'anchor_type_page
				     |  Draw'object_text'anchor_type_frame  | 
				    Draw'object_text'anchor_type_paragraph  | 
				    Draw'object_text'anchor_type_char  | 
				    Draw'object_text'anchor_type_as_char
				  deriving (Eq,Show)
data Draw'object_table'table_background = Draw'object_table'table_background_true
					   |  Draw'object_table'table_background_false
					deriving (Eq,Show)
data Draw'object_presentation'class = Draw'object_presentation'class_title
				       |  Draw'object_presentation'class_outline  | 
				      Draw'object_presentation'class_subtitle  | 
				      Draw'object_presentation'class_text  | 
				      Draw'object_presentation'class_graphic  | 
				      Draw'object_presentation'class_object  | 
				      Draw'object_presentation'class_chart  | 
				      Draw'object_presentation'class_table  | 
				      Draw'object_presentation'class_orgchart  | 
				      Draw'object_presentation'class_page  | 
				      Draw'object_presentation'class_notes
				    deriving (Eq,Show)
data Draw'object_presentation'placeholder = Draw'object_presentation'placeholder_true
					     |  Draw'object_presentation'placeholder_false
					  deriving (Eq,Show)
data Draw'object_presentation'user_transformed = Draw'object_presentation'user_transformed_true
						  |  Draw'object_presentation'user_transformed_false
					       deriving (Eq,Show)
data Draw'object_ole = Draw'object_oleOffice'binary_data Draw'object_ole_Attrs
							 (Maybe Office'binary_data)
		     | Draw'object_oleOffice'events Draw'object_ole_Attrs
						    (Maybe Office'events)
		     | Draw'object_oleDraw'image_map Draw'object_ole_Attrs
						     (Maybe Draw'image_map)
		     | Draw'object_oleSvg'desc Draw'object_ole_Attrs (Maybe Svg'desc)
		     | Draw'object_oleDraw'contour_polygon Draw'object_ole_Attrs
							   (Maybe Draw'contour_polygon)
		     | Draw'object_oleDraw'contour_path Draw'object_ole_Attrs
							(Maybe Draw'contour_path)
		     | Draw'object_oleDraw'thumbnail Draw'object_ole_Attrs
						     (Maybe Draw'thumbnail)
		     deriving (Eq,Show)
data Draw'object_ole_Attrs = Draw'object_ole_Attrs
    { draw'object_oleDraw'class_id :: (Maybe String)
    , draw'object_oleDraw'style_name :: (Maybe String)
    , draw'object_olePresentation'style_name :: (Maybe String)
    , draw'object_oleDraw'text_style_name :: (Maybe String)
    , draw'object_oleDraw'name :: (Maybe String)
    , draw'object_oleXlink'href :: (Maybe String)
    , draw'object_oleXlink'type :: (Maybe Draw'object_ole_xlink'type)
    , draw'object_oleXlink'show :: (Maybe Draw'object_ole_xlink'show)
    , draw'object_oleXlink'actuate :: (Maybe Draw'object_ole_xlink'actuate)
    , draw'object_oleText'anchor_type :: (Maybe Draw'object_ole_text'anchor_type)
    , draw'object_oleText'anchor_page_number :: (Maybe String)
    , draw'object_oleSvg'x :: (Maybe String)
    , draw'object_oleSvg'y :: (Maybe String)
    , draw'object_oleTable'end_cell_address :: (Maybe String)
    , draw'object_oleTable'end_x :: (Maybe String)
    , draw'object_oleTable'end_y :: (Maybe String)
    , draw'object_oleTable'table_background :: (Maybe Draw'object_ole_table'table_background)
    , draw'object_oleSvg'width :: (Maybe String)
    , draw'object_oleSvg'height :: (Maybe String)
    , draw'object_olePresentation'class :: (Maybe Draw'object_ole_presentation'class)
    , draw'object_olePresentation'placeholder :: (Maybe Draw'object_ole_presentation'placeholder)
    , draw'object_olePresentation'user_transformed :: (Maybe Draw'object_ole_presentation'user_transformed)
    , draw'object_oleDraw'z_index :: (Maybe String)
    , draw'object_oleDraw'id :: (Maybe String)
    , draw'object_oleDraw'layer :: (Maybe String)
    , draw'object_oleStyle'rel_width :: (Maybe String)
    , draw'object_oleStyle'rel_height :: (Maybe String)
    } deriving (Eq,Show)
data Draw'object_ole_xlink'type = Draw'object_ole_xlink'type_simple
				deriving (Eq,Show)
data Draw'object_ole_xlink'show = Draw'object_ole_xlink'show_embed
				deriving (Eq,Show)
data Draw'object_ole_xlink'actuate = Draw'object_ole_xlink'actuate_onLoad
				   deriving (Eq,Show)
data Draw'object_ole_text'anchor_type = Draw'object_ole_text'anchor_type_page
					 |  Draw'object_ole_text'anchor_type_frame  | 
					Draw'object_ole_text'anchor_type_paragraph  | 
					Draw'object_ole_text'anchor_type_char  | 
					Draw'object_ole_text'anchor_type_as_char
				      deriving (Eq,Show)
data Draw'object_ole_table'table_background = Draw'object_ole_table'table_background_true
					       |  Draw'object_ole_table'table_background_false
					    deriving (Eq,Show)
data Draw'object_ole_presentation'class = Draw'object_ole_presentation'class_title
					   |  Draw'object_ole_presentation'class_outline  | 
					  Draw'object_ole_presentation'class_subtitle  | 
					  Draw'object_ole_presentation'class_text  | 
					  Draw'object_ole_presentation'class_graphic  | 
					  Draw'object_ole_presentation'class_object  | 
					  Draw'object_ole_presentation'class_chart  | 
					  Draw'object_ole_presentation'class_table  | 
					  Draw'object_ole_presentation'class_orgchart  | 
					  Draw'object_ole_presentation'class_page  | 
					  Draw'object_ole_presentation'class_notes
					deriving (Eq,Show)
data Draw'object_ole_presentation'placeholder = Draw'object_ole_presentation'placeholder_true
						 |  Draw'object_ole_presentation'placeholder_false
					      deriving (Eq,Show)
data Draw'object_ole_presentation'user_transformed = Draw'object_ole_presentation'user_transformed_true
						      | 
						     Draw'object_ole_presentation'user_transformed_false
						   deriving (Eq,Show)
newtype Svg'desc = Svg'desc String 		deriving (Eq,Show)
data Draw'contour_polygon = Draw'contour_polygon
    { draw'contour_polygonSvg'width :: String
    , draw'contour_polygonSvg'height :: String
    , draw'contour_polygonSvg'viewBox :: String
    , draw'contour_polygonDraw'points :: String
    , draw'contour_polygonDraw'recreate_on_edit :: (Maybe String)
    } deriving (Eq,Show)
data Draw'contour_path = Draw'contour_path
    { draw'contour_pathSvg'width :: String
    , draw'contour_pathSvg'height :: String
    , draw'contour_pathSvg'viewBox :: String
    , draw'contour_pathSvg'd :: String
    , draw'contour_pathDraw'recreate_on_edit :: (Maybe String)
    } deriving (Eq,Show)
data Draw'a = Draw'aDraw'image Draw'a_Attrs Draw'image
	    | Draw'aDraw'text_box Draw'a_Attrs Draw'text_box
	    deriving (Eq,Show)
data Draw'a_Attrs = Draw'a_Attrs
    { draw'aXlink'href :: String
    , draw'aXlink'type :: (Defaultable Draw'a_xlink'type)
    , draw'aXlink'show :: (Maybe Draw'a_xlink'show)
    , draw'aXlink'actuate :: (Defaultable Draw'a_xlink'actuate)
    , draw'aOffice'name :: (Maybe String)
    , draw'aOffice'target_frame_name :: (Maybe String)
    , draw'aOffice'server_map :: (Defaultable String)
    } deriving (Eq,Show)
data Draw'a_xlink'type = Draw'a_xlink'type_simple
		       deriving (Eq,Show)
data Draw'a_xlink'show = Draw'a_xlink'show_new  | 
			 Draw'a_xlink'show_replace
		       deriving (Eq,Show)
data Draw'a_xlink'actuate = Draw'a_xlink'actuate_onRequest
			  deriving (Eq,Show)
data Dr3d'light = Dr3d'light
    { dr3d'lightDr3d'diffuse_color :: (Maybe String)
    , dr3d'lightDr3d'direction :: String
    , dr3d'lightDr3d'enabled :: (Maybe String)
    , dr3d'lightDr3d'specular :: (Maybe String)
    } deriving (Eq,Show)
data Dr3d'cube = Dr3d'cube
    { dr3d'cubeDr3d'transform :: (Maybe String)
    , dr3d'cubeDr3d'min_edge :: (Maybe String)
    , dr3d'cubeDr3d'max_edge :: (Maybe String)
    , dr3d'cubeDraw'z_index :: (Maybe String)
    , dr3d'cubeDraw'id :: (Maybe String)
    , dr3d'cubeTable'end_cell_address :: (Maybe String)
    , dr3d'cubeTable'end_x :: (Maybe String)
    , dr3d'cubeTable'end_y :: (Maybe String)
    , dr3d'cubeTable'table_background :: (Maybe Dr3d'cube_table'table_background)
    , dr3d'cubeDraw'style_name :: (Maybe String)
    , dr3d'cubePresentation'style_name :: (Maybe String)
    , dr3d'cubeDraw'text_style_name :: (Maybe String)
    , dr3d'cubeDraw'layer :: (Maybe String)
    } deriving (Eq,Show)
data Dr3d'cube_table'table_background = Dr3d'cube_table'table_background_true
					 |  Dr3d'cube_table'table_background_false
				      deriving (Eq,Show)
data Dr3d'sphere = Dr3d'sphere
    { dr3d'sphereDr3d'transform :: (Maybe String)
    , dr3d'sphereDr3d'center :: (Maybe String)
    , dr3d'sphereDr3d'size :: (Maybe String)
    , dr3d'sphereDraw'z_index :: (Maybe String)
    , dr3d'sphereDraw'id :: (Maybe String)
    , dr3d'sphereTable'end_cell_address :: (Maybe String)
    , dr3d'sphereTable'end_x :: (Maybe String)
    , dr3d'sphereTable'end_y :: (Maybe String)
    , dr3d'sphereTable'table_background :: (Maybe Dr3d'sphere_table'table_background)
    , dr3d'sphereDraw'style_name :: (Maybe String)
    , dr3d'spherePresentation'style_name :: (Maybe String)
    , dr3d'sphereDraw'text_style_name :: (Maybe String)
    , dr3d'sphereDraw'layer :: (Maybe String)
    } deriving (Eq,Show)
data Dr3d'sphere_table'table_background = Dr3d'sphere_table'table_background_true
					   |  Dr3d'sphere_table'table_background_false
					deriving (Eq,Show)
data Dr3d'extrude = Dr3d'extrude
    { dr3d'extrudeDr3d'transform :: (Maybe String)
    , dr3d'extrudeSvg'viewBox :: String
    , dr3d'extrudeSvg'd :: String
    , dr3d'extrudeDraw'z_index :: (Maybe String)
    , dr3d'extrudeDraw'id :: (Maybe String)
    , dr3d'extrudeTable'end_cell_address :: (Maybe String)
    , dr3d'extrudeTable'end_x :: (Maybe String)
    , dr3d'extrudeTable'end_y :: (Maybe String)
    , dr3d'extrudeTable'table_background :: (Maybe Dr3d'extrude_table'table_background)
    , dr3d'extrudeDraw'style_name :: (Maybe String)
    , dr3d'extrudePresentation'style_name :: (Maybe String)
    , dr3d'extrudeDraw'text_style_name :: (Maybe String)
    , dr3d'extrudeDraw'layer :: (Maybe String)
    } deriving (Eq,Show)
data Dr3d'extrude_table'table_background = Dr3d'extrude_table'table_background_true
					    |  Dr3d'extrude_table'table_background_false
					 deriving (Eq,Show)
data Dr3d'rotate = Dr3d'rotate
    { dr3d'rotateDr3d'transform :: (Maybe String)
    , dr3d'rotateSvg'viewBox :: String
    , dr3d'rotateSvg'd :: String
    , dr3d'rotateDraw'z_index :: (Maybe String)
    , dr3d'rotateDraw'id :: (Maybe String)
    , dr3d'rotateTable'end_cell_address :: (Maybe String)
    , dr3d'rotateTable'end_x :: (Maybe String)
    , dr3d'rotateTable'end_y :: (Maybe String)
    , dr3d'rotateTable'table_background :: (Maybe Dr3d'rotate_table'table_background)
    , dr3d'rotateDraw'style_name :: (Maybe String)
    , dr3d'rotatePresentation'style_name :: (Maybe String)
    , dr3d'rotateDraw'text_style_name :: (Maybe String)
    , dr3d'rotateDraw'layer :: (Maybe String)
    } deriving (Eq,Show)
data Dr3d'rotate_table'table_background = Dr3d'rotate_table'table_background_true
					   |  Dr3d'rotate_table'table_background_false
					deriving (Eq,Show)
data Dr3d'scene = Dr3d'scene Dr3d'scene_Attrs [Dr3d'light]
			     [((OneOf5 Dr3d'scene Dr3d'extrude Dr3d'sphere Dr3d'rotate Dr3d'cube))]
		deriving (Eq,Show)
data Dr3d'scene_Attrs = Dr3d'scene_Attrs
    { dr3d'sceneDraw'style_name :: (Maybe String)
    , dr3d'scenePresentation'style_name :: (Maybe String)
    , dr3d'sceneDraw'text_style_name :: (Maybe String)
    , dr3d'sceneSvg'x :: (Maybe String)
    , dr3d'sceneSvg'y :: (Maybe String)
    , dr3d'sceneSvg'width :: (Maybe String)
    , dr3d'sceneSvg'height :: (Maybe String)
    , dr3d'sceneDr3d'vrp :: (Maybe String)
    , dr3d'sceneDr3d'vpn :: (Maybe String)
    , dr3d'sceneDr3d'vup :: (Maybe String)
    , dr3d'sceneDr3d'projection :: (Maybe Dr3d'scene_dr3d'projection)
    , dr3d'sceneDr3d'transform :: (Maybe String)
    , dr3d'sceneDr3d'distance :: (Maybe String)
    , dr3d'sceneDr3d'focal_length :: (Maybe String)
    , dr3d'sceneDr3d'shadow_slant :: (Maybe String)
    , dr3d'sceneDr3d'shade_mode :: (Maybe Dr3d'scene_dr3d'shade_mode)
    , dr3d'sceneDr3d'ambient_color :: (Maybe String)
    , dr3d'sceneDr3d'lighting_mode :: (Maybe String)
    , dr3d'sceneDraw'z_index :: (Maybe String)
    , dr3d'sceneDraw'id :: (Maybe String)
    , dr3d'sceneTable'end_cell_address :: (Maybe String)
    , dr3d'sceneTable'end_x :: (Maybe String)
    , dr3d'sceneTable'end_y :: (Maybe String)
    , dr3d'sceneTable'table_background :: (Maybe Dr3d'scene_table'table_background)
    } deriving (Eq,Show)
data Dr3d'scene_dr3d'projection = Dr3d'scene_dr3d'projection_parallel
				   |  Dr3d'scene_dr3d'projection_perspective
				deriving (Eq,Show)
data Dr3d'scene_dr3d'shade_mode = Dr3d'scene_dr3d'shade_mode_flat
				   |  Dr3d'scene_dr3d'shade_mode_phong  | 
				  Dr3d'scene_dr3d'shade_mode_gouraud  | 
				  Dr3d'scene_dr3d'shade_mode_draft
				deriving (Eq,Show)
data Dr3d'scene_table'table_background = Dr3d'scene_table'table_background_true
					  |  Dr3d'scene_table'table_background_false
				       deriving (Eq,Show)
newtype Draw'layer_set = Draw'layer_set [Draw'layer] 		deriving (Eq,Show)
data Draw'layer = Draw'layer
    { draw'layerDraw'name :: String
    } deriving (Eq,Show)
data Presentation'event = Presentation'event Presentation'event_Attrs
					     (Maybe Presentation'sound)
			deriving (Eq,Show)
data Presentation'event_Attrs = Presentation'event_Attrs
    { presentation'eventScript'event_name :: String
    , presentation'eventPresentation'action :: Presentation'event_presentation'action
    , presentation'eventPresentation'effect :: (Defaultable Presentation'event_presentation'effect)
    , presentation'eventPresentation'direction :: (Defaultable Presentation'event_presentation'direction)
    , presentation'eventPresentation'speed :: (Defaultable Presentation'event_presentation'speed)
    , presentation'eventPresentation'start_scale :: (Defaultable String)
    , presentation'eventXlink'href :: (Maybe String)
    , presentation'eventXlink'type :: (Maybe Presentation'event_xlink'type)
    , presentation'eventXlink'show :: (Maybe Presentation'event_xlink'show)
    , presentation'eventXlink'actuate :: (Maybe Presentation'event_xlink'actuate)
    , presentation'eventPresentation'verb :: (Maybe String)
    } deriving (Eq,Show)
data Presentation'event_presentation'action = Presentation'event_presentation'action_none
					       | 
					      Presentation'event_presentation'action_previous_page
					       |  Presentation'event_presentation'action_next_page
					       |  Presentation'event_presentation'action_first_page
					       |  Presentation'event_presentation'action_last_page
					       |  Presentation'event_presentation'action_hide  | 
					      Presentation'event_presentation'action_stop  | 
					      Presentation'event_presentation'action_execute  | 
					      Presentation'event_presentation'action_show  | 
					      Presentation'event_presentation'action_verb  | 
					      Presentation'event_presentation'action_fade_out  | 
					      Presentation'event_presentation'action_sound
					    deriving (Eq,Show)
data Presentation'event_presentation'effect = Presentation'event_presentation'effect_none
					       |  Presentation'event_presentation'effect_fade  | 
					      Presentation'event_presentation'effect_move  | 
					      Presentation'event_presentation'effect_stripes  | 
					      Presentation'event_presentation'effect_open  | 
					      Presentation'event_presentation'effect_close  | 
					      Presentation'event_presentation'effect_dissolve  | 
					      Presentation'event_presentation'effect_wavyline  | 
					      Presentation'event_presentation'effect_random  | 
					      Presentation'event_presentation'effect_lines  | 
					      Presentation'event_presentation'effect_laser  | 
					      Presentation'event_presentation'effect_appear  | 
					      Presentation'event_presentation'effect_hide  | 
					      Presentation'event_presentation'effect_move_short  | 
					      Presentation'event_presentation'effect_checkerboard
					       |  Presentation'event_presentation'effect_rotate  | 
					      Presentation'event_presentation'effect_stretch
					    deriving (Eq,Show)
data Presentation'event_presentation'direction = Presentation'event_presentation'direction_none
						  | 
						 Presentation'event_presentation'direction_from_left
						  | 
						 Presentation'event_presentation'direction_from_top
						  | 
						 Presentation'event_presentation'direction_from_right
						  | 
						 Presentation'event_presentation'direction_from_bottom
						  | 
						 Presentation'event_presentation'direction_from_center
						  | 
						 Presentation'event_presentation'direction_from_upper_left
						  | 
						 Presentation'event_presentation'direction_from_upper_right
						  | 
						 Presentation'event_presentation'direction_from_lower_left
						  | 
						 Presentation'event_presentation'direction_from_lower_right
						  | 
						 Presentation'event_presentation'direction_to_left
						  | 
						 Presentation'event_presentation'direction_to_top
						  | 
						 Presentation'event_presentation'direction_to_right
						  | 
						 Presentation'event_presentation'direction_to_bottom
						  | 
						 Presentation'event_presentation'direction_to_upper_left
						  | 
						 Presentation'event_presentation'direction_to_upper_right
						  | 
						 Presentation'event_presentation'direction_to_lower_right
						  | 
						 Presentation'event_presentation'direction_to_lower_left
						  |  Presentation'event_presentation'direction_path
						  | 
						 Presentation'event_presentation'direction_spiral_inward_left
						  | 
						 Presentation'event_presentation'direction_spiral_inward_right
						  | 
						 Presentation'event_presentation'direction_spiral_outward_left
						  | 
						 Presentation'event_presentation'direction_spiral_outward_right
						  | 
						 Presentation'event_presentation'direction_vertical
						  | 
						 Presentation'event_presentation'direction_horizontal
						  | 
						 Presentation'event_presentation'direction_to_center
						  | 
						 Presentation'event_presentation'direction_clockwise
						  | 
						 Presentation'event_presentation'direction_counter_clockwise
					       deriving (Eq,Show)
data Presentation'event_presentation'speed = Presentation'event_presentation'speed_slow
					      |  Presentation'event_presentation'speed_medium  | 
					     Presentation'event_presentation'speed_fast
					   deriving (Eq,Show)
data Presentation'event_xlink'type = Presentation'event_xlink'type_simple
				   deriving (Eq,Show)
data Presentation'event_xlink'show = Presentation'event_xlink'show_embed
				   deriving (Eq,Show)
data Presentation'event_xlink'actuate = Presentation'event_xlink'actuate_onRequest
				      deriving (Eq,Show)
data Draw'applet = Draw'applet Draw'applet_Attrs
			       (Maybe Draw'thumbnail) [Draw'param] (Maybe Svg'desc)
		 deriving (Eq,Show)
data Draw'applet_Attrs = Draw'applet_Attrs
    { draw'appletXlink'href :: (Maybe String)
    , draw'appletXlink'type :: (Maybe Draw'applet_xlink'type)
    , draw'appletXlink'show :: (Maybe Draw'applet_xlink'show)
    , draw'appletXlink'actuate :: (Maybe Draw'applet_xlink'actuate)
    , draw'appletDraw'code :: String
    , draw'appletDraw'object :: (Maybe String)
    , draw'appletDraw'archive :: (Maybe String)
    , draw'appletDraw'may_script :: (Defaultable String)
    , draw'appletDraw'name :: (Maybe String)
    , draw'appletDraw'style_name :: (Maybe String)
    , draw'appletPresentation'style_name :: (Maybe String)
    , draw'appletDraw'text_style_name :: (Maybe String)
    , draw'appletSvg'width :: (Maybe String)
    , draw'appletSvg'height :: (Maybe String)
    , draw'appletDraw'z_index :: (Maybe String)
    , draw'appletDraw'layer :: (Maybe String)
    , draw'appletSvg'x :: (Maybe String)
    , draw'appletSvg'y :: (Maybe String)
    , draw'appletTable'end_cell_address :: (Maybe String)
    , draw'appletTable'end_x :: (Maybe String)
    , draw'appletTable'end_y :: (Maybe String)
    } deriving (Eq,Show)
data Draw'applet_xlink'type = Draw'applet_xlink'type_simple
			    deriving (Eq,Show)
data Draw'applet_xlink'show = Draw'applet_xlink'show_embed
			    deriving (Eq,Show)
data Draw'applet_xlink'actuate = Draw'applet_xlink'actuate_onLoad
			       deriving (Eq,Show)
data Draw'plugin = Draw'plugin Draw'plugin_Attrs
			       (Maybe Draw'thumbnail) [Draw'param] (Maybe Svg'desc)
		 deriving (Eq,Show)
data Draw'plugin_Attrs = Draw'plugin_Attrs
    { draw'pluginXlink'href :: (Maybe String)
    , draw'pluginXlink'type :: (Maybe Draw'plugin_xlink'type)
    , draw'pluginXlink'show :: (Maybe Draw'plugin_xlink'show)
    , draw'pluginXlink'actuate :: (Maybe Draw'plugin_xlink'actuate)
    , draw'pluginDraw'mime_type :: (Maybe String)
    , draw'pluginDraw'name :: (Maybe String)
    , draw'pluginDraw'style_name :: (Maybe String)
    , draw'pluginPresentation'style_name :: (Maybe String)
    , draw'pluginDraw'text_style_name :: (Maybe String)
    , draw'pluginSvg'width :: (Maybe String)
    , draw'pluginSvg'height :: (Maybe String)
    , draw'pluginDraw'z_index :: (Maybe String)
    , draw'pluginDraw'layer :: (Maybe String)
    , draw'pluginSvg'x :: (Maybe String)
    , draw'pluginSvg'y :: (Maybe String)
    , draw'pluginTable'end_cell_address :: (Maybe String)
    , draw'pluginTable'end_x :: (Maybe String)
    , draw'pluginTable'end_y :: (Maybe String)
    } deriving (Eq,Show)
data Draw'plugin_xlink'type = Draw'plugin_xlink'type_simple
			    deriving (Eq,Show)
data Draw'plugin_xlink'show = Draw'plugin_xlink'show_embed
			    deriving (Eq,Show)
data Draw'plugin_xlink'actuate = Draw'plugin_xlink'actuate_onLoad
			       deriving (Eq,Show)
data Draw'param = Draw'param
    { draw'paramDraw'name :: (Maybe String)
    , draw'paramDraw'value :: (Maybe String)
    } deriving (Eq,Show)
data Draw'floating_frame = Draw'floating_frame Draw'floating_frame_Attrs
					       (Maybe Draw'thumbnail) (Maybe Svg'desc)
			 deriving (Eq,Show)
data Draw'floating_frame_Attrs = Draw'floating_frame_Attrs
    { draw'floating_frameXlink'href :: (Maybe String)
    , draw'floating_frameXlink'type :: (Maybe Draw'floating_frame_xlink'type)
    , draw'floating_frameXlink'show :: (Maybe Draw'floating_frame_xlink'show)
    , draw'floating_frameXlink'actuate :: (Maybe Draw'floating_frame_xlink'actuate)
    , draw'floating_frameDraw'name :: (Maybe String)
    , draw'floating_frameDraw'frame_name :: (Maybe String)
    , draw'floating_frameDraw'style_name :: (Maybe String)
    , draw'floating_framePresentation'style_name :: (Maybe String)
    , draw'floating_frameDraw'text_style_name :: (Maybe String)
    , draw'floating_frameSvg'width :: (Maybe String)
    , draw'floating_frameSvg'height :: (Maybe String)
    , draw'floating_frameDraw'z_index :: (Maybe String)
    , draw'floating_frameDraw'layer :: (Maybe String)
    , draw'floating_frameSvg'x :: (Maybe String)
    , draw'floating_frameSvg'y :: (Maybe String)
    , draw'floating_frameTable'end_cell_address :: (Maybe String)
    , draw'floating_frameTable'end_x :: (Maybe String)
    , draw'floating_frameTable'end_y :: (Maybe String)
    } deriving (Eq,Show)
data Draw'floating_frame_xlink'type = Draw'floating_frame_xlink'type_simple
				    deriving (Eq,Show)
data Draw'floating_frame_xlink'show = Draw'floating_frame_xlink'show_embed
				    deriving (Eq,Show)
data Draw'floating_frame_xlink'actuate = Draw'floating_frame_xlink'actuate_onLoad
				       deriving (Eq,Show)
newtype Draw'image_map = Draw'image_map [Draw'image_map_] 		deriving (Eq,Show)
data Draw'image_map_ = Draw'image_map_Draw'area_rectangle Draw'area_rectangle
		     | Draw'image_map_Draw'area_circle Draw'area_circle
		     | Draw'image_map_Draw'area_polygon Draw'area_polygon
		     deriving (Eq,Show)
data Draw'area_rectangle = Draw'area_rectangle Draw'area_rectangle_Attrs
					       (Maybe Svg'desc) (Maybe Office'events)
			 deriving (Eq,Show)
data Draw'area_rectangle_Attrs = Draw'area_rectangle_Attrs
    { draw'area_rectangleXlink'href :: (Maybe String)
    , draw'area_rectangleXlink'type :: (Maybe Draw'area_rectangle_xlink'type)
    , draw'area_rectangleOffice'target_frame_name :: (Maybe String)
    , draw'area_rectangleXlink'show :: (Maybe Draw'area_rectangle_xlink'show)
    , draw'area_rectangleOffice'name :: (Maybe String)
    , draw'area_rectangleDraw'nohref :: (Maybe Draw'area_rectangle_draw'nohref)
    , draw'area_rectangleSvg'x :: String
    , draw'area_rectangleSvg'y :: String
    , draw'area_rectangleSvg'width :: String
    , draw'area_rectangleSvg'height :: String
    } deriving (Eq,Show)
data Draw'area_rectangle_xlink'type = Draw'area_rectangle_xlink'type_simple
				    deriving (Eq,Show)
data Draw'area_rectangle_xlink'show = Draw'area_rectangle_xlink'show_new
				       |  Draw'area_rectangle_xlink'show_replace
				    deriving (Eq,Show)
data Draw'area_rectangle_draw'nohref = Draw'area_rectangle_draw'nohref_nohref
				     deriving (Eq,Show)
data Draw'area_circle = Draw'area_circle Draw'area_circle_Attrs
					 (Maybe Svg'desc) (Maybe Office'events)
		      deriving (Eq,Show)
data Draw'area_circle_Attrs = Draw'area_circle_Attrs
    { draw'area_circleXlink'href :: (Maybe String)
    , draw'area_circleXlink'type :: (Maybe Draw'area_circle_xlink'type)
    , draw'area_circleOffice'target_frame_name :: (Maybe String)
    , draw'area_circleXlink'show :: (Maybe Draw'area_circle_xlink'show)
    , draw'area_circleOffice'name :: (Maybe String)
    , draw'area_circleDraw'nohref :: (Maybe Draw'area_circle_draw'nohref)
    , draw'area_circleSvg'cx :: String
    , draw'area_circleSvg'cy :: String
    , draw'area_circleSvg'r :: String
    } deriving (Eq,Show)
data Draw'area_circle_xlink'type = Draw'area_circle_xlink'type_simple
				 deriving (Eq,Show)
data Draw'area_circle_xlink'show = Draw'area_circle_xlink'show_new
				    |  Draw'area_circle_xlink'show_replace
				 deriving (Eq,Show)
data Draw'area_circle_draw'nohref = Draw'area_circle_draw'nohref_nohref
				  deriving (Eq,Show)
data Draw'area_polygon = Draw'area_polygon Draw'area_polygon_Attrs
					   (Maybe Svg'desc) (Maybe Office'events)
		       deriving (Eq,Show)
data Draw'area_polygon_Attrs = Draw'area_polygon_Attrs
    { draw'area_polygonXlink'href :: (Maybe String)
    , draw'area_polygonXlink'type :: (Maybe Draw'area_polygon_xlink'type)
    , draw'area_polygonOffice'target_frame_name :: (Maybe String)
    , draw'area_polygonXlink'show :: (Maybe Draw'area_polygon_xlink'show)
    , draw'area_polygonOffice'name :: (Maybe String)
    , draw'area_polygonDraw'nohref :: (Maybe Draw'area_polygon_draw'nohref)
    , draw'area_polygonSvg'x :: String
    , draw'area_polygonSvg'y :: String
    , draw'area_polygonSvg'width :: String
    , draw'area_polygonSvg'height :: String
    , draw'area_polygonSvg'points :: String
    , draw'area_polygonSvg'viewBox :: String
    } deriving (Eq,Show)
data Draw'area_polygon_xlink'type = Draw'area_polygon_xlink'type_simple
				  deriving (Eq,Show)
data Draw'area_polygon_xlink'show = Draw'area_polygon_xlink'show_new
				     |  Draw'area_polygon_xlink'show_replace
				  deriving (Eq,Show)
data Draw'area_polygon_draw'nohref = Draw'area_polygon_draw'nohref_nohref
				   deriving (Eq,Show)
data Text'p = Text'p Text'p_Attrs [Text'p_]
	    deriving (Eq,Show)
data Text'p_Attrs = Text'p_Attrs
    { text'pText'style_name :: (Maybe String)
    , text'pText'cond_style_name :: (Maybe String)
    } deriving (Eq,Show)
data Text'p_ = Text'p_Str String
	     | Text'p_Text'span Text'span
	     | Text'p_Text'tab_stop Text'tab_stop
	     | Text'p_Text's Text's
	     | Text'p_Text'line_break Text'line_break
	     | Text'p_Text'footnote Text'footnote
	     | Text'p_Text'endnote Text'endnote
	     | Text'p_Text'a Text'a
	     | Text'p_Text'bookmark Text'bookmark
	     | Text'p_Text'bookmark_start Text'bookmark_start
	     | Text'p_Text'bookmark_end Text'bookmark_end
	     | Text'p_Text'reference_mark Text'reference_mark
	     | Text'p_Text'reference_mark_start Text'reference_mark_start
	     | Text'p_Text'reference_mark_end Text'reference_mark_end
	     | Text'p_Text'date Text'date
	     | Text'p_Text'time Text'time
	     | Text'p_Text'page_number Text'page_number
	     | Text'p_Text'page_continuation Text'page_continuation
	     | Text'p_Text'sender_firstname Text'sender_firstname
	     | Text'p_Text'sender_lastname Text'sender_lastname
	     | Text'p_Text'sender_initials Text'sender_initials
	     | Text'p_Text'sender_title Text'sender_title
	     | Text'p_Text'sender_position Text'sender_position
	     | Text'p_Text'sender_email Text'sender_email
	     | Text'p_Text'sender_phone_private Text'sender_phone_private
	     | Text'p_Text'sender_fax Text'sender_fax
	     | Text'p_Text'sender_company Text'sender_company
	     | Text'p_Text'sender_phone_work Text'sender_phone_work
	     | Text'p_Text'sender_street Text'sender_street
	     | Text'p_Text'sender_city Text'sender_city
	     | Text'p_Text'sender_postal_code Text'sender_postal_code
	     | Text'p_Text'sender_country Text'sender_country
	     | Text'p_Text'sender_state_or_province Text'sender_state_or_province
	     | Text'p_Text'author_name Text'author_name
	     | Text'p_Text'author_initials Text'author_initials
	     | Text'p_Text'placeholder Text'placeholder
	     | Text'p_Text'variable_set Text'variable_set
	     | Text'p_Text'variable_get Text'variable_get
	     | Text'p_Text'variable_input Text'variable_input
	     | Text'p_Text'user_field_get Text'user_field_get
	     | Text'p_Text'user_field_input Text'user_field_input
	     | Text'p_Text'sequence Text'sequence
	     | Text'p_Text'expression Text'expression
	     | Text'p_Text'text_input Text'text_input
	     | Text'p_Text'database_display Text'database_display
	     | Text'p_Text'database_next Text'database_next
	     | Text'p_Text'database_select Text'database_select
	     | Text'p_Text'database_row_number Text'database_row_number
	     | Text'p_Text'database_name Text'database_name
	     | Text'p_Text'initial_creator Text'initial_creator
	     | Text'p_Text'creation_date Text'creation_date
	     | Text'p_Text'creation_time Text'creation_time
	     | Text'p_Text'description Text'description
	     | Text'p_Text'user_defined Text'user_defined
	     | Text'p_Text'print_time Text'print_time
	     | Text'p_Text'print_date Text'print_date
	     | Text'p_Text'printed_by Text'printed_by
	     | Text'p_Text'title Text'title
	     | Text'p_Text'subject Text'subject
	     | Text'p_Text'keywords Text'keywords
	     | Text'p_Text'editing_cycles Text'editing_cycles
	     | Text'p_Text'editing_duration Text'editing_duration
	     | Text'p_Text'modification_time Text'modification_time
	     | Text'p_Text'modification_date Text'modification_date
	     | Text'p_Text'creator Text'creator
	     | Text'p_Text'conditional_text Text'conditional_text
	     | Text'p_Text'hidden_text Text'hidden_text
	     | Text'p_Text'hidden_paragraph Text'hidden_paragraph
	     | Text'p_Text'chapter Text'chapter
	     | Text'p_Text'file_name Text'file_name
	     | Text'p_Text'template_name Text'template_name
	     | Text'p_Text'page_variable_set Text'page_variable_set
	     | Text'p_Text'page_variable_get Text'page_variable_get
	     | Text'p_Text'execute_macro Text'execute_macro
	     | Text'p_Text'dde_connection Text'dde_connection
	     | Text'p_Text'reference_ref Text'reference_ref
	     | Text'p_Text'sequence_ref Text'sequence_ref
	     | Text'p_Text'bookmark_ref Text'bookmark_ref
	     | Text'p_Text'footnote_ref Text'footnote_ref
	     | Text'p_Text'endnote_ref Text'endnote_ref
	     | Text'p_Text'sheet_name Text'sheet_name
	     | Text'p_Text'bibliography_mark Text'bibliography_mark
	     | Text'p_Text'page_count Text'page_count
	     | Text'p_Text'paragraph_count Text'paragraph_count
	     | Text'p_Text'word_count Text'word_count
	     | Text'p_Text'character_count Text'character_count
	     | Text'p_Text'table_count Text'table_count
	     | Text'p_Text'image_count Text'image_count
	     | Text'p_Text'object_count Text'object_count
	     | Text'p_Office'annotation Office'annotation
	     | Text'p_Text'script Text'script
	     | Text'p_Text'measure Text'measure
	     | Text'p_Draw'rect Draw'rect
	     | Text'p_Draw'line Draw'line
	     | Text'p_Draw'polyline Draw'polyline
	     | Text'p_Draw'polygon Draw'polygon
	     | Text'p_Draw'path Draw'path
	     | Text'p_Draw'circle Draw'circle
	     | Text'p_Draw'ellipse Draw'ellipse
	     | Text'p_Draw'g Draw'g
	     | Text'p_Draw'page_thumbnail Draw'page_thumbnail
	     | Text'p_Draw'text_box Draw'text_box
	     | Text'p_Draw'image Draw'image
	     | Text'p_Draw'object Draw'object
	     | Text'p_Draw'object_ole Draw'object_ole
	     | Text'p_Draw'applet Draw'applet
	     | Text'p_Draw'floating_frame Draw'floating_frame
	     | Text'p_Draw'plugin Draw'plugin
	     | Text'p_Draw'measure Draw'measure
	     | Text'p_Draw'caption Draw'caption
	     | Text'p_Draw'connector Draw'connector
	     | Text'p_Chart'chart Chart'chart
	     | Text'p_Dr3d'scene Dr3d'scene
	     | Text'p_Draw'control Draw'control
	     | Text'p_Text'toc_mark_start Text'toc_mark_start
	     | Text'p_Text'toc_mark_end Text'toc_mark_end
	     | Text'p_Text'toc_mark Text'toc_mark
	     | Text'p_Text'user_index_mark_start Text'user_index_mark_start
	     | Text'p_Text'user_index_mark_end Text'user_index_mark_end
	     | Text'p_Text'user_index_mark Text'user_index_mark
	     | Text'p_Text'alphabetical_index_mark_start Text'alphabetical_index_mark_start
	     | Text'p_Text'alphabetical_index_mark_end Text'alphabetical_index_mark_end
	     | Text'p_Text'alphabetical_index_mark Text'alphabetical_index_mark
	     | Text'p_Text'change Text'change
	     | Text'p_Text'change_start Text'change_start
	     | Text'p_Text'change_end Text'change_end
	     | Text'p_Draw'a Draw'a
	     | Text'p_Text'ruby Text'ruby
	     deriving (Eq,Show)
data Text'h = Text'h Text'h_Attrs [Text'h_]
	    deriving (Eq,Show)
data Text'h_Attrs = Text'h_Attrs
    { text'hText'style_name :: (Maybe String)
    , text'hText'cond_style_name :: (Maybe String)
    , text'hText'level :: (Defaultable String)
    } deriving (Eq,Show)
data Text'h_ = Text'h_Str String
	     | Text'h_Text'span Text'span
	     | Text'h_Text'tab_stop Text'tab_stop
	     | Text'h_Text's Text's
	     | Text'h_Text'line_break Text'line_break
	     | Text'h_Text'footnote Text'footnote
	     | Text'h_Text'endnote Text'endnote
	     | Text'h_Text'a Text'a
	     | Text'h_Text'bookmark Text'bookmark
	     | Text'h_Text'bookmark_start Text'bookmark_start
	     | Text'h_Text'bookmark_end Text'bookmark_end
	     | Text'h_Text'reference_mark Text'reference_mark
	     | Text'h_Text'reference_mark_start Text'reference_mark_start
	     | Text'h_Text'reference_mark_end Text'reference_mark_end
	     | Text'h_Text'date Text'date
	     | Text'h_Text'time Text'time
	     | Text'h_Text'page_number Text'page_number
	     | Text'h_Text'page_continuation Text'page_continuation
	     | Text'h_Text'sender_firstname Text'sender_firstname
	     | Text'h_Text'sender_lastname Text'sender_lastname
	     | Text'h_Text'sender_initials Text'sender_initials
	     | Text'h_Text'sender_title Text'sender_title
	     | Text'h_Text'sender_position Text'sender_position
	     | Text'h_Text'sender_email Text'sender_email
	     | Text'h_Text'sender_phone_private Text'sender_phone_private
	     | Text'h_Text'sender_fax Text'sender_fax
	     | Text'h_Text'sender_company Text'sender_company
	     | Text'h_Text'sender_phone_work Text'sender_phone_work
	     | Text'h_Text'sender_street Text'sender_street
	     | Text'h_Text'sender_city Text'sender_city
	     | Text'h_Text'sender_postal_code Text'sender_postal_code
	     | Text'h_Text'sender_country Text'sender_country
	     | Text'h_Text'sender_state_or_province Text'sender_state_or_province
	     | Text'h_Text'author_name Text'author_name
	     | Text'h_Text'author_initials Text'author_initials
	     | Text'h_Text'placeholder Text'placeholder
	     | Text'h_Text'variable_set Text'variable_set
	     | Text'h_Text'variable_get Text'variable_get
	     | Text'h_Text'variable_input Text'variable_input
	     | Text'h_Text'user_field_get Text'user_field_get
	     | Text'h_Text'user_field_input Text'user_field_input
	     | Text'h_Text'sequence Text'sequence
	     | Text'h_Text'expression Text'expression
	     | Text'h_Text'text_input Text'text_input
	     | Text'h_Text'database_display Text'database_display
	     | Text'h_Text'database_next Text'database_next
	     | Text'h_Text'database_select Text'database_select
	     | Text'h_Text'database_row_number Text'database_row_number
	     | Text'h_Text'database_name Text'database_name
	     | Text'h_Text'initial_creator Text'initial_creator
	     | Text'h_Text'creation_date Text'creation_date
	     | Text'h_Text'creation_time Text'creation_time
	     | Text'h_Text'description Text'description
	     | Text'h_Text'user_defined Text'user_defined
	     | Text'h_Text'print_time Text'print_time
	     | Text'h_Text'print_date Text'print_date
	     | Text'h_Text'printed_by Text'printed_by
	     | Text'h_Text'title Text'title
	     | Text'h_Text'subject Text'subject
	     | Text'h_Text'keywords Text'keywords
	     | Text'h_Text'editing_cycles Text'editing_cycles
	     | Text'h_Text'editing_duration Text'editing_duration
	     | Text'h_Text'modification_time Text'modification_time
	     | Text'h_Text'modification_date Text'modification_date
	     | Text'h_Text'creator Text'creator
	     | Text'h_Text'conditional_text Text'conditional_text
	     | Text'h_Text'hidden_text Text'hidden_text
	     | Text'h_Text'hidden_paragraph Text'hidden_paragraph
	     | Text'h_Text'chapter Text'chapter
	     | Text'h_Text'file_name Text'file_name
	     | Text'h_Text'template_name Text'template_name
	     | Text'h_Text'page_variable_set Text'page_variable_set
	     | Text'h_Text'page_variable_get Text'page_variable_get
	     | Text'h_Text'execute_macro Text'execute_macro
	     | Text'h_Text'dde_connection Text'dde_connection
	     | Text'h_Text'reference_ref Text'reference_ref
	     | Text'h_Text'sequence_ref Text'sequence_ref
	     | Text'h_Text'bookmark_ref Text'bookmark_ref
	     | Text'h_Text'footnote_ref Text'footnote_ref
	     | Text'h_Text'endnote_ref Text'endnote_ref
	     | Text'h_Text'sheet_name Text'sheet_name
	     | Text'h_Text'bibliography_mark Text'bibliography_mark
	     | Text'h_Text'page_count Text'page_count
	     | Text'h_Text'paragraph_count Text'paragraph_count
	     | Text'h_Text'word_count Text'word_count
	     | Text'h_Text'character_count Text'character_count
	     | Text'h_Text'table_count Text'table_count
	     | Text'h_Text'image_count Text'image_count
	     | Text'h_Text'object_count Text'object_count
	     | Text'h_Office'annotation Office'annotation
	     | Text'h_Text'script Text'script
	     | Text'h_Text'measure Text'measure
	     | Text'h_Draw'rect Draw'rect
	     | Text'h_Draw'line Draw'line
	     | Text'h_Draw'polyline Draw'polyline
	     | Text'h_Draw'polygon Draw'polygon
	     | Text'h_Draw'path Draw'path
	     | Text'h_Draw'circle Draw'circle
	     | Text'h_Draw'ellipse Draw'ellipse
	     | Text'h_Draw'g Draw'g
	     | Text'h_Draw'page_thumbnail Draw'page_thumbnail
	     | Text'h_Draw'text_box Draw'text_box
	     | Text'h_Draw'image Draw'image
	     | Text'h_Draw'object Draw'object
	     | Text'h_Draw'object_ole Draw'object_ole
	     | Text'h_Draw'applet Draw'applet
	     | Text'h_Draw'floating_frame Draw'floating_frame
	     | Text'h_Draw'plugin Draw'plugin
	     | Text'h_Draw'measure Draw'measure
	     | Text'h_Draw'caption Draw'caption
	     | Text'h_Draw'connector Draw'connector
	     | Text'h_Chart'chart Chart'chart
	     | Text'h_Dr3d'scene Dr3d'scene
	     | Text'h_Draw'control Draw'control
	     | Text'h_Text'toc_mark_start Text'toc_mark_start
	     | Text'h_Text'toc_mark_end Text'toc_mark_end
	     | Text'h_Text'toc_mark Text'toc_mark
	     | Text'h_Text'user_index_mark_start Text'user_index_mark_start
	     | Text'h_Text'user_index_mark_end Text'user_index_mark_end
	     | Text'h_Text'user_index_mark Text'user_index_mark
	     | Text'h_Text'alphabetical_index_mark_start Text'alphabetical_index_mark_start
	     | Text'h_Text'alphabetical_index_mark_end Text'alphabetical_index_mark_end
	     | Text'h_Text'alphabetical_index_mark Text'alphabetical_index_mark
	     | Text'h_Text'change Text'change
	     | Text'h_Text'change_start Text'change_start
	     | Text'h_Text'change_end Text'change_end
	     | Text'h_Draw'a Draw'a
	     | Text'h_Text'ruby Text'ruby
	     deriving (Eq,Show)
data Text'span = Text'span Text'span_Attrs [Text'span_]
	       deriving (Eq,Show)
data Text'span_Attrs = Text'span_Attrs
    { text'spanText'style_name :: String
    } deriving (Eq,Show)
data Text'span_ = Text'span_Str String
		| Text'span_Text'span Text'span
		| Text'span_Text'tab_stop Text'tab_stop
		| Text'span_Text's Text's
		| Text'span_Text'line_break Text'line_break
		| Text'span_Text'footnote Text'footnote
		| Text'span_Text'endnote Text'endnote
		| Text'span_Text'a Text'a
		| Text'span_Text'bookmark Text'bookmark
		| Text'span_Text'bookmark_start Text'bookmark_start
		| Text'span_Text'bookmark_end Text'bookmark_end
		| Text'span_Text'reference_mark Text'reference_mark
		| Text'span_Text'reference_mark_start Text'reference_mark_start
		| Text'span_Text'reference_mark_end Text'reference_mark_end
		| Text'span_Text'date Text'date
		| Text'span_Text'time Text'time
		| Text'span_Text'page_number Text'page_number
		| Text'span_Text'page_continuation Text'page_continuation
		| Text'span_Text'sender_firstname Text'sender_firstname
		| Text'span_Text'sender_lastname Text'sender_lastname
		| Text'span_Text'sender_initials Text'sender_initials
		| Text'span_Text'sender_title Text'sender_title
		| Text'span_Text'sender_position Text'sender_position
		| Text'span_Text'sender_email Text'sender_email
		| Text'span_Text'sender_phone_private Text'sender_phone_private
		| Text'span_Text'sender_fax Text'sender_fax
		| Text'span_Text'sender_company Text'sender_company
		| Text'span_Text'sender_phone_work Text'sender_phone_work
		| Text'span_Text'sender_street Text'sender_street
		| Text'span_Text'sender_city Text'sender_city
		| Text'span_Text'sender_postal_code Text'sender_postal_code
		| Text'span_Text'sender_country Text'sender_country
		| Text'span_Text'sender_state_or_province Text'sender_state_or_province
		| Text'span_Text'author_name Text'author_name
		| Text'span_Text'author_initials Text'author_initials
		| Text'span_Text'placeholder Text'placeholder
		| Text'span_Text'variable_set Text'variable_set
		| Text'span_Text'variable_get Text'variable_get
		| Text'span_Text'variable_input Text'variable_input
		| Text'span_Text'user_field_get Text'user_field_get
		| Text'span_Text'user_field_input Text'user_field_input
		| Text'span_Text'sequence Text'sequence
		| Text'span_Text'expression Text'expression
		| Text'span_Text'text_input Text'text_input
		| Text'span_Text'database_display Text'database_display
		| Text'span_Text'database_next Text'database_next
		| Text'span_Text'database_select Text'database_select
		| Text'span_Text'database_row_number Text'database_row_number
		| Text'span_Text'database_name Text'database_name
		| Text'span_Text'initial_creator Text'initial_creator
		| Text'span_Text'creation_date Text'creation_date
		| Text'span_Text'creation_time Text'creation_time
		| Text'span_Text'description Text'description
		| Text'span_Text'user_defined Text'user_defined
		| Text'span_Text'print_time Text'print_time
		| Text'span_Text'print_date Text'print_date
		| Text'span_Text'printed_by Text'printed_by
		| Text'span_Text'title Text'title
		| Text'span_Text'subject Text'subject
		| Text'span_Text'keywords Text'keywords
		| Text'span_Text'editing_cycles Text'editing_cycles
		| Text'span_Text'editing_duration Text'editing_duration
		| Text'span_Text'modification_time Text'modification_time
		| Text'span_Text'modification_date Text'modification_date
		| Text'span_Text'creator Text'creator
		| Text'span_Text'conditional_text Text'conditional_text
		| Text'span_Text'hidden_text Text'hidden_text
		| Text'span_Text'hidden_paragraph Text'hidden_paragraph
		| Text'span_Text'chapter Text'chapter
		| Text'span_Text'file_name Text'file_name
		| Text'span_Text'template_name Text'template_name
		| Text'span_Text'page_variable_set Text'page_variable_set
		| Text'span_Text'page_variable_get Text'page_variable_get
		| Text'span_Text'execute_macro Text'execute_macro
		| Text'span_Text'dde_connection Text'dde_connection
		| Text'span_Text'reference_ref Text'reference_ref
		| Text'span_Text'sequence_ref Text'sequence_ref
		| Text'span_Text'bookmark_ref Text'bookmark_ref
		| Text'span_Text'footnote_ref Text'footnote_ref
		| Text'span_Text'endnote_ref Text'endnote_ref
		| Text'span_Text'sheet_name Text'sheet_name
		| Text'span_Text'bibliography_mark Text'bibliography_mark
		| Text'span_Text'page_count Text'page_count
		| Text'span_Text'paragraph_count Text'paragraph_count
		| Text'span_Text'word_count Text'word_count
		| Text'span_Text'character_count Text'character_count
		| Text'span_Text'table_count Text'table_count
		| Text'span_Text'image_count Text'image_count
		| Text'span_Text'object_count Text'object_count
		| Text'span_Office'annotation Office'annotation
		| Text'span_Text'script Text'script
		| Text'span_Text'measure Text'measure
		| Text'span_Draw'rect Draw'rect
		| Text'span_Draw'line Draw'line
		| Text'span_Draw'polyline Draw'polyline
		| Text'span_Draw'polygon Draw'polygon
		| Text'span_Draw'path Draw'path
		| Text'span_Draw'circle Draw'circle
		| Text'span_Draw'ellipse Draw'ellipse
		| Text'span_Draw'g Draw'g
		| Text'span_Draw'page_thumbnail Draw'page_thumbnail
		| Text'span_Draw'text_box Draw'text_box
		| Text'span_Draw'image Draw'image
		| Text'span_Draw'object Draw'object
		| Text'span_Draw'object_ole Draw'object_ole
		| Text'span_Draw'applet Draw'applet
		| Text'span_Draw'floating_frame Draw'floating_frame
		| Text'span_Draw'plugin Draw'plugin
		| Text'span_Draw'measure Draw'measure
		| Text'span_Draw'caption Draw'caption
		| Text'span_Draw'connector Draw'connector
		| Text'span_Chart'chart Chart'chart
		| Text'span_Dr3d'scene Dr3d'scene
		| Text'span_Draw'control Draw'control
		| Text'span_Text'toc_mark_start Text'toc_mark_start
		| Text'span_Text'toc_mark_end Text'toc_mark_end
		| Text'span_Text'toc_mark Text'toc_mark
		| Text'span_Text'user_index_mark_start Text'user_index_mark_start
		| Text'span_Text'user_index_mark_end Text'user_index_mark_end
		| Text'span_Text'user_index_mark Text'user_index_mark
		| Text'span_Text'alphabetical_index_mark_start Text'alphabetical_index_mark_start
		| Text'span_Text'alphabetical_index_mark_end Text'alphabetical_index_mark_end
		| Text'span_Text'alphabetical_index_mark Text'alphabetical_index_mark
		| Text'span_Text'change Text'change
		| Text'span_Text'change_start Text'change_start
		| Text'span_Text'change_end Text'change_end
		| Text'span_Draw'a Draw'a
		| Text'span_Text'ruby Text'ruby
		deriving (Eq,Show)
data Text'a = Text'a Text'a_Attrs [Text'a_]
	    deriving (Eq,Show)
data Text'a_Attrs = Text'a_Attrs
    { text'aXlink'href :: String
    , text'aXlink'type :: (Defaultable Text'a_xlink'type)
    , text'aXlink'actuate :: (Defaultable Text'a_xlink'actuate)
    , text'aXlink'show :: (Defaultable Text'a_xlink'show)
    , text'aOffice'name :: (Maybe String)
    , text'aOffice'target_frame_name :: (Maybe String)
    , text'aText'style_name :: (Maybe String)
    , text'aText'visited_style_name :: (Maybe String)
    } deriving (Eq,Show)
data Text'a_ = Text'a_Str String
	     | Text'a_Office'events Office'events
	     | Text'a_Text'span Text'span
	     | Text'a_Text'tab_stop Text'tab_stop
	     | Text'a_Text's Text's
	     | Text'a_Text'line_break Text'line_break
	     | Text'a_Text'footnote Text'footnote
	     | Text'a_Text'endnote Text'endnote
	     | Text'a_Text'a Text'a
	     | Text'a_Text'bookmark Text'bookmark
	     | Text'a_Text'bookmark_start Text'bookmark_start
	     | Text'a_Text'bookmark_end Text'bookmark_end
	     | Text'a_Text'reference_mark Text'reference_mark
	     | Text'a_Text'reference_mark_start Text'reference_mark_start
	     | Text'a_Text'reference_mark_end Text'reference_mark_end
	     | Text'a_Text'date Text'date
	     | Text'a_Text'time Text'time
	     | Text'a_Text'page_number Text'page_number
	     | Text'a_Text'page_continuation Text'page_continuation
	     | Text'a_Text'sender_firstname Text'sender_firstname
	     | Text'a_Text'sender_lastname Text'sender_lastname
	     | Text'a_Text'sender_initials Text'sender_initials
	     | Text'a_Text'sender_title Text'sender_title
	     | Text'a_Text'sender_position Text'sender_position
	     | Text'a_Text'sender_email Text'sender_email
	     | Text'a_Text'sender_phone_private Text'sender_phone_private
	     | Text'a_Text'sender_fax Text'sender_fax
	     | Text'a_Text'sender_company Text'sender_company
	     | Text'a_Text'sender_phone_work Text'sender_phone_work
	     | Text'a_Text'sender_street Text'sender_street
	     | Text'a_Text'sender_city Text'sender_city
	     | Text'a_Text'sender_postal_code Text'sender_postal_code
	     | Text'a_Text'sender_country Text'sender_country
	     | Text'a_Text'sender_state_or_province Text'sender_state_or_province
	     | Text'a_Text'author_name Text'author_name
	     | Text'a_Text'author_initials Text'author_initials
	     | Text'a_Text'placeholder Text'placeholder
	     | Text'a_Text'variable_set Text'variable_set
	     | Text'a_Text'variable_get Text'variable_get
	     | Text'a_Text'variable_input Text'variable_input
	     | Text'a_Text'user_field_get Text'user_field_get
	     | Text'a_Text'user_field_input Text'user_field_input
	     | Text'a_Text'sequence Text'sequence
	     | Text'a_Text'expression Text'expression
	     | Text'a_Text'text_input Text'text_input
	     | Text'a_Text'database_display Text'database_display
	     | Text'a_Text'database_next Text'database_next
	     | Text'a_Text'database_select Text'database_select
	     | Text'a_Text'database_row_number Text'database_row_number
	     | Text'a_Text'database_name Text'database_name
	     | Text'a_Text'initial_creator Text'initial_creator
	     | Text'a_Text'creation_date Text'creation_date
	     | Text'a_Text'creation_time Text'creation_time
	     | Text'a_Text'description Text'description
	     | Text'a_Text'user_defined Text'user_defined
	     | Text'a_Text'print_time Text'print_time
	     | Text'a_Text'print_date Text'print_date
	     | Text'a_Text'printed_by Text'printed_by
	     | Text'a_Text'title Text'title
	     | Text'a_Text'subject Text'subject
	     | Text'a_Text'keywords Text'keywords
	     | Text'a_Text'editing_cycles Text'editing_cycles
	     | Text'a_Text'editing_duration Text'editing_duration
	     | Text'a_Text'modification_time Text'modification_time
	     | Text'a_Text'modification_date Text'modification_date
	     | Text'a_Text'creator Text'creator
	     | Text'a_Text'conditional_text Text'conditional_text
	     | Text'a_Text'hidden_text Text'hidden_text
	     | Text'a_Text'hidden_paragraph Text'hidden_paragraph
	     | Text'a_Text'chapter Text'chapter
	     | Text'a_Text'file_name Text'file_name
	     | Text'a_Text'template_name Text'template_name
	     | Text'a_Text'page_variable_set Text'page_variable_set
	     | Text'a_Text'page_variable_get Text'page_variable_get
	     | Text'a_Text'execute_macro Text'execute_macro
	     | Text'a_Text'dde_connection Text'dde_connection
	     | Text'a_Text'reference_ref Text'reference_ref
	     | Text'a_Text'sequence_ref Text'sequence_ref
	     | Text'a_Text'bookmark_ref Text'bookmark_ref
	     | Text'a_Text'footnote_ref Text'footnote_ref
	     | Text'a_Text'endnote_ref Text'endnote_ref
	     | Text'a_Text'sheet_name Text'sheet_name
	     | Text'a_Text'bibliography_mark Text'bibliography_mark
	     | Text'a_Text'page_count Text'page_count
	     | Text'a_Text'paragraph_count Text'paragraph_count
	     | Text'a_Text'word_count Text'word_count
	     | Text'a_Text'character_count Text'character_count
	     | Text'a_Text'table_count Text'table_count
	     | Text'a_Text'image_count Text'image_count
	     | Text'a_Text'object_count Text'object_count
	     | Text'a_Office'annotation Office'annotation
	     | Text'a_Text'script Text'script
	     | Text'a_Text'measure Text'measure
	     | Text'a_Draw'rect Draw'rect
	     | Text'a_Draw'line Draw'line
	     | Text'a_Draw'polyline Draw'polyline
	     | Text'a_Draw'polygon Draw'polygon
	     | Text'a_Draw'path Draw'path
	     | Text'a_Draw'circle Draw'circle
	     | Text'a_Draw'ellipse Draw'ellipse
	     | Text'a_Draw'g Draw'g
	     | Text'a_Draw'page_thumbnail Draw'page_thumbnail
	     | Text'a_Draw'text_box Draw'text_box
	     | Text'a_Draw'image Draw'image
	     | Text'a_Draw'object Draw'object
	     | Text'a_Draw'object_ole Draw'object_ole
	     | Text'a_Draw'applet Draw'applet
	     | Text'a_Draw'floating_frame Draw'floating_frame
	     | Text'a_Draw'plugin Draw'plugin
	     | Text'a_Draw'measure Draw'measure
	     | Text'a_Draw'caption Draw'caption
	     | Text'a_Draw'connector Draw'connector
	     | Text'a_Chart'chart Chart'chart
	     | Text'a_Dr3d'scene Dr3d'scene
	     | Text'a_Draw'control Draw'control
	     | Text'a_Text'toc_mark_start Text'toc_mark_start
	     | Text'a_Text'toc_mark_end Text'toc_mark_end
	     | Text'a_Text'toc_mark Text'toc_mark
	     | Text'a_Text'user_index_mark_start Text'user_index_mark_start
	     | Text'a_Text'user_index_mark_end Text'user_index_mark_end
	     | Text'a_Text'user_index_mark Text'user_index_mark
	     | Text'a_Text'alphabetical_index_mark_start Text'alphabetical_index_mark_start
	     | Text'a_Text'alphabetical_index_mark_end Text'alphabetical_index_mark_end
	     | Text'a_Text'alphabetical_index_mark Text'alphabetical_index_mark
	     | Text'a_Text'change Text'change
	     | Text'a_Text'change_start Text'change_start
	     | Text'a_Text'change_end Text'change_end
	     | Text'a_Draw'a Draw'a
	     | Text'a_Text'ruby Text'ruby
	     deriving (Eq,Show)
data Text'a_xlink'type = Text'a_xlink'type_simple
		       deriving (Eq,Show)
data Text'a_xlink'actuate = Text'a_xlink'actuate_onRequest
			  deriving (Eq,Show)
data Text'a_xlink'show = Text'a_xlink'show_new  | 
			 Text'a_xlink'show_replace
		       deriving (Eq,Show)
data Text's = Text's
    { text'sText'c :: (Defaultable String)
    } deriving (Eq,Show)
data Text'tab_stop = Text'tab_stop 		deriving (Eq,Show)
data Text'line_break = Text'line_break 		deriving (Eq,Show)
data Text'ordered_list = Text'ordered_listText'list_header_Text'list_item Text'ordered_list_Attrs
									  Text'list_header
									  [Text'list_item]
		       | Text'ordered_listText'list_item Text'ordered_list_Attrs
							 (List1 Text'list_item)
		       deriving (Eq,Show)
data Text'ordered_list_Attrs = Text'ordered_list_Attrs
    { text'ordered_listText'style_name :: (Maybe String)
    , text'ordered_listText'continue_numbering :: (Defaultable String)
    } deriving (Eq,Show)
data Text'unordered_list = Text'unordered_listText'list_header_Text'list_item Text'unordered_list_Attrs
									      Text'list_header
									      [Text'list_item]
			 | Text'unordered_listText'list_item Text'unordered_list_Attrs
							     (List1 Text'list_item)
			 deriving (Eq,Show)
data Text'unordered_list_Attrs = Text'unordered_list_Attrs
    { text'unordered_listText'style_name :: (Maybe String)
    } deriving (Eq,Show)
newtype Text'list_header = Text'list_header (List1 Text'list_header_) 		deriving (Eq,Show)
data Text'list_header_ = Text'list_header_Text'p Text'p
		       | Text'list_header_Text'h Text'h
		       deriving (Eq,Show)
data Text'list_item = Text'list_item Text'list_item_Attrs
				     (List1 Text'list_item_)
		    deriving (Eq,Show)
data Text'list_item_Attrs = Text'list_item_Attrs
    { text'list_itemText'restart_numbering :: (Defaultable String)
    , text'list_itemText'start_value :: (Maybe String)
    } deriving (Eq,Show)
data Text'list_item_ = Text'list_item_Text'p Text'p
		     | Text'list_item_Text'h Text'h
		     | Text'list_item_Text'ordered_list Text'ordered_list
		     | Text'list_item_Text'unordered_list Text'unordered_list
		     deriving (Eq,Show)
data Text'list_style = Text'list_style Text'list_style_Attrs
				       (List1 Text'list_style_)
		     deriving (Eq,Show)
data Text'list_style_Attrs = Text'list_style_Attrs
    { text'list_styleStyle'name :: (Maybe String)
    , text'list_styleText'consecutive_numbering :: (Defaultable String)
    } deriving (Eq,Show)
data Text'list_style_ = Text'list_style_Text'list_level_style_number Text'list_level_style_number
		      | Text'list_style_Text'list_level_style_bullet Text'list_level_style_bullet
		      | Text'list_style_Text'list_level_style_image Text'list_level_style_image
		      deriving (Eq,Show)
data Text'list_level_style_number = Text'list_level_style_number Text'list_level_style_number_Attrs
								 (Maybe Style'properties)
				  deriving (Eq,Show)
data Text'list_level_style_number_Attrs = Text'list_level_style_number_Attrs
    { text'list_level_style_numberText'level :: String
    , text'list_level_style_numberText'style_name :: (Maybe String)
    , text'list_level_style_numberStyle'num_format :: String
    , text'list_level_style_numberStyle'num_prefix :: (Maybe String)
    , text'list_level_style_numberStyle'num_suffix :: (Maybe String)
    , text'list_level_style_numberStyle'num_letter_sync :: (Defaultable String)
    , text'list_level_style_numberText'display_levels :: (Defaultable String)
    , text'list_level_style_numberText'start_value :: (Defaultable String)
    } deriving (Eq,Show)
data Text'list_level_style_bullet = Text'list_level_style_bullet Text'list_level_style_bullet_Attrs
								 (Maybe Style'properties)
				  deriving (Eq,Show)
data Text'list_level_style_bullet_Attrs = Text'list_level_style_bullet_Attrs
    { text'list_level_style_bulletText'level :: String
    , text'list_level_style_bulletText'style_name :: (Maybe String)
    , text'list_level_style_bulletText'bullet_char :: String
    , text'list_level_style_bulletStyle'num_prefix :: (Maybe String)
    , text'list_level_style_bulletStyle'num_suffix :: (Maybe String)
    } deriving (Eq,Show)
data Text'list_level_style_image = Text'list_level_style_image Text'list_level_style_image_Attrs
							       (Maybe Style'properties)
							       (Maybe Office'binary_data)
				 deriving (Eq,Show)
data Text'list_level_style_image_Attrs = Text'list_level_style_image_Attrs
    { text'list_level_style_imageText'level :: String
    , text'list_level_style_imageXlink'type :: (Maybe Text'list_level_style_image_xlink'type)
    , text'list_level_style_imageXlink'href :: (Maybe String)
    , text'list_level_style_imageXlink'actuate :: (Maybe Text'list_level_style_image_xlink'actuate)
    , text'list_level_style_imageXlink'show :: (Maybe Text'list_level_style_image_xlink'show)
    } deriving (Eq,Show)
data Text'list_level_style_image_xlink'type = Text'list_level_style_image_xlink'type_simple
					    deriving (Eq,Show)
data Text'list_level_style_image_xlink'actuate = Text'list_level_style_image_xlink'actuate_onLoad
					       deriving (Eq,Show)
data Text'list_level_style_image_xlink'show = Text'list_level_style_image_xlink'show_embed
					    deriving (Eq,Show)
newtype Text'outline_style = Text'outline_style (List1 Text'outline_level_style) 		deriving (Eq,Show)
data Text'outline_level_style = Text'outline_level_style Text'outline_level_style_Attrs
							 (Maybe Style'properties)
			      deriving (Eq,Show)
data Text'outline_level_style_Attrs = Text'outline_level_style_Attrs
    { text'outline_level_styleText'level :: String
    , text'outline_level_styleText'style_name :: (Maybe String)
    , text'outline_level_styleStyle'num_format :: String
    , text'outline_level_styleStyle'num_prefix :: (Maybe String)
    , text'outline_level_styleStyle'num_suffix :: (Maybe String)
    , text'outline_level_styleStyle'num_letter_sync :: (Defaultable String)
    , text'outline_level_styleText'display_levels :: (Defaultable String)
    , text'outline_level_styleText'start_value :: (Defaultable String)
    } deriving (Eq,Show)
data Text'date = Text'date Text'date_Attrs String
	       deriving (Eq,Show)
data Text'date_Attrs = Text'date_Attrs
    { text'dateText'date_value :: (Maybe String)
    , text'dateText'date_adjust :: (Maybe String)
    , text'dateText'fixed :: (Defaultable String)
    , text'dateStyle'data_style_name :: (Maybe String)
    } deriving (Eq,Show)
data Text'time = Text'time Text'time_Attrs String
	       deriving (Eq,Show)
data Text'time_Attrs = Text'time_Attrs
    { text'timeText'time_value :: (Maybe String)
    , text'timeText'time_adjust :: (Maybe String)
    , text'timeText'fixed :: (Defaultable String)
    , text'timeStyle'data_style_name :: (Maybe String)
    } deriving (Eq,Show)
data Text'page_number = Text'page_number Text'page_number_Attrs
					 String
		      deriving (Eq,Show)
data Text'page_number_Attrs = Text'page_number_Attrs
    { text'page_numberText'page_adjust :: (Maybe String)
    , text'page_numberText'select_page :: (Defaultable Text'page_number_text'select_page)
    , text'page_numberStyle'num_format :: (Maybe String)
    , text'page_numberStyle'num_letter_sync :: (Defaultable String)
    } deriving (Eq,Show)
data Text'page_number_text'select_page = Text'page_number_text'select_page_previous
					  |  Text'page_number_text'select_page_current  | 
					 Text'page_number_text'select_page_next
				       deriving (Eq,Show)
data Text'page_continuation = Text'page_continuation Text'page_continuation_Attrs
						     String
			    deriving (Eq,Show)
data Text'page_continuation_Attrs = Text'page_continuation_Attrs
    { text'page_continuationText'select_page :: Text'page_continuation_text'select_page
    , text'page_continuationText'string_value :: (Maybe String)
    } deriving (Eq,Show)
data Text'page_continuation_text'select_page = Text'page_continuation_text'select_page_previous
					        |  Text'page_continuation_text'select_page_next
					     deriving (Eq,Show)
data Text'sender_firstname = Text'sender_firstname Text'sender_firstname_Attrs
						   String
			   deriving (Eq,Show)
data Text'sender_firstname_Attrs = Text'sender_firstname_Attrs
    { text'sender_firstnameText'fixed :: (Defaultable String)
    } deriving (Eq,Show)
data Text'sender_lastname = Text'sender_lastname Text'sender_lastname_Attrs
						 String
			  deriving (Eq,Show)
data Text'sender_lastname_Attrs = Text'sender_lastname_Attrs
    { text'sender_lastnameText'fixed :: (Defaultable String)
    } deriving (Eq,Show)
data Text'sender_initials = Text'sender_initials Text'sender_initials_Attrs
						 String
			  deriving (Eq,Show)
data Text'sender_initials_Attrs = Text'sender_initials_Attrs
    { text'sender_initialsText'fixed :: (Defaultable String)
    } deriving (Eq,Show)
data Text'sender_title = Text'sender_title Text'sender_title_Attrs
					   String
		       deriving (Eq,Show)
data Text'sender_title_Attrs = Text'sender_title_Attrs
    { text'sender_titleText'fixed :: (Defaultable String)
    } deriving (Eq,Show)
data Text'sender_position = Text'sender_position Text'sender_position_Attrs
						 String
			  deriving (Eq,Show)
data Text'sender_position_Attrs = Text'sender_position_Attrs
    { text'sender_positionText'fixed :: (Defaultable String)
    } deriving (Eq,Show)
data Text'sender_email = Text'sender_email Text'sender_email_Attrs
					   String
		       deriving (Eq,Show)
data Text'sender_email_Attrs = Text'sender_email_Attrs
    { text'sender_emailText'fixed :: (Defaultable String)
    } deriving (Eq,Show)
data Text'sender_phone_private = Text'sender_phone_private Text'sender_phone_private_Attrs
							   String
			       deriving (Eq,Show)
data Text'sender_phone_private_Attrs = Text'sender_phone_private_Attrs
    { text'sender_phone_privateText'fixed :: (Defaultable String)
    } deriving (Eq,Show)
data Text'sender_fax = Text'sender_fax Text'sender_fax_Attrs String
		     deriving (Eq,Show)
data Text'sender_fax_Attrs = Text'sender_fax_Attrs
    { text'sender_faxText'fixed :: (Defaultable String)
    } deriving (Eq,Show)
data Text'sender_company = Text'sender_company Text'sender_company_Attrs
					       String
			 deriving (Eq,Show)
data Text'sender_company_Attrs = Text'sender_company_Attrs
    { text'sender_companyText'fixed :: (Defaultable String)
    } deriving (Eq,Show)
data Text'sender_phone_work = Text'sender_phone_work Text'sender_phone_work_Attrs
						     String
			    deriving (Eq,Show)
data Text'sender_phone_work_Attrs = Text'sender_phone_work_Attrs
    { text'sender_phone_workText'fixed :: (Defaultable String)
    } deriving (Eq,Show)
data Text'sender_street = Text'sender_street Text'sender_street_Attrs
					     String
			deriving (Eq,Show)
data Text'sender_street_Attrs = Text'sender_street_Attrs
    { text'sender_streetText'fixed :: (Defaultable String)
    } deriving (Eq,Show)
data Text'sender_city = Text'sender_city Text'sender_city_Attrs
					 String
		      deriving (Eq,Show)
data Text'sender_city_Attrs = Text'sender_city_Attrs
    { text'sender_cityText'fixed :: (Defaultable String)
    } deriving (Eq,Show)
data Text'sender_postal_code = Text'sender_postal_code Text'sender_postal_code_Attrs
						       String
			     deriving (Eq,Show)
data Text'sender_postal_code_Attrs = Text'sender_postal_code_Attrs
    { text'sender_postal_codeText'fixed :: (Defaultable String)
    } deriving (Eq,Show)
data Text'sender_country = Text'sender_country Text'sender_country_Attrs
					       String
			 deriving (Eq,Show)
data Text'sender_country_Attrs = Text'sender_country_Attrs
    { text'sender_countryText'fixed :: (Defaultable String)
    } deriving (Eq,Show)
data Text'sender_state_or_province = Text'sender_state_or_province Text'sender_state_or_province_Attrs
								   String
				   deriving (Eq,Show)
data Text'sender_state_or_province_Attrs = Text'sender_state_or_province_Attrs
    { text'sender_state_or_provinceText'fixed :: (Defaultable String)
    } deriving (Eq,Show)
data Text'author_name = Text'author_name Text'author_name_Attrs
					 String
		      deriving (Eq,Show)
data Text'author_name_Attrs = Text'author_name_Attrs
    { text'author_nameText'fixed :: (Defaultable String)
    } deriving (Eq,Show)
data Text'author_initials = Text'author_initials Text'author_initials_Attrs
						 String
			  deriving (Eq,Show)
data Text'author_initials_Attrs = Text'author_initials_Attrs
    { text'author_initialsText'fixed :: (Defaultable String)
    } deriving (Eq,Show)
data Text'placeholder = Text'placeholder Text'placeholder_Attrs
					 String
		      deriving (Eq,Show)
data Text'placeholder_Attrs = Text'placeholder_Attrs
    { text'placeholderText'placeholder_type :: Text'placeholder_text'placeholder_type
    , text'placeholderText'description :: (Maybe String)
    } deriving (Eq,Show)
data Text'placeholder_text'placeholder_type = Text'placeholder_text'placeholder_type_text
					       |  Text'placeholder_text'placeholder_type_table  | 
					      Text'placeholder_text'placeholder_type_text_box  | 
					      Text'placeholder_text'placeholder_type_image  | 
					      Text'placeholder_text'placeholder_type_object
					    deriving (Eq,Show)
newtype Text'variable_decls = Text'variable_decls [Text'variable_decl] 		deriving (Eq,Show)
data Text'variable_decl = Text'variable_decl
    { text'variable_declText'name :: String
    , text'variable_declText'value_type :: (Maybe Text'variable_decl_text'value_type)
    , text'variable_declText'currency :: (Maybe String)
    , text'variable_declText'value :: (Maybe String)
    , text'variable_declText'date_value :: (Maybe String)
    , text'variable_declText'time_value :: (Maybe String)
    , text'variable_declText'boolean_value :: (Maybe String)
    , text'variable_declText'string_value :: (Maybe String)
    } deriving (Eq,Show)
data Text'variable_decl_text'value_type = Text'variable_decl_text'value_type_float
					   |  Text'variable_decl_text'value_type_time  | 
					  Text'variable_decl_text'value_type_date  | 
					  Text'variable_decl_text'value_type_percentage  | 
					  Text'variable_decl_text'value_type_currency  | 
					  Text'variable_decl_text'value_type_boolean  | 
					  Text'variable_decl_text'value_type_string
					deriving (Eq,Show)
data Text'variable_set = Text'variable_set Text'variable_set_Attrs
					   String
		       deriving (Eq,Show)
data Text'variable_set_Attrs = Text'variable_set_Attrs
    { text'variable_setText'name :: String
    , text'variable_setText'formula :: (Maybe String)
    , text'variable_setText'value_type :: (Maybe Text'variable_set_text'value_type)
    , text'variable_setText'currency :: (Maybe String)
    , text'variable_setText'value :: (Maybe String)
    , text'variable_setText'date_value :: (Maybe String)
    , text'variable_setText'time_value :: (Maybe String)
    , text'variable_setText'boolean_value :: (Maybe String)
    , text'variable_setText'string_value :: (Maybe String)
    , text'variable_setText'display :: (Defaultable Text'variable_set_text'display)
    , text'variable_setStyle'data_style_name :: (Maybe String)
    } deriving (Eq,Show)
data Text'variable_set_text'value_type = Text'variable_set_text'value_type_float
					  |  Text'variable_set_text'value_type_time  | 
					 Text'variable_set_text'value_type_date  | 
					 Text'variable_set_text'value_type_percentage  | 
					 Text'variable_set_text'value_type_currency  | 
					 Text'variable_set_text'value_type_boolean  | 
					 Text'variable_set_text'value_type_string
				       deriving (Eq,Show)
data Text'variable_set_text'display = Text'variable_set_text'display_value
				       |  Text'variable_set_text'display_none
				    deriving (Eq,Show)
data Text'variable_get = Text'variable_get Text'variable_get_Attrs
					   String
		       deriving (Eq,Show)
data Text'variable_get_Attrs = Text'variable_get_Attrs
    { text'variable_getText'name :: String
    , text'variable_getText'display :: (Defaultable Text'variable_get_text'display)
    , text'variable_getStyle'data_style_name :: (Maybe String)
    , text'variable_getText'value_type :: (Maybe Text'variable_get_text'value_type)
    , text'variable_getText'currency :: (Maybe String)
    } deriving (Eq,Show)
data Text'variable_get_text'display = Text'variable_get_text'display_value
				       |  Text'variable_get_text'display_formula
				    deriving (Eq,Show)
data Text'variable_get_text'value_type = Text'variable_get_text'value_type_float
					  |  Text'variable_get_text'value_type_time  | 
					 Text'variable_get_text'value_type_date  | 
					 Text'variable_get_text'value_type_percentage  | 
					 Text'variable_get_text'value_type_currency  | 
					 Text'variable_get_text'value_type_boolean  | 
					 Text'variable_get_text'value_type_string
				       deriving (Eq,Show)
data Text'variable_input = Text'variable_input Text'variable_input_Attrs
					       String
			 deriving (Eq,Show)
data Text'variable_input_Attrs = Text'variable_input_Attrs
    { text'variable_inputText'name :: String
    , text'variable_inputText'description :: (Maybe String)
    , text'variable_inputText'value_type :: (Maybe Text'variable_input_text'value_type)
    , text'variable_inputText'currency :: (Maybe String)
    , text'variable_inputText'value :: (Maybe String)
    , text'variable_inputText'date_value :: (Maybe String)
    , text'variable_inputText'time_value :: (Maybe String)
    , text'variable_inputText'boolean_value :: (Maybe String)
    , text'variable_inputText'string_value :: (Maybe String)
    , text'variable_inputText'display :: (Defaultable Text'variable_input_text'display)
    , text'variable_inputStyle'data_style_name :: (Maybe String)
    } deriving (Eq,Show)
data Text'variable_input_text'value_type = Text'variable_input_text'value_type_float
					    |  Text'variable_input_text'value_type_time  | 
					   Text'variable_input_text'value_type_date  | 
					   Text'variable_input_text'value_type_percentage  | 
					   Text'variable_input_text'value_type_currency  | 
					   Text'variable_input_text'value_type_boolean  | 
					   Text'variable_input_text'value_type_string
					 deriving (Eq,Show)
data Text'variable_input_text'display = Text'variable_input_text'display_value
					 |  Text'variable_input_text'display_none
				      deriving (Eq,Show)
newtype Text'user_field_decls = Text'user_field_decls [Text'user_field_decl] 		deriving (Eq,Show)
data Text'user_field_decl = Text'user_field_decl
    { text'user_field_declText'name :: String
    , text'user_field_declText'formula :: (Maybe String)
    , text'user_field_declText'value_type :: (Maybe Text'user_field_decl_text'value_type)
    , text'user_field_declText'currency :: (Maybe String)
    , text'user_field_declText'value :: (Maybe String)
    , text'user_field_declText'date_value :: (Maybe String)
    , text'user_field_declText'time_value :: (Maybe String)
    , text'user_field_declText'boolean_value :: (Maybe String)
    , text'user_field_declText'string_value :: (Maybe String)
    } deriving (Eq,Show)
data Text'user_field_decl_text'value_type = Text'user_field_decl_text'value_type_float
					     |  Text'user_field_decl_text'value_type_time  | 
					    Text'user_field_decl_text'value_type_date  | 
					    Text'user_field_decl_text'value_type_percentage  | 
					    Text'user_field_decl_text'value_type_currency  | 
					    Text'user_field_decl_text'value_type_boolean  | 
					    Text'user_field_decl_text'value_type_string
					  deriving (Eq,Show)
data Text'user_field_get = Text'user_field_get Text'user_field_get_Attrs
					       String
			 deriving (Eq,Show)
data Text'user_field_get_Attrs = Text'user_field_get_Attrs
    { text'user_field_getText'name :: String
    , text'user_field_getText'display :: (Defaultable Text'user_field_get_text'display)
    , text'user_field_getStyle'data_style_name :: (Maybe String)
    } deriving (Eq,Show)
data Text'user_field_get_text'display = Text'user_field_get_text'display_value
					 |  Text'user_field_get_text'display_formula  | 
					Text'user_field_get_text'display_none
				      deriving (Eq,Show)
data Text'user_field_input = Text'user_field_input Text'user_field_input_Attrs
						   String
			   deriving (Eq,Show)
data Text'user_field_input_Attrs = Text'user_field_input_Attrs
    { text'user_field_inputText'name :: String
    , text'user_field_inputText'description :: (Maybe String)
    , text'user_field_inputStyle'data_style_name :: (Maybe String)
    } deriving (Eq,Show)
newtype Text'sequence_decls = Text'sequence_decls [Text'sequence_decl] 		deriving (Eq,Show)
data Text'sequence_decl = Text'sequence_decl
    { text'sequence_declText'name :: String
    , text'sequence_declText'display_outline_level :: (Defaultable String)
    , text'sequence_declText'separation_character :: (Defaultable String)
    } deriving (Eq,Show)
data Text'sequence = Text'sequence Text'sequence_Attrs String
		   deriving (Eq,Show)
data Text'sequence_Attrs = Text'sequence_Attrs
    { text'sequenceText'name :: String
    , text'sequenceText'formula :: (Maybe String)
    , text'sequenceStyle'num_format :: (Maybe String)
    , text'sequenceStyle'num_letter_sync :: (Defaultable String)
    , text'sequenceText'ref_name :: (Maybe String)
    } deriving (Eq,Show)
data Text'expression = Text'expression Text'expression_Attrs String
		     deriving (Eq,Show)
data Text'expression_Attrs = Text'expression_Attrs
    { text'expressionText'formula :: (Maybe String)
    , text'expressionText'display :: (Defaultable Text'expression_text'display)
    , text'expressionText'value_type :: (Maybe Text'expression_text'value_type)
    , text'expressionText'currency :: (Maybe String)
    , text'expressionText'value :: (Maybe String)
    , text'expressionText'date_value :: (Maybe String)
    , text'expressionText'time_value :: (Maybe String)
    , text'expressionText'boolean_value :: (Maybe String)
    , text'expressionText'string_value :: (Maybe String)
    , text'expressionStyle'data_style_name :: (Maybe String)
    } deriving (Eq,Show)
data Text'expression_text'display = Text'expression_text'display_value
				     |  Text'expression_text'display_formula
				  deriving (Eq,Show)
data Text'expression_text'value_type = Text'expression_text'value_type_float
				        |  Text'expression_text'value_type_time  | 
				       Text'expression_text'value_type_date  | 
				       Text'expression_text'value_type_percentage  | 
				       Text'expression_text'value_type_currency  | 
				       Text'expression_text'value_type_boolean  | 
				       Text'expression_text'value_type_string
				     deriving (Eq,Show)
data Text'text_input = Text'text_input Text'text_input_Attrs String
		     deriving (Eq,Show)
data Text'text_input_Attrs = Text'text_input_Attrs
    { text'text_inputText'description :: (Maybe String)
    } deriving (Eq,Show)
data Text'database_display = Text'database_display Text'database_display_Attrs
						   String
			   deriving (Eq,Show)
data Text'database_display_Attrs = Text'database_display_Attrs
    { text'database_displayText'database_name :: String
    , text'database_displayText'table_name :: String
    , text'database_displayText'table_type :: (Maybe Text'database_display_text'table_type)
    , text'database_displayText'column_name :: String
    , text'database_displayStyle'data_style_name :: (Maybe String)
    , text'database_displayText'display :: (Maybe Text'database_display_text'display)
    } deriving (Eq,Show)
data Text'database_display_text'table_type = Text'database_display_text'table_type_table
					      |  Text'database_display_text'table_type_query  | 
					     Text'database_display_text'table_type_command
					   deriving (Eq,Show)
data Text'database_display_text'display = Text'database_display_text'display_none
					   |  Text'database_display_text'display_value
					deriving (Eq,Show)
data Text'database_next = Text'database_next Text'database_next_Attrs
					     String
			deriving (Eq,Show)
data Text'database_next_Attrs = Text'database_next_Attrs
    { text'database_nextText'database_name :: String
    , text'database_nextText'table_name :: String
    , text'database_nextText'table_type :: (Maybe Text'database_next_text'table_type)
    , text'database_nextText'condition :: (Maybe String)
    } deriving (Eq,Show)
data Text'database_next_text'table_type = Text'database_next_text'table_type_table
					   |  Text'database_next_text'table_type_query  | 
					  Text'database_next_text'table_type_command
					deriving (Eq,Show)
data Text'database_select = Text'database_select Text'database_select_Attrs
						 String
			  deriving (Eq,Show)
data Text'database_select_Attrs = Text'database_select_Attrs
    { text'database_selectText'database_name :: String
    , text'database_selectText'table_name :: String
    , text'database_selectText'table_type :: (Maybe Text'database_select_text'table_type)
    , text'database_selectText'condition :: (Maybe String)
    , text'database_selectText'row_number :: String
    } deriving (Eq,Show)
data Text'database_select_text'table_type = Text'database_select_text'table_type_table
					     |  Text'database_select_text'table_type_query  | 
					    Text'database_select_text'table_type_command
					  deriving (Eq,Show)
data Text'database_row_number = Text'database_row_number Text'database_row_number_Attrs
							 String
			      deriving (Eq,Show)
data Text'database_row_number_Attrs = Text'database_row_number_Attrs
    { text'database_row_numberText'database_name :: String
    , text'database_row_numberText'table_name :: String
    , text'database_row_numberText'table_type :: (Maybe Text'database_row_number_text'table_type)
    , text'database_row_numberStyle'num_format :: (Maybe String)
    , text'database_row_numberStyle'num_letter_sync :: (Defaultable String)
    , text'database_row_numberText'value :: (Maybe String)
    , text'database_row_numberText'display :: (Maybe Text'database_row_number_text'display)
    } deriving (Eq,Show)
data Text'database_row_number_text'table_type = Text'database_row_number_text'table_type_table
						 |  Text'database_row_number_text'table_type_query
						 |  Text'database_row_number_text'table_type_command
					      deriving (Eq,Show)
data Text'database_row_number_text'display = Text'database_row_number_text'display_none
					      |  Text'database_row_number_text'display_value
					   deriving (Eq,Show)
data Text'database_name = Text'database_name Text'database_name_Attrs
					     String
			deriving (Eq,Show)
data Text'database_name_Attrs = Text'database_name_Attrs
    { text'database_nameText'database_name :: String
    , text'database_nameText'table_name :: String
    , text'database_nameText'table_type :: (Maybe Text'database_name_text'table_type)
    , text'database_nameText'display :: (Maybe Text'database_name_text'display)
    } deriving (Eq,Show)
data Text'database_name_text'table_type = Text'database_name_text'table_type_table
					   |  Text'database_name_text'table_type_query  | 
					  Text'database_name_text'table_type_command
					deriving (Eq,Show)
data Text'database_name_text'display = Text'database_name_text'display_none
				        |  Text'database_name_text'display_value
				     deriving (Eq,Show)
data Text'initial_creator = Text'initial_creator Text'initial_creator_Attrs
						 String
			  deriving (Eq,Show)
data Text'initial_creator_Attrs = Text'initial_creator_Attrs
    { text'initial_creatorText'fixed :: (Defaultable String)
    } deriving (Eq,Show)
data Text'creation_date = Text'creation_date Text'creation_date_Attrs
					     String
			deriving (Eq,Show)
data Text'creation_date_Attrs = Text'creation_date_Attrs
    { text'creation_dateText'fixed :: (Defaultable String)
    , text'creation_dateText'date_value :: (Maybe String)
    , text'creation_dateStyle'data_style_name :: (Maybe String)
    } deriving (Eq,Show)
data Text'creation_time = Text'creation_time Text'creation_time_Attrs
					     String
			deriving (Eq,Show)
data Text'creation_time_Attrs = Text'creation_time_Attrs
    { text'creation_timeText'fixed :: (Defaultable String)
    , text'creation_timeText'time_value :: (Maybe String)
    , text'creation_timeStyle'data_style_name :: (Maybe String)
    } deriving (Eq,Show)
data Text'description = Text'description Text'description_Attrs
					 String
		      deriving (Eq,Show)
data Text'description_Attrs = Text'description_Attrs
    { text'descriptionText'fixed :: (Defaultable String)
    } deriving (Eq,Show)
data Text'user_defined = Text'user_defined Text'user_defined_Attrs
					   String
		       deriving (Eq,Show)
data Text'user_defined_Attrs = Text'user_defined_Attrs
    { text'user_definedText'fixed :: (Defaultable String)
    , text'user_definedText'name :: String
    } deriving (Eq,Show)
data Text'print_time = Text'print_time Text'print_time_Attrs String
		     deriving (Eq,Show)
data Text'print_time_Attrs = Text'print_time_Attrs
    { text'print_timeText'fixed :: (Defaultable String)
    , text'print_timeText'time_value :: (Maybe String)
    , text'print_timeStyle'data_style_name :: (Maybe String)
    } deriving (Eq,Show)
data Text'print_date = Text'print_date Text'print_date_Attrs String
		     deriving (Eq,Show)
data Text'print_date_Attrs = Text'print_date_Attrs
    { text'print_dateText'fixed :: (Defaultable String)
    , text'print_dateText'date_value :: (Maybe String)
    , text'print_dateStyle'data_style_name :: (Maybe String)
    } deriving (Eq,Show)
data Text'printed_by = Text'printed_by Text'printed_by_Attrs String
		     deriving (Eq,Show)
data Text'printed_by_Attrs = Text'printed_by_Attrs
    { text'printed_byText'fixed :: (Defaultable String)
    } deriving (Eq,Show)
data Text'title = Text'title Text'title_Attrs String
		deriving (Eq,Show)
data Text'title_Attrs = Text'title_Attrs
    { text'titleText'fixed :: (Defaultable String)
    } deriving (Eq,Show)
data Text'subject = Text'subject Text'subject_Attrs String
		  deriving (Eq,Show)
data Text'subject_Attrs = Text'subject_Attrs
    { text'subjectText'fixed :: (Defaultable String)
    } deriving (Eq,Show)
data Text'keywords = Text'keywords Text'keywords_Attrs String
		   deriving (Eq,Show)
data Text'keywords_Attrs = Text'keywords_Attrs
    { text'keywordsText'fixed :: (Defaultable String)
    } deriving (Eq,Show)
data Text'editing_cycles = Text'editing_cycles Text'editing_cycles_Attrs
					       String
			 deriving (Eq,Show)
data Text'editing_cycles_Attrs = Text'editing_cycles_Attrs
    { text'editing_cyclesText'fixed :: (Defaultable String)
    } deriving (Eq,Show)
data Text'editing_duration = Text'editing_duration Text'editing_duration_Attrs
						   String
			   deriving (Eq,Show)
data Text'editing_duration_Attrs = Text'editing_duration_Attrs
    { text'editing_durationText'fixed :: (Defaultable String)
    , text'editing_durationText'duration :: (Maybe String)
    , text'editing_durationStyle'data_style_name :: (Maybe String)
    } deriving (Eq,Show)
data Text'modification_time = Text'modification_time Text'modification_time_Attrs
						     String
			    deriving (Eq,Show)
data Text'modification_time_Attrs = Text'modification_time_Attrs
    { text'modification_timeText'fixed :: (Defaultable String)
    , text'modification_timeText'time_value :: (Maybe String)
    , text'modification_timeStyle'data_style_name :: (Maybe String)
    } deriving (Eq,Show)
data Text'modification_date = Text'modification_date Text'modification_date_Attrs
						     String
			    deriving (Eq,Show)
data Text'modification_date_Attrs = Text'modification_date_Attrs
    { text'modification_dateText'fixed :: (Defaultable String)
    , text'modification_dateText'date_value :: (Maybe String)
    , text'modification_dateStyle'data_style_name :: (Maybe String)
    } deriving (Eq,Show)
data Text'creator = Text'creator Text'creator_Attrs String
		  deriving (Eq,Show)
data Text'creator_Attrs = Text'creator_Attrs
    { text'creatorText'fixed :: (Defaultable String)
    } deriving (Eq,Show)
data Text'conditional_text = Text'conditional_text Text'conditional_text_Attrs
						   String
			   deriving (Eq,Show)
data Text'conditional_text_Attrs = Text'conditional_text_Attrs
    { text'conditional_textText'condition :: String
    , text'conditional_textText'string_value_if_false :: String
    , text'conditional_textText'string_value_if_true :: String
    , text'conditional_textText'current_value :: (Defaultable String)
    } deriving (Eq,Show)
data Text'hidden_text = Text'hidden_text Text'hidden_text_Attrs
					 String
		      deriving (Eq,Show)
data Text'hidden_text_Attrs = Text'hidden_text_Attrs
    { text'hidden_textText'condition :: String
    , text'hidden_textText'string_value :: String
    , text'hidden_textText'is_hidden :: (Defaultable String)
    } deriving (Eq,Show)
data Text'hidden_paragraph = Text'hidden_paragraph
    { text'hidden_paragraphText'condition :: String
    , text'hidden_paragraphText'is_hidden :: (Defaultable String)
    } deriving (Eq,Show)
data Text'chapter = Text'chapter Text'chapter_Attrs String
		  deriving (Eq,Show)
data Text'chapter_Attrs = Text'chapter_Attrs
    { text'chapterText'display :: (Defaultable Text'chapter_text'display)
    , text'chapterText'outline_level :: (Defaultable String)
    } deriving (Eq,Show)
data Text'chapter_text'display = Text'chapter_text'display_name  | 
				 Text'chapter_text'display_number  | 
				 Text'chapter_text'display_number_and_name  | 
				 Text'chapter_text'display_plain_number_and_name  | 
				 Text'chapter_text'display_plain_number
			       deriving (Eq,Show)
data Text'file_name = Text'file_name Text'file_name_Attrs String
		    deriving (Eq,Show)
data Text'file_name_Attrs = Text'file_name_Attrs
    { text'file_nameText'display :: (Defaultable Text'file_name_text'display)
    , text'file_nameText'fixed :: (Defaultable String)
    } deriving (Eq,Show)
data Text'file_name_text'display = Text'file_name_text'display_full
				    |  Text'file_name_text'display_path  | 
				   Text'file_name_text'display_name  | 
				   Text'file_name_text'display_name_and_extension
				 deriving (Eq,Show)
data Text'template_name = Text'template_name Text'template_name_Attrs
					     String
			deriving (Eq,Show)
data Text'template_name_Attrs = Text'template_name_Attrs
    { text'template_nameText'display :: (Defaultable Text'template_name_text'display)
    } deriving (Eq,Show)
data Text'template_name_text'display = Text'template_name_text'display_full
				        |  Text'template_name_text'display_path  | 
				       Text'template_name_text'display_name  | 
				       Text'template_name_text'display_name_and_extension  | 
				       Text'template_name_text'display_area  | 
				       Text'template_name_text'display_title
				     deriving (Eq,Show)
data Text'page_variable_set = Text'page_variable_set
    { text'page_variable_setText'active :: (Defaultable String)
    , text'page_variable_setText'page_adjust :: (Defaultable String)
    } deriving (Eq,Show)
data Text'page_variable_get = Text'page_variable_get Text'page_variable_get_Attrs
						     String
			    deriving (Eq,Show)
data Text'page_variable_get_Attrs = Text'page_variable_get_Attrs
    { text'page_variable_getStyle'num_format :: (Maybe String)
    , text'page_variable_getStyle'num_letter_sync :: (Defaultable String)
    } deriving (Eq,Show)
data Text'execute_macro = Text'execute_macro Text'execute_macro_Attrs
					     [Text'execute_macro_]
			deriving (Eq,Show)
data Text'execute_macro_Attrs = Text'execute_macro_Attrs
    { text'execute_macroText'description :: (Maybe String)
    } deriving (Eq,Show)
data Text'execute_macro_ = Text'execute_macro_Str String
			 | Text'execute_macro_Office'events Office'events
			 deriving (Eq,Show)
newtype Text'dde_connection_decls = Text'dde_connection_decls [Text'dde_connection_decl] 		deriving (Eq,Show)
data Text'dde_connection_decl = Text'dde_connection_decl
    { text'dde_connection_declText'name :: String
    , text'dde_connection_declOffice'dde_application :: String
    , text'dde_connection_declOffice'dde_topic :: String
    , text'dde_connection_declOffice'dde_item :: String
    , text'dde_connection_declOffice'automatic_update :: (Defaultable String)
    } deriving (Eq,Show)
data Text'dde_connection = Text'dde_connection Text'dde_connection_Attrs
					       String
			 deriving (Eq,Show)
data Text'dde_connection_Attrs = Text'dde_connection_Attrs
    { text'dde_connectionText'connection_name :: String
    } deriving (Eq,Show)
data Text'reference_ref = Text'reference_ref Text'reference_ref_Attrs
					     String
			deriving (Eq,Show)
data Text'reference_ref_Attrs = Text'reference_ref_Attrs
    { text'reference_refText'ref_name :: String
    , text'reference_refText'reference_format :: (Maybe Text'reference_ref_text'reference_format)
    } deriving (Eq,Show)
data Text'reference_ref_text'reference_format = Text'reference_ref_text'reference_format_page
						 |  Text'reference_ref_text'reference_format_chapter
						 |  Text'reference_ref_text'reference_format_text
						 | 
						Text'reference_ref_text'reference_format_direction
					      deriving (Eq,Show)
data Text'sequence_ref = Text'sequence_ref Text'sequence_ref_Attrs
					   String
		       deriving (Eq,Show)
data Text'sequence_ref_Attrs = Text'sequence_ref_Attrs
    { text'sequence_refText'ref_name :: String
    , text'sequence_refText'reference_format :: (Maybe Text'sequence_ref_text'reference_format)
    } deriving (Eq,Show)
data Text'sequence_ref_text'reference_format = Text'sequence_ref_text'reference_format_page
					        |  Text'sequence_ref_text'reference_format_chapter
					        |  Text'sequence_ref_text'reference_format_text  | 
					       Text'sequence_ref_text'reference_format_direction  | 
					       Text'sequence_ref_text'reference_format_category_and_value
					        |  Text'sequence_ref_text'reference_format_caption
					        |  Text'sequence_ref_text'reference_format_value
					     deriving (Eq,Show)
data Text'bookmark_ref = Text'bookmark_ref Text'bookmark_ref_Attrs
					   String
		       deriving (Eq,Show)
data Text'bookmark_ref_Attrs = Text'bookmark_ref_Attrs
    { text'bookmark_refText'ref_name :: String
    , text'bookmark_refText'reference_format :: (Maybe Text'bookmark_ref_text'reference_format)
    } deriving (Eq,Show)
data Text'bookmark_ref_text'reference_format = Text'bookmark_ref_text'reference_format_page
					        |  Text'bookmark_ref_text'reference_format_chapter
					        |  Text'bookmark_ref_text'reference_format_text  | 
					       Text'bookmark_ref_text'reference_format_direction
					     deriving (Eq,Show)
data Text'footnote_ref = Text'footnote_ref Text'footnote_ref_Attrs
					   String
		       deriving (Eq,Show)
data Text'footnote_ref_Attrs = Text'footnote_ref_Attrs
    { text'footnote_refText'ref_name :: String
    , text'footnote_refText'reference_format :: (Maybe Text'footnote_ref_text'reference_format)
    } deriving (Eq,Show)
data Text'footnote_ref_text'reference_format = Text'footnote_ref_text'reference_format_page
					        |  Text'footnote_ref_text'reference_format_chapter
					        |  Text'footnote_ref_text'reference_format_text  | 
					       Text'footnote_ref_text'reference_format_direction
					     deriving (Eq,Show)
data Text'endnote_ref = Text'endnote_ref Text'endnote_ref_Attrs
					 String
		      deriving (Eq,Show)
data Text'endnote_ref_Attrs = Text'endnote_ref_Attrs
    { text'endnote_refText'ref_name :: String
    , text'endnote_refText'reference_format :: (Maybe Text'endnote_ref_text'reference_format)
    } deriving (Eq,Show)
data Text'endnote_ref_text'reference_format = Text'endnote_ref_text'reference_format_page
					       |  Text'endnote_ref_text'reference_format_chapter  | 
					      Text'endnote_ref_text'reference_format_text  | 
					      Text'endnote_ref_text'reference_format_direction
					    deriving (Eq,Show)
newtype Text'sheet_name = Text'sheet_name String 		deriving (Eq,Show)
data Text'page_count = Text'page_count Text'page_count_Attrs String
		     deriving (Eq,Show)
data Text'page_count_Attrs = Text'page_count_Attrs
    { text'page_countStyle'num_format :: (Maybe String)
    , text'page_countStyle'num_letter_sync :: (Defaultable String)
    } deriving (Eq,Show)
data Text'paragraph_count = Text'paragraph_count Text'paragraph_count_Attrs
						 String
			  deriving (Eq,Show)
data Text'paragraph_count_Attrs = Text'paragraph_count_Attrs
    { text'paragraph_countStyle'num_format :: (Maybe String)
    , text'paragraph_countStyle'num_letter_sync :: (Defaultable String)
    } deriving (Eq,Show)
data Text'word_count = Text'word_count Text'word_count_Attrs String
		     deriving (Eq,Show)
data Text'word_count_Attrs = Text'word_count_Attrs
    { text'word_countStyle'num_format :: (Maybe String)
    , text'word_countStyle'num_letter_sync :: (Defaultable String)
    } deriving (Eq,Show)
data Text'character_count = Text'character_count Text'character_count_Attrs
						 String
			  deriving (Eq,Show)
data Text'character_count_Attrs = Text'character_count_Attrs
    { text'character_countStyle'num_format :: (Maybe String)
    , text'character_countStyle'num_letter_sync :: (Defaultable String)
    } deriving (Eq,Show)
data Text'table_count = Text'table_count Text'table_count_Attrs
					 String
		      deriving (Eq,Show)
data Text'table_count_Attrs = Text'table_count_Attrs
    { text'table_countStyle'num_format :: (Maybe String)
    , text'table_countStyle'num_letter_sync :: (Defaultable String)
    } deriving (Eq,Show)
data Text'image_count = Text'image_count Text'image_count_Attrs
					 String
		      deriving (Eq,Show)
data Text'image_count_Attrs = Text'image_count_Attrs
    { text'image_countStyle'num_format :: (Maybe String)
    , text'image_countStyle'num_letter_sync :: (Defaultable String)
    } deriving (Eq,Show)
data Text'object_count = Text'object_count Text'object_count_Attrs
					   String
		       deriving (Eq,Show)
data Text'object_count_Attrs = Text'object_count_Attrs
    { text'object_countStyle'num_format :: (Maybe String)
    , text'object_countStyle'num_letter_sync :: (Defaultable String)
    } deriving (Eq,Show)
data Text'bibliography_mark = Text'bibliography_mark Text'bibliography_mark_Attrs
						     String
			    deriving (Eq,Show)
data Text'bibliography_mark_Attrs = Text'bibliography_mark_Attrs
    { text'bibliography_markText'bibliography_type :: Text'bibliography_mark_text'bibliography_type
    , text'bibliography_markText'identifier :: (Maybe String)
    , text'bibliography_markText'address :: (Maybe String)
    , text'bibliography_markText'annote :: (Maybe String)
    , text'bibliography_markText'author :: (Maybe String)
    , text'bibliography_markText'booktitle :: (Maybe String)
    , text'bibliography_markText'chapter :: (Maybe String)
    , text'bibliography_markText'edition :: (Maybe String)
    , text'bibliography_markText'editor :: (Maybe String)
    , text'bibliography_markText'howpublished :: (Maybe String)
    , text'bibliography_markText'institution :: (Maybe String)
    , text'bibliography_markText'journal :: (Maybe String)
    , text'bibliography_markText'month :: (Maybe String)
    , text'bibliography_markText'note :: (Maybe String)
    , text'bibliography_markText'number :: (Maybe String)
    , text'bibliography_markText'organizations :: (Maybe String)
    , text'bibliography_markText'pages :: (Maybe String)
    , text'bibliography_markText'publisher :: (Maybe String)
    , text'bibliography_markText'school :: (Maybe String)
    , text'bibliography_markText'series :: (Maybe String)
    , text'bibliography_markText'title :: (Maybe String)
    , text'bibliography_markText'report_type :: (Maybe String)
    , text'bibliography_markText'volume :: (Maybe String)
    , text'bibliography_markText'year :: (Maybe String)
    , text'bibliography_markText'url :: (Maybe String)
    , text'bibliography_markText'custom1 :: (Maybe String)
    , text'bibliography_markText'custom2 :: (Maybe String)
    , text'bibliography_markText'custom3 :: (Maybe String)
    , text'bibliography_markText'custom4 :: (Maybe String)
    , text'bibliography_markText'custom5 :: (Maybe String)
    , text'bibliography_markText'isbn :: (Maybe String)
    } deriving (Eq,Show)
data Text'bibliography_mark_text'bibliography_type = Text'bibliography_mark_text'bibliography_type_article
						      | 
						     Text'bibliography_mark_text'bibliography_type_book
						      | 
						     Text'bibliography_mark_text'bibliography_type_booklet
						      | 
						     Text'bibliography_mark_text'bibliography_type_conference
						      | 
						     Text'bibliography_mark_text'bibliography_type_custom1
						      | 
						     Text'bibliography_mark_text'bibliography_type_custom2
						      | 
						     Text'bibliography_mark_text'bibliography_type_custom3
						      | 
						     Text'bibliography_mark_text'bibliography_type_custom4
						      | 
						     Text'bibliography_mark_text'bibliography_type_custom5
						      | 
						     Text'bibliography_mark_text'bibliography_type_email
						      | 
						     Text'bibliography_mark_text'bibliography_type_inbook
						      | 
						     Text'bibliography_mark_text'bibliography_type_incollection
						      | 
						     Text'bibliography_mark_text'bibliography_type_inproceedings
						      | 
						     Text'bibliography_mark_text'bibliography_type_journal
						      | 
						     Text'bibliography_mark_text'bibliography_type_manual
						      | 
						     Text'bibliography_mark_text'bibliography_type_mastersthesis
						      | 
						     Text'bibliography_mark_text'bibliography_type_misc
						      | 
						     Text'bibliography_mark_text'bibliography_type_phdthesis
						      | 
						     Text'bibliography_mark_text'bibliography_type_proceedings
						      | 
						     Text'bibliography_mark_text'bibliography_type_techreport
						      | 
						     Text'bibliography_mark_text'bibliography_type_unpublished
						      | 
						     Text'bibliography_mark_text'bibliography_type_www
						   deriving (Eq,Show)
data Text'bookmark = Text'bookmark
    { text'bookmarkText'name :: String
    } deriving (Eq,Show)
data Text'bookmark_start = Text'bookmark_start
    { text'bookmark_startText'name :: String
    } deriving (Eq,Show)
data Text'bookmark_end = Text'bookmark_end
    { text'bookmark_endText'name :: String
    } deriving (Eq,Show)
data Text'reference_mark = Text'reference_mark
    { text'reference_markText'name :: String
    } deriving (Eq,Show)
data Text'reference_mark_start = Text'reference_mark_start
    { text'reference_mark_startText'name :: String
    } deriving (Eq,Show)
data Text'reference_mark_end = Text'reference_mark_end
    { text'reference_mark_endText'name :: String
    } deriving (Eq,Show)
data Text'footnotes_configuration = Text'footnotes_configuration Text'footnotes_configuration_Attrs
								 (Maybe Text'footnote_continuation_notice_forward)
								 (Maybe Text'footnote_continuation_notice_backward)
				  deriving (Eq,Show)
data Text'footnotes_configuration_Attrs = Text'footnotes_configuration_Attrs
    { text'footnotes_configurationStyle'num_prefix :: (Maybe String)
    , text'footnotes_configurationStyle'num_suffix :: (Maybe String)
    , text'footnotes_configurationStyle'num_format :: (Maybe String)
    , text'footnotes_configurationStyle'num_letter_sync :: (Maybe String)
    , text'footnotes_configurationText'citation_body_style_name :: (Maybe String)
    , text'footnotes_configurationText'citation_style_name :: (Maybe String)
    , text'footnotes_configurationText'default_style_name :: (Maybe String)
    , text'footnotes_configurationText'master_page_name :: (Maybe String)
    , text'footnotes_configurationText'start_value :: (Maybe String)
    , text'footnotes_configurationText'footnotes_position :: (Defaultable Text'footnotes_configuration_text'footnotes_position)
    , text'footnotes_configurationText'start_numbering_at :: (Defaultable Text'footnotes_configuration_text'start_numbering_at)
    } deriving (Eq,Show)
data Text'footnotes_configuration_text'footnotes_position = Text'footnotes_configuration_text'footnotes_position_document
							     | 
							    Text'footnotes_configuration_text'footnotes_position_page
							  deriving (Eq,Show)
data Text'footnotes_configuration_text'start_numbering_at = Text'footnotes_configuration_text'start_numbering_at_document
							     | 
							    Text'footnotes_configuration_text'start_numbering_at_chapter
							     | 
							    Text'footnotes_configuration_text'start_numbering_at_page
							  deriving (Eq,Show)
newtype Text'footnote_continuation_notice_forward = Text'footnote_continuation_notice_forward String 		deriving (Eq,Show)
newtype Text'footnote_continuation_notice_backward = Text'footnote_continuation_notice_backward String 		deriving (Eq,Show)
data Text'endnotes_configuration = Text'endnotes_configuration
    { text'endnotes_configurationStyle'num_prefix :: (Maybe String)
    , text'endnotes_configurationStyle'num_suffix :: (Maybe String)
    , text'endnotes_configurationStyle'num_format :: (Maybe String)
    , text'endnotes_configurationStyle'num_letter_sync :: (Maybe String)
    , text'endnotes_configurationText'start_value :: (Maybe String)
    , text'endnotes_configurationText'citation_style_name :: (Maybe String)
    , text'endnotes_configurationText'citation_body_style_name :: (Maybe String)
    , text'endnotes_configurationText'default_style_name :: (Maybe String)
    , text'endnotes_configurationText'master_page_name :: (Maybe String)
    } deriving (Eq,Show)
data Text'footnote = Text'footnote Text'footnote_Attrs
				   Text'footnote_citation Text'footnote_body
		   deriving (Eq,Show)
data Text'footnote_Attrs = Text'footnote_Attrs
    { text'footnoteText'id :: (Maybe String)
    } deriving (Eq,Show)
data Text'footnote_citation = Text'footnote_citation Text'footnote_citation_Attrs
						     String
			    deriving (Eq,Show)
data Text'footnote_citation_Attrs = Text'footnote_citation_Attrs
    { text'footnote_citationText'label :: (Maybe String)
    } deriving (Eq,Show)
newtype Text'footnote_body = Text'footnote_body [Text'footnote_body_] 		deriving (Eq,Show)
data Text'footnote_body_ = Text'footnote_body_Text'h Text'h
			 | Text'footnote_body_Text'p Text'p
			 | Text'footnote_body_Text'ordered_list Text'ordered_list
			 | Text'footnote_body_Text'unordered_list Text'unordered_list
			 deriving (Eq,Show)
data Text'endnote = Text'endnote Text'endnote_Attrs
				 Text'endnote_citation Text'endnote_body
		  deriving (Eq,Show)
data Text'endnote_Attrs = Text'endnote_Attrs
    { text'endnoteText'id :: (Maybe String)
    } deriving (Eq,Show)
data Text'endnote_citation = Text'endnote_citation Text'endnote_citation_Attrs
						   String
			   deriving (Eq,Show)
data Text'endnote_citation_Attrs = Text'endnote_citation_Attrs
    { text'endnote_citationText'label :: (Maybe String)
    } deriving (Eq,Show)
newtype Text'endnote_body = Text'endnote_body [Text'endnote_body_] 		deriving (Eq,Show)
data Text'endnote_body_ = Text'endnote_body_Text'h Text'h
			| Text'endnote_body_Text'p Text'p
			| Text'endnote_body_Text'ordered_list Text'ordered_list
			| Text'endnote_body_Text'unordered_list Text'unordered_list
			deriving (Eq,Show)
data Text'section = Text'section Text'section_Attrs
				 (Maybe (OneOf2 Text'section_source Office'dde_source))
				 [(OneOf17 Text'h Text'p Text'ordered_list Text'unordered_list Table'table Text'section Text'table_of_content Text'illustration_index Text'table_index Text'object_index Text'user_index Text'alphabetical_index Text'bibliography Text'index_title Text'change Text'change_start Text'change_end)]
		  deriving (Eq,Show)
data Text'section_Attrs = Text'section_Attrs
    { text'sectionText'name :: String
    , text'sectionText'style_name :: (Maybe String)
    , text'sectionText'protected :: (Defaultable String)
    , text'sectionText'display :: (Defaultable Text'section_text'display)
    , text'sectionText'condition :: (Maybe String)
    , text'sectionText'protection_key :: (Maybe String)
    , text'sectionText'is_hidden :: (Maybe String)
    } deriving (Eq,Show)
data Text'section_text'display = Text'section_text'display_true  | 
				 Text'section_text'display_none  | 
				 Text'section_text'display_condition
			       deriving (Eq,Show)
data Text'section_source = Text'section_source
    { text'section_sourceXlink'href :: (Maybe String)
    , text'section_sourceXlink'type :: (Defaultable Text'section_source_xlink'type)
    , text'section_sourceXlink'show :: (Defaultable Text'section_source_xlink'show)
    , text'section_sourceText'section_name :: (Maybe String)
    , text'section_sourceText'filter_name :: (Maybe String)
    } deriving (Eq,Show)
data Text'section_source_xlink'type = Text'section_source_xlink'type_simple
				    deriving (Eq,Show)
data Text'section_source_xlink'show = Text'section_source_xlink'show_embed
				    deriving (Eq,Show)
data Text'table_of_content = Text'table_of_content Text'table_of_content_Attrs
						   Text'table_of_content_source Text'index_body
			   deriving (Eq,Show)
data Text'table_of_content_Attrs = Text'table_of_content_Attrs
    { text'table_of_contentText'name :: String
    , text'table_of_contentText'style_name :: (Maybe String)
    , text'table_of_contentText'protected :: (Defaultable String)
    } deriving (Eq,Show)
data Text'table_of_content_source = Text'table_of_content_source Text'table_of_content_source_Attrs
								 (Maybe Text'index_title_template)
								 [Text'table_of_content_entry_template]
								 [Text'index_source_styles]
				  deriving (Eq,Show)
data Text'table_of_content_source_Attrs = Text'table_of_content_source_Attrs
    { text'table_of_content_sourceText'outline_level :: (Maybe String)
    , text'table_of_content_sourceText'use_outline_level :: (Defaultable String)
    , text'table_of_content_sourceText'use_index_marks :: (Defaultable String)
    , text'table_of_content_sourceText'use_index_source_styles :: (Defaultable String)
    , text'table_of_content_sourceText'index_scope :: (Defaultable Text'table_of_content_source_text'index_scope)
    , text'table_of_content_sourceText'relative_tab_stop_position :: (Defaultable String)
    , text'table_of_content_sourceFo'language :: (Maybe String)
    , text'table_of_content_sourceFo'country :: (Maybe String)
    , text'table_of_content_sourceText'sort_algorithm :: (Maybe String)
    } deriving (Eq,Show)
data Text'table_of_content_source_text'index_scope = Text'table_of_content_source_text'index_scope_document
						      | 
						     Text'table_of_content_source_text'index_scope_chapter
						   deriving (Eq,Show)
data Text'table_of_content_entry_template = Text'table_of_content_entry_template Text'table_of_content_entry_template_Attrs
										 [Text'table_of_content_entry_template_]
					  deriving (Eq,Show)
data Text'table_of_content_entry_template_Attrs = Text'table_of_content_entry_template_Attrs
    { text'table_of_content_entry_templateText'outline_level :: String
    , text'table_of_content_entry_templateText'style_name :: String
    } deriving (Eq,Show)
data Text'table_of_content_entry_template_ = Text'table_of_content_entry_template_Text'index_entry_chapter_number Text'index_entry_chapter_number
					   | Text'table_of_content_entry_template_Text'index_entry_page_number Text'index_entry_page_number
					   | Text'table_of_content_entry_template_Text'index_entry_text Text'index_entry_text
					   | Text'table_of_content_entry_template_Text'index_entry_span Text'index_entry_span
					   | Text'table_of_content_entry_template_Text'index_entry_tab_stop Text'index_entry_tab_stop
					   | Text'table_of_content_entry_template_Text'index_entry_link_start Text'index_entry_link_start
					   | Text'table_of_content_entry_template_Text'index_entry_link_end Text'index_entry_link_end
					   deriving (Eq,Show)
data Text'illustration_index = Text'illustration_index Text'illustration_index_Attrs
						       Text'illustration_index_source
						       Text'index_body
			     deriving (Eq,Show)
data Text'illustration_index_Attrs = Text'illustration_index_Attrs
    { text'illustration_indexText'name :: String
    , text'illustration_indexText'style_name :: (Maybe String)
    , text'illustration_indexText'protected :: (Defaultable String)
    } deriving (Eq,Show)
data Text'illustration_index_source = Text'illustration_index_source Text'illustration_index_source_Attrs
								     (Maybe Text'index_title_template)
								     (Maybe Text'illustration_index_entry_template)
				    deriving (Eq,Show)
data Text'illustration_index_source_Attrs = Text'illustration_index_source_Attrs
    { text'illustration_index_sourceText'index_scope :: (Defaultable Text'illustration_index_source_text'index_scope)
    , text'illustration_index_sourceText'relative_tab_stop_position :: (Defaultable String)
    , text'illustration_index_sourceText'use_caption :: (Defaultable String)
    , text'illustration_index_sourceText'caption_sequence_name :: (Maybe String)
    , text'illustration_index_sourceText'caption_sequence_format :: (Defaultable Text'illustration_index_source_text'caption_sequence_format)
    , text'illustration_index_sourceFo'language :: (Maybe String)
    , text'illustration_index_sourceFo'country :: (Maybe String)
    , text'illustration_index_sourceText'sort_algorithm :: (Maybe String)
    } deriving (Eq,Show)
data Text'illustration_index_source_text'index_scope = Text'illustration_index_source_text'index_scope_document
						        | 
						       Text'illustration_index_source_text'index_scope_chapter
						     deriving (Eq,Show)
data Text'illustration_index_source_text'caption_sequence_format = Text'illustration_index_source_text'caption_sequence_format_text
								    | 
								   Text'illustration_index_source_text'caption_sequence_format_category_and_value
								    | 
								   Text'illustration_index_source_text'caption_sequence_format_caption
								 deriving (Eq,Show)
data Text'illustration_index_entry_template = Text'illustration_index_entry_template Text'illustration_index_entry_template_Attrs
										     [Text'illustration_index_entry_template_]
					    deriving (Eq,Show)
data Text'illustration_index_entry_template_Attrs = Text'illustration_index_entry_template_Attrs
    { text'illustration_index_entry_templateText'style_name :: String
    } deriving (Eq,Show)
data Text'illustration_index_entry_template_ = Text'illustration_index_entry_template_Text'index_entry_page_number Text'index_entry_page_number
					     | Text'illustration_index_entry_template_Text'index_entry_text Text'index_entry_text
					     | Text'illustration_index_entry_template_Text'index_entry_span Text'index_entry_span
					     | Text'illustration_index_entry_template_Text'index_entry_tab_stop Text'index_entry_tab_stop
					     deriving (Eq,Show)
data Text'table_index = Text'table_index Text'table_index_Attrs
					 Text'table_index_source Text'index_body
		      deriving (Eq,Show)
data Text'table_index_Attrs = Text'table_index_Attrs
    { text'table_indexText'name :: String
    , text'table_indexText'style_name :: (Maybe String)
    , text'table_indexText'protected :: (Defaultable String)
    } deriving (Eq,Show)
data Text'table_index_source = Text'table_index_source Text'table_index_source_Attrs
						       (Maybe Text'index_title_template)
						       (Maybe Text'table_index_entry_template)
			     deriving (Eq,Show)
data Text'table_index_source_Attrs = Text'table_index_source_Attrs
    { text'table_index_sourceText'index_scope :: (Defaultable Text'table_index_source_text'index_scope)
    , text'table_index_sourceText'relative_tab_stop_position :: (Defaultable String)
    , text'table_index_sourceText'use_caption :: (Defaultable String)
    , text'table_index_sourceText'caption_sequence_name :: (Maybe String)
    , text'table_index_sourceText'caption_sequence_format :: (Defaultable Text'table_index_source_text'caption_sequence_format)
    , text'table_index_sourceFo'language :: (Maybe String)
    , text'table_index_sourceFo'country :: (Maybe String)
    , text'table_index_sourceText'sort_algorithm :: (Maybe String)
    } deriving (Eq,Show)
data Text'table_index_source_text'index_scope = Text'table_index_source_text'index_scope_document
						 |  Text'table_index_source_text'index_scope_chapter
					      deriving (Eq,Show)
data Text'table_index_source_text'caption_sequence_format = Text'table_index_source_text'caption_sequence_format_text
							     | 
							    Text'table_index_source_text'caption_sequence_format_category_and_value
							     | 
							    Text'table_index_source_text'caption_sequence_format_caption
							  deriving (Eq,Show)
data Text'table_index_entry_template = Text'table_index_entry_template Text'table_index_entry_template_Attrs
								       [Text'table_index_entry_template_]
				     deriving (Eq,Show)
data Text'table_index_entry_template_Attrs = Text'table_index_entry_template_Attrs
    { text'table_index_entry_templateText'style_name :: String
    } deriving (Eq,Show)
data Text'table_index_entry_template_ = Text'table_index_entry_template_Text'index_entry_page_number Text'index_entry_page_number
				      | Text'table_index_entry_template_Text'index_entry_text Text'index_entry_text
				      | Text'table_index_entry_template_Text'index_entry_span Text'index_entry_span
				      | Text'table_index_entry_template_Text'index_entry_tab_stop Text'index_entry_tab_stop
				      deriving (Eq,Show)
data Text'object_index = Text'object_index Text'object_index_Attrs
					   Text'object_index_source Text'index_body
		       deriving (Eq,Show)
data Text'object_index_Attrs = Text'object_index_Attrs
    { text'object_indexText'name :: String
    , text'object_indexText'style_name :: (Maybe String)
    , text'object_indexText'protected :: (Defaultable String)
    } deriving (Eq,Show)
data Text'object_index_source = Text'object_index_source Text'object_index_source_Attrs
							 (Maybe Text'index_title_template)
							 (Maybe Text'object_index_entry_template)
			      deriving (Eq,Show)
data Text'object_index_source_Attrs = Text'object_index_source_Attrs
    { text'object_index_sourceText'index_scope :: (Defaultable Text'object_index_source_text'index_scope)
    , text'object_index_sourceText'relative_tab_stop_position :: (Defaultable String)
    , text'object_index_sourceText'use_spreadsheet_objects :: (Defaultable String)
    , text'object_index_sourceText'use_draw_objects :: (Defaultable String)
    , text'object_index_sourceText'use_chart_objects :: (Defaultable String)
    , text'object_index_sourceText'use_other_objects :: (Defaultable String)
    , text'object_index_sourceText'use_math_objects :: (Defaultable String)
    , text'object_index_sourceFo'language :: (Maybe String)
    , text'object_index_sourceFo'country :: (Maybe String)
    , text'object_index_sourceText'sort_algorithm :: (Maybe String)
    } deriving (Eq,Show)
data Text'object_index_source_text'index_scope = Text'object_index_source_text'index_scope_document
						  | 
						 Text'object_index_source_text'index_scope_chapter
					       deriving (Eq,Show)
data Text'object_index_entry_template = Text'object_index_entry_template Text'object_index_entry_template_Attrs
									 [Text'object_index_entry_template_]
				      deriving (Eq,Show)
data Text'object_index_entry_template_Attrs = Text'object_index_entry_template_Attrs
    { text'object_index_entry_templateText'style_name :: String
    } deriving (Eq,Show)
data Text'object_index_entry_template_ = Text'object_index_entry_template_Text'index_entry_page_number Text'index_entry_page_number
				       | Text'object_index_entry_template_Text'index_entry_text Text'index_entry_text
				       | Text'object_index_entry_template_Text'index_entry_span Text'index_entry_span
				       | Text'object_index_entry_template_Text'index_entry_tab_stop Text'index_entry_tab_stop
				       deriving (Eq,Show)
data Text'user_index = Text'user_index Text'user_index_Attrs
				       Text'user_index_source Text'index_body
		     deriving (Eq,Show)
data Text'user_index_Attrs = Text'user_index_Attrs
    { text'user_indexText'name :: String
    , text'user_indexText'style_name :: (Maybe String)
    , text'user_indexText'protected :: (Defaultable String)
    } deriving (Eq,Show)
data Text'user_index_source = Text'user_index_source Text'user_index_source_Attrs
						     (Maybe Text'index_title_template)
						     [Text'user_index_entry_template]
						     [Text'index_source_styles]
			    deriving (Eq,Show)
data Text'user_index_source_Attrs = Text'user_index_source_Attrs
    { text'user_index_sourceText'index_scope :: (Defaultable Text'user_index_source_text'index_scope)
    , text'user_index_sourceText'relative_tab_stop_position :: (Defaultable String)
    , text'user_index_sourceText'use_index_marks :: (Defaultable String)
    , text'user_index_sourceText'use_graphics :: (Defaultable String)
    , text'user_index_sourceText'use_tables :: (Defaultable String)
    , text'user_index_sourceText'use_floating_frames :: (Defaultable String)
    , text'user_index_sourceText'use_objects :: (Defaultable String)
    , text'user_index_sourceText'use_index_source_styles :: (Defaultable String)
    , text'user_index_sourceText'copy_outline_levels :: (Defaultable String)
    , text'user_index_sourceFo'language :: (Maybe String)
    , text'user_index_sourceFo'country :: (Maybe String)
    , text'user_index_sourceText'sort_algorithm :: (Maybe String)
    , text'user_index_sourceText'index_name :: (Maybe String)
    } deriving (Eq,Show)
data Text'user_index_source_text'index_scope = Text'user_index_source_text'index_scope_document
					        |  Text'user_index_source_text'index_scope_chapter
					     deriving (Eq,Show)
data Text'user_index_entry_template = Text'user_index_entry_template Text'user_index_entry_template_Attrs
								     [Text'user_index_entry_template_]
				    deriving (Eq,Show)
data Text'user_index_entry_template_Attrs = Text'user_index_entry_template_Attrs
    { text'user_index_entry_templateText'outline_level :: String
    , text'user_index_entry_templateText'style_name :: String
    } deriving (Eq,Show)
data Text'user_index_entry_template_ = Text'user_index_entry_template_Text'index_entry_chapter Text'index_entry_chapter
				     | Text'user_index_entry_template_Text'index_entry_page_number Text'index_entry_page_number
				     | Text'user_index_entry_template_Text'index_entry_text Text'index_entry_text
				     | Text'user_index_entry_template_Text'index_entry_span Text'index_entry_span
				     | Text'user_index_entry_template_Text'index_entry_tab_stop Text'index_entry_tab_stop
				     deriving (Eq,Show)
data Text'alphabetical_index = Text'alphabetical_index Text'alphabetical_index_Attrs
						       Text'alphabetical_index_source
						       Text'index_body
			     deriving (Eq,Show)
data Text'alphabetical_index_Attrs = Text'alphabetical_index_Attrs
    { text'alphabetical_indexText'name :: String
    , text'alphabetical_indexText'style_name :: (Maybe String)
    , text'alphabetical_indexText'protected :: (Defaultable String)
    } deriving (Eq,Show)
data Text'alphabetical_index_source = Text'alphabetical_index_source Text'alphabetical_index_source_Attrs
								     (Maybe Text'index_title_template)
								     [Text'alphabetical_index_entry_template]
				    deriving (Eq,Show)
data Text'alphabetical_index_source_Attrs = Text'alphabetical_index_source_Attrs
    { text'alphabetical_index_sourceText'index_scope :: (Defaultable Text'alphabetical_index_source_text'index_scope)
    , text'alphabetical_index_sourceText'relative_tab_stop_position :: (Defaultable String)
    , text'alphabetical_index_sourceText'ignore_case :: (Defaultable String)
    , text'alphabetical_index_sourceText'main_entry_style_name :: (Maybe String)
    , text'alphabetical_index_sourceText'alphabetical_separators :: (Defaultable String)
    , text'alphabetical_index_sourceText'combine_entries :: (Defaultable String)
    , text'alphabetical_index_sourceText'combine_entries_with_dash :: (Defaultable String)
    , text'alphabetical_index_sourceText'combine_entries_with_pp :: (Defaultable String)
    , text'alphabetical_index_sourceText'use_keys_as_entries :: (Defaultable String)
    , text'alphabetical_index_sourceText'capitalize_entries :: (Defaultable String)
    , text'alphabetical_index_sourceText'comma_separated :: (Defaultable String)
    , text'alphabetical_index_sourceFo'language :: (Maybe String)
    , text'alphabetical_index_sourceFo'country :: (Maybe String)
    , text'alphabetical_index_sourceText'sort_algorithm :: (Maybe String)
    } deriving (Eq,Show)
data Text'alphabetical_index_source_text'index_scope = Text'alphabetical_index_source_text'index_scope_document
						        | 
						       Text'alphabetical_index_source_text'index_scope_chapter
						     deriving (Eq,Show)
data Text'alphabetical_index_entry_template = Text'alphabetical_index_entry_template Text'alphabetical_index_entry_template_Attrs
										     [Text'alphabetical_index_entry_template_]
					    deriving (Eq,Show)
data Text'alphabetical_index_entry_template_Attrs = Text'alphabetical_index_entry_template_Attrs
    { text'alphabetical_index_entry_templateText'outline_level :: Text'alphabetical_index_entry_template_text'outline_level
    , text'alphabetical_index_entry_templateText'style_name :: String
    } deriving (Eq,Show)
data Text'alphabetical_index_entry_template_ = Text'alphabetical_index_entry_template_Text'index_entry_chapter Text'index_entry_chapter
					     | Text'alphabetical_index_entry_template_Text'index_entry_page_number Text'index_entry_page_number
					     | Text'alphabetical_index_entry_template_Text'index_entry_text Text'index_entry_text
					     | Text'alphabetical_index_entry_template_Text'index_entry_span Text'index_entry_span
					     | Text'alphabetical_index_entry_template_Text'index_entry_tab_stop Text'index_entry_tab_stop
					     deriving (Eq,Show)
data Text'alphabetical_index_entry_template_text'outline_level = Text'alphabetical_index_entry_template_text'outline_level_1
								  | 
								 Text'alphabetical_index_entry_template_text'outline_level_2
								  | 
								 Text'alphabetical_index_entry_template_text'outline_level_3
								  | 
								 Text'alphabetical_index_entry_template_text'outline_level_separator
							       deriving (Eq,Show)
data Text'alphabetical_index_auto_mark_file = Text'alphabetical_index_auto_mark_file
    { text'alphabetical_index_auto_mark_fileXlink'href :: (Maybe String)
    , text'alphabetical_index_auto_mark_fileXlink'type :: (Defaultable Text'alphabetical_index_auto_mark_file_xlink'type)
    } deriving (Eq,Show)
data Text'alphabetical_index_auto_mark_file_xlink'type = Text'alphabetical_index_auto_mark_file_xlink'type_simple
						       deriving (Eq,Show)
data Text'bibliography = Text'bibliography Text'bibliography_Attrs
					   Text'bibliography_source Text'index_body
		       deriving (Eq,Show)
data Text'bibliography_Attrs = Text'bibliography_Attrs
    { text'bibliographyText'name :: String
    , text'bibliographyText'style_name :: (Maybe String)
    , text'bibliographyText'protected :: (Defaultable String)
    } deriving (Eq,Show)
data Text'bibliography_source = Text'bibliography_source (Maybe Text'index_title_template)
							 [Text'bibliography_entry_template]
			      deriving (Eq,Show)
data Text'bibliography_entry_template = Text'bibliography_entry_template Text'bibliography_entry_template_Attrs
									 [Text'bibliography_entry_template_]
				      deriving (Eq,Show)
data Text'bibliography_entry_template_Attrs = Text'bibliography_entry_template_Attrs
    { text'bibliography_entry_templateText'bibliography_type :: Text'bibliography_entry_template_text'bibliography_type
    , text'bibliography_entry_templateText'style_name :: String
    } deriving (Eq,Show)
data Text'bibliography_entry_template_ = Text'bibliography_entry_template_Text'index_entry_span Text'index_entry_span
				       | Text'bibliography_entry_template_Text'index_entry_tab_stop Text'index_entry_tab_stop
				       | Text'bibliography_entry_template_Text'index_entry_bibliography Text'index_entry_bibliography
				       deriving (Eq,Show)
data Text'bibliography_entry_template_text'bibliography_type = Text'bibliography_entry_template_text'bibliography_type_article
							        | 
							       Text'bibliography_entry_template_text'bibliography_type_book
							        | 
							       Text'bibliography_entry_template_text'bibliography_type_booklet
							        | 
							       Text'bibliography_entry_template_text'bibliography_type_conference
							        | 
							       Text'bibliography_entry_template_text'bibliography_type_custom1
							        | 
							       Text'bibliography_entry_template_text'bibliography_type_custom2
							        | 
							       Text'bibliography_entry_template_text'bibliography_type_custom3
							        | 
							       Text'bibliography_entry_template_text'bibliography_type_custom4
							        | 
							       Text'bibliography_entry_template_text'bibliography_type_custom5
							        | 
							       Text'bibliography_entry_template_text'bibliography_type_email
							        | 
							       Text'bibliography_entry_template_text'bibliography_type_inbook
							        | 
							       Text'bibliography_entry_template_text'bibliography_type_incollection
							        | 
							       Text'bibliography_entry_template_text'bibliography_type_inproceedings
							        | 
							       Text'bibliography_entry_template_text'bibliography_type_journal
							        | 
							       Text'bibliography_entry_template_text'bibliography_type_manual
							        | 
							       Text'bibliography_entry_template_text'bibliography_type_mastersthesis
							        | 
							       Text'bibliography_entry_template_text'bibliography_type_misc
							        | 
							       Text'bibliography_entry_template_text'bibliography_type_phdthesis
							        | 
							       Text'bibliography_entry_template_text'bibliography_type_proceedings
							        | 
							       Text'bibliography_entry_template_text'bibliography_type_techreport
							        | 
							       Text'bibliography_entry_template_text'bibliography_type_unpublished
							        | 
							       Text'bibliography_entry_template_text'bibliography_type_www
							     deriving (Eq,Show)
newtype Text'index_body = Text'index_body [Text'index_body_] 		deriving (Eq,Show)
data Text'index_body_ = Text'index_body_Text'h Text'h
		      | Text'index_body_Text'p Text'p
		      | Text'index_body_Text'ordered_list Text'ordered_list
		      | Text'index_body_Text'unordered_list Text'unordered_list
		      | Text'index_body_Table'table Table'table
		      | Text'index_body_Text'section Text'section
		      | Text'index_body_Text'table_of_content Text'table_of_content
		      | Text'index_body_Text'illustration_index Text'illustration_index
		      | Text'index_body_Text'table_index Text'table_index
		      | Text'index_body_Text'object_index Text'object_index
		      | Text'index_body_Text'user_index Text'user_index
		      | Text'index_body_Text'alphabetical_index Text'alphabetical_index
		      | Text'index_body_Text'bibliography Text'bibliography
		      | Text'index_body_Text'index_title Text'index_title
		      | Text'index_body_Text'change Text'change
		      | Text'index_body_Text'change_start Text'change_start
		      | Text'index_body_Text'change_end Text'change_end
		      deriving (Eq,Show)
data Text'index_title = Text'index_title Text'index_title_Attrs
					 [Text'index_title_]
		      deriving (Eq,Show)
data Text'index_title_Attrs = Text'index_title_Attrs
    { text'index_titleText'style_name :: (Maybe String)
    , text'index_titleText'name :: (Maybe String)
    } deriving (Eq,Show)
data Text'index_title_ = Text'index_title_Text'h Text'h
		       | Text'index_title_Text'p Text'p
		       | Text'index_title_Text'ordered_list Text'ordered_list
		       | Text'index_title_Text'unordered_list Text'unordered_list
		       | Text'index_title_Table'table Table'table
		       | Text'index_title_Text'section Text'section
		       | Text'index_title_Text'table_of_content Text'table_of_content
		       | Text'index_title_Text'illustration_index Text'illustration_index
		       | Text'index_title_Text'table_index Text'table_index
		       | Text'index_title_Text'object_index Text'object_index
		       | Text'index_title_Text'user_index Text'user_index
		       | Text'index_title_Text'alphabetical_index Text'alphabetical_index
		       | Text'index_title_Text'bibliography Text'bibliography
		       | Text'index_title_Text'index_title Text'index_title
		       | Text'index_title_Text'change Text'change
		       | Text'index_title_Text'change_start Text'change_start
		       | Text'index_title_Text'change_end Text'change_end
		       deriving (Eq,Show)
data Text'index_title_template = Text'index_title_template Text'index_title_template_Attrs
							   String
			       deriving (Eq,Show)
data Text'index_title_template_Attrs = Text'index_title_template_Attrs
    { text'index_title_templateText'style_name :: (Maybe String)
    } deriving (Eq,Show)
data Text'index_entry_chapter_number = Text'index_entry_chapter_number
    { text'index_entry_chapter_numberText'style_name :: (Maybe String)
    } deriving (Eq,Show)
data Text'index_entry_chapter = Text'index_entry_chapter
    { text'index_entry_chapterText'style_name :: (Maybe String)
    , text'index_entry_chapterText'display :: (Defaultable Text'index_entry_chapter_text'display)
    } deriving (Eq,Show)
data Text'index_entry_chapter_text'display = Text'index_entry_chapter_text'display_name
					      |  Text'index_entry_chapter_text'display_number  | 
					     Text'index_entry_chapter_text'display_number_and_name
					   deriving (Eq,Show)
data Text'index_entry_text = Text'index_entry_text
    { text'index_entry_textText'style_name :: (Maybe String)
    } deriving (Eq,Show)
data Text'index_entry_page_number = Text'index_entry_page_number
    { text'index_entry_page_numberText'style_name :: (Maybe String)
    } deriving (Eq,Show)
data Text'index_entry_span = Text'index_entry_span Text'index_entry_span_Attrs
						   String
			   deriving (Eq,Show)
data Text'index_entry_span_Attrs = Text'index_entry_span_Attrs
    { text'index_entry_spanText'style_name :: (Maybe String)
    } deriving (Eq,Show)
data Text'index_entry_bibliography = Text'index_entry_bibliography
    { text'index_entry_bibliographyText'style_name :: (Maybe String)
    , text'index_entry_bibliographyText'bibliography_data_field :: Text'index_entry_bibliography_text'bibliography_data_field
    } deriving (Eq,Show)
data Text'index_entry_bibliography_text'bibliography_data_field = Text'index_entry_bibliography_text'bibliography_data_field_address
								   | 
								  Text'index_entry_bibliography_text'bibliography_data_field_annote
								   | 
								  Text'index_entry_bibliography_text'bibliography_data_field_author
								   | 
								  Text'index_entry_bibliography_text'bibliography_data_field_bibliography_type
								   | 
								  Text'index_entry_bibliography_text'bibliography_data_field_booktitle
								   | 
								  Text'index_entry_bibliography_text'bibliography_data_field_chapter
								   | 
								  Text'index_entry_bibliography_text'bibliography_data_field_custom1
								   | 
								  Text'index_entry_bibliography_text'bibliography_data_field_custom2
								   | 
								  Text'index_entry_bibliography_text'bibliography_data_field_custom3
								   | 
								  Text'index_entry_bibliography_text'bibliography_data_field_custom4
								   | 
								  Text'index_entry_bibliography_text'bibliography_data_field_custom5
								   | 
								  Text'index_entry_bibliography_text'bibliography_data_field_edition
								   | 
								  Text'index_entry_bibliography_text'bibliography_data_field_editor
								   | 
								  Text'index_entry_bibliography_text'bibliography_data_field_howpublished
								   | 
								  Text'index_entry_bibliography_text'bibliography_data_field_identifier
								   | 
								  Text'index_entry_bibliography_text'bibliography_data_field_institution
								   | 
								  Text'index_entry_bibliography_text'bibliography_data_field_isbn
								   | 
								  Text'index_entry_bibliography_text'bibliography_data_field_journal
								   | 
								  Text'index_entry_bibliography_text'bibliography_data_field_month
								   | 
								  Text'index_entry_bibliography_text'bibliography_data_field_note
								   | 
								  Text'index_entry_bibliography_text'bibliography_data_field_number
								   | 
								  Text'index_entry_bibliography_text'bibliography_data_field_organizations
								   | 
								  Text'index_entry_bibliography_text'bibliography_data_field_pages
								   | 
								  Text'index_entry_bibliography_text'bibliography_data_field_publisher
								   | 
								  Text'index_entry_bibliography_text'bibliography_data_field_report_type
								   | 
								  Text'index_entry_bibliography_text'bibliography_data_field_school
								   | 
								  Text'index_entry_bibliography_text'bibliography_data_field_series
								   | 
								  Text'index_entry_bibliography_text'bibliography_data_field_title
								   | 
								  Text'index_entry_bibliography_text'bibliography_data_field_url
								   | 
								  Text'index_entry_bibliography_text'bibliography_data_field_volume
								   | 
								  Text'index_entry_bibliography_text'bibliography_data_field_year
								deriving (Eq,Show)
data Text'index_entry_tab_stop = Text'index_entry_tab_stop
    { text'index_entry_tab_stopText'style_name :: (Maybe String)
    , text'index_entry_tab_stopStyle'leader_char :: (Defaultable String)
    , text'index_entry_tab_stopStyle'type :: (Defaultable Text'index_entry_tab_stop_style'type)
    , text'index_entry_tab_stopStyle'position :: (Maybe String)
    } deriving (Eq,Show)
data Text'index_entry_tab_stop_style'type = Text'index_entry_tab_stop_style'type_left
					     |  Text'index_entry_tab_stop_style'type_right
					  deriving (Eq,Show)
data Text'index_entry_link_start = Text'index_entry_link_start
    { text'index_entry_link_startText'style_name :: (Maybe String)
    } deriving (Eq,Show)
data Text'index_entry_link_end = Text'index_entry_link_end
    { text'index_entry_link_endText'style_name :: (Maybe String)
    } deriving (Eq,Show)
data Text'index_source_styles = Text'index_source_styles Text'index_source_styles_Attrs
							 [Text'index_source_style]
			      deriving (Eq,Show)
data Text'index_source_styles_Attrs = Text'index_source_styles_Attrs
    { text'index_source_stylesText'outline_level :: String
    } deriving (Eq,Show)
data Text'index_source_style = Text'index_source_style
    { text'index_source_styleText'style_name :: String
    } deriving (Eq,Show)
data Text'toc_mark_start = Text'toc_mark_start
    { text'toc_mark_startText'id :: String
    , text'toc_mark_startText'outline_level :: (Maybe String)
    } deriving (Eq,Show)
data Text'toc_mark_end = Text'toc_mark_end
    { text'toc_mark_endText'id :: String
    } deriving (Eq,Show)
data Text'toc_mark = Text'toc_mark
    { text'toc_markText'string_value :: String
    , text'toc_markText'outline_level :: (Maybe String)
    } deriving (Eq,Show)
data Text'user_index_mark_start = Text'user_index_mark_start
    { text'user_index_mark_startText'id :: String
    , text'user_index_mark_startText'outline_level :: (Maybe String)
    , text'user_index_mark_startText'index_name :: (Maybe String)
    } deriving (Eq,Show)
data Text'user_index_mark_end = Text'user_index_mark_end
    { text'user_index_mark_endText'id :: String
    } deriving (Eq,Show)
data Text'user_index_mark = Text'user_index_mark
    { text'user_index_markText'string_value :: String
    , text'user_index_markText'outline_level :: (Maybe String)
    , text'user_index_markText'index_name :: (Maybe String)
    } deriving (Eq,Show)
data Text'alphabetical_index_mark_start = Text'alphabetical_index_mark_start
    { text'alphabetical_index_mark_startText'id :: String
    , text'alphabetical_index_mark_startText'key1 :: (Maybe String)
    , text'alphabetical_index_mark_startText'key2 :: (Maybe String)
    , text'alphabetical_index_mark_startText'main_etry :: (Defaultable String)
    } deriving (Eq,Show)
data Text'alphabetical_index_mark_end = Text'alphabetical_index_mark_end
    { text'alphabetical_index_mark_endText'id :: String
    } deriving (Eq,Show)
data Text'alphabetical_index_mark = Text'alphabetical_index_mark
    { text'alphabetical_index_markText'string_value :: String
    , text'alphabetical_index_markText'key1 :: (Maybe String)
    , text'alphabetical_index_markText'key2 :: (Maybe String)
    , text'alphabetical_index_markText'main_etry :: (Defaultable String)
    } deriving (Eq,Show)
data Text'bibliography_configuration = Text'bibliography_configuration Text'bibliography_configuration_Attrs
								       [Text'sort_key]
				     deriving (Eq,Show)
data Text'bibliography_configuration_Attrs = Text'bibliography_configuration_Attrs
    { text'bibliography_configurationText'prefix :: (Maybe String)
    , text'bibliography_configurationText'suffix :: (Maybe String)
    , text'bibliography_configurationText'sort_by_position :: (Defaultable String)
    , text'bibliography_configurationText'numbered_entries :: (Defaultable String)
    , text'bibliography_configurationFo'language :: (Maybe String)
    , text'bibliography_configurationFo'country :: (Maybe String)
    , text'bibliography_configurationText'sort_algorithm :: (Maybe String)
    } deriving (Eq,Show)
data Text'sort_key = Text'sort_key
    { text'sort_keyText'key :: Text'sort_key_text'key
    , text'sort_keyText'sort_ascending :: (Defaultable String)
    } deriving (Eq,Show)
data Text'sort_key_text'key = Text'sort_key_text'key_address  | 
			      Text'sort_key_text'key_annote  |  Text'sort_key_text'key_author  | 
			      Text'sort_key_text'key_bibliography_type  | 
			      Text'sort_key_text'key_booktitle  |  Text'sort_key_text'key_chapter
			       |  Text'sort_key_text'key_custom1  | 
			      Text'sort_key_text'key_custom2  |  Text'sort_key_text'key_custom3
			       |  Text'sort_key_text'key_custom4  | 
			      Text'sort_key_text'key_custom5  |  Text'sort_key_text'key_edition
			       |  Text'sort_key_text'key_editor  | 
			      Text'sort_key_text'key_howpublished  | 
			      Text'sort_key_text'key_identifier  | 
			      Text'sort_key_text'key_institution  |  Text'sort_key_text'key_isbn
			       |  Text'sort_key_text'key_journal  |  Text'sort_key_text'key_month
			       |  Text'sort_key_text'key_note  |  Text'sort_key_text'key_number
			       |  Text'sort_key_text'key_organizations  | 
			      Text'sort_key_text'key_pages  |  Text'sort_key_text'key_publisher
			       |  Text'sort_key_text'key_report_type  | 
			      Text'sort_key_text'key_school  |  Text'sort_key_text'key_series  | 
			      Text'sort_key_text'key_title  |  Text'sort_key_text'key_url  | 
			      Text'sort_key_text'key_volume  |  Text'sort_key_text'key_year
			    deriving (Eq,Show)
data Text'linenumbering_configuration = Text'linenumbering_configuration Text'linenumbering_configuration_Attrs
									 (Maybe Text'linenumbering_separator)
				      deriving (Eq,Show)
data Text'linenumbering_configuration_Attrs = Text'linenumbering_configuration_Attrs
    { text'linenumbering_configurationText'style_name :: (Maybe String)
    , text'linenumbering_configurationText'number_lines :: (Defaultable String)
    , text'linenumbering_configurationText'count_empty_lines :: (Defaultable String)
    , text'linenumbering_configurationText'count_in_floating_frames :: (Defaultable String)
    , text'linenumbering_configurationText'restart_numbering :: (Defaultable String)
    , text'linenumbering_configurationText'offset :: (Maybe String)
    , text'linenumbering_configurationStyle'num_format :: (Defaultable Text'linenumbering_configuration_style'num_format)
    , text'linenumbering_configurationStyle'num_letter_sync :: (Defaultable String)
    , text'linenumbering_configurationText'number_position :: (Defaultable Text'linenumbering_configuration_text'number_position)
    , text'linenumbering_configurationText'increment :: (Maybe String)
    } deriving (Eq,Show)
data Text'linenumbering_configuration_style'num_format = Text'linenumbering_configuration_style'num_format_1
							  | 
							 Text'linenumbering_configuration_style'num_format_a
							  | 
							 Text'linenumbering_configuration_style'num_format_A
							  | 
							 Text'linenumbering_configuration_style'num_format_i
							  | 
							 Text'linenumbering_configuration_style'num_format_I
						       deriving (Eq,Show)
data Text'linenumbering_configuration_text'number_position = Text'linenumbering_configuration_text'number_position_left
							      | 
							     Text'linenumbering_configuration_text'number_position_rigth
							      | 
							     Text'linenumbering_configuration_text'number_position_inner
							      | 
							     Text'linenumbering_configuration_text'number_position_outer
							   deriving (Eq,Show)
data Text'linenumbering_separator = Text'linenumbering_separator Text'linenumbering_separator_Attrs
								 String
				  deriving (Eq,Show)
data Text'linenumbering_separator_Attrs = Text'linenumbering_separator_Attrs
    { text'linenumbering_separatorText'increment :: (Maybe String)
    } deriving (Eq,Show)
data Text'script = Text'script Text'script_Attrs String
		 deriving (Eq,Show)
data Text'script_Attrs = Text'script_Attrs
    { text'scriptScript'language :: String
    , text'scriptXlink'href :: (Maybe String)
    , text'scriptXlink'type :: (Defaultable Text'script_xlink'type)
    } deriving (Eq,Show)
data Text'script_xlink'type = Text'script_xlink'type_simple
			    deriving (Eq,Show)
data Text'measure = Text'measure Text'measure_Attrs String
		  deriving (Eq,Show)
data Text'measure_Attrs = Text'measure_Attrs
    { text'measureText'kind :: Text'measure_text'kind
    } deriving (Eq,Show)
data Text'measure_text'kind = Text'measure_text'kind_value  | 
			      Text'measure_text'kind_unit  |  Text'measure_text'kind_gap
			    deriving (Eq,Show)
data Text'ruby = Text'ruby Text'ruby_Attrs Text'ruby_base
			   Text'ruby_text
	       deriving (Eq,Show)
data Text'ruby_Attrs = Text'ruby_Attrs
    { text'rubyText'style_name :: (Maybe String)
    } deriving (Eq,Show)
newtype Text'ruby_base = Text'ruby_base [Text'ruby_base_] 		deriving (Eq,Show)
data Text'ruby_base_ = Text'ruby_base_Str String
		     | Text'ruby_base_Text'span Text'span
		     | Text'ruby_base_Text'tab_stop Text'tab_stop
		     | Text'ruby_base_Text's Text's
		     | Text'ruby_base_Text'line_break Text'line_break
		     | Text'ruby_base_Text'footnote Text'footnote
		     | Text'ruby_base_Text'endnote Text'endnote
		     | Text'ruby_base_Text'a Text'a
		     | Text'ruby_base_Text'bookmark Text'bookmark
		     | Text'ruby_base_Text'bookmark_start Text'bookmark_start
		     | Text'ruby_base_Text'bookmark_end Text'bookmark_end
		     | Text'ruby_base_Text'reference_mark Text'reference_mark
		     | Text'ruby_base_Text'reference_mark_start Text'reference_mark_start
		     | Text'ruby_base_Text'reference_mark_end Text'reference_mark_end
		     | Text'ruby_base_Text'date Text'date
		     | Text'ruby_base_Text'time Text'time
		     | Text'ruby_base_Text'page_number Text'page_number
		     | Text'ruby_base_Text'page_continuation Text'page_continuation
		     | Text'ruby_base_Text'sender_firstname Text'sender_firstname
		     | Text'ruby_base_Text'sender_lastname Text'sender_lastname
		     | Text'ruby_base_Text'sender_initials Text'sender_initials
		     | Text'ruby_base_Text'sender_title Text'sender_title
		     | Text'ruby_base_Text'sender_position Text'sender_position
		     | Text'ruby_base_Text'sender_email Text'sender_email
		     | Text'ruby_base_Text'sender_phone_private Text'sender_phone_private
		     | Text'ruby_base_Text'sender_fax Text'sender_fax
		     | Text'ruby_base_Text'sender_company Text'sender_company
		     | Text'ruby_base_Text'sender_phone_work Text'sender_phone_work
		     | Text'ruby_base_Text'sender_street Text'sender_street
		     | Text'ruby_base_Text'sender_city Text'sender_city
		     | Text'ruby_base_Text'sender_postal_code Text'sender_postal_code
		     | Text'ruby_base_Text'sender_country Text'sender_country
		     | Text'ruby_base_Text'sender_state_or_province Text'sender_state_or_province
		     | Text'ruby_base_Text'author_name Text'author_name
		     | Text'ruby_base_Text'author_initials Text'author_initials
		     | Text'ruby_base_Text'placeholder Text'placeholder
		     | Text'ruby_base_Text'variable_set Text'variable_set
		     | Text'ruby_base_Text'variable_get Text'variable_get
		     | Text'ruby_base_Text'variable_input Text'variable_input
		     | Text'ruby_base_Text'user_field_get Text'user_field_get
		     | Text'ruby_base_Text'user_field_input Text'user_field_input
		     | Text'ruby_base_Text'sequence Text'sequence
		     | Text'ruby_base_Text'expression Text'expression
		     | Text'ruby_base_Text'text_input Text'text_input
		     | Text'ruby_base_Text'database_display Text'database_display
		     | Text'ruby_base_Text'database_next Text'database_next
		     | Text'ruby_base_Text'database_select Text'database_select
		     | Text'ruby_base_Text'database_row_number Text'database_row_number
		     | Text'ruby_base_Text'database_name Text'database_name
		     | Text'ruby_base_Text'initial_creator Text'initial_creator
		     | Text'ruby_base_Text'creation_date Text'creation_date
		     | Text'ruby_base_Text'creation_time Text'creation_time
		     | Text'ruby_base_Text'description Text'description
		     | Text'ruby_base_Text'user_defined Text'user_defined
		     | Text'ruby_base_Text'print_time Text'print_time
		     | Text'ruby_base_Text'print_date Text'print_date
		     | Text'ruby_base_Text'printed_by Text'printed_by
		     | Text'ruby_base_Text'title Text'title
		     | Text'ruby_base_Text'subject Text'subject
		     | Text'ruby_base_Text'keywords Text'keywords
		     | Text'ruby_base_Text'editing_cycles Text'editing_cycles
		     | Text'ruby_base_Text'editing_duration Text'editing_duration
		     | Text'ruby_base_Text'modification_time Text'modification_time
		     | Text'ruby_base_Text'modification_date Text'modification_date
		     | Text'ruby_base_Text'creator Text'creator
		     | Text'ruby_base_Text'conditional_text Text'conditional_text
		     | Text'ruby_base_Text'hidden_text Text'hidden_text
		     | Text'ruby_base_Text'hidden_paragraph Text'hidden_paragraph
		     | Text'ruby_base_Text'chapter Text'chapter
		     | Text'ruby_base_Text'file_name Text'file_name
		     | Text'ruby_base_Text'template_name Text'template_name
		     | Text'ruby_base_Text'page_variable_set Text'page_variable_set
		     | Text'ruby_base_Text'page_variable_get Text'page_variable_get
		     | Text'ruby_base_Text'execute_macro Text'execute_macro
		     | Text'ruby_base_Text'dde_connection Text'dde_connection
		     | Text'ruby_base_Text'reference_ref Text'reference_ref
		     | Text'ruby_base_Text'sequence_ref Text'sequence_ref
		     | Text'ruby_base_Text'bookmark_ref Text'bookmark_ref
		     | Text'ruby_base_Text'footnote_ref Text'footnote_ref
		     | Text'ruby_base_Text'endnote_ref Text'endnote_ref
		     | Text'ruby_base_Text'sheet_name Text'sheet_name
		     | Text'ruby_base_Text'bibliography_mark Text'bibliography_mark
		     | Text'ruby_base_Text'page_count Text'page_count
		     | Text'ruby_base_Text'paragraph_count Text'paragraph_count
		     | Text'ruby_base_Text'word_count Text'word_count
		     | Text'ruby_base_Text'character_count Text'character_count
		     | Text'ruby_base_Text'table_count Text'table_count
		     | Text'ruby_base_Text'image_count Text'image_count
		     | Text'ruby_base_Text'object_count Text'object_count
		     | Text'ruby_base_Office'annotation Office'annotation
		     | Text'ruby_base_Text'script Text'script
		     | Text'ruby_base_Text'measure Text'measure
		     | Text'ruby_base_Draw'rect Draw'rect
		     | Text'ruby_base_Draw'line Draw'line
		     | Text'ruby_base_Draw'polyline Draw'polyline
		     | Text'ruby_base_Draw'polygon Draw'polygon
		     | Text'ruby_base_Draw'path Draw'path
		     | Text'ruby_base_Draw'circle Draw'circle
		     | Text'ruby_base_Draw'ellipse Draw'ellipse
		     | Text'ruby_base_Draw'g Draw'g
		     | Text'ruby_base_Draw'page_thumbnail Draw'page_thumbnail
		     | Text'ruby_base_Draw'text_box Draw'text_box
		     | Text'ruby_base_Draw'image Draw'image
		     | Text'ruby_base_Draw'object Draw'object
		     | Text'ruby_base_Draw'object_ole Draw'object_ole
		     | Text'ruby_base_Draw'applet Draw'applet
		     | Text'ruby_base_Draw'floating_frame Draw'floating_frame
		     | Text'ruby_base_Draw'plugin Draw'plugin
		     | Text'ruby_base_Draw'measure Draw'measure
		     | Text'ruby_base_Draw'caption Draw'caption
		     | Text'ruby_base_Draw'connector Draw'connector
		     | Text'ruby_base_Chart'chart Chart'chart
		     | Text'ruby_base_Dr3d'scene Dr3d'scene
		     | Text'ruby_base_Draw'control Draw'control
		     | Text'ruby_base_Text'toc_mark_start Text'toc_mark_start
		     | Text'ruby_base_Text'toc_mark_end Text'toc_mark_end
		     | Text'ruby_base_Text'toc_mark Text'toc_mark
		     | Text'ruby_base_Text'user_index_mark_start Text'user_index_mark_start
		     | Text'ruby_base_Text'user_index_mark_end Text'user_index_mark_end
		     | Text'ruby_base_Text'user_index_mark Text'user_index_mark
		     | Text'ruby_base_Text'alphabetical_index_mark_start Text'alphabetical_index_mark_start
		     | Text'ruby_base_Text'alphabetical_index_mark_end Text'alphabetical_index_mark_end
		     | Text'ruby_base_Text'alphabetical_index_mark Text'alphabetical_index_mark
		     | Text'ruby_base_Text'change Text'change
		     | Text'ruby_base_Text'change_start Text'change_start
		     | Text'ruby_base_Text'change_end Text'change_end
		     | Text'ruby_base_Draw'a Draw'a
		     | Text'ruby_base_Text'ruby Text'ruby
		     deriving (Eq,Show)
data Text'ruby_text = Text'ruby_text Text'ruby_text_Attrs String
		    deriving (Eq,Show)
data Text'ruby_text_Attrs = Text'ruby_text_Attrs
    { text'ruby_textText'style_name :: (Maybe String)
    } deriving (Eq,Show)
data Text'change = Text'change
    { text'changeText'change_id :: String
    } deriving (Eq,Show)
data Text'change_start = Text'change_start
    { text'change_startText'change_id :: String
    } deriving (Eq,Show)
data Text'change_end = Text'change_end
    { text'change_endText'change_id :: String
    } deriving (Eq,Show)
data Text'tracked_changes = Text'tracked_changes Text'tracked_changes_Attrs
						 [Text'changed_region]
			  deriving (Eq,Show)
data Text'tracked_changes_Attrs = Text'tracked_changes_Attrs
    { text'tracked_changesText'track_changes :: (Defaultable String)
    , text'tracked_changesText'protection_key :: (Maybe String)
    } deriving (Eq,Show)
data Text'changed_region = Text'changed_regionText'insertion Text'changed_region_Attrs
							     Text'insertion
			 | Text'changed_regionText'deletion_Text'insertion Text'changed_region_Attrs
									   Text'deletion
									   (Maybe Text'insertion)
			 | Text'changed_regionText'format_change Text'changed_region_Attrs
								 Text'format_change
			 deriving (Eq,Show)
data Text'changed_region_Attrs = Text'changed_region_Attrs
    { text'changed_regionText'id :: String
    , text'changed_regionText'merge_last_paragraph :: (Defaultable String)
    } deriving (Eq,Show)
data Text'insertion = Text'insertion Office'change_info
				     [(OneOf17 Text'h Text'p Text'ordered_list Text'unordered_list Table'table Text'section Text'table_of_content Text'illustration_index Text'table_index Text'object_index Text'user_index Text'alphabetical_index Text'bibliography Text'index_title Text'change Text'change_start Text'change_end)]
		    deriving (Eq,Show)
data Text'deletion = Text'deletion Office'change_info
				   [(OneOf17 Text'h Text'p Text'ordered_list Text'unordered_list Table'table Text'section Text'table_of_content Text'illustration_index Text'table_index Text'object_index Text'user_index Text'alphabetical_index Text'bibliography Text'index_title Text'change Text'change_start Text'change_end)]
		   deriving (Eq,Show)
newtype Text'format_change = Text'format_change Office'change_info 		deriving (Eq,Show)
data Table'calculation_settings = Table'calculation_settings Table'calculation_settings_Attrs
							     (Maybe Table'null_date)
							     (Maybe Table'iteration)
				deriving (Eq,Show)
data Table'calculation_settings_Attrs = Table'calculation_settings_Attrs
    { table'calculation_settingsTable'case_sensitive :: (Defaultable String)
    , table'calculation_settingsTable'precision_as_shown :: (Defaultable String)
    , table'calculation_settingsTable'search_criteria_must_apply_to_whole_cell :: (Defaultable String)
    , table'calculation_settingsTable'automatic_find_labels :: (Defaultable String)
    , table'calculation_settingsTable'use_regular_expressions :: (Defaultable String)
    , table'calculation_settingsTable'null_year :: (Defaultable String)
    } deriving (Eq,Show)
data Table'null_date = Table'null_date
    { table'null_dateTable'value_type :: (Defaultable Table'null_date_table'value_type)
    , table'null_dateTable'date_value :: (Defaultable String)
    } deriving (Eq,Show)
data Table'null_date_table'value_type = Table'null_date_table'value_type_float
					 |  Table'null_date_table'value_type_time  | 
					Table'null_date_table'value_type_date  | 
					Table'null_date_table'value_type_percentage  | 
					Table'null_date_table'value_type_currency  | 
					Table'null_date_table'value_type_boolean  | 
					Table'null_date_table'value_type_string
				      deriving (Eq,Show)
data Table'iteration = Table'iteration
    { table'iterationTable'status :: (Defaultable Table'iteration_table'status)
    , table'iterationTable'steps :: (Defaultable String)
    , table'iterationTable'maximum_difference :: (Defaultable String)
    } deriving (Eq,Show)
data Table'iteration_table'status = Table'iteration_table'status_enable
				     |  Table'iteration_table'status_disable
				  deriving (Eq,Show)
data Table'tracked_changes = Table'tracked_changes Table'tracked_changes_Attrs
						   [Table'tracked_changes_]
			   deriving (Eq,Show)
data Table'tracked_changes_Attrs = Table'tracked_changes_Attrs
    { table'tracked_changesTable'track_changes :: (Defaultable String)
    , table'tracked_changesTable'protected :: (Defaultable String)
    , table'tracked_changesTable'protection_key :: (Maybe String)
    } deriving (Eq,Show)
data Table'tracked_changes_ = Table'tracked_changes_Table'cell_content_change Table'cell_content_change
			    | Table'tracked_changes_Table'insertion Table'insertion
			    | Table'tracked_changes_Table'deletion Table'deletion
			    | Table'tracked_changes_Table'movement Table'movement
			    | Table'tracked_changes_Table'rejection Table'rejection
			    deriving (Eq,Show)
newtype Table'dependences = Table'dependences (List1 Table'dependence) 		deriving (Eq,Show)
data Table'dependence = Table'dependence
    { table'dependenceTable'id :: String
    } deriving (Eq,Show)
newtype Table'deletions = Table'deletions (List1 Table'deletions_) 		deriving (Eq,Show)
data Table'deletions_ = Table'deletions_Table'cell_content_deletion Table'cell_content_deletion
		      | Table'deletions_Table'change_deletion Table'change_deletion
		      deriving (Eq,Show)
data Table'cell_content_deletion = Table'cell_content_deletion Table'cell_content_deletion_Attrs
							       (Maybe Table'cell_address)
							       (Maybe Table'change_track_table_cell)
				 deriving (Eq,Show)
data Table'cell_content_deletion_Attrs = Table'cell_content_deletion_Attrs
    { table'cell_content_deletionTable'id :: (Maybe String)
    } deriving (Eq,Show)
data Table'change_deletion = Table'change_deletion
    { table'change_deletionTable'id :: (Maybe String)
    } deriving (Eq,Show)
data Table'insertion = Table'insertion Table'insertion_Attrs
				       Office'change_info (Maybe Table'dependences)
				       (Maybe Table'deletions)
		     deriving (Eq,Show)
data Table'insertion_Attrs = Table'insertion_Attrs
    { table'insertionTable'id :: String
    , table'insertionTable'acceptance_state :: (Defaultable Table'insertion_table'acceptance_state)
    , table'insertionTable'rejecting_change_id :: (Maybe String)
    , table'insertionTable'type :: Table'insertion_table'type
    , table'insertionTable'position :: String
    , table'insertionTable'count :: (Defaultable String)
    , table'insertionTable'table :: (Maybe String)
    } deriving (Eq,Show)
data Table'insertion_table'acceptance_state = Table'insertion_table'acceptance_state_accepted
					       |  Table'insertion_table'acceptance_state_rejected
					       |  Table'insertion_table'acceptance_state_pending
					    deriving (Eq,Show)
data Table'insertion_table'type = Table'insertion_table'type_row
				   |  Table'insertion_table'type_column  | 
				  Table'insertion_table'type_table
				deriving (Eq,Show)
data Table'deletion = Table'deletion Table'deletion_Attrs
				     Office'change_info (Maybe Table'dependences)
				     (Maybe Table'deletions) (Maybe Table'cut_offs)
		    deriving (Eq,Show)
data Table'deletion_Attrs = Table'deletion_Attrs
    { table'deletionTable'id :: String
    , table'deletionTable'acceptance_state :: (Defaultable Table'deletion_table'acceptance_state)
    , table'deletionTable'rejecting_change_id :: (Maybe String)
    , table'deletionTable'type :: Table'deletion_table'type
    , table'deletionTable'position :: String
    , table'deletionTable'count :: (Defaultable String)
    , table'deletionTable'table :: (Maybe String)
    , table'deletionTable'multi_deletion_spanned :: (Maybe String)
    } deriving (Eq,Show)
data Table'deletion_table'acceptance_state = Table'deletion_table'acceptance_state_accepted
					      |  Table'deletion_table'acceptance_state_rejected  | 
					     Table'deletion_table'acceptance_state_pending
					   deriving (Eq,Show)
data Table'deletion_table'type = Table'deletion_table'type_row  | 
				 Table'deletion_table'type_column  | 
				 Table'deletion_table'type_table
			       deriving (Eq,Show)
data Table'cut_offs = Table'cut_offsTable'movement_cut_off (List1 Table'movement_cut_off)
		    | Table'cut_offsTable'insertion_cut_off_Table'movement_cut_off Table'insertion_cut_off
										   [Table'movement_cut_off]
		    deriving (Eq,Show)
data Table'insertion_cut_off = Table'insertion_cut_off
    { table'insertion_cut_offTable'id :: String
    , table'insertion_cut_offTable'position :: String
    } deriving (Eq,Show)
data Table'movement_cut_off = Table'movement_cut_off
    { table'movement_cut_offTable'id :: String
    , table'movement_cut_offTable'start_position :: (Maybe String)
    , table'movement_cut_offTable'end_position :: (Maybe String)
    , table'movement_cut_offTable'position :: (Maybe String)
    } deriving (Eq,Show)
data Table'movement = Table'movement Table'movement_Attrs
				     Table'source_range_address Table'target_range_address
				     Office'change_info (Maybe Table'dependences)
				     (Maybe Table'deletions)
		    deriving (Eq,Show)
data Table'movement_Attrs = Table'movement_Attrs
    { table'movementTable'id :: String
    , table'movementTable'acceptance_state :: (Defaultable Table'movement_table'acceptance_state)
    , table'movementTable'rejecting_change_id :: (Maybe String)
    } deriving (Eq,Show)
data Table'movement_table'acceptance_state = Table'movement_table'acceptance_state_accepted
					      |  Table'movement_table'acceptance_state_rejected  | 
					     Table'movement_table'acceptance_state_pending
					   deriving (Eq,Show)
data Table'target_range_address = Table'target_range_address
    { table'target_range_addressTable'column :: (Maybe String)
    , table'target_range_addressTable'row :: (Maybe String)
    , table'target_range_addressTable'table :: (Maybe String)
    , table'target_range_addressTable'start_column :: (Maybe String)
    , table'target_range_addressTable'start_row :: (Maybe String)
    , table'target_range_addressTable'start_table :: (Maybe String)
    , table'target_range_addressTable'end_column :: (Maybe String)
    , table'target_range_addressTable'end_row :: (Maybe String)
    , table'target_range_addressTable'end_table :: (Maybe String)
    } deriving (Eq,Show)
data Table'source_range_address = Table'source_range_address
    { table'source_range_addressTable'column :: (Maybe String)
    , table'source_range_addressTable'row :: (Maybe String)
    , table'source_range_addressTable'table :: (Maybe String)
    , table'source_range_addressTable'start_column :: (Maybe String)
    , table'source_range_addressTable'start_row :: (Maybe String)
    , table'source_range_addressTable'start_table :: (Maybe String)
    , table'source_range_addressTable'end_column :: (Maybe String)
    , table'source_range_addressTable'end_row :: (Maybe String)
    , table'source_range_addressTable'end_table :: (Maybe String)
    } deriving (Eq,Show)
data Table'change_track_table_cell = Table'change_track_table_cell Table'change_track_table_cell_Attrs
								   [Text'p]
				   deriving (Eq,Show)
data Table'change_track_table_cell_Attrs = Table'change_track_table_cell_Attrs
    { table'change_track_table_cellTable'cell_address :: (Maybe String)
    , table'change_track_table_cellTable'matrix_covered :: (Defaultable Table'change_track_table_cell_table'matrix_covered)
    , table'change_track_table_cellTable'formula :: (Maybe String)
    , table'change_track_table_cellTable'number_matrix_rows_spanned :: (Maybe String)
    , table'change_track_table_cellTable'number_matrix_columns_spanned :: (Maybe String)
    , table'change_track_table_cellTable'value_type :: (Defaultable Table'change_track_table_cell_table'value_type)
    , table'change_track_table_cellTable'value :: (Maybe String)
    , table'change_track_table_cellTable'date_value :: (Maybe String)
    , table'change_track_table_cellTable'time_value :: (Maybe String)
    , table'change_track_table_cellTable'string_value :: (Maybe String)
    } deriving (Eq,Show)
data Table'change_track_table_cell_table'matrix_covered = Table'change_track_table_cell_table'matrix_covered_true
							   | 
							  Table'change_track_table_cell_table'matrix_covered_false
							deriving (Eq,Show)
data Table'change_track_table_cell_table'value_type = Table'change_track_table_cell_table'value_type_float
						       | 
						      Table'change_track_table_cell_table'value_type_time
						       | 
						      Table'change_track_table_cell_table'value_type_date
						       | 
						      Table'change_track_table_cell_table'value_type_percentage
						       | 
						      Table'change_track_table_cell_table'value_type_currency
						       | 
						      Table'change_track_table_cell_table'value_type_boolean
						       | 
						      Table'change_track_table_cell_table'value_type_string
						    deriving (Eq,Show)
data Table'cell_content_change = Table'cell_content_change Table'cell_content_change_Attrs
							   Table'cell_address Office'change_info
							   (Maybe Table'dependences)
							   (Maybe Table'deletions) Table'previous
			       deriving (Eq,Show)
data Table'cell_content_change_Attrs = Table'cell_content_change_Attrs
    { table'cell_content_changeTable'id :: String
    , table'cell_content_changeTable'acceptance_state :: (Defaultable Table'cell_content_change_table'acceptance_state)
    , table'cell_content_changeTable'rejecting_change_id :: (Maybe String)
    } deriving (Eq,Show)
data Table'cell_content_change_table'acceptance_state = Table'cell_content_change_table'acceptance_state_accepted
							 | 
							Table'cell_content_change_table'acceptance_state_rejected
							 | 
							Table'cell_content_change_table'acceptance_state_pending
						      deriving (Eq,Show)
data Table'cell_address = Table'cell_address
    { table'cell_addressTable'column :: (Maybe String)
    , table'cell_addressTable'row :: (Maybe String)
    , table'cell_addressTable'table :: (Maybe String)
    } deriving (Eq,Show)
data Table'previous = Table'previous Table'previous_Attrs
				     Table'change_track_table_cell
		    deriving (Eq,Show)
data Table'previous_Attrs = Table'previous_Attrs
    { table'previousTable'id :: (Maybe String)
    } deriving (Eq,Show)
data Table'rejection = Table'rejection Table'rejection_Attrs
				       Office'change_info (Maybe Table'dependences)
				       (Maybe Table'deletions)
		     deriving (Eq,Show)
data Table'rejection_Attrs = Table'rejection_Attrs
    { table'rejectionTable'id :: String
    , table'rejectionTable'acceptance_state :: (Defaultable Table'rejection_table'acceptance_state)
    , table'rejectionTable'rejecting_change_id :: (Maybe String)
    } deriving (Eq,Show)
data Table'rejection_table'acceptance_state = Table'rejection_table'acceptance_state_accepted
					       |  Table'rejection_table'acceptance_state_rejected
					       |  Table'rejection_table'acceptance_state_pending
					    deriving (Eq,Show)
data Table'table = Table'table Table'table_Attrs
			       (Maybe Table'table_source) (Maybe Table'scenario)
			       (Maybe Office'forms) (Maybe Table'shapes)
			       (OneOf4 (OneOf2 Table'table_columns (List1 (OneOf2 Table'table_column Table'table_column_group))) (Maybe (Table'table_header_columns,(Maybe (OneOf2 Table'table_columns (List1 (OneOf2 Table'table_column Table'table_column_group)))))) Table'table_header_columns (Maybe (OneOf2 Table'table_columns (List1 (OneOf2 Table'table_column Table'table_column_group)))))
			       (OneOf4 (OneOf2 Table'table_rows (List1 (OneOf2 Table'table_row Table'table_row_group))) (Maybe (Table'table_header_rows,(Maybe (OneOf2 Table'table_rows (List1 (OneOf2 Table'table_row Table'table_row_group)))))) Table'table_header_rows (Maybe (OneOf2 Table'table_rows (List1 (OneOf2 Table'table_row Table'table_row_group)))))
		 deriving (Eq,Show)
data Table'table_Attrs = Table'table_Attrs
    { table'tableTable'name :: (Maybe String)
    , table'tableTable'style_name :: (Maybe String)
    , table'tableTable'protected :: (Defaultable String)
    , table'tableTable'protection_key :: (Maybe String)
    , table'tableTable'print_ranges :: (Maybe String)
    } deriving (Eq,Show)
data Table'table_source = Table'table_source
    { table'table_sourceTable'mode :: (Defaultable Table'table_source_table'mode)
    , table'table_sourceXlink'type :: (Defaultable Table'table_source_xlink'type)
    , table'table_sourceXlink'actuate :: (Defaultable Table'table_source_xlink'actuate)
    , table'table_sourceXlink'href :: String
    , table'table_sourceTable'filter_name :: (Maybe String)
    , table'table_sourceTable'table_name :: (Maybe String)
    , table'table_sourceTable'filter_options :: (Maybe String)
    , table'table_sourceTable'refresh_delay :: (Maybe String)
    } deriving (Eq,Show)
data Table'table_source_table'mode = Table'table_source_table'mode_copy_all
				      |  Table'table_source_table'mode_copy_results_only
				   deriving (Eq,Show)
data Table'table_source_xlink'type = Table'table_source_xlink'type_simple
				   deriving (Eq,Show)
data Table'table_source_xlink'actuate = Table'table_source_xlink'actuate_onRequest
				      deriving (Eq,Show)
data Table'scenario = Table'scenario
    { table'scenarioTable'display_border :: (Defaultable String)
    , table'scenarioTable'border_color :: (Maybe String)
    , table'scenarioTable'copy_back :: (Defaultable String)
    , table'scenarioTable'copy_styles :: (Defaultable String)
    , table'scenarioTable'copy_formulas :: (Defaultable String)
    , table'scenarioTable'is_active :: String
    , table'scenarioTable'scenario_ranges :: String
    , table'scenarioTable'comment :: (Maybe String)
    } deriving (Eq,Show)
data Table'shapes = Table'shapesDraw'rect Draw'rect
		  | Table'shapesDraw'line Draw'line
		  | Table'shapesDraw'polyline Draw'polyline
		  | Table'shapesDraw'polygon Draw'polygon
		  | Table'shapesDraw'path Draw'path
		  | Table'shapesDraw'circle Draw'circle
		  | Table'shapesDraw'ellipse Draw'ellipse
		  | Table'shapesDraw'g Draw'g
		  | Table'shapesDraw'page_thumbnail Draw'page_thumbnail
		  | Table'shapesDraw'text_box Draw'text_box
		  | Table'shapesDraw'image Draw'image
		  | Table'shapesDraw'object Draw'object
		  | Table'shapesDraw'object_ole Draw'object_ole
		  | Table'shapesDraw'applet Draw'applet
		  | Table'shapesDraw'floating_frame Draw'floating_frame
		  | Table'shapesDraw'plugin Draw'plugin
		  | Table'shapesDraw'measure Draw'measure
		  | Table'shapesDraw'caption Draw'caption
		  | Table'shapesDraw'connector Draw'connector
		  | Table'shapesChart'chart Chart'chart
		  | Table'shapesDr3d'scene Dr3d'scene
		  | Table'shapesDraw'control Draw'control
		  deriving (Eq,Show)
data Table'table_column_group = Table'table_column_group Table'table_column_group_Attrs
							 (List1 Table'table_column_group_)
			      deriving (Eq,Show)
data Table'table_column_group_Attrs = Table'table_column_group_Attrs
    { table'table_column_groupTable'display :: (Defaultable String)
    } deriving (Eq,Show)
data Table'table_column_group_ = Table'table_column_group_Table'table_header_columns Table'table_header_columns
			       | Table'table_column_group_Table'table_column Table'table_column
			       | Table'table_column_group_Table'table_column_group Table'table_column_group
			       deriving (Eq,Show)
newtype Table'table_header_columns = Table'table_header_columns (List1 Table'table_header_columns_) 		deriving (Eq,Show)
data Table'table_header_columns_ = Table'table_header_columns_Table'table_column Table'table_column
				 | Table'table_header_columns_Table'table_column_group Table'table_column_group
				 deriving (Eq,Show)
newtype Table'table_columns = Table'table_columns (List1 Table'table_columns_) 		deriving (Eq,Show)
data Table'table_columns_ = Table'table_columns_Table'table_column Table'table_column
			  | Table'table_columns_Table'table_column_group Table'table_column_group
			  deriving (Eq,Show)
data Table'table_column = Table'table_column
    { table'table_columnTable'number_columns_repeated :: (Defaultable String)
    , table'table_columnTable'style_name :: (Maybe String)
    , table'table_columnTable'visibility :: (Defaultable Table'table_column_table'visibility)
    , table'table_columnTable'default_cell_style_name :: (Maybe String)
    } deriving (Eq,Show)
data Table'table_column_table'visibility = Table'table_column_table'visibility_visible
					    |  Table'table_column_table'visibility_collapse  | 
					   Table'table_column_table'visibility_filter
					 deriving (Eq,Show)
data Table'table_row_group = Table'table_row_group Table'table_row_group_Attrs
						   (List1 Table'table_row_group_)
			   deriving (Eq,Show)
data Table'table_row_group_Attrs = Table'table_row_group_Attrs
    { table'table_row_groupTable'display :: (Defaultable String)
    } deriving (Eq,Show)
data Table'table_row_group_ = Table'table_row_group_Table'table_header_rows Table'table_header_rows
			    | Table'table_row_group_Table'table_row Table'table_row
			    | Table'table_row_group_Table'table_row_group Table'table_row_group
			    deriving (Eq,Show)
newtype Table'table_header_rows = Table'table_header_rows (List1 Table'table_header_rows_) 		deriving (Eq,Show)
data Table'table_header_rows_ = Table'table_header_rows_Table'table_row Table'table_row
			      | Table'table_header_rows_Table'table_row_group Table'table_row_group
			      deriving (Eq,Show)
newtype Table'table_rows = Table'table_rows (List1 Table'table_rows_) 		deriving (Eq,Show)
data Table'table_rows_ = Table'table_rows_Table'table_row Table'table_row
		       | Table'table_rows_Table'table_row_group Table'table_row_group
		       deriving (Eq,Show)
data Table'table_row = Table'table_row Table'table_row_Attrs
				       (List1 Table'table_row_)
		     deriving (Eq,Show)
data Table'table_row_Attrs = Table'table_row_Attrs
    { table'table_rowTable'number_rows_repeated :: (Defaultable String)
    , table'table_rowTable'style_name :: (Maybe String)
    , table'table_rowTable'visibility :: (Defaultable Table'table_row_table'visibility)
    , table'table_rowTable'default_cell_style_name :: (Maybe String)
    } deriving (Eq,Show)
data Table'table_row_ = Table'table_row_Table'table_cell Table'table_cell
		      | Table'table_row_Table'covered_table_cell Table'covered_table_cell
		      deriving (Eq,Show)
data Table'table_row_table'visibility = Table'table_row_table'visibility_visible
					 |  Table'table_row_table'visibility_collapse  | 
					Table'table_row_table'visibility_filter
				      deriving (Eq,Show)
data Table'table_cell = Table'table_cell Table'table_cell_Attrs
					 (Maybe Table'cell_range_source) (Maybe Office'annotation)
					 (Maybe Table'detective)
					 (OneOf2 Table'sub_table [(OneOf5 Text'h Text'p Text'ordered_list Text'unordered_list (OneOf22 Draw'rect Draw'line Draw'polyline Draw'polygon Draw'path Draw'circle Draw'ellipse Draw'g Draw'page_thumbnail Draw'text_box Draw'image Draw'object Draw'object_ole Draw'applet Draw'floating_frame Draw'plugin Draw'measure Draw'caption Draw'connector Chart'chart Dr3d'scene Draw'control))])
		      deriving (Eq,Show)
data Table'table_cell_Attrs = Table'table_cell_Attrs
    { table'table_cellTable'number_columns_repeated :: (Defaultable String)
    , table'table_cellTable'number_rows_spanned :: (Defaultable String)
    , table'table_cellTable'number_columns_spanned :: (Defaultable String)
    , table'table_cellTable'style_name :: (Maybe String)
    , table'table_cellTable'validation_name :: (Maybe String)
    , table'table_cellTable'formula :: (Maybe String)
    , table'table_cellTable'number_matrix_rows_spanned :: (Maybe String)
    , table'table_cellTable'number_matrix_columns_spanned :: (Maybe String)
    , table'table_cellTable'value_type :: (Defaultable Table'table_cell_table'value_type)
    , table'table_cellTable'value :: (Maybe String)
    , table'table_cellTable'date_value :: (Maybe String)
    , table'table_cellTable'time_value :: (Maybe String)
    , table'table_cellTable'boolean_value :: (Maybe String)
    , table'table_cellTable'string_value :: (Maybe String)
    , table'table_cellTable'currency :: (Maybe String)
    , table'table_cellTable'protected :: (Defaultable String)
    } deriving (Eq,Show)
data Table'table_cell_table'value_type = Table'table_cell_table'value_type_float
					  |  Table'table_cell_table'value_type_time  | 
					 Table'table_cell_table'value_type_date  | 
					 Table'table_cell_table'value_type_percentage  | 
					 Table'table_cell_table'value_type_currency  | 
					 Table'table_cell_table'value_type_boolean  | 
					 Table'table_cell_table'value_type_string
				       deriving (Eq,Show)
data Table'covered_table_cell = Table'covered_table_cell Table'covered_table_cell_Attrs
							 (Maybe Table'cell_range_source)
							 (Maybe Office'annotation)
							 (Maybe Table'detective)
							 (OneOf2 Table'sub_table [(OneOf5 Text'h Text'p Text'ordered_list Text'unordered_list (OneOf22 Draw'rect Draw'line Draw'polyline Draw'polygon Draw'path Draw'circle Draw'ellipse Draw'g Draw'page_thumbnail Draw'text_box Draw'image Draw'object Draw'object_ole Draw'applet Draw'floating_frame Draw'plugin Draw'measure Draw'caption Draw'connector Chart'chart Dr3d'scene Draw'control))])
			      deriving (Eq,Show)
data Table'covered_table_cell_Attrs = Table'covered_table_cell_Attrs
    { table'covered_table_cellTable'number_columns_repeated :: (Defaultable String)
    , table'covered_table_cellTable'style_name :: (Maybe String)
    , table'covered_table_cellTable'validation_name :: (Maybe String)
    , table'covered_table_cellTable'formula :: (Maybe String)
    , table'covered_table_cellTable'number_matrix_rows_spanned :: (Maybe String)
    , table'covered_table_cellTable'number_matrix_columns_spanned :: (Maybe String)
    , table'covered_table_cellTable'value_type :: (Defaultable Table'covered_table_cell_table'value_type)
    , table'covered_table_cellTable'value :: (Maybe String)
    , table'covered_table_cellTable'date_value :: (Maybe String)
    , table'covered_table_cellTable'time_value :: (Maybe String)
    , table'covered_table_cellTable'boolean_value :: (Maybe String)
    , table'covered_table_cellTable'string_value :: (Maybe String)
    , table'covered_table_cellTable'currency :: (Maybe String)
    } deriving (Eq,Show)
data Table'covered_table_cell_table'value_type = Table'covered_table_cell_table'value_type_float
						  |  Table'covered_table_cell_table'value_type_time
						  |  Table'covered_table_cell_table'value_type_date
						  | 
						 Table'covered_table_cell_table'value_type_percentage
						  | 
						 Table'covered_table_cell_table'value_type_currency
						  | 
						 Table'covered_table_cell_table'value_type_boolean
						  | 
						 Table'covered_table_cell_table'value_type_string
					       deriving (Eq,Show)
data Table'cell_range_source = Table'cell_range_source
    { table'cell_range_sourceTable'name :: String
    , table'cell_range_sourceXlink'type :: (Defaultable Table'cell_range_source_xlink'type)
    , table'cell_range_sourceXlink'actuate :: (Defaultable Table'cell_range_source_xlink'actuate)
    , table'cell_range_sourceXlink'href :: String
    , table'cell_range_sourceTable'filter_name :: String
    , table'cell_range_sourceTable'filter_options :: (Maybe String)
    , table'cell_range_sourceTable'last_column_spanned :: String
    , table'cell_range_sourceTable'last_row_spanned :: String
    , table'cell_range_sourceTable'refresh_delay :: (Maybe String)
    } deriving (Eq,Show)
data Table'cell_range_source_xlink'type = Table'cell_range_source_xlink'type_simple
					deriving (Eq,Show)
data Table'cell_range_source_xlink'actuate = Table'cell_range_source_xlink'actuate_onRequest
					   deriving (Eq,Show)
data Table'detective = Table'detective [Table'highlighted_range]
				       [Table'operation]
		     deriving (Eq,Show)
data Table'highlighted_range = Table'highlighted_range
    { table'highlighted_rangeTable'cell_range_address :: (Maybe String)
    , table'highlighted_rangeTable'direction :: (Maybe Table'highlighted_range_table'direction)
    , table'highlighted_rangeTable'contains_error :: (Maybe String)
    , table'highlighted_rangeTable'marked_invalid :: (Maybe String)
    } deriving (Eq,Show)
data Table'highlighted_range_table'direction = Table'highlighted_range_table'direction_from_another_table
					        | 
					       Table'highlighted_range_table'direction_to_another_table
					        | 
					       Table'highlighted_range_table'direction_from_same_table
					        | 
					       Table'highlighted_range_table'direction_to_same_table
					     deriving (Eq,Show)
data Table'operation = Table'operation
    { table'operationTable'name :: Table'operation_table'name
    , table'operationTable'index :: String
    } deriving (Eq,Show)
data Table'operation_table'name = Table'operation_table'name_trace_dependents
				   |  Table'operation_table'name_remove_dependents  | 
				  Table'operation_table'name_trace_precedents  | 
				  Table'operation_table'name_remove_precedents  | 
				  Table'operation_table'name_trace_errors
				deriving (Eq,Show)
newtype Table'content_validations = Table'content_validations (List1 Table'content_validation) 		deriving (Eq,Show)
data Table'content_validation = Table'content_validation Table'content_validation_Attrs
							 (Maybe Table'help_message)
							 (Maybe (OneOf3 Table'error_message Table'error_macro (Maybe Office'events)))
			      deriving (Eq,Show)
data Table'content_validation_Attrs = Table'content_validation_Attrs
    { table'content_validationTable'name :: String
    , table'content_validationTable'condition :: (Maybe String)
    , table'content_validationTable'base_cell_address :: (Maybe String)
    , table'content_validationTable'allow_empty_cell :: (Maybe String)
    } deriving (Eq,Show)
data Table'help_message = Table'help_message Table'help_message_Attrs
					     [Text'p]
			deriving (Eq,Show)
data Table'help_message_Attrs = Table'help_message_Attrs
    { table'help_messageTable'title :: (Maybe String)
    , table'help_messageTable'display :: (Maybe String)
    } deriving (Eq,Show)
data Table'error_message = Table'error_message Table'error_message_Attrs
					       [Text'p]
			 deriving (Eq,Show)
data Table'error_message_Attrs = Table'error_message_Attrs
    { table'error_messageTable'title :: (Maybe String)
    , table'error_messageTable'message_type :: (Maybe Table'error_message_table'message_type)
    , table'error_messageTable'display :: (Maybe String)
    } deriving (Eq,Show)
data Table'error_message_table'message_type = Table'error_message_table'message_type_stop
					       |  Table'error_message_table'message_type_warning  | 
					      Table'error_message_table'message_type_information
					    deriving (Eq,Show)
data Table'error_macro = Table'error_macro
    { table'error_macroTable'name :: (Maybe String)
    , table'error_macroTable'execute :: (Maybe String)
    } deriving (Eq,Show)
data Table'sub_table = Table'sub_table (OneOf4 (OneOf2 Table'table_columns (List1 (OneOf2 Table'table_column Table'table_column_group))) (Maybe (Table'table_header_columns,(Maybe (OneOf2 Table'table_columns (List1 (OneOf2 Table'table_column Table'table_column_group)))))) Table'table_header_columns (Maybe (OneOf2 Table'table_columns (List1 (OneOf2 Table'table_column Table'table_column_group)))))
				       (OneOf4 (OneOf2 Table'table_rows (List1 (OneOf2 Table'table_row Table'table_row_group))) (Maybe (Table'table_header_rows,(Maybe (OneOf2 Table'table_rows (List1 (OneOf2 Table'table_row Table'table_row_group)))))) Table'table_header_rows (Maybe (OneOf2 Table'table_rows (List1 (OneOf2 Table'table_row Table'table_row_group)))))
		     deriving (Eq,Show)
newtype Table'label_ranges = Table'label_ranges [Table'label_range] 		deriving (Eq,Show)
data Table'label_range = Table'label_range
    { table'label_rangeTable'label_cell_range_address :: String
    , table'label_rangeTable'data_cell_range_address :: String
    , table'label_rangeTable'orientation :: Table'label_range_table'orientation
    } deriving (Eq,Show)
data Table'label_range_table'orientation = Table'label_range_table'orientation_column
					    |  Table'label_range_table'orientation_row
					 deriving (Eq,Show)
newtype Table'named_expressions = Table'named_expressions [Table'named_expressions_] 		deriving (Eq,Show)
data Table'named_expressions_ = Table'named_expressions_Table'named_range Table'named_range
			      | Table'named_expressions_Table'named_expression Table'named_expression
			      deriving (Eq,Show)
data Table'named_range = Table'named_range
    { table'named_rangeTable'name :: String
    , table'named_rangeTable'cell_range_address :: String
    , table'named_rangeTable'base_cell_address :: (Maybe String)
    , table'named_rangeTable'range_usable_as :: (Defaultable String)
    } deriving (Eq,Show)
data Table'named_expression = Table'named_expression
    { table'named_expressionTable'name :: String
    , table'named_expressionTable'expression :: String
    , table'named_expressionTable'base_cell_address :: (Maybe String)
    } deriving (Eq,Show)
data Table'filter = Table'filterTable'filter_condition Table'filter_Attrs
						       Table'filter_condition
		  | Table'filterTable'filter_and Table'filter_Attrs Table'filter_and
		  | Table'filterTable'filter_or Table'filter_Attrs Table'filter_or
		  deriving (Eq,Show)
data Table'filter_Attrs = Table'filter_Attrs
    { table'filterTable'target_range_address :: (Maybe String)
    , table'filterTable'condition_source_range_address :: (Maybe String)
    , table'filterTable'condition_source :: (Defaultable Table'filter_table'condition_source)
    , table'filterTable'display_duplicates :: (Defaultable String)
    } deriving (Eq,Show)
data Table'filter_table'condition_source = Table'filter_table'condition_source_self
					    |  Table'filter_table'condition_source_cell_range
					 deriving (Eq,Show)
newtype Table'filter_and = Table'filter_and (List1 Table'filter_and_) 		deriving (Eq,Show)
data Table'filter_and_ = Table'filter_and_Table'filter_or Table'filter_or
		       | Table'filter_and_Table'filter_condition Table'filter_condition
		       deriving (Eq,Show)
newtype Table'filter_or = Table'filter_or (List1 Table'filter_or_) 		deriving (Eq,Show)
data Table'filter_or_ = Table'filter_or_Table'filter_and Table'filter_and
		      | Table'filter_or_Table'filter_condition Table'filter_condition
		      deriving (Eq,Show)
data Table'filter_condition = Table'filter_condition
    { table'filter_conditionTable'field_number :: String
    , table'filter_conditionTable'case_sensitive :: (Defaultable String)
    , table'filter_conditionTable'data_type :: (Defaultable Table'filter_condition_table'data_type)
    , table'filter_conditionTable'value :: String
    , table'filter_conditionTable'operator :: String
    } deriving (Eq,Show)
data Table'filter_condition_table'data_type = Table'filter_condition_table'data_type_text
					       |  Table'filter_condition_table'data_type_number
					    deriving (Eq,Show)
newtype Table'database_ranges = Table'database_ranges [Table'database_range] 		deriving (Eq,Show)
data Table'database_range = Table'database_range Table'database_range_Attrs
						 (Maybe (OneOf3 Table'database_source_sql Table'database_source_table Table'database_source_query))
						 (Maybe Table'filter) (Maybe Table'sort)
						 (Maybe Table'subtotal_rules)
			  deriving (Eq,Show)
data Table'database_range_Attrs = Table'database_range_Attrs
    { table'database_rangeTable'name :: (Maybe String)
    , table'database_rangeTable'is_selection :: (Defaultable String)
    , table'database_rangeTable'on_update_keep_styles :: (Defaultable String)
    , table'database_rangeTable'on_update_keep_size :: (Defaultable String)
    , table'database_rangeTable'has_persistant_data :: (Defaultable String)
    , table'database_rangeTable'orientation :: (Defaultable Table'database_range_table'orientation)
    , table'database_rangeTable'contains_header :: (Defaultable String)
    , table'database_rangeTable'display_filter_buttons :: (Defaultable String)
    , table'database_rangeTable'target_range_address :: String
    , table'database_rangeTable'refresh_delay :: (Maybe String)
    } deriving (Eq,Show)
data Table'database_range_table'orientation = Table'database_range_table'orientation_row
					       |  Table'database_range_table'orientation_column
					    deriving (Eq,Show)
data Table'database_source_sql = Table'database_source_sql
    { table'database_source_sqlTable'database_name :: String
    , table'database_source_sqlTable'sql_statement :: String
    , table'database_source_sqlTable'parse_sql_statements :: (Defaultable String)
    } deriving (Eq,Show)
data Table'database_source_table = Table'database_source_table
    { table'database_source_tableTable'database_name :: String
    , table'database_source_tableTable'table_name :: String
    } deriving (Eq,Show)
data Table'database_source_query = Table'database_source_query
    { table'database_source_queryTable'database_name :: String
    , table'database_source_queryTable'query_name :: String
    } deriving (Eq,Show)
data Table'sort = Table'sort Table'sort_Attrs (List1 Table'sort_by)
		deriving (Eq,Show)
data Table'sort_Attrs = Table'sort_Attrs
    { table'sortTable'bind_styles_to_content :: (Defaultable String)
    , table'sortTable'target_range_address :: (Maybe String)
    , table'sortTable'case_sensitive :: (Defaultable String)
    , table'sortTable'language :: (Maybe String)
    , table'sortTable'country :: (Maybe String)
    , table'sortTable'algorithm :: (Maybe String)
    } deriving (Eq,Show)
data Table'sort_by = Table'sort_by
    { table'sort_byTable'field_number :: String
    , table'sort_byTable'data_type :: (Defaultable String)
    , table'sort_byTable'order :: (Defaultable Table'sort_by_table'order)
    } deriving (Eq,Show)
data Table'sort_by_table'order = Table'sort_by_table'order_ascending
				  |  Table'sort_by_table'order_descending
			       deriving (Eq,Show)
data Table'subtotal_rules = Table'subtotal_rules Table'subtotal_rules_Attrs
						 (Maybe Table'subtotal_rules_)
			  deriving (Eq,Show)
data Table'subtotal_rules_Attrs = Table'subtotal_rules_Attrs
    { table'subtotal_rulesTable'bind_styles_to_content :: (Defaultable String)
    , table'subtotal_rulesTable'case_sensitive :: (Defaultable String)
    , table'subtotal_rulesTable'page_breaks_on_group_change :: (Defaultable String)
    } deriving (Eq,Show)
data Table'subtotal_rules_ = Table'subtotal_rules_Table'sort_groups (Maybe Table'sort_groups)
			   | Table'subtotal_rules_Table'subtotal_rule [Table'subtotal_rule]
			   deriving (Eq,Show)
data Table'sort_groups = Table'sort_groups
    { table'sort_groupsTable'data_type :: (Defaultable String)
    , table'sort_groupsTable'order :: (Defaultable Table'sort_groups_table'order)
    } deriving (Eq,Show)
data Table'sort_groups_table'order = Table'sort_groups_table'order_ascending
				      |  Table'sort_groups_table'order_descending
				   deriving (Eq,Show)
data Table'subtotal_rule = Table'subtotal_rule Table'subtotal_rule_Attrs
					       [Table'subtotal_field]
			 deriving (Eq,Show)
data Table'subtotal_rule_Attrs = Table'subtotal_rule_Attrs
    { table'subtotal_ruleTable'group_by_field_number :: String
    } deriving (Eq,Show)
data Table'subtotal_field = Table'subtotal_field
    { table'subtotal_fieldTable'field_number :: String
    , table'subtotal_fieldTable'function :: String
    } deriving (Eq,Show)
newtype Table'data_pilot_tables = Table'data_pilot_tables [Table'data_pilot_table] 		deriving (Eq,Show)
data Table'data_pilot_table = Table'data_pilot_table Table'data_pilot_table_Attrs
						     (Maybe (OneOf5 Table'database_source_sql Table'database_source_table Table'database_source_query Table'source_service Table'source_cell_range))
						     (List1 Table'data_pilot_field)
			    deriving (Eq,Show)
data Table'data_pilot_table_Attrs = Table'data_pilot_table_Attrs
    { table'data_pilot_tableTable'name :: String
    , table'data_pilot_tableTable'application_data :: (Maybe String)
    , table'data_pilot_tableTable'grand_total :: (Defaultable Table'data_pilot_table_table'grand_total)
    , table'data_pilot_tableTable'ignore_empty_rows :: (Defaultable String)
    , table'data_pilot_tableTable'identify_categories :: (Defaultable String)
    , table'data_pilot_tableTable'target_range_address :: String
    , table'data_pilot_tableTable'buttons :: String
    } deriving (Eq,Show)
data Table'data_pilot_table_table'grand_total = Table'data_pilot_table_table'grand_total_none
						 |  Table'data_pilot_table_table'grand_total_row  | 
						Table'data_pilot_table_table'grand_total_column  | 
						Table'data_pilot_table_table'grand_total_both
					      deriving (Eq,Show)
data Table'source_service = Table'source_service
    { table'source_serviceTable'name :: String
    , table'source_serviceTable'source_name :: String
    , table'source_serviceTable'object_name :: String
    , table'source_serviceTable'username :: (Maybe String)
    , table'source_serviceTable'password :: (Maybe String)
    } deriving (Eq,Show)
data Table'source_cell_range = Table'source_cell_range Table'source_cell_range_Attrs
						       (Maybe Table'filter)
			     deriving (Eq,Show)
data Table'source_cell_range_Attrs = Table'source_cell_range_Attrs
    { table'source_cell_rangeTable'cell_range_address :: String
    } deriving (Eq,Show)
data Table'data_pilot_field = Table'data_pilot_field Table'data_pilot_field_Attrs
						     (Maybe Table'data_pilot_level)
			    deriving (Eq,Show)
data Table'data_pilot_field_Attrs = Table'data_pilot_field_Attrs
    { table'data_pilot_fieldTable'source_field_name :: String
    , table'data_pilot_fieldTable'is_data_layout_field :: (Defaultable String)
    , table'data_pilot_fieldTable'function :: String
    , table'data_pilot_fieldTable'orientation :: Table'data_pilot_field_table'orientation
    , table'data_pilot_fieldTable'used_hierarchy :: (Defaultable String)
    } deriving (Eq,Show)
data Table'data_pilot_field_table'orientation = Table'data_pilot_field_table'orientation_row
						 |  Table'data_pilot_field_table'orientation_column
						 |  Table'data_pilot_field_table'orientation_data
						 |  Table'data_pilot_field_table'orientation_page
						 |  Table'data_pilot_field_table'orientation_hidden
					      deriving (Eq,Show)
data Table'data_pilot_level = Table'data_pilot_level Table'data_pilot_level_Attrs
						     (Maybe Table'data_pilot_subtotals)
						     (Maybe Table'data_pilot_members)
			    deriving (Eq,Show)
data Table'data_pilot_level_Attrs = Table'data_pilot_level_Attrs
    { table'data_pilot_levelTable'display_empty :: (Maybe String)
    } deriving (Eq,Show)
newtype Table'data_pilot_subtotals = Table'data_pilot_subtotals [Table'data_pilot_subtotal] 		deriving (Eq,Show)
data Table'data_pilot_subtotal = Table'data_pilot_subtotal
    { table'data_pilot_subtotalTable'function :: String
    } deriving (Eq,Show)
newtype Table'data_pilot_members = Table'data_pilot_members [Table'data_pilot_member] 		deriving (Eq,Show)
data Table'data_pilot_member = Table'data_pilot_member
    { table'data_pilot_memberTable'name :: String
    , table'data_pilot_memberTable'display :: (Maybe String)
    , table'data_pilot_memberTable'display_details :: (Maybe String)
    } deriving (Eq,Show)
data Table'consolidation = Table'consolidation
    { table'consolidationTable'function :: String
    , table'consolidationTable'source_cell_range_addresses :: String
    , table'consolidationTable'target_cell_address :: String
    , table'consolidationTable'use_label :: (Defaultable Table'consolidation_table'use_label)
    , table'consolidationTable'link_to_source_data :: (Defaultable String)
    } deriving (Eq,Show)
data Table'consolidation_table'use_label = Table'consolidation_table'use_label_none
					    |  Table'consolidation_table'use_label_column  | 
					   Table'consolidation_table'use_label_row  | 
					   Table'consolidation_table'use_label_both
					 deriving (Eq,Show)
newtype Table'dde_links = Table'dde_links (List1 Table'dde_link) 		deriving (Eq,Show)
data Table'dde_link = Table'dde_link Office'dde_source Table'table
		    deriving (Eq,Show)
data Chart'chart = Chart'chart Chart'chart_Attrs
			       (Maybe Chart'title) (Maybe Chart'subtitle) (Maybe Chart'legend)
			       Chart'plot_area (Maybe Table'table)
		 deriving (Eq,Show)
data Chart'chart_Attrs = Chart'chart_Attrs
    { chart'chartChart'class :: Chart'chart_chart'class
    , chart'chartChart'add_in_name :: (Maybe String)
    , chart'chartChart'table_number_list :: (Maybe String)
    , chart'chartDraw'name :: (Maybe String)
    , chart'chartSvg'x :: (Maybe String)
    , chart'chartSvg'y :: (Maybe String)
    , chart'chartSvg'width :: (Maybe String)
    , chart'chartSvg'height :: (Maybe String)
    , chart'chartDraw'style_name :: (Maybe String)
    , chart'chartPresentation'style_name :: (Maybe String)
    , chart'chartDraw'text_style_name :: (Maybe String)
    , chart'chartChart'column_mapping :: (Maybe String)
    , chart'chartChart'row_mapping :: (Maybe String)
    , chart'chartChart'style_name :: (Maybe String)
    , chart'chartPresentation'class :: (Maybe Chart'chart_presentation'class)
    , chart'chartPresentation'placeholder :: (Maybe Chart'chart_presentation'placeholder)
    , chart'chartPresentation'user_transformed :: (Maybe Chart'chart_presentation'user_transformed)
    , chart'chartDraw'z_index :: (Maybe String)
    , chart'chartTable'end_cell_address :: (Maybe String)
    , chart'chartTable'end_x :: (Maybe String)
    , chart'chartTable'end_y :: (Maybe String)
    , chart'chartDraw'id :: (Maybe String)
    , chart'chartDraw'layer :: (Maybe String)
    } deriving (Eq,Show)
data Chart'chart_chart'class = Chart'chart_chart'class_line  | 
			       Chart'chart_chart'class_area  |  Chart'chart_chart'class_circle  | 
			       Chart'chart_chart'class_ring  |  Chart'chart_chart'class_scatter
			        |  Chart'chart_chart'class_radar  |  Chart'chart_chart'class_bar
			        |  Chart'chart_chart'class_stock  | 
			       Chart'chart_chart'class_add_in
			     deriving (Eq,Show)
data Chart'chart_presentation'class = Chart'chart_presentation'class_title
				       |  Chart'chart_presentation'class_outline  | 
				      Chart'chart_presentation'class_subtitle  | 
				      Chart'chart_presentation'class_text  | 
				      Chart'chart_presentation'class_graphic  | 
				      Chart'chart_presentation'class_object  | 
				      Chart'chart_presentation'class_chart  | 
				      Chart'chart_presentation'class_table  | 
				      Chart'chart_presentation'class_orgchart  | 
				      Chart'chart_presentation'class_page  | 
				      Chart'chart_presentation'class_notes
				    deriving (Eq,Show)
data Chart'chart_presentation'placeholder = Chart'chart_presentation'placeholder_true
					     |  Chart'chart_presentation'placeholder_false
					  deriving (Eq,Show)
data Chart'chart_presentation'user_transformed = Chart'chart_presentation'user_transformed_true
						  |  Chart'chart_presentation'user_transformed_false
					       deriving (Eq,Show)
data Chart'title = Chart'title Chart'title_Attrs (Maybe Text'p)
		 deriving (Eq,Show)
data Chart'title_Attrs = Chart'title_Attrs
    { chart'titleTable'cell_range :: (Maybe String)
    , chart'titleSvg'x :: (Maybe String)
    , chart'titleSvg'y :: (Maybe String)
    , chart'titleChart'style_name :: (Maybe String)
    } deriving (Eq,Show)
data Chart'subtitle = Chart'subtitle Chart'subtitle_Attrs
				     (Maybe Text'p)
		    deriving (Eq,Show)
data Chart'subtitle_Attrs = Chart'subtitle_Attrs
    { chart'subtitleTable'cell_range :: (Maybe String)
    , chart'subtitleSvg'x :: (Maybe String)
    , chart'subtitleSvg'y :: (Maybe String)
    , chart'subtitleChart'style_name :: (Maybe String)
    } deriving (Eq,Show)
data Chart'legend = Chart'legend
    { chart'legendChart'legend_position :: (Defaultable Chart'legend_chart'legend_position)
    , chart'legendSvg'x :: (Maybe String)
    , chart'legendSvg'y :: (Maybe String)
    , chart'legendChart'style_name :: (Maybe String)
    } deriving (Eq,Show)
data Chart'legend_chart'legend_position = Chart'legend_chart'legend_position_top
					   |  Chart'legend_chart'legend_position_left  | 
					  Chart'legend_chart'legend_position_bottom  | 
					  Chart'legend_chart'legend_position_right
					deriving (Eq,Show)
data Chart'plot_area = Chart'plot_area Chart'plot_area_Attrs
				       [Dr3d'light] [Chart'axis] (Maybe Chart'categories)
				       [Chart'series] (Maybe Chart'stock_gain_marker)
				       (Maybe Chart'stock_loss_marker)
				       (Maybe Chart'stock_range_line) (Maybe Chart'wall)
				       (Maybe Chart'floor)
		     deriving (Eq,Show)
data Chart'plot_area_Attrs = Chart'plot_area_Attrs
    { chart'plot_areaSvg'x :: (Maybe String)
    , chart'plot_areaSvg'y :: (Maybe String)
    , chart'plot_areaSvg'width :: (Maybe String)
    , chart'plot_areaSvg'height :: (Maybe String)
    , chart'plot_areaChart'style_name :: (Maybe String)
    , chart'plot_areaTable'cell_range_address :: (Maybe String)
    , chart'plot_areaChart'table_number_list :: (Maybe String)
    , chart'plot_areaChart'data_source_has_labels :: (Defaultable Chart'plot_area_chart'data_source_has_labels)
    , chart'plot_areaDr3d'vrp :: (Maybe String)
    , chart'plot_areaDr3d'vpn :: (Maybe String)
    , chart'plot_areaDr3d'vup :: (Maybe String)
    , chart'plot_areaDr3d'projection :: (Maybe Chart'plot_area_dr3d'projection)
    , chart'plot_areaDr3d'transform :: (Maybe String)
    , chart'plot_areaDr3d'distance :: (Maybe String)
    , chart'plot_areaDr3d'focal_length :: (Maybe String)
    , chart'plot_areaDr3d'shadow_slant :: (Maybe String)
    , chart'plot_areaDr3d'shade_mode :: (Maybe Chart'plot_area_dr3d'shade_mode)
    , chart'plot_areaDr3d'ambient_color :: (Maybe String)
    , chart'plot_areaDr3d'lighting_mode :: (Maybe String)
    } deriving (Eq,Show)
data Chart'plot_area_chart'data_source_has_labels = Chart'plot_area_chart'data_source_has_labels_none
						     | 
						    Chart'plot_area_chart'data_source_has_labels_row
						     | 
						    Chart'plot_area_chart'data_source_has_labels_column
						     | 
						    Chart'plot_area_chart'data_source_has_labels_both
						  deriving (Eq,Show)
data Chart'plot_area_dr3d'projection = Chart'plot_area_dr3d'projection_parallel
				        |  Chart'plot_area_dr3d'projection_perspective
				     deriving (Eq,Show)
data Chart'plot_area_dr3d'shade_mode = Chart'plot_area_dr3d'shade_mode_flat
				        |  Chart'plot_area_dr3d'shade_mode_phong  | 
				       Chart'plot_area_dr3d'shade_mode_gouraud  | 
				       Chart'plot_area_dr3d'shade_mode_draft
				     deriving (Eq,Show)
data Chart'wall = Chart'wall
    { chart'wallSvg'width :: (Maybe String)
    , chart'wallChart'style_name :: (Maybe String)
    } deriving (Eq,Show)
data Chart'floor = Chart'floor
    { chart'floorSvg'width :: (Maybe String)
    , chart'floorChart'style_name :: (Maybe String)
    } deriving (Eq,Show)
data Chart'stock_gain_marker = Chart'stock_gain_marker
    { chart'stock_gain_markerChart'style_name :: (Maybe String)
    } deriving (Eq,Show)
data Chart'stock_loss_marker = Chart'stock_loss_marker
    { chart'stock_loss_markerChart'style_name :: (Maybe String)
    } deriving (Eq,Show)
data Chart'stock_range_line = Chart'stock_range_line
    { chart'stock_range_lineChart'style_name :: (Maybe String)
    } deriving (Eq,Show)
data Chart'axis = Chart'axis Chart'axis_Attrs (Maybe Chart'title)
			     [Chart'grid]
		deriving (Eq,Show)
data Chart'axis_Attrs = Chart'axis_Attrs
    { chart'axisChart'class :: Chart'axis_chart'class
    , chart'axisChart'name :: (Maybe String)
    , chart'axisChart'style_name :: (Maybe String)
    } deriving (Eq,Show)
data Chart'axis_chart'class = Chart'axis_chart'class_category  | 
			      Chart'axis_chart'class_value  |  Chart'axis_chart'class_series  | 
			      Chart'axis_chart'class_domain
			    deriving (Eq,Show)
data Chart'grid = Chart'grid
    { chart'gridChart'class :: (Defaultable Chart'grid_chart'class)
    , chart'gridChart'style_name :: (Maybe String)
    } deriving (Eq,Show)
data Chart'grid_chart'class = Chart'grid_chart'class_major  | 
			      Chart'grid_chart'class_minor
			    deriving (Eq,Show)
data Chart'categories = Chart'categories
    { chart'categoriesTable'cell_range_address :: (Maybe String)
    } deriving (Eq,Show)
data Chart'series = Chart'series Chart'series_Attrs [Chart'domain]
				 (Maybe Chart'mean_value) (Maybe Chart'regression_curve)
				 (Maybe Chart'error_indicator) [Chart'data_point]
		  deriving (Eq,Show)
data Chart'series_Attrs = Chart'series_Attrs
    { chart'seriesChart'values_cell_range_address :: (Maybe String)
    , chart'seriesChart'label_cell_address :: (Maybe String)
    , chart'seriesChart'class :: (Maybe Chart'series_chart'class)
    , chart'seriesChart'attached_axis :: (Maybe String)
    , chart'seriesChart'style_name :: (Maybe String)
    } deriving (Eq,Show)
data Chart'series_chart'class = Chart'series_chart'class_line  | 
				Chart'series_chart'class_area  |  Chart'series_chart'class_circle
				 |  Chart'series_chart'class_ring  | 
				Chart'series_chart'class_scatter  |  Chart'series_chart'class_radar
				 |  Chart'series_chart'class_bar  |  Chart'series_chart'class_stock
				 |  Chart'series_chart'class_add_in
			      deriving (Eq,Show)
data Chart'domain = Chart'domain
    { chart'domainTable'cell_range_address :: (Maybe String)
    } deriving (Eq,Show)
data Chart'data_point = Chart'data_point
    { chart'data_pointChart'repeated :: (Maybe String)
    , chart'data_pointChart'style_name :: (Maybe String)
    } deriving (Eq,Show)
data Chart'mean_value = Chart'mean_value
    { chart'mean_valueChart'style_name :: (Maybe String)
    } deriving (Eq,Show)
data Chart'regression_curve = Chart'regression_curve
    { chart'regression_curveChart'style_name :: (Maybe String)
    } deriving (Eq,Show)
data Chart'error_indicator = Chart'error_indicator
    { chart'error_indicatorChart'style_name :: (Maybe String)
    } deriving (Eq,Show)
data Number'number_style = Number'number_style Number'number_style_Attrs
					       (Maybe Style'properties)
					       (OneOf4 Number'text (Maybe ((OneOf3 Number'number Number'scientific_number Number'fraction),(Maybe Number'text))) (OneOf3 Number'number Number'scientific_number Number'fraction) (Maybe Number'text))
					       [Style'map]
			 deriving (Eq,Show)
data Number'number_style_Attrs = Number'number_style_Attrs
    { number'number_styleStyle'name :: String
    , number'number_styleStyle'family :: String
    , number'number_styleNumber'language :: (Maybe String)
    , number'number_styleNumber'country :: (Maybe String)
    , number'number_styleNumber'title :: (Maybe String)
    , number'number_styleStyle'volatile :: (Maybe String)
    , number'number_styleNumber'transliteration_format :: (Defaultable String)
    , number'number_styleNumber'transliteration_language :: (Maybe String)
    , number'number_styleNumber'transliteration_country :: (Maybe String)
    , number'number_styleNumber'transliteration_style :: (Defaultable Number'number_style_number'transliteration_style)
    } deriving (Eq,Show)
data Number'number_style_number'transliteration_style = Number'number_style_number'transliteration_style_short
							 | 
							Number'number_style_number'transliteration_style_medium
							 | 
							Number'number_style_number'transliteration_style_long
						      deriving (Eq,Show)
data Number'number = Number'number Number'number_Attrs
				   [Number'embedded_text]
		   deriving (Eq,Show)
data Number'number_Attrs = Number'number_Attrs
    { number'numberNumber'decimal_places :: (Maybe String)
    , number'numberNumber'min_integer_digits :: (Maybe String)
    , number'numberNumber'grouping :: (Defaultable String)
    , number'numberNumber'decimal_replacement :: (Maybe String)
    , number'numberNumber'display_factor :: (Defaultable String)
    } deriving (Eq,Show)
data Number'scientific_number = Number'scientific_number
    { number'scientific_numberNumber'decimal_places :: (Maybe String)
    , number'scientific_numberNumber'min_integer_digits :: (Maybe String)
    , number'scientific_numberNumber'grouping :: (Defaultable String)
    , number'scientific_numberNumber'min_exponent_digits :: (Maybe String)
    } deriving (Eq,Show)
data Number'fraction = Number'fraction
    { number'fractionNumber'min_integer_digits :: (Maybe String)
    , number'fractionNumber'grouping :: (Defaultable String)
    , number'fractionNumber'min_numerator_digits :: (Maybe String)
    , number'fractionNumber'min_denominator_digits :: (Maybe String)
    } deriving (Eq,Show)
data Number'embedded_text = Number'embedded_text Number'embedded_text_Attrs
						 String
			  deriving (Eq,Show)
data Number'embedded_text_Attrs = Number'embedded_text_Attrs
    { number'embedded_textNumber'position :: String
    } deriving (Eq,Show)
data Number'currency_style = Number'currency_style Number'currency_style_Attrs
						   (Maybe Style'properties) (Maybe Number'text)
						   (Maybe (OneOf6 Number'number (Maybe Number'text) (Maybe (Number'currency_symbol,(Maybe Number'text))) Number'currency_symbol (Maybe Number'text) (Maybe (Number'number,(Maybe Number'text)))))
						   [Style'map]
			   deriving (Eq,Show)
data Number'currency_style_Attrs = Number'currency_style_Attrs
    { number'currency_styleStyle'name :: String
    , number'currency_styleStyle'family :: String
    , number'currency_styleNumber'language :: (Maybe String)
    , number'currency_styleNumber'country :: (Maybe String)
    , number'currency_styleNumber'title :: (Maybe String)
    , number'currency_styleStyle'volatile :: (Maybe String)
    , number'currency_styleNumber'transliteration_format :: (Defaultable String)
    , number'currency_styleNumber'transliteration_language :: (Maybe String)
    , number'currency_styleNumber'transliteration_country :: (Maybe String)
    , number'currency_styleNumber'transliteration_style :: (Defaultable Number'currency_style_number'transliteration_style)
    , number'currency_styleNumber'automatic_order :: (Defaultable String)
    } deriving (Eq,Show)
data Number'currency_style_number'transliteration_style = Number'currency_style_number'transliteration_style_short
							   | 
							  Number'currency_style_number'transliteration_style_medium
							   | 
							  Number'currency_style_number'transliteration_style_long
							deriving (Eq,Show)
data Number'currency_symbol = Number'currency_symbol Number'currency_symbol_Attrs
						     String
			    deriving (Eq,Show)
data Number'currency_symbol_Attrs = Number'currency_symbol_Attrs
    { number'currency_symbolNumber'language :: (Maybe String)
    , number'currency_symbolNumber'country :: (Maybe String)
    } deriving (Eq,Show)
data Number'percentage_style = Number'percentage_style Number'percentage_style_Attrs
						       (Maybe Style'properties)
						       (OneOf4 Number'text (Maybe (Number'number,(Maybe Number'text))) Number'number (Maybe Number'text))
						       [Style'map]
			     deriving (Eq,Show)
data Number'percentage_style_Attrs = Number'percentage_style_Attrs
    { number'percentage_styleStyle'name :: String
    , number'percentage_styleStyle'family :: String
    , number'percentage_styleNumber'language :: (Maybe String)
    , number'percentage_styleNumber'country :: (Maybe String)
    , number'percentage_styleNumber'title :: (Maybe String)
    , number'percentage_styleStyle'volatile :: (Maybe String)
    , number'percentage_styleNumber'transliteration_format :: (Defaultable String)
    , number'percentage_styleNumber'transliteration_language :: (Maybe String)
    , number'percentage_styleNumber'transliteration_country :: (Maybe String)
    , number'percentage_styleNumber'transliteration_style :: (Defaultable Number'percentage_style_number'transliteration_style)
    } deriving (Eq,Show)
data Number'percentage_style_number'transliteration_style = Number'percentage_style_number'transliteration_style_short
							     | 
							    Number'percentage_style_number'transliteration_style_medium
							     | 
							    Number'percentage_style_number'transliteration_style_long
							  deriving (Eq,Show)
data Number'date_style = Number'date_style Number'date_style_Attrs
					   (Maybe Style'properties)
					   (OneOf3 Number'text (List1 ((OneOf11 Number'day Number'month Number'year Number'era Number'day_of_week Number'week_of_year Number'quarter Number'hours Number'am_pm Number'minutes Number'seconds),(Maybe Number'text))) (List1 ((OneOf11 Number'day Number'month Number'year Number'era Number'day_of_week Number'week_of_year Number'quarter Number'hours Number'am_pm Number'minutes Number'seconds),(Maybe Number'text))))
					   [Style'map]
		       deriving (Eq,Show)
data Number'date_style_Attrs = Number'date_style_Attrs
    { number'date_styleStyle'name :: String
    , number'date_styleStyle'family :: String
    , number'date_styleNumber'language :: (Maybe String)
    , number'date_styleNumber'country :: (Maybe String)
    , number'date_styleNumber'title :: (Maybe String)
    , number'date_styleStyle'volatile :: (Maybe String)
    , number'date_styleNumber'transliteration_format :: (Defaultable String)
    , number'date_styleNumber'transliteration_language :: (Maybe String)
    , number'date_styleNumber'transliteration_country :: (Maybe String)
    , number'date_styleNumber'transliteration_style :: (Defaultable Number'date_style_number'transliteration_style)
    , number'date_styleNumber'automatic_order :: (Defaultable String)
    , number'date_styleNumber'format_source :: (Defaultable Number'date_style_number'format_source)
    } deriving (Eq,Show)
data Number'date_style_number'transliteration_style = Number'date_style_number'transliteration_style_short
						       | 
						      Number'date_style_number'transliteration_style_medium
						       | 
						      Number'date_style_number'transliteration_style_long
						    deriving (Eq,Show)
data Number'date_style_number'format_source = Number'date_style_number'format_source_fixed
					       |  Number'date_style_number'format_source_language
					    deriving (Eq,Show)
data Number'day = Number'day
    { number'dayNumber'style :: (Defaultable Number'day_number'style)
    , number'dayNumber'calendar :: (Maybe String)
    } deriving (Eq,Show)
data Number'day_number'style = Number'day_number'style_short  | 
			       Number'day_number'style_long
			     deriving (Eq,Show)
data Number'month = Number'month
    { number'monthNumber'textual :: (Defaultable String)
    , number'monthNumber'style :: (Defaultable Number'month_number'style)
    , number'monthNumber'calendar :: (Maybe String)
    } deriving (Eq,Show)
data Number'month_number'style = Number'month_number'style_short
				  |  Number'month_number'style_long
			       deriving (Eq,Show)
data Number'year = Number'year
    { number'yearNumber'style :: (Defaultable Number'year_number'style)
    , number'yearNumber'calendar :: (Maybe String)
    } deriving (Eq,Show)
data Number'year_number'style = Number'year_number'style_short  | 
				Number'year_number'style_long
			      deriving (Eq,Show)
data Number'era = Number'era
    { number'eraNumber'style :: (Defaultable Number'era_number'style)
    , number'eraNumber'calendar :: (Maybe String)
    } deriving (Eq,Show)
data Number'era_number'style = Number'era_number'style_short  | 
			       Number'era_number'style_long
			     deriving (Eq,Show)
data Number'day_of_week = Number'day_of_week
    { number'day_of_weekNumber'style :: (Defaultable Number'day_of_week_number'style)
    , number'day_of_weekNumber'calendar :: (Maybe String)
    } deriving (Eq,Show)
data Number'day_of_week_number'style = Number'day_of_week_number'style_short
				        |  Number'day_of_week_number'style_long
				     deriving (Eq,Show)
data Number'week_of_year = Number'week_of_year
    { number'week_of_yearNumber'calendar :: (Maybe String)
    } deriving (Eq,Show)
data Number'quarter = Number'quarter
    { number'quarterNumber'style :: (Defaultable Number'quarter_number'style)
    , number'quarterNumber'calendar :: (Maybe String)
    } deriving (Eq,Show)
data Number'quarter_number'style = Number'quarter_number'style_short
				    |  Number'quarter_number'style_long
				 deriving (Eq,Show)
data Number'time_style = Number'time_style Number'time_style_Attrs
					   (Maybe Style'properties)
					   (OneOf3 Number'text (List1 ((OneOf4 Number'hours Number'am_pm Number'minutes Number'seconds),(Maybe Number'text))) (List1 ((OneOf4 Number'hours Number'am_pm Number'minutes Number'seconds),(Maybe Number'text))))
					   [Style'map]
		       deriving (Eq,Show)
data Number'time_style_Attrs = Number'time_style_Attrs
    { number'time_styleStyle'name :: String
    , number'time_styleStyle'family :: String
    , number'time_styleNumber'language :: (Maybe String)
    , number'time_styleNumber'country :: (Maybe String)
    , number'time_styleNumber'title :: (Maybe String)
    , number'time_styleStyle'volatile :: (Maybe String)
    , number'time_styleNumber'transliteration_format :: (Defaultable String)
    , number'time_styleNumber'transliteration_language :: (Maybe String)
    , number'time_styleNumber'transliteration_country :: (Maybe String)
    , number'time_styleNumber'transliteration_style :: (Defaultable Number'time_style_number'transliteration_style)
    , number'time_styleNumber'format_source :: (Defaultable Number'time_style_number'format_source)
    , number'time_styleNumber'truncate_on_overflow :: (Defaultable String)
    } deriving (Eq,Show)
data Number'time_style_number'transliteration_style = Number'time_style_number'transliteration_style_short
						       | 
						      Number'time_style_number'transliteration_style_medium
						       | 
						      Number'time_style_number'transliteration_style_long
						    deriving (Eq,Show)
data Number'time_style_number'format_source = Number'time_style_number'format_source_fixed
					       |  Number'time_style_number'format_source_language
					    deriving (Eq,Show)
data Number'hours = Number'hours
    { number'hoursNumber'style :: (Defaultable Number'hours_number'style)
    } deriving (Eq,Show)
data Number'hours_number'style = Number'hours_number'style_short
				  |  Number'hours_number'style_long
			       deriving (Eq,Show)
data Number'minutes = Number'minutes
    { number'minutesNumber'style :: (Defaultable Number'minutes_number'style)
    } deriving (Eq,Show)
data Number'minutes_number'style = Number'minutes_number'style_short
				    |  Number'minutes_number'style_long
				 deriving (Eq,Show)
data Number'seconds = Number'seconds
    { number'secondsNumber'style :: (Defaultable Number'seconds_number'style)
    , number'secondsNumber'decimal_places :: (Defaultable String)
    } deriving (Eq,Show)
data Number'seconds_number'style = Number'seconds_number'style_short
				    |  Number'seconds_number'style_long
				 deriving (Eq,Show)
data Number'am_pm = Number'am_pm 		deriving (Eq,Show)
data Number'boolean_style = Number'boolean_style Number'boolean_style_Attrs
						 (Maybe Style'properties)
						 (OneOf4 Number'text (Maybe (Number'boolean,(Maybe Number'text))) Number'boolean (Maybe Number'text))
						 [Style'map]
			  deriving (Eq,Show)
data Number'boolean_style_Attrs = Number'boolean_style_Attrs
    { number'boolean_styleStyle'name :: String
    , number'boolean_styleStyle'family :: String
    , number'boolean_styleNumber'language :: (Maybe String)
    , number'boolean_styleNumber'country :: (Maybe String)
    , number'boolean_styleNumber'title :: (Maybe String)
    , number'boolean_styleStyle'volatile :: (Maybe String)
    , number'boolean_styleNumber'transliteration_format :: (Defaultable String)
    , number'boolean_styleNumber'transliteration_language :: (Maybe String)
    , number'boolean_styleNumber'transliteration_country :: (Maybe String)
    , number'boolean_styleNumber'transliteration_style :: (Defaultable Number'boolean_style_number'transliteration_style)
    } deriving (Eq,Show)
data Number'boolean_style_number'transliteration_style = Number'boolean_style_number'transliteration_style_short
							  | 
							 Number'boolean_style_number'transliteration_style_medium
							  | 
							 Number'boolean_style_number'transliteration_style_long
						       deriving (Eq,Show)
data Number'boolean = Number'boolean 		deriving (Eq,Show)
data Number'text_style = Number'text_style Number'text_style_Attrs
					   (Maybe Style'properties)
					   (OneOf4 Number'text (Maybe (Number'text_content,(Maybe Number'text))) Number'text_content (Maybe Number'text))
					   [Style'map]
		       deriving (Eq,Show)
data Number'text_style_Attrs = Number'text_style_Attrs
    { number'text_styleStyle'name :: String
    , number'text_styleStyle'family :: String
    , number'text_styleNumber'language :: (Maybe String)
    , number'text_styleNumber'country :: (Maybe String)
    , number'text_styleNumber'title :: (Maybe String)
    , number'text_styleStyle'volatile :: (Maybe String)
    , number'text_styleNumber'transliteration_format :: (Defaultable String)
    , number'text_styleNumber'transliteration_language :: (Maybe String)
    , number'text_styleNumber'transliteration_country :: (Maybe String)
    , number'text_styleNumber'transliteration_style :: (Defaultable Number'text_style_number'transliteration_style)
    } deriving (Eq,Show)
data Number'text_style_number'transliteration_style = Number'text_style_number'transliteration_style_short
						       | 
						      Number'text_style_number'transliteration_style_medium
						       | 
						      Number'text_style_number'transliteration_style_long
						    deriving (Eq,Show)
newtype Number'text = Number'text String 		deriving (Eq,Show)
data Number'text_content = Number'text_content 		deriving (Eq,Show)
data Form'control = Form'control Form'control_Attrs
				 (List1 Form'control_)
		  deriving (Eq,Show)
data Form'control_Attrs = Form'control_Attrs
    { form'controlForm'name :: (Maybe String)
    , form'controlForm'service_name :: (Maybe String)
    , form'controlForm'id :: String
    } deriving (Eq,Show)
data Form'control_ = Form'control_Form'text Form'text
		   | Form'control_Form'textarea Form'textarea
		   | Form'control_Form'fixed_text Form'fixed_text
		   | Form'control_Form'file Form'file
		   | Form'control_Form'password Form'password
		   | Form'control_Form'formatted_text Form'formatted_text
		   | Form'control_Form'button Form'button
		   | Form'control_Form'image Form'image
		   | Form'control_Form'checkbox Form'checkbox
		   | Form'control_Form'radio Form'radio
		   | Form'control_Form'listbox Form'listbox
		   | Form'control_Form'combobox Form'combobox
		   | Form'control_Form'frame Form'frame
		   | Form'control_Form'hidden Form'hidden
		   | Form'control_Form'image_frame Form'image_frame
		   | Form'control_Form'grid Form'grid
		   | Form'control_Form'generic_control Form'generic_control
		   deriving (Eq,Show)
data Form'form = Form'form Form'form_Attrs (Maybe Form'properties)
			   (Maybe Office'events) [(OneOf2 Form'control Form'form)]
	       deriving (Eq,Show)
data Form'form_Attrs = Form'form_Attrs
    { form'formForm'name :: (Maybe String)
    , form'formForm'service_name :: (Maybe String)
    , form'formXlink'href :: (Maybe String)
    , form'formForm'enctype :: (Defaultable String)
    , form'formForm'method :: (Defaultable String)
    , form'formOffice'target_frame :: (Defaultable String)
    , form'formForm'allow_deletes :: (Defaultable String)
    , form'formForm'allow_inserts :: (Defaultable String)
    , form'formForm'allow_updates :: (Defaultable String)
    , form'formForm'apply_filter :: (Defaultable String)
    , form'formForm'command :: (Maybe String)
    , form'formForm'command_type :: (Defaultable Form'form_form'command_type)
    , form'formForm'datasource :: (Maybe String)
    , form'formForm'detail_fields :: (Maybe String)
    , form'formForm'escape_processing :: (Defaultable String)
    , form'formForm'filter :: (Maybe String)
    , form'formForm'ignore_result :: (Defaultable String)
    , form'formForm'master_fields :: (Maybe String)
    , form'formForm'navigation_mode :: (Maybe Form'form_form'navigation_mode)
    , form'formForm'order :: (Maybe String)
    , form'formForm'tab_cycle :: (Maybe Form'form_form'tab_cycle)
    } deriving (Eq,Show)
data Form'form_form'command_type = Form'form_form'command_type_table
				    |  Form'form_form'command_type_query  | 
				   Form'form_form'command_type_command
				 deriving (Eq,Show)
data Form'form_form'navigation_mode = Form'form_form'navigation_mode_none
				       |  Form'form_form'navigation_mode_current  | 
				      Form'form_form'navigation_mode_parent
				    deriving (Eq,Show)
data Form'form_form'tab_cycle = Form'form_form'tab_cycle_records
				 |  Form'form_form'tab_cycle_current  | 
				Form'form_form'tab_cycle_page
			      deriving (Eq,Show)
data Office'forms = Office'forms Office'forms_Attrs [Form'form]
		  deriving (Eq,Show)
data Office'forms_Attrs = Office'forms_Attrs
    { office'formsForm'automatic_focus :: (Defaultable String)
    , office'formsForm'apply_design_mode :: (Defaultable String)
    } deriving (Eq,Show)
data Form'text = Form'text Form'text_Attrs (Maybe Form'properties)
			   (Maybe Office'events)
	       deriving (Eq,Show)
data Form'text_Attrs = Form'text_Attrs
    { form'textForm'current_value :: (Maybe String)
    , form'textForm'disabled :: (Defaultable String)
    , form'textForm'max_length :: (Maybe String)
    , form'textForm'printable :: (Defaultable String)
    , form'textForm'readonly :: (Defaultable String)
    , form'textForm'tab_index :: (Maybe String)
    , form'textForm'tab_stop :: (Defaultable String)
    , form'textForm'title :: (Maybe String)
    , form'textForm'value :: (Maybe String)
    , form'textForm'convert_empty_to_null :: (Defaultable String)
    , form'textForm'data_field :: (Maybe String)
    } deriving (Eq,Show)
data Form'textarea = Form'textarea Form'textarea_Attrs
				   (Maybe Form'properties) (Maybe Office'events)
		   deriving (Eq,Show)
data Form'textarea_Attrs = Form'textarea_Attrs
    { form'textareaForm'current_value :: (Maybe String)
    , form'textareaForm'disabled :: (Defaultable String)
    , form'textareaForm'max_length :: (Maybe String)
    , form'textareaForm'printable :: (Defaultable String)
    , form'textareaForm'readonly :: (Defaultable String)
    , form'textareaForm'tab_index :: (Maybe String)
    , form'textareaForm'tab_stop :: (Defaultable String)
    , form'textareaForm'title :: (Maybe String)
    , form'textareaForm'value :: (Maybe String)
    , form'textareaForm'convert_empty_to_null :: (Defaultable String)
    , form'textareaForm'data_field :: (Maybe String)
    } deriving (Eq,Show)
data Form'password = Form'password Form'password_Attrs
				   (Maybe Form'properties) (Maybe Office'events)
		   deriving (Eq,Show)
data Form'password_Attrs = Form'password_Attrs
    { form'passwordForm'disabled :: (Defaultable String)
    , form'passwordForm'max_length :: (Maybe String)
    , form'passwordForm'printable :: (Defaultable String)
    , form'passwordForm'tab_index :: (Maybe String)
    , form'passwordForm'tab_stop :: (Defaultable String)
    , form'passwordForm'title :: (Maybe String)
    , form'passwordForm'value :: (Maybe String)
    , form'passwordForm'convert_empty_to_null :: (Defaultable String)
    , form'passwordForm'echo_char :: (Defaultable String)
    } deriving (Eq,Show)
data Form'file = Form'file Form'file_Attrs (Maybe Form'properties)
			   (Maybe Office'events)
	       deriving (Eq,Show)
data Form'file_Attrs = Form'file_Attrs
    { form'fileForm'current_value :: (Maybe String)
    , form'fileForm'disabled :: (Defaultable String)
    , form'fileForm'max_length :: (Maybe String)
    , form'fileForm'printable :: (Defaultable String)
    , form'fileForm'readonly :: (Defaultable String)
    , form'fileForm'tab_index :: (Maybe String)
    , form'fileForm'tab_stop :: (Defaultable String)
    , form'fileForm'title :: (Maybe String)
    , form'fileForm'value :: (Maybe String)
    } deriving (Eq,Show)
data Form'formatted_text = Form'formatted_text Form'formatted_text_Attrs
					       (Maybe Form'properties) (Maybe Office'events)
			 deriving (Eq,Show)
data Form'formatted_text_Attrs = Form'formatted_text_Attrs
    { form'formatted_textForm'current_value :: (Maybe String)
    , form'formatted_textForm'disabled :: (Defaultable String)
    , form'formatted_textForm'max_length :: (Maybe String)
    , form'formatted_textForm'printable :: (Defaultable String)
    , form'formatted_textForm'readonly :: (Defaultable String)
    , form'formatted_textForm'tab_index :: (Maybe String)
    , form'formatted_textForm'tab_stop :: (Defaultable String)
    , form'formatted_textForm'title :: (Maybe String)
    , form'formatted_textForm'value :: (Maybe String)
    , form'formatted_textForm'convert_empty_to_null :: (Defaultable String)
    , form'formatted_textForm'data_field :: (Maybe String)
    , form'formatted_textForm'max_value :: (Maybe String)
    , form'formatted_textForm'min_value :: (Maybe String)
    , form'formatted_textForm'validation :: (Defaultable String)
    } deriving (Eq,Show)
data Form'fixed_text = Form'fixed_text Form'fixed_text_Attrs
				       (Maybe Form'properties) (Maybe Office'events)
		     deriving (Eq,Show)
data Form'fixed_text_Attrs = Form'fixed_text_Attrs
    { form'fixed_textForm'for :: (Maybe String)
    , form'fixed_textForm'disabled :: (Defaultable String)
    , form'fixed_textForm'label :: (Maybe String)
    , form'fixed_textForm'printable :: (Defaultable String)
    , form'fixed_textForm'title :: (Maybe String)
    , form'fixed_textForm'multi_line :: (Defaultable String)
    } deriving (Eq,Show)
data Form'combobox = Form'combobox Form'combobox_Attrs
				   (Maybe Form'properties) (Maybe Office'events) [Form'item]
		   deriving (Eq,Show)
data Form'combobox_Attrs = Form'combobox_Attrs
    { form'comboboxForm'current_value :: (Maybe String)
    , form'comboboxForm'disabled :: (Defaultable String)
    , form'comboboxForm'dropdown :: (Defaultable String)
    , form'comboboxForm'max_length :: (Maybe String)
    , form'comboboxForm'printable :: (Defaultable String)
    , form'comboboxForm'readonly :: (Defaultable String)
    , form'comboboxForm'size :: (Maybe String)
    , form'comboboxForm'tab_index :: (Maybe String)
    , form'comboboxForm'tab_stop :: (Defaultable String)
    , form'comboboxForm'title :: (Maybe String)
    , form'comboboxForm'value :: (Maybe String)
    , form'comboboxForm'convert_empty_to_null :: (Defaultable String)
    , form'comboboxForm'data_field :: (Maybe String)
    , form'comboboxForm'list_source :: (Maybe String)
    , form'comboboxForm'list_source_type :: (Maybe Form'combobox_form'list_source_type)
    , form'comboboxForm'auto_complete :: (Maybe String)
    } deriving (Eq,Show)
data Form'combobox_form'list_source_type = Form'combobox_form'list_source_type_table
					    |  Form'combobox_form'list_source_type_query  | 
					   Form'combobox_form'list_source_type_sql  | 
					   Form'combobox_form'list_source_type_sql_pass_through  | 
					   Form'combobox_form'list_source_type_value_list  | 
					   Form'combobox_form'list_source_type_table_fields
					 deriving (Eq,Show)
data Form'item = Form'item Form'item_Attrs String
	       deriving (Eq,Show)
data Form'item_Attrs = Form'item_Attrs
    { form'itemForm'label :: (Maybe String)
    } deriving (Eq,Show)
data Form'listbox = Form'listbox Form'listbox_Attrs
				 (Maybe Form'properties) (Maybe Office'events) [Form'option]
		  deriving (Eq,Show)
data Form'listbox_Attrs = Form'listbox_Attrs
    { form'listboxForm'disabled :: (Defaultable String)
    , form'listboxForm'dropdown :: (Defaultable String)
    , form'listboxForm'printable :: (Defaultable String)
    , form'listboxForm'size :: (Maybe String)
    , form'listboxForm'tab_index :: (Maybe String)
    , form'listboxForm'tab_stop :: (Defaultable String)
    , form'listboxForm'title :: (Maybe String)
    , form'listboxForm'bound_column :: (Maybe String)
    , form'listboxForm'data_field :: (Maybe String)
    , form'listboxForm'list_source :: (Maybe String)
    , form'listboxForm'list_source_type :: (Maybe Form'listbox_form'list_source_type)
    , form'listboxForm'multiple :: (Defaultable String)
    } deriving (Eq,Show)
data Form'listbox_form'list_source_type = Form'listbox_form'list_source_type_table
					   |  Form'listbox_form'list_source_type_query  | 
					  Form'listbox_form'list_source_type_sql  | 
					  Form'listbox_form'list_source_type_sql_pass_through  | 
					  Form'listbox_form'list_source_type_value_list  | 
					  Form'listbox_form'list_source_type_table_fields
					deriving (Eq,Show)
data Form'option = Form'option Form'option_Attrs String
		 deriving (Eq,Show)
data Form'option_Attrs = Form'option_Attrs
    { form'optionForm'current_selected :: (Defaultable String)
    , form'optionForm'selected :: (Defaultable String)
    , form'optionForm'label :: (Maybe String)
    , form'optionForm'value :: (Maybe String)
    } deriving (Eq,Show)
data Form'button = Form'button Form'button_Attrs
			       (Maybe Form'properties) (Maybe Office'events)
		 deriving (Eq,Show)
data Form'button_Attrs = Form'button_Attrs
    { form'buttonForm'button_type :: (Defaultable Form'button_form'button_type)
    , form'buttonForm'disabled :: (Defaultable String)
    , form'buttonForm'label :: (Maybe String)
    , form'buttonForm'image_data :: (Maybe String)
    , form'buttonForm'printable :: (Defaultable String)
    , form'buttonForm'tab_index :: (Maybe String)
    , form'buttonForm'tab_stop :: (Defaultable String)
    , form'buttonOffice'target_frame :: (Defaultable String)
    , form'buttonXlink'href :: (Maybe String)
    , form'buttonForm'title :: (Maybe String)
    , form'buttonForm'value :: (Maybe String)
    , form'buttonForm'default_button :: (Defaultable String)
    } deriving (Eq,Show)
data Form'button_form'button_type = Form'button_form'button_type_submit
				     |  Form'button_form'button_type_reset  | 
				    Form'button_form'button_type_push  | 
				    Form'button_form'button_type_url
				  deriving (Eq,Show)
data Form'image = Form'image Form'image_Attrs
			     (Maybe Form'properties) (Maybe Office'events)
		deriving (Eq,Show)
data Form'image_Attrs = Form'image_Attrs
    { form'imageForm'button_type :: (Defaultable Form'image_form'button_type)
    , form'imageForm'disabled :: (Defaultable String)
    , form'imageForm'image_data :: (Maybe String)
    , form'imageForm'printable :: (Defaultable String)
    , form'imageForm'tab_index :: (Maybe String)
    , form'imageForm'tab_stop :: (Defaultable String)
    , form'imageOffice'target_frame :: (Defaultable String)
    , form'imageXlink'href :: (Maybe String)
    , form'imageForm'title :: (Maybe String)
    , form'imageForm'value :: (Maybe String)
    } deriving (Eq,Show)
data Form'image_form'button_type = Form'image_form'button_type_submit
				    |  Form'image_form'button_type_reset  | 
				   Form'image_form'button_type_push  | 
				   Form'image_form'button_type_url
				 deriving (Eq,Show)
data Form'checkbox = Form'checkbox Form'checkbox_Attrs
				   (Maybe Form'properties) (Maybe Office'events)
		   deriving (Eq,Show)
data Form'checkbox_Attrs = Form'checkbox_Attrs
    { form'checkboxForm'disabled :: (Defaultable String)
    , form'checkboxForm'label :: (Maybe String)
    , form'checkboxForm'printable :: (Defaultable String)
    , form'checkboxForm'tab_index :: (Maybe String)
    , form'checkboxForm'tab_stop :: (Defaultable String)
    , form'checkboxForm'title :: (Maybe String)
    , form'checkboxForm'value :: (Maybe String)
    , form'checkboxForm'data_field :: (Maybe String)
    , form'checkboxForm'current_state :: (Maybe Form'checkbox_form'current_state)
    , form'checkboxForm'is_tristate :: (Defaultable String)
    , form'checkboxForm'state :: (Defaultable Form'checkbox_form'state)
    } deriving (Eq,Show)
data Form'checkbox_form'current_state = Form'checkbox_form'current_state_unchecked
					 |  Form'checkbox_form'current_state_checked  | 
					Form'checkbox_form'current_state_unknown
				      deriving (Eq,Show)
data Form'checkbox_form'state = Form'checkbox_form'state_unchecked
				 |  Form'checkbox_form'state_checked  | 
				Form'checkbox_form'state_unknown
			      deriving (Eq,Show)
data Form'radio = Form'radio Form'radio_Attrs
			     (Maybe Form'properties) (Maybe Office'events)
		deriving (Eq,Show)
data Form'radio_Attrs = Form'radio_Attrs
    { form'radioForm'current_selected :: (Defaultable String)
    , form'radioForm'disabled :: (Defaultable String)
    , form'radioForm'label :: (Maybe String)
    , form'radioForm'printable :: (Defaultable String)
    , form'radioForm'selected :: (Defaultable String)
    , form'radioForm'tab_index :: (Maybe String)
    , form'radioForm'tab_stop :: (Defaultable String)
    , form'radioForm'title :: (Maybe String)
    , form'radioForm'value :: (Maybe String)
    , form'radioForm'data_field :: (Maybe String)
    } deriving (Eq,Show)
data Form'frame = Form'frame Form'frame_Attrs
			     (Maybe Form'properties) (Maybe Office'events)
		deriving (Eq,Show)
data Form'frame_Attrs = Form'frame_Attrs
    { form'frameForm'disabled :: (Defaultable String)
    , form'frameForm'for :: (Maybe String)
    , form'frameForm'label :: (Maybe String)
    , form'frameForm'printable :: (Defaultable String)
    , form'frameForm'title :: (Maybe String)
    } deriving (Eq,Show)
data Form'image_frame = Form'image_frame Form'image_frame_Attrs
					 (Maybe Form'properties) (Maybe Office'events)
		      deriving (Eq,Show)
data Form'image_frame_Attrs = Form'image_frame_Attrs
    { form'image_frameForm'disabled :: (Defaultable String)
    , form'image_frameForm'image_data :: (Maybe String)
    , form'image_frameForm'printable :: (Defaultable String)
    , form'image_frameForm'readonly :: (Defaultable String)
    , form'image_frameForm'title :: (Maybe String)
    , form'image_frameForm'data_field :: (Maybe String)
    } deriving (Eq,Show)
data Form'hidden = Form'hidden Form'hidden_Attrs
			       (Maybe Form'properties) (Maybe Office'events)
		 deriving (Eq,Show)
data Form'hidden_Attrs = Form'hidden_Attrs
    { form'hiddenForm'name :: (Maybe String)
    , form'hiddenForm'service_name :: (Maybe String)
    , form'hiddenForm'value :: (Maybe String)
    } deriving (Eq,Show)
data Form'grid = Form'grid Form'grid_Attrs (Maybe Form'properties)
			   (Maybe Office'events) [Form'column]
	       deriving (Eq,Show)
data Form'grid_Attrs = Form'grid_Attrs
    { form'gridForm'disabled :: (Defaultable String)
    , form'gridForm'printable :: (Defaultable String)
    , form'gridForm'tab_index :: (Maybe String)
    , form'gridForm'tab_stop :: (Defaultable String)
    , form'gridForm'title :: (Maybe String)
    } deriving (Eq,Show)
data Form'column = Form'column Form'column_Attrs
			       (List1 Form'column_)
		 deriving (Eq,Show)
data Form'column_Attrs = Form'column_Attrs
    { form'columnForm'name :: (Maybe String)
    , form'columnForm'service_name :: (Maybe String)
    , form'columnForm'label :: (Maybe String)
    , form'columnForm'column_style_name :: (Maybe String)
    } deriving (Eq,Show)
data Form'column_ = Form'column_Form'text Form'text
		  | Form'column_Form'textarea Form'textarea
		  | Form'column_Form'formatted_text Form'formatted_text
		  | Form'column_Form'checkbox Form'checkbox
		  | Form'column_Form'listbox Form'listbox
		  | Form'column_Form'combobox Form'combobox
		  deriving (Eq,Show)
data Form'generic_control = Form'generic_control (Maybe Form'properties)
						 (Maybe Office'events)
			  deriving (Eq,Show)
newtype Form'properties = Form'properties (List1 Form'property) 		deriving (Eq,Show)
data Form'property = Form'property Form'property_Attrs
				   [Form'property_value]
		   deriving (Eq,Show)
data Form'property_Attrs = Form'property_Attrs
    { form'propertyForm'property_is_list :: (Maybe String)
    , form'propertyForm'property_name :: String
    , form'propertyForm'property_type :: Form'property_form'property_type
    } deriving (Eq,Show)
data Form'property_form'property_type = Form'property_form'property_type_boolean
					 |  Form'property_form'property_type_short  | 
					Form'property_form'property_type_int  | 
					Form'property_form'property_type_long  | 
					Form'property_form'property_type_double  | 
					Form'property_form'property_type_string
				      deriving (Eq,Show)
data Form'property_value = Form'property_value Form'property_value_Attrs
					       String
			 deriving (Eq,Show)
data Form'property_value_Attrs = Form'property_value_Attrs
    { form'property_valueForm'property_is_void :: (Maybe String)
    } deriving (Eq,Show)
newtype Office'settings = Office'settings (List1 Config'config_item_set) 		deriving (Eq,Show)
data Config'config_item_set = Config'config_item_set Config'config_item_set_Attrs
						     (List1 Config'config_item_set_)
			    deriving (Eq,Show)
data Config'config_item_set_Attrs = Config'config_item_set_Attrs
    { config'config_item_setConfig'name :: String
    } deriving (Eq,Show)
data Config'config_item_set_ = Config'config_item_set_Config'config_item Config'config_item
			     | Config'config_item_set_Config'config_item_set Config'config_item_set
			     | Config'config_item_set_Config'config_item_map_named Config'config_item_map_named
			     | Config'config_item_set_Config'config_item_map_indexed Config'config_item_map_indexed
			     deriving (Eq,Show)
data Config'config_item = Config'config_item Config'config_item_Attrs
					     String
			deriving (Eq,Show)
data Config'config_item_Attrs = Config'config_item_Attrs
    { config'config_itemConfig'name :: String
    , config'config_itemConfig'type :: Config'config_item_config'type
    } deriving (Eq,Show)
data Config'config_item_config'type = Config'config_item_config'type_boolean
				       |  Config'config_item_config'type_short  | 
				      Config'config_item_config'type_int  | 
				      Config'config_item_config'type_long  | 
				      Config'config_item_config'type_double  | 
				      Config'config_item_config'type_string  | 
				      Config'config_item_config'type_datetime  | 
				      Config'config_item_config'type_base64Binary
				    deriving (Eq,Show)
data Config'config_item_map_named = Config'config_item_map_named Config'config_item_map_named_Attrs
								 (List1 Config'config_item_map_entry)
				  deriving (Eq,Show)
data Config'config_item_map_named_Attrs = Config'config_item_map_named_Attrs
    { config'config_item_map_namedConfig'name :: String
    } deriving (Eq,Show)
data Config'config_item_map_indexed = Config'config_item_map_indexed Config'config_item_map_indexed_Attrs
								     (List1 Config'config_item_map_entry)
				    deriving (Eq,Show)
data Config'config_item_map_indexed_Attrs = Config'config_item_map_indexed_Attrs
    { config'config_item_map_indexedConfig'name :: String
    } deriving (Eq,Show)
data Config'config_item_map_entry = Config'config_item_map_entry Config'config_item_map_entry_Attrs
								 (List1 Config'config_item_map_entry_)
				  deriving (Eq,Show)
data Config'config_item_map_entry_Attrs = Config'config_item_map_entry_Attrs
    { config'config_item_map_entryConfig'name :: (Maybe String)
    } deriving (Eq,Show)
data Config'config_item_map_entry_ = Config'config_item_map_entry_Config'config_item Config'config_item
				   | Config'config_item_map_entry_Config'config_item_set Config'config_item_set
				   | Config'config_item_map_entry_Config'config_item_map_named Config'config_item_map_named
				   | Config'config_item_map_entry_Config'config_item_map_indexed Config'config_item_map_indexed
				   deriving (Eq,Show)


{-Instance decls-}

instance XmlContent Office'document where
    fromElem (CElem (Elem "office:document" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (\(d,cd)->
		    (\(e,ce)->
		       (\(f,cf)->
			  (\(g,cg)->
			     (\(h,ch)->
				(Just (Office'document (fromAttrs as) a b c d e f g h), rest))
			     (definite fromElem "<office:body>" "office:document" cg))
			  (fromElem cf))
		       (fromElem ce))
		    (fromElem cd))
		 (fromElem cc))
	      (fromElem cb))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Office'document as a b c d e f g h) =
	[CElem (Elem "office:document" (toAttrs as) (maybe [] toElem a ++
						     maybe [] toElem b ++ maybe [] toElem c ++
						     maybe [] toElem d ++ maybe [] toElem e ++
						     maybe [] toElem f ++ maybe [] toElem g ++
						     toElem h))]
instance XmlAttributes Office'document_Attrs where
    fromAttrs as =
	Office'document_Attrs
	  { office'documentXmlns'office = defaultA fromAttrToStr "&nOffice;" "xmlns:office" as
	  , office'documentXmlns'meta = defaultA fromAttrToStr "&nMeta;" "xmlns:meta" as
	  , office'documentXmlns'script = defaultA fromAttrToStr "&nScript;" "xmlns:script" as
	  , office'documentXmlns'style = defaultA fromAttrToStr "&nStyle;" "xmlns:style" as
	  , office'documentXmlns'text = defaultA fromAttrToStr "&nText;" "xmlns:text" as
	  , office'documentXmlns'table = defaultA fromAttrToStr "&nTable;" "xmlns:table" as
	  , office'documentXmlns'draw = defaultA fromAttrToStr "&nDraw;" "xmlns:draw" as
	  , office'documentXmlns'chart = defaultA fromAttrToStr "&nChart;" "xmlns:chart" as
	  , office'documentXmlns'number = defaultA fromAttrToStr "&nNumber;" "xmlns:number" as
	  , office'documentXmlns'fo = defaultA fromAttrToStr "&nFO;" "xmlns:fo" as
	  , office'documentXmlns'xlink = defaultA fromAttrToStr "&nXLink;" "xmlns:xlink" as
	  , office'documentXmlns'svg = defaultA fromAttrToStr "&nSVG;" "xmlns:svg" as
	  , office'documentXmlns'dc = defaultA fromAttrToStr "&nDC;" "xmlns:dc" as
	  , office'documentXmlns'dr3d = defaultA fromAttrToStr "&nDr3D;" "xmlns:dr3d" as
	  , office'documentXmlns'math = defaultA fromAttrToStr "&nMath;" "xmlns:math" as
	  , office'documentXmlns'form = defaultA fromAttrToStr "&nForm;" "xmlns:form" as
	  , office'documentXmlns'config = defaultA fromAttrToStr "&nConfig;" "xmlns:config" as
	  , office'documentOffice'class = definiteA fromAttrToTyp "office:document" "office:class" as
	  , office'documentOffice'version = possibleA fromAttrToStr "office:version" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "xmlns:office" (office'documentXmlns'office v)
	, defaultToAttr toAttrFrStr "xmlns:meta" (office'documentXmlns'meta v)
	, defaultToAttr toAttrFrStr "xmlns:script" (office'documentXmlns'script v)
	, defaultToAttr toAttrFrStr "xmlns:style" (office'documentXmlns'style v)
	, defaultToAttr toAttrFrStr "xmlns:text" (office'documentXmlns'text v)
	, defaultToAttr toAttrFrStr "xmlns:table" (office'documentXmlns'table v)
	, defaultToAttr toAttrFrStr "xmlns:draw" (office'documentXmlns'draw v)
	, defaultToAttr toAttrFrStr "xmlns:chart" (office'documentXmlns'chart v)
	, defaultToAttr toAttrFrStr "xmlns:number" (office'documentXmlns'number v)
	, defaultToAttr toAttrFrStr "xmlns:fo" (office'documentXmlns'fo v)
	, defaultToAttr toAttrFrStr "xmlns:xlink" (office'documentXmlns'xlink v)
	, defaultToAttr toAttrFrStr "xmlns:svg" (office'documentXmlns'svg v)
	, defaultToAttr toAttrFrStr "xmlns:dc" (office'documentXmlns'dc v)
	, defaultToAttr toAttrFrStr "xmlns:dr3d" (office'documentXmlns'dr3d v)
	, defaultToAttr toAttrFrStr "xmlns:math" (office'documentXmlns'math v)
	, defaultToAttr toAttrFrStr "xmlns:form" (office'documentXmlns'form v)
	, defaultToAttr toAttrFrStr "xmlns:config" (office'documentXmlns'config v)
	, toAttrFrTyp "office:class" (office'documentOffice'class v)
	, maybeToAttr toAttrFrStr "office:version" (office'documentOffice'version v)
	]
instance XmlAttrType Office'document_office'class where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "text" = Just Office'document_office'class_text
	    translate "text-global" = Just Office'document_office'class_text_global
	    translate "drawing" = Just Office'document_office'class_drawing
	    translate "presentation" = Just Office'document_office'class_presentation
	    translate "spreadsheet" = Just Office'document_office'class_spreadsheet
	    translate "chart" = Just Office'document_office'class_chart
	    translate _ = Nothing
    toAttrFrTyp n Office'document_office'class_text = Just (n, str2attr "text")
    toAttrFrTyp n Office'document_office'class_text_global = Just (n, str2attr "text-global")
    toAttrFrTyp n Office'document_office'class_drawing = Just (n, str2attr "drawing")
    toAttrFrTyp n Office'document_office'class_presentation = Just (n, str2attr "presentation")
    toAttrFrTyp n Office'document_office'class_spreadsheet = Just (n, str2attr "spreadsheet")
    toAttrFrTyp n Office'document_office'class_chart = Just (n, str2attr "chart")
instance XmlContent Office'document_styles where
    fromElem (CElem (Elem "office:document-styles" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (\(d,cd)->
		    (Just (Office'document_styles (fromAttrs as) a b c d), rest))
		 (fromElem cc))
	      (fromElem cb))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Office'document_styles as a b c d) =
	[CElem (Elem "office:document-styles" (toAttrs as) (maybe [] toElem a
							    ++ maybe [] toElem b ++
							    maybe [] toElem c ++
							    maybe [] toElem d))]
instance XmlAttributes Office'document_styles_Attrs where
    fromAttrs as =
	Office'document_styles_Attrs
	  { office'document_stylesXmlns'office = defaultA fromAttrToStr "&nOffice;" "xmlns:office" as
	  , office'document_stylesXmlns'meta = defaultA fromAttrToStr "&nMeta;" "xmlns:meta" as
	  , office'document_stylesXmlns'script = defaultA fromAttrToStr "&nScript;" "xmlns:script" as
	  , office'document_stylesXmlns'style = defaultA fromAttrToStr "&nStyle;" "xmlns:style" as
	  , office'document_stylesXmlns'text = defaultA fromAttrToStr "&nText;" "xmlns:text" as
	  , office'document_stylesXmlns'table = defaultA fromAttrToStr "&nTable;" "xmlns:table" as
	  , office'document_stylesXmlns'draw = defaultA fromAttrToStr "&nDraw;" "xmlns:draw" as
	  , office'document_stylesXmlns'chart = defaultA fromAttrToStr "&nChart;" "xmlns:chart" as
	  , office'document_stylesXmlns'number = defaultA fromAttrToStr "&nNumber;" "xmlns:number" as
	  , office'document_stylesXmlns'fo = defaultA fromAttrToStr "&nFO;" "xmlns:fo" as
	  , office'document_stylesXmlns'xlink = defaultA fromAttrToStr "&nXLink;" "xmlns:xlink" as
	  , office'document_stylesXmlns'svg = defaultA fromAttrToStr "&nSVG;" "xmlns:svg" as
	  , office'document_stylesXmlns'dc = defaultA fromAttrToStr "&nDC;" "xmlns:dc" as
	  , office'document_stylesXmlns'dr3d = defaultA fromAttrToStr "&nDr3D;" "xmlns:dr3d" as
	  , office'document_stylesXmlns'math = defaultA fromAttrToStr "&nMath;" "xmlns:math" as
	  , office'document_stylesXmlns'form = defaultA fromAttrToStr "&nForm;" "xmlns:form" as
	  , office'document_stylesOffice'version = possibleA fromAttrToStr "office:version" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "xmlns:office" (office'document_stylesXmlns'office v)
	, defaultToAttr toAttrFrStr "xmlns:meta" (office'document_stylesXmlns'meta v)
	, defaultToAttr toAttrFrStr "xmlns:script" (office'document_stylesXmlns'script v)
	, defaultToAttr toAttrFrStr "xmlns:style" (office'document_stylesXmlns'style v)
	, defaultToAttr toAttrFrStr "xmlns:text" (office'document_stylesXmlns'text v)
	, defaultToAttr toAttrFrStr "xmlns:table" (office'document_stylesXmlns'table v)
	, defaultToAttr toAttrFrStr "xmlns:draw" (office'document_stylesXmlns'draw v)
	, defaultToAttr toAttrFrStr "xmlns:chart" (office'document_stylesXmlns'chart v)
	, defaultToAttr toAttrFrStr "xmlns:number" (office'document_stylesXmlns'number v)
	, defaultToAttr toAttrFrStr "xmlns:fo" (office'document_stylesXmlns'fo v)
	, defaultToAttr toAttrFrStr "xmlns:xlink" (office'document_stylesXmlns'xlink v)
	, defaultToAttr toAttrFrStr "xmlns:svg" (office'document_stylesXmlns'svg v)
	, defaultToAttr toAttrFrStr "xmlns:dc" (office'document_stylesXmlns'dc v)
	, defaultToAttr toAttrFrStr "xmlns:dr3d" (office'document_stylesXmlns'dr3d v)
	, defaultToAttr toAttrFrStr "xmlns:math" (office'document_stylesXmlns'math v)
	, defaultToAttr toAttrFrStr "xmlns:form" (office'document_stylesXmlns'form v)
	, maybeToAttr toAttrFrStr "office:version" (office'document_stylesOffice'version v)
	]
instance XmlContent Office'document_content where
    fromElem (CElem (Elem "office:document-content" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (\(d,cd)->
		    (Just (Office'document_content (fromAttrs as) a b c d), rest))
		 (definite fromElem "<office:body>" "office:document-content" cc))
	      (fromElem cb))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Office'document_content as a b c d) =
	[CElem (Elem "office:document-content" (toAttrs as) (maybe [] toElem a
							     ++ maybe [] toElem b ++
							     maybe [] toElem c ++ toElem d))]
instance XmlAttributes Office'document_content_Attrs where
    fromAttrs as =
	Office'document_content_Attrs
	  { office'document_contentXmlns'office = defaultA fromAttrToStr "&nOffice;" "xmlns:office" as
	  , office'document_contentXmlns'meta = defaultA fromAttrToStr "&nMeta;" "xmlns:meta" as
	  , office'document_contentXmlns'script = defaultA fromAttrToStr "&nScript;" "xmlns:script" as
	  , office'document_contentXmlns'style = defaultA fromAttrToStr "&nStyle;" "xmlns:style" as
	  , office'document_contentXmlns'text = defaultA fromAttrToStr "&nText;" "xmlns:text" as
	  , office'document_contentXmlns'table = defaultA fromAttrToStr "&nTable;" "xmlns:table" as
	  , office'document_contentXmlns'draw = defaultA fromAttrToStr "&nDraw;" "xmlns:draw" as
	  , office'document_contentXmlns'chart = defaultA fromAttrToStr "&nChart;" "xmlns:chart" as
	  , office'document_contentXmlns'number = defaultA fromAttrToStr "&nNumber;" "xmlns:number" as
	  , office'document_contentXmlns'fo = defaultA fromAttrToStr "&nFO;" "xmlns:fo" as
	  , office'document_contentXmlns'xlink = defaultA fromAttrToStr "&nXLink;" "xmlns:xlink" as
	  , office'document_contentXmlns'svg = defaultA fromAttrToStr "&nSVG;" "xmlns:svg" as
	  , office'document_contentXmlns'dc = defaultA fromAttrToStr "&nDC;" "xmlns:dc" as
	  , office'document_contentXmlns'dr3d = defaultA fromAttrToStr "&nDr3D;" "xmlns:dr3d" as
	  , office'document_contentXmlns'math = defaultA fromAttrToStr "&nMath;" "xmlns:math" as
	  , office'document_contentXmlns'form = defaultA fromAttrToStr "&nForm;" "xmlns:form" as
	  , office'document_contentOffice'class = definiteA fromAttrToTyp "office:document-content" "office:class" as
	  , office'document_contentOffice'version = possibleA fromAttrToStr "office:version" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "xmlns:office" (office'document_contentXmlns'office v)
	, defaultToAttr toAttrFrStr "xmlns:meta" (office'document_contentXmlns'meta v)
	, defaultToAttr toAttrFrStr "xmlns:script" (office'document_contentXmlns'script v)
	, defaultToAttr toAttrFrStr "xmlns:style" (office'document_contentXmlns'style v)
	, defaultToAttr toAttrFrStr "xmlns:text" (office'document_contentXmlns'text v)
	, defaultToAttr toAttrFrStr "xmlns:table" (office'document_contentXmlns'table v)
	, defaultToAttr toAttrFrStr "xmlns:draw" (office'document_contentXmlns'draw v)
	, defaultToAttr toAttrFrStr "xmlns:chart" (office'document_contentXmlns'chart v)
	, defaultToAttr toAttrFrStr "xmlns:number" (office'document_contentXmlns'number v)
	, defaultToAttr toAttrFrStr "xmlns:fo" (office'document_contentXmlns'fo v)
	, defaultToAttr toAttrFrStr "xmlns:xlink" (office'document_contentXmlns'xlink v)
	, defaultToAttr toAttrFrStr "xmlns:svg" (office'document_contentXmlns'svg v)
	, defaultToAttr toAttrFrStr "xmlns:dc" (office'document_contentXmlns'dc v)
	, defaultToAttr toAttrFrStr "xmlns:dr3d" (office'document_contentXmlns'dr3d v)
	, defaultToAttr toAttrFrStr "xmlns:math" (office'document_contentXmlns'math v)
	, defaultToAttr toAttrFrStr "xmlns:form" (office'document_contentXmlns'form v)
	, toAttrFrTyp "office:class" (office'document_contentOffice'class v)
	, maybeToAttr toAttrFrStr "office:version" (office'document_contentOffice'version v)
	]
instance XmlAttrType Office'document_content_office'class where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "text" = Just Office'document_content_office'class_text
	    translate "text-global" = Just Office'document_content_office'class_text_global
	    translate "drawing" = Just Office'document_content_office'class_drawing
	    translate "presentation" = Just Office'document_content_office'class_presentation
	    translate "spreadsheet" = Just Office'document_content_office'class_spreadsheet
	    translate "chart" = Just Office'document_content_office'class_chart
	    translate _ = Nothing
    toAttrFrTyp n Office'document_content_office'class_text = Just (n, str2attr "text")
    toAttrFrTyp n Office'document_content_office'class_text_global = Just (n, str2attr "text-global")
    toAttrFrTyp n Office'document_content_office'class_drawing = Just (n, str2attr "drawing")
    toAttrFrTyp n Office'document_content_office'class_presentation = Just (n, str2attr "presentation")
    toAttrFrTyp n Office'document_content_office'class_spreadsheet = Just (n, str2attr "spreadsheet")
    toAttrFrTyp n Office'document_content_office'class_chart = Just (n, str2attr "chart")
instance XmlContent Office'document_meta where
    fromElem (CElem (Elem "office:document-meta" as c0):rest) =
	(\(a,ca)->
	   (Just (Office'document_meta (fromAttrs as) a), rest))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Office'document_meta as a) =
	[CElem (Elem "office:document-meta" (toAttrs as) (maybe [] toElem a))]
instance XmlAttributes Office'document_meta_Attrs where
    fromAttrs as =
	Office'document_meta_Attrs
	  { office'document_metaXmlns'office = defaultA fromAttrToStr "&nOffice;" "xmlns:office" as
	  , office'document_metaXmlns'meta = defaultA fromAttrToStr "&nMeta;" "xmlns:meta" as
	  , office'document_metaXmlns'script = defaultA fromAttrToStr "&nScript;" "xmlns:script" as
	  , office'document_metaXmlns'style = defaultA fromAttrToStr "&nStyle;" "xmlns:style" as
	  , office'document_metaXmlns'text = defaultA fromAttrToStr "&nText;" "xmlns:text" as
	  , office'document_metaXmlns'table = defaultA fromAttrToStr "&nTable;" "xmlns:table" as
	  , office'document_metaXmlns'draw = defaultA fromAttrToStr "&nDraw;" "xmlns:draw" as
	  , office'document_metaXmlns'chart = defaultA fromAttrToStr "&nChart;" "xmlns:chart" as
	  , office'document_metaXmlns'number = defaultA fromAttrToStr "&nNumber;" "xmlns:number" as
	  , office'document_metaXmlns'fo = defaultA fromAttrToStr "&nFO;" "xmlns:fo" as
	  , office'document_metaXmlns'xlink = defaultA fromAttrToStr "&nXLink;" "xmlns:xlink" as
	  , office'document_metaXmlns'svg = defaultA fromAttrToStr "&nSVG;" "xmlns:svg" as
	  , office'document_metaXmlns'dc = defaultA fromAttrToStr "&nDC;" "xmlns:dc" as
	  , office'document_metaXmlns'dr3d = defaultA fromAttrToStr "&nDr3D;" "xmlns:dr3d" as
	  , office'document_metaXmlns'math = defaultA fromAttrToStr "&nMath;" "xmlns:math" as
	  , office'document_metaXmlns'form = defaultA fromAttrToStr "&nForm;" "xmlns:form" as
	  , office'document_metaOffice'version = possibleA fromAttrToStr "office:version" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "xmlns:office" (office'document_metaXmlns'office v)
	, defaultToAttr toAttrFrStr "xmlns:meta" (office'document_metaXmlns'meta v)
	, defaultToAttr toAttrFrStr "xmlns:script" (office'document_metaXmlns'script v)
	, defaultToAttr toAttrFrStr "xmlns:style" (office'document_metaXmlns'style v)
	, defaultToAttr toAttrFrStr "xmlns:text" (office'document_metaXmlns'text v)
	, defaultToAttr toAttrFrStr "xmlns:table" (office'document_metaXmlns'table v)
	, defaultToAttr toAttrFrStr "xmlns:draw" (office'document_metaXmlns'draw v)
	, defaultToAttr toAttrFrStr "xmlns:chart" (office'document_metaXmlns'chart v)
	, defaultToAttr toAttrFrStr "xmlns:number" (office'document_metaXmlns'number v)
	, defaultToAttr toAttrFrStr "xmlns:fo" (office'document_metaXmlns'fo v)
	, defaultToAttr toAttrFrStr "xmlns:xlink" (office'document_metaXmlns'xlink v)
	, defaultToAttr toAttrFrStr "xmlns:svg" (office'document_metaXmlns'svg v)
	, defaultToAttr toAttrFrStr "xmlns:dc" (office'document_metaXmlns'dc v)
	, defaultToAttr toAttrFrStr "xmlns:dr3d" (office'document_metaXmlns'dr3d v)
	, defaultToAttr toAttrFrStr "xmlns:math" (office'document_metaXmlns'math v)
	, defaultToAttr toAttrFrStr "xmlns:form" (office'document_metaXmlns'form v)
	, maybeToAttr toAttrFrStr "office:version" (office'document_metaOffice'version v)
	]
instance XmlContent Office'document_settings where
    fromElem (CElem (Elem "office:document-settings" as c0):rest) =
	(\(a,ca)->
	   (Just (Office'document_settings (fromAttrs as) a), rest))
	(definite fromElem "<office:settings>" "office:document-settings" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Office'document_settings as a) =
	[CElem (Elem "office:document-settings" (toAttrs as) (toElem a))]
instance XmlAttributes Office'document_settings_Attrs where
    fromAttrs as =
	Office'document_settings_Attrs
	  { office'document_settingsXmlns'office = defaultA fromAttrToStr "&nOffice;" "xmlns:office" as
	  , office'document_settingsXmlns'xlink = defaultA fromAttrToStr "&nXLink;" "xmlns:xlink" as
	  , office'document_settingsXmlns'config = defaultA fromAttrToStr "&nConfig;" "xmlns:config" as
	  , office'document_settingsOffice'version = possibleA fromAttrToStr "office:version" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "xmlns:office" (office'document_settingsXmlns'office v)
	, defaultToAttr toAttrFrStr "xmlns:xlink" (office'document_settingsXmlns'xlink v)
	, defaultToAttr toAttrFrStr "xmlns:config" (office'document_settingsXmlns'config v)
	, maybeToAttr toAttrFrStr "office:version" (office'document_settingsOffice'version v)
	]
instance XmlContent Office'meta where
    fromElem (CElem (Elem "office:meta" [] c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (\(d,cd)->
		    (\(e,ce)->
		       (\(f,cf)->
			  (\(g,cg)->
			     (\(h,ch)->
				(\(i,ci)->
				   (\(j,cj)->
				      (\(k,ck)->
					 (\(l,cl)->
					    (\(m,cm)->
					       (\(n,cn)->
						  (\(o,co)->
						     (\(p,cp)->
							(\(q,cq)->
							   (\(r,cr)->
							      (\(s,cs)->
								 (Just (Office'meta a b c d e f g h
										    i j k l m n o p
										    q r s), rest))
							      (fromElem cr))
							   (many fromElem cq))
							(fromElem cp))
						     (fromElem co))
						  (fromElem cn))
					       (fromElem cm))
					    (fromElem cl))
					 (fromElem ck))
				      (fromElem cj))
				   (fromElem ci))
				(fromElem ch))
			     (fromElem cg))
			  (fromElem cf))
		       (fromElem ce))
		    (fromElem cd))
		 (fromElem cc))
	      (fromElem cb))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Office'meta a b c d e f g h i j k l m n o p q r s) =
	[CElem (Elem "office:meta" [] (maybe [] toElem a ++
				       maybe [] toElem b ++ maybe [] toElem c ++ maybe [] toElem d
				       ++ maybe [] toElem e ++ maybe [] toElem f ++
				       maybe [] toElem g ++ maybe [] toElem h ++ maybe [] toElem i
				       ++ maybe [] toElem j ++ maybe [] toElem k ++
				       maybe [] toElem l ++ maybe [] toElem m ++ maybe [] toElem n
				       ++ maybe [] toElem o ++ maybe [] toElem p ++
				       maybe [] toElem q ++ concatMap toElem r ++
				       maybe [] toElem s))]
instance XmlContent Office'script where
    fromElem (CElem (Elem "office:script" [] c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Office'script a b), rest))
	   (fromElem ca))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Office'script a b) =
	[CElem (Elem "office:script" [] (concatMap toElem a ++
					 maybe [] toElem b))]
instance XmlContent Office'font_decls where
    fromElem (CElem (Elem "office:font-decls" [] c0):rest) =
	(\(a,ca)->
	   (Just (Office'font_decls a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Office'font_decls a) =
	[CElem (Elem "office:font-decls" [] (concatMap toElem a))]
instance XmlContent Office'styles where
    fromElem (CElem (Elem "office:styles" [] c0):rest) =
	(\(a,ca)->
	   (Just (Office'styles a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Office'styles a) =
	[CElem (Elem "office:styles" [] (concatMap toElem a))]
instance XmlContent Office'styles_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Office'styles_Style'default_style_Style'style_Text'list_style_Number'number_style_Number'currency_style_Number'percentage_style_Number'date_style_Number'time_style_Number'boolean_style_Number'text_style_Draw'gradient_Draw'hatch_Draw'fill_image_Draw'marker_Draw'stroke_dash_Style'presentation_page_layout_Draw'transparency a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Office'styles_Text'outline_style a), rest)
		(_,_) ->
			case (fromElem c0) of
			(Just a,rest) -> (Just (Office'styles_Text'footnotes_configuration a), rest)
			(_,_) ->
				case (fromElem c0) of
				(Just a,rest) -> (Just (Office'styles_Text'endnotes_configuration a), rest)
				(_,_) ->
					case (fromElem c0) of
					(Just a,rest) -> (Just (Office'styles_Text'bibliography_configuration a), rest)
					(_,_) ->
						case (fromElem c0) of
						(Just a,rest) -> (Just (Office'styles_Text'linenumbering_configuration a), rest)
						(_,_) ->
						    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Office'styles_Style'default_style_Style'style_Text'list_style_Number'number_style_Number'currency_style_Number'percentage_style_Number'date_style_Number'time_style_Number'boolean_style_Number'text_style_Draw'gradient_Draw'hatch_Draw'fill_image_Draw'marker_Draw'stroke_dash_Style'presentation_page_layout_Draw'transparency a) = toElem a
    toElem (Office'styles_Text'outline_style a) = toElem a
    toElem (Office'styles_Text'footnotes_configuration a) = toElem a
    toElem (Office'styles_Text'endnotes_configuration a) = toElem a
    toElem (Office'styles_Text'bibliography_configuration a) = toElem a
    toElem (Office'styles_Text'linenumbering_configuration a) = toElem a
instance XmlContent Office'automatic_styles where
    fromElem (CElem (Elem "office:automatic-styles" [] c0):rest) =
	(\(a,ca)->
	   (Just (Office'automatic_styles a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Office'automatic_styles a) =
	[CElem (Elem "office:automatic-styles" [] (concatMap toElem a))]
instance XmlContent Office'automatic_styles_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Office'automatic_styles_Style'default_style_Style'style_Text'list_style_Number'number_style_Number'currency_style_Number'percentage_style_Number'date_style_Number'time_style_Number'boolean_style_Number'text_style_Draw'gradient_Draw'hatch_Draw'fill_image_Draw'marker_Draw'stroke_dash_Style'presentation_page_layout_Draw'transparency a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Office'automatic_styles_Style'page_master a), rest)
		(_,_) ->
		    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Office'automatic_styles_Style'default_style_Style'style_Text'list_style_Number'number_style_Number'currency_style_Number'percentage_style_Number'date_style_Number'time_style_Number'boolean_style_Number'text_style_Draw'gradient_Draw'hatch_Draw'fill_image_Draw'marker_Draw'stroke_dash_Style'presentation_page_layout_Draw'transparency a) = toElem a
    toElem (Office'automatic_styles_Style'page_master a) = toElem a
instance XmlContent Office'master_styles where
    fromElem (CElem (Elem "office:master-styles" [] c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (Just (Office'master_styles a b c), rest))
	      (many fromElem cb))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Office'master_styles a b c) =
	[CElem (Elem "office:master-styles" [] (maybe [] toElem a ++
						maybe [] toElem b ++ concatMap toElem c))]
instance XmlContent Office'body where
    fromElem (CElem (Elem "office:body" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (\(d,cd)->
		    (\(e,ce)->
		       (\(f,cf)->
			  (\(g,cg)->
			     (\(h,ch)->
				(\(i,ci)->
				   (\(j,cj)->
				      (\(k,ck)->
					 (\(l,cl)->
					    (\(m,cm)->
					       (\(n,cn)->
						  (\(o,co)->
						     (\(p,cp)->
							(\(q,cq)->
							   (Just (Office'body (fromAttrs as) a b c d
											     e f g h
											     i j k l
											     m n o p
											     q), rest))
							(fromElem cp))
						     (fromElem co))
						  (fromElem cn))
					       (fromElem cm))
					    (fromElem cl))
					 (fromElem ck))
				      (many fromElem cj))
				   (fromElem ci))
				(fromElem ch))
			     (fromElem cg))
			  (fromElem cf))
		       (fromElem ce))
		    (fromElem cd))
		 (fromElem cc))
	      (fromElem cb))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Office'body as a b c d e f g h i j k l m n o p q) =
	[CElem (Elem "office:body" (toAttrs as) (maybe [] toElem a ++
						 maybe [] toElem b ++ maybe [] toElem c ++
						 maybe [] toElem d ++ maybe [] toElem e ++
						 maybe [] toElem f ++ maybe [] toElem g ++
						 maybe [] toElem h ++ maybe [] toElem i ++
						 maybe [] toElem j ++ concatMap toElem k ++
						 maybe [] toElem l ++ maybe [] toElem m ++
						 maybe [] toElem n ++ maybe [] toElem o ++
						 maybe [] toElem p ++ maybe [] toElem q))]
instance XmlAttributes Office'body_Attrs where
    fromAttrs as =
	Office'body_Attrs
	  { office'bodyTable'structure_protected = defaultA fromAttrToStr "false" "table:structure-protected" as
	  , office'bodyTable'protection_key = possibleA fromAttrToStr "table:protection-key" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "table:structure-protected" (office'bodyTable'structure_protected v)
	, maybeToAttr toAttrFrStr "table:protection-key" (office'bodyTable'protection_key v)
	]
instance XmlContent Office'events where
    fromElem (CElem (Elem "office:events" [] c0):rest) =
	(\(a,ca)->
	   (Just (Office'events a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Office'events a) =
	[CElem (Elem "office:events" [] (concatMap toElem a))]
instance XmlContent Office'events_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Office'events_Script'event a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Office'events_Presentation'event a), rest)
		(_,_) ->
		    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Office'events_Script'event a) = toElem a
    toElem (Office'events_Presentation'event a) = toElem a
instance XmlContent Office'dde_source where
    fromElem (CElem (Elem "office:dde-source" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "office:dde-source" (toAttrs as) [])]
instance XmlAttributes Office'dde_source where
    fromAttrs as =
	Office'dde_source
	  { office'dde_sourceOffice'dde_application = possibleA fromAttrToStr "office:dde-application" as
	  , office'dde_sourceOffice'dde_topic = possibleA fromAttrToStr "office:dde-topic" as
	  , office'dde_sourceOffice'dde_item = possibleA fromAttrToStr "office:dde-item" as
	  , office'dde_sourceOffice'automatic_update = defaultA fromAttrToStr "false" "office:automatic-update" as
	  , office'dde_sourceOffice'name = possibleA fromAttrToStr "office:name" as
	  , office'dde_sourceTable'conversion_mode = defaultA fromAttrToTyp Office'dde_source_table'conversion_mode_into_default_style_data_style "table:conversion-mode" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "office:dde-application" (office'dde_sourceOffice'dde_application v)
	, maybeToAttr toAttrFrStr "office:dde-topic" (office'dde_sourceOffice'dde_topic v)
	, maybeToAttr toAttrFrStr "office:dde-item" (office'dde_sourceOffice'dde_item v)
	, defaultToAttr toAttrFrStr "office:automatic-update" (office'dde_sourceOffice'automatic_update v)
	, maybeToAttr toAttrFrStr "office:name" (office'dde_sourceOffice'name v)
	, defaultToAttr toAttrFrTyp "table:conversion-mode" (office'dde_sourceTable'conversion_mode v)
	]
instance XmlAttrType Office'dde_source_table'conversion_mode where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "into-default-style-data-style" = Just Office'dde_source_table'conversion_mode_into_default_style_data_style
	    translate "into-english-number" = Just Office'dde_source_table'conversion_mode_into_english_number
	    translate "let-text" = Just Office'dde_source_table'conversion_mode_let_text
	    translate _ = Nothing
    toAttrFrTyp n Office'dde_source_table'conversion_mode_into_default_style_data_style = Just (n, str2attr "into-default-style-data-style")
    toAttrFrTyp n Office'dde_source_table'conversion_mode_into_english_number = Just (n, str2attr "into-english-number")
    toAttrFrTyp n Office'dde_source_table'conversion_mode_let_text = Just (n, str2attr "let-text")
instance XmlContent Office'annotation where
    fromElem (CElem (Elem "office:annotation" as c0):rest) =
	(\(a,ca)->
	   (Just (Office'annotation (fromAttrs as) a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Office'annotation as a) =
	[CElem (Elem "office:annotation" (toAttrs as) (concatMap toElem a))]
instance XmlAttributes Office'annotation_Attrs where
    fromAttrs as =
	Office'annotation_Attrs
	  { office'annotationOffice'author = possibleA fromAttrToStr "office:author" as
	  , office'annotationOffice'create_date = possibleA fromAttrToStr "office:create-date" as
	  , office'annotationOffice'create_date_string = possibleA fromAttrToStr "office:create-date-string" as
	  , office'annotationOffice'display = defaultA fromAttrToStr "false" "office:display" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "office:author" (office'annotationOffice'author v)
	, maybeToAttr toAttrFrStr "office:create-date" (office'annotationOffice'create_date v)
	, maybeToAttr toAttrFrStr "office:create-date-string" (office'annotationOffice'create_date_string v)
	, defaultToAttr toAttrFrStr "office:display" (office'annotationOffice'display v)
	]
instance XmlContent Office'change_info where
    fromElem (CElem (Elem "office:change-info" as c0):rest) =
	(\(a,ca)->
	   (Just (Office'change_info (fromAttrs as) a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Office'change_info as a) =
	[CElem (Elem "office:change-info" (toAttrs as) (concatMap toElem a))]
instance XmlAttributes Office'change_info_Attrs where
    fromAttrs as =
	Office'change_info_Attrs
	  { office'change_infoOffice'chg_author = definiteA fromAttrToStr "office:change-info" "office:chg-author" as
	  , office'change_infoOffice'chg_date_time = definiteA fromAttrToStr "office:change-info" "office:chg-date-time" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "office:chg-author" (office'change_infoOffice'chg_author v)
	, toAttrFrStr "office:chg-date-time" (office'change_infoOffice'chg_date_time v)
	]
instance XmlContent Office'binary_data where
    fromElem (CElem (Elem "office:binary-data" [] c0):rest) =
	(\(a,ca)->
	   (Just (Office'binary_data a), rest))
	(definite fromText "text" "office:binary-data" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Office'binary_data a) =
	[CElem (Elem "office:binary-data" [] (toText a))]
instance XmlContent Style'font_decl where
    fromElem (CElem (Elem "style:font-decl" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "style:font-decl" (toAttrs as) [])]
instance XmlAttributes Style'font_decl where
    fromAttrs as =
	Style'font_decl
	  { style'font_declStyle'name = definiteA fromAttrToStr "style:font-decl" "style:name" as
	  , style'font_declFo'font_family = definiteA fromAttrToStr "style:font-decl" "fo:font-family" as
	  , style'font_declStyle'font_style_name = possibleA fromAttrToStr "style:font-style-name" as
	  , style'font_declStyle'font_family_generic = possibleA fromAttrToTyp "style:font-family-generic" as
	  , style'font_declStyle'font_pitch = possibleA fromAttrToTyp "style:font-pitch" as
	  , style'font_declStyle'font_charset = possibleA fromAttrToStr "style:font-charset" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "style:name" (style'font_declStyle'name v)
	, toAttrFrStr "fo:font-family" (style'font_declFo'font_family v)
	, maybeToAttr toAttrFrStr "style:font-style-name" (style'font_declStyle'font_style_name v)
	, maybeToAttr toAttrFrTyp "style:font-family-generic" (style'font_declStyle'font_family_generic v)
	, maybeToAttr toAttrFrTyp "style:font-pitch" (style'font_declStyle'font_pitch v)
	, maybeToAttr toAttrFrStr "style:font-charset" (style'font_declStyle'font_charset v)
	]
instance XmlAttrType Style'font_decl_style'font_family_generic where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "roman" = Just Style'font_decl_style'font_family_generic_roman
	    translate "swiss" = Just Style'font_decl_style'font_family_generic_swiss
	    translate "modern" = Just Style'font_decl_style'font_family_generic_modern
	    translate "decorative" = Just Style'font_decl_style'font_family_generic_decorative
	    translate "script" = Just Style'font_decl_style'font_family_generic_script
	    translate "system" = Just Style'font_decl_style'font_family_generic_system
	    translate _ = Nothing
    toAttrFrTyp n Style'font_decl_style'font_family_generic_roman = Just (n, str2attr "roman")
    toAttrFrTyp n Style'font_decl_style'font_family_generic_swiss = Just (n, str2attr "swiss")
    toAttrFrTyp n Style'font_decl_style'font_family_generic_modern = Just (n, str2attr "modern")
    toAttrFrTyp n Style'font_decl_style'font_family_generic_decorative = Just (n, str2attr "decorative")
    toAttrFrTyp n Style'font_decl_style'font_family_generic_script = Just (n, str2attr "script")
    toAttrFrTyp n Style'font_decl_style'font_family_generic_system = Just (n, str2attr "system")
instance XmlAttrType Style'font_decl_style'font_pitch where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "fixed" = Just Style'font_decl_style'font_pitch_fixed
	    translate "variable" = Just Style'font_decl_style'font_pitch_variable
	    translate _ = Nothing
    toAttrFrTyp n Style'font_decl_style'font_pitch_fixed = Just (n, str2attr "fixed")
    toAttrFrTyp n Style'font_decl_style'font_pitch_variable = Just (n, str2attr "variable")
instance XmlContent Style'style where
    fromElem (CElem (Elem "style:style" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (Just (Style'style (fromAttrs as) a b c), rest))
	      (many fromElem cb))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Style'style as a b c) =
	[CElem (Elem "style:style" (toAttrs as) (maybe [] toElem a ++
						 maybe [] toElem b ++ concatMap toElem c))]
instance XmlAttributes Style'style_Attrs where
    fromAttrs as =
	Style'style_Attrs
	  { style'styleStyle'name = definiteA fromAttrToStr "style:style" "style:name" as
	  , style'styleStyle'family = definiteA fromAttrToTyp "style:style" "style:family" as
	  , style'styleStyle'parent_style_name = possibleA fromAttrToStr "style:parent-style-name" as
	  , style'styleStyle'master_page_name = possibleA fromAttrToStr "style:master-page-name" as
	  , style'styleStyle'next_style_name = possibleA fromAttrToStr "style:next-style-name" as
	  , style'styleStyle'list_style_name = possibleA fromAttrToStr "style:list-style-name" as
	  , style'styleStyle'data_style_name = possibleA fromAttrToStr "style:data-style-name" as
	  , style'styleStyle'auto_update = defaultA fromAttrToStr "false" "style:auto-update" as
	  , style'styleStyle'class = possibleA fromAttrToStr "style:class" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "style:name" (style'styleStyle'name v)
	, toAttrFrTyp "style:family" (style'styleStyle'family v)
	, maybeToAttr toAttrFrStr "style:parent-style-name" (style'styleStyle'parent_style_name v)
	, maybeToAttr toAttrFrStr "style:master-page-name" (style'styleStyle'master_page_name v)
	, maybeToAttr toAttrFrStr "style:next-style-name" (style'styleStyle'next_style_name v)
	, maybeToAttr toAttrFrStr "style:list-style-name" (style'styleStyle'list_style_name v)
	, maybeToAttr toAttrFrStr "style:data-style-name" (style'styleStyle'data_style_name v)
	, defaultToAttr toAttrFrStr "style:auto-update" (style'styleStyle'auto_update v)
	, maybeToAttr toAttrFrStr "style:class" (style'styleStyle'class v)
	]
instance XmlAttrType Style'style_style'family where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "paragraph" = Just Style'style_style'family_paragraph
	    translate "text" = Just Style'style_style'family_text
	    translate "section" = Just Style'style_style'family_section
	    translate "table" = Just Style'style_style'family_table
	    translate "table-column" = Just Style'style_style'family_table_column
	    translate "table-row" = Just Style'style_style'family_table_row
	    translate "table-cell" = Just Style'style_style'family_table_cell
	    translate "table-page" = Just Style'style_style'family_table_page
	    translate "chart" = Just Style'style_style'family_chart
	    translate "graphics" = Just Style'style_style'family_graphics
	    translate "default" = Just Style'style_style'family_default
	    translate "drawing-page" = Just Style'style_style'family_drawing_page
	    translate "presentation" = Just Style'style_style'family_presentation
	    translate "control" = Just Style'style_style'family_control
	    translate "ruby" = Just Style'style_style'family_ruby
	    translate _ = Nothing
    toAttrFrTyp n Style'style_style'family_paragraph = Just (n, str2attr "paragraph")
    toAttrFrTyp n Style'style_style'family_text = Just (n, str2attr "text")
    toAttrFrTyp n Style'style_style'family_section = Just (n, str2attr "section")
    toAttrFrTyp n Style'style_style'family_table = Just (n, str2attr "table")
    toAttrFrTyp n Style'style_style'family_table_column = Just (n, str2attr "table-column")
    toAttrFrTyp n Style'style_style'family_table_row = Just (n, str2attr "table-row")
    toAttrFrTyp n Style'style_style'family_table_cell = Just (n, str2attr "table-cell")
    toAttrFrTyp n Style'style_style'family_table_page = Just (n, str2attr "table-page")
    toAttrFrTyp n Style'style_style'family_chart = Just (n, str2attr "chart")
    toAttrFrTyp n Style'style_style'family_graphics = Just (n, str2attr "graphics")
    toAttrFrTyp n Style'style_style'family_default = Just (n, str2attr "default")
    toAttrFrTyp n Style'style_style'family_drawing_page = Just (n, str2attr "drawing-page")
    toAttrFrTyp n Style'style_style'family_presentation = Just (n, str2attr "presentation")
    toAttrFrTyp n Style'style_style'family_control = Just (n, str2attr "control")
    toAttrFrTyp n Style'style_style'family_ruby = Just (n, str2attr "ruby")
instance XmlContent Style'default_style where
    fromElem (CElem (Elem "style:default-style" as c0):rest) =
	(\(a,ca)->
	   (Just (Style'default_style (fromAttrs as) a), rest))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Style'default_style as a) =
	[CElem (Elem "style:default-style" (toAttrs as) (maybe [] toElem a))]
instance XmlAttributes Style'default_style_Attrs where
    fromAttrs as =
	Style'default_style_Attrs
	  { style'default_styleStyle'family = definiteA fromAttrToTyp "style:default-style" "style:family" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrTyp "style:family" (style'default_styleStyle'family v)
	]
instance XmlAttrType Style'default_style_style'family where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "paragraph" = Just Style'default_style_style'family_paragraph
	    translate "text" = Just Style'default_style_style'family_text
	    translate "section" = Just Style'default_style_style'family_section
	    translate "table" = Just Style'default_style_style'family_table
	    translate "table-column" = Just Style'default_style_style'family_table_column
	    translate "table-row" = Just Style'default_style_style'family_table_row
	    translate "table-cell" = Just Style'default_style_style'family_table_cell
	    translate "table-page" = Just Style'default_style_style'family_table_page
	    translate "chart" = Just Style'default_style_style'family_chart
	    translate "graphics" = Just Style'default_style_style'family_graphics
	    translate "default" = Just Style'default_style_style'family_default
	    translate "drawing-page" = Just Style'default_style_style'family_drawing_page
	    translate "presentation" = Just Style'default_style_style'family_presentation
	    translate "control" = Just Style'default_style_style'family_control
	    translate "ruby" = Just Style'default_style_style'family_ruby
	    translate _ = Nothing
    toAttrFrTyp n Style'default_style_style'family_paragraph = Just (n, str2attr "paragraph")
    toAttrFrTyp n Style'default_style_style'family_text = Just (n, str2attr "text")
    toAttrFrTyp n Style'default_style_style'family_section = Just (n, str2attr "section")
    toAttrFrTyp n Style'default_style_style'family_table = Just (n, str2attr "table")
    toAttrFrTyp n Style'default_style_style'family_table_column = Just (n, str2attr "table-column")
    toAttrFrTyp n Style'default_style_style'family_table_row = Just (n, str2attr "table-row")
    toAttrFrTyp n Style'default_style_style'family_table_cell = Just (n, str2attr "table-cell")
    toAttrFrTyp n Style'default_style_style'family_table_page = Just (n, str2attr "table-page")
    toAttrFrTyp n Style'default_style_style'family_chart = Just (n, str2attr "chart")
    toAttrFrTyp n Style'default_style_style'family_graphics = Just (n, str2attr "graphics")
    toAttrFrTyp n Style'default_style_style'family_default = Just (n, str2attr "default")
    toAttrFrTyp n Style'default_style_style'family_drawing_page = Just (n, str2attr "drawing-page")
    toAttrFrTyp n Style'default_style_style'family_presentation = Just (n, str2attr "presentation")
    toAttrFrTyp n Style'default_style_style'family_control = Just (n, str2attr "control")
    toAttrFrTyp n Style'default_style_style'family_ruby = Just (n, str2attr "ruby")
instance XmlContent Style'map where
    fromElem (CElem (Elem "style:map" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "style:map" (toAttrs as) [])]
instance XmlAttributes Style'map where
    fromAttrs as =
	Style'map
	  { style'mapStyle'condition = definiteA fromAttrToStr "style:map" "style:condition" as
	  , style'mapStyle'apply_style_name = definiteA fromAttrToStr "style:map" "style:apply-style-name" as
	  , style'mapStyle'base_cell_address = possibleA fromAttrToStr "style:base-cell-address" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "style:condition" (style'mapStyle'condition v)
	, toAttrFrStr "style:apply-style-name" (style'mapStyle'apply_style_name v)
	, maybeToAttr toAttrFrStr "style:base-cell-address" (style'mapStyle'base_cell_address v)
	]
instance XmlContent Style'properties where
    fromElem (CElem (Elem "style:properties" as c0):rest) =
	(\(a,ca)->
	   (Just (Style'properties (fromAttrs as) a), rest))
	(definite fromElem "ANY" "style:properties" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Style'properties as a) =
	[CElem (Elem "style:properties" (toAttrs as) (toElem a))]
instance XmlAttributes Style'properties_Attrs where
    fromAttrs as =
	Style'properties_Attrs
	  { style'propertiesStyle'num_prefix = possibleA fromAttrToStr "style:num-prefix" as
	  , style'propertiesStyle'num_suffix = possibleA fromAttrToStr "style:num-suffix" as
	  , style'propertiesStyle'num_format = possibleA fromAttrToStr "style:num-format" as
	  , style'propertiesStyle'num_letter_sync = possibleA fromAttrToStr "style:num-letter-sync" as
	  , style'propertiesFo'width = possibleA fromAttrToStr "fo:width" as
	  , style'propertiesFo'height = possibleA fromAttrToStr "fo:height" as
	  , style'propertiesStyle'vertical_pos = possibleA fromAttrToTyp "style:vertical-pos" as
	  , style'propertiesStyle'vertical_rel = possibleA fromAttrToTyp "style:vertical-rel" as
	  , style'propertiesStyle'horizontal_pos = possibleA fromAttrToTyp "style:horizontal-pos" as
	  , style'propertiesStyle'horizontal_rel = possibleA fromAttrToTyp "style:horizontal-rel" as
	  , style'propertiesSvg'width = possibleA fromAttrToStr "svg:width" as
	  , style'propertiesSvg'height = possibleA fromAttrToStr "svg:height" as
	  , style'propertiesFo'min_height = possibleA fromAttrToStr "fo:min-height" as
	  , style'propertiesFo'min_width = possibleA fromAttrToStr "fo:min-width" as
	  , style'propertiesFo'max_height = possibleA fromAttrToStr "fo:max-height" as
	  , style'propertiesFo'max_width = possibleA fromAttrToStr "fo:max-width" as
	  , style'propertiesText'anchor_type = possibleA fromAttrToTyp "text:anchor-type" as
	  , style'propertiesText'anchor_page_number = possibleA fromAttrToStr "text:anchor-page-number" as
	  , style'propertiesSvg'x = possibleA fromAttrToStr "svg:x" as
	  , style'propertiesSvg'y = possibleA fromAttrToStr "svg:y" as
	  , style'propertiesStyle'print_content = possibleA fromAttrToStr "style:print-content" as
	  , style'propertiesStyle'protect = possibleA fromAttrToStr "style:protect" as
	  , style'propertiesStyle'wrap = possibleA fromAttrToTyp "style:wrap" as
	  , style'propertiesStyle'number_wrapped_paragraphs = possibleA fromAttrToStr "style:number-wrapped-paragraphs" as
	  , style'propertiesStyle'wrap_contour = possibleA fromAttrToStr "style:wrap-contour" as
	  , style'propertiesStyle'wrap_contour_mode = possibleA fromAttrToTyp "style:wrap-contour-mode" as
	  , style'propertiesStyle'run_through = possibleA fromAttrToTyp "style:run-through" as
	  , style'propertiesStyle'editable = possibleA fromAttrToStr "style:editable" as
	  , style'propertiesStyle'mirror = possibleA fromAttrToStr "style:mirror" as
	  , style'propertiesFo'clip = possibleA fromAttrToStr "fo:clip" as
	  , style'propertiesText'animation = possibleA fromAttrToTyp "text:animation" as
	  , style'propertiesText'animation_direction = possibleA fromAttrToTyp "text:animation-direction" as
	  , style'propertiesText'animation_start_inside = possibleA fromAttrToStr "text:animation-start-inside" as
	  , style'propertiesText'animation_stop_inside = possibleA fromAttrToStr "text:animation-stop-inside" as
	  , style'propertiesText'animation_repeat = possibleA fromAttrToStr "text:animation-repeat" as
	  , style'propertiesText'animation_delay = possibleA fromAttrToStr "text:animation-delay" as
	  , style'propertiesText'animation_steps = possibleA fromAttrToStr "text:animation-steps" as
	  , style'propertiesFo'font_variant = possibleA fromAttrToTyp "fo:font-variant" as
	  , style'propertiesFo'text_transform = possibleA fromAttrToTyp "fo:text-transform" as
	  , style'propertiesFo'color = possibleA fromAttrToStr "fo:color" as
	  , style'propertiesStyle'use_window_font_color = possibleA fromAttrToStr "style:use-window-font-color" as
	  , style'propertiesStyle'text_outline = possibleA fromAttrToStr "style:text-outline" as
	  , style'propertiesStyle'text_crossing_out = possibleA fromAttrToTyp "style:text-crossing-out" as
	  , style'propertiesStyle'text_position = possibleA fromAttrToStr "style:text-position" as
	  , style'propertiesStyle'text_align = possibleA fromAttrToTyp "style:text-align" as
	  , style'propertiesStyle'font_name = possibleA fromAttrToStr "style:font-name" as
	  , style'propertiesFo'font_family = possibleA fromAttrToStr "fo:font-family" as
	  , style'propertiesStyle'font_family_generic = possibleA fromAttrToTyp "style:font-family-generic" as
	  , style'propertiesStyle'font_style_name = possibleA fromAttrToStr "style:font-style-name" as
	  , style'propertiesStyle'font_pitch = possibleA fromAttrToTyp "style:font-pitch" as
	  , style'propertiesStyle'font_charset = possibleA fromAttrToStr "style:font-charset" as
	  , style'propertiesStyle'font_name_asian = possibleA fromAttrToStr "style:font-name-asian" as
	  , style'propertiesStyle'font_family_asian = possibleA fromAttrToStr "style:font-family-asian" as
	  , style'propertiesStyle'font_family_generic_asian = possibleA fromAttrToTyp "style:font-family-generic-asian" as
	  , style'propertiesStyle'font_style_name_asian = possibleA fromAttrToStr "style:font-style-name-asian" as
	  , style'propertiesStyle'font_pitch_asian = possibleA fromAttrToTyp "style:font-pitch-asian" as
	  , style'propertiesStyle'font_charset_asian = possibleA fromAttrToStr "style:font-charset-asian" as
	  , style'propertiesStyle'font_name_complex = possibleA fromAttrToStr "style:font-name-complex" as
	  , style'propertiesStyle'font_family_complex = possibleA fromAttrToStr "style:font-family-complex" as
	  , style'propertiesStyle'font_family_generic_complex = possibleA fromAttrToTyp "style:font-family-generic-complex" as
	  , style'propertiesStyle'font_style_name_complex = possibleA fromAttrToStr "style:font-style-name-complex" as
	  , style'propertiesStyle'font_pitch_complex = possibleA fromAttrToTyp "style:font-pitch-complex" as
	  , style'propertiesStyle'font_charset_complex = possibleA fromAttrToStr "style:font-charset-complex" as
	  , style'propertiesFo'font_size = possibleA fromAttrToStr "fo:font-size" as
	  , style'propertiesStyle'font_size_rel = possibleA fromAttrToStr "style:font-size-rel" as
	  , style'propertiesStyle'font_size_asian = possibleA fromAttrToStr "style:font-size-asian" as
	  , style'propertiesStyle'font_size_rel_asian = possibleA fromAttrToStr "style:font-size-rel-asian" as
	  , style'propertiesStyle'font_size_complex = possibleA fromAttrToStr "style:font-size-complex" as
	  , style'propertiesStyle'font_size_rel_complex = possibleA fromAttrToStr "style:font-size-rel-complex" as
	  , style'propertiesFo'letter_spacing = possibleA fromAttrToStr "fo:letter-spacing" as
	  , style'propertiesFo'language = possibleA fromAttrToStr "fo:language" as
	  , style'propertiesStyle'language_asian = possibleA fromAttrToStr "style:language-asian" as
	  , style'propertiesStyle'language_complex = possibleA fromAttrToStr "style:language-complex" as
	  , style'propertiesFo'country = possibleA fromAttrToStr "fo:country" as
	  , style'propertiesStyle'country_asian = possibleA fromAttrToStr "style:country-asian" as
	  , style'propertiesStyle'country_complex = possibleA fromAttrToStr "style:country-complex" as
	  , style'propertiesFo'font_style = possibleA fromAttrToTyp "fo:font-style" as
	  , style'propertiesStyle'font_style_asian = possibleA fromAttrToTyp "style:font-style-asian" as
	  , style'propertiesStyle'font_style_complex = possibleA fromAttrToTyp "style:font-style-complex" as
	  , style'propertiesStyle'font_relief = possibleA fromAttrToTyp "style:font-relief" as
	  , style'propertiesFo'text_shadow = possibleA fromAttrToStr "fo:text-shadow" as
	  , style'propertiesStyle'text_underline = possibleA fromAttrToTyp "style:text-underline" as
	  , style'propertiesStyle'text_autospace = possibleA fromAttrToTyp "style:text-autospace" as
	  , style'propertiesStyle'punctuation_wrap = possibleA fromAttrToTyp "style:punctuation-wrap" as
	  , style'propertiesStyle'line_break = possibleA fromAttrToTyp "style:line-break" as
	  , style'propertiesStyle'text_underline_color = possibleA fromAttrToStr "style:text-underline-color" as
	  , style'propertiesFo'font_weight = possibleA fromAttrToStr "fo:font-weight" as
	  , style'propertiesStyle'font_weight_asian = possibleA fromAttrToStr "style:font-weight-asian" as
	  , style'propertiesStyle'font_weight_complex = possibleA fromAttrToStr "style:font-weight-complex" as
	  , style'propertiesFo'score_spaces = possibleA fromAttrToStr "fo:score-spaces" as
	  , style'propertiesStyle'letter_kerning = possibleA fromAttrToStr "style:letter-kerning" as
	  , style'propertiesStyle'text_blinking = possibleA fromAttrToStr "style:text-blinking" as
	  , style'propertiesStyle'text_background_color = possibleA fromAttrToStr "style:text-background-color" as
	  , style'propertiesStyle'text_combine = possibleA fromAttrToTyp "style:text-combine" as
	  , style'propertiesStyle'text_combine_start_char = possibleA fromAttrToStr "style:text-combine-start-char" as
	  , style'propertiesStyle'text_combine_end_char = possibleA fromAttrToStr "style:text-combine-end-char" as
	  , style'propertiesStyle'text_emphasize = possibleA fromAttrToStr "style:text-emphasize" as
	  , style'propertiesStyle'text_scale = possibleA fromAttrToStr "style:text-scale" as
	  , style'propertiesStyle'text_rotation_angle = possibleA fromAttrToStr "style:text-rotation-angle" as
	  , style'propertiesStyle'text_rotation_scale = possibleA fromAttrToTyp "style:text-rotation-scale" as
	  , style'propertiesFo'line_height = possibleA fromAttrToStr "fo:line-height" as
	  , style'propertiesStyle'line_height_at_least = possibleA fromAttrToStr "style:line-height-at-least" as
	  , style'propertiesStyle'line_spacing = possibleA fromAttrToStr "style:line-spacing" as
	  , style'propertiesFo'text_align = possibleA fromAttrToTyp "fo:text-align" as
	  , style'propertiesFo'text_align_last = possibleA fromAttrToTyp "fo:text-align-last" as
	  , style'propertiesStyle'text_align_source = possibleA fromAttrToTyp "style:text-align-source" as
	  , style'propertiesStyle'justify_single_word = possibleA fromAttrToStr "style:justify-single-word" as
	  , style'propertiesStyle'break_inside = possibleA fromAttrToTyp "style:break-inside" as
	  , style'propertiesFo'widows = possibleA fromAttrToStr "fo:widows" as
	  , style'propertiesFo'orphans = possibleA fromAttrToStr "fo:orphans" as
	  , style'propertiesFo'hyphenate = possibleA fromAttrToStr "fo:hyphenate" as
	  , style'propertiesFo'hyphenate_keep = possibleA fromAttrToTyp "fo:hyphenate-keep" as
	  , style'propertiesFo'hyphenation_remain_char_count = possibleA fromAttrToStr "fo:hyphenation-remain-char-count" as
	  , style'propertiesFo'hyphenation_push_char_count = possibleA fromAttrToStr "fo:hyphenation-push-char-count" as
	  , style'propertiesFo'hyphenation_ladder_count = possibleA fromAttrToStr "fo:hyphenation-ladder-count" as
	  , style'propertiesStyle'page_number = possibleA fromAttrToStr "style:page-number" as
	  , style'propertiesStyle'register_true = possibleA fromAttrToStr "style:register-true" as
	  , style'propertiesStyle'register_truth_ref_style_name = possibleA fromAttrToStr "style:register-truth-ref-style-name" as
	  , style'propertiesFo'margin_left = possibleA fromAttrToStr "fo:margin-left" as
	  , style'propertiesFo'margin_right = possibleA fromAttrToStr "fo:margin-right" as
	  , style'propertiesFo'text_indent = possibleA fromAttrToStr "fo:text-indent" as
	  , style'propertiesStyle'auto_text_indent = possibleA fromAttrToStr "style:auto-text-indent" as
	  , style'propertiesFo'margin_top = possibleA fromAttrToStr "fo:margin-top" as
	  , style'propertiesFo'margin_bottom = possibleA fromAttrToStr "fo:margin-bottom" as
	  , style'propertiesFo'break_before = possibleA fromAttrToTyp "fo:break-before" as
	  , style'propertiesFo'break_after = possibleA fromAttrToTyp "fo:break-after" as
	  , style'propertiesFo'background_color = possibleA fromAttrToStr "fo:background-color" as
	  , style'propertiesStyle'background_transparency = possibleA fromAttrToStr "style:background-transparency" as
	  , style'propertiesStyle'dynamic_spacing = possibleA fromAttrToStr "style:dynamic-spacing" as
	  , style'propertiesFo'border = possibleA fromAttrToStr "fo:border" as
	  , style'propertiesFo'border_top = possibleA fromAttrToStr "fo:border-top" as
	  , style'propertiesFo'border_bottom = possibleA fromAttrToStr "fo:border-bottom" as
	  , style'propertiesFo'border_left = possibleA fromAttrToStr "fo:border-left" as
	  , style'propertiesFo'border_right = possibleA fromAttrToStr "fo:border-right" as
	  , style'propertiesStyle'border_line_width = possibleA fromAttrToStr "style:border-line-width" as
	  , style'propertiesStyle'border_line_width_top = possibleA fromAttrToStr "style:border-line-width-top" as
	  , style'propertiesStyle'border_line_width_bottom = possibleA fromAttrToStr "style:border-line-width-bottom" as
	  , style'propertiesStyle'border_line_width_left = possibleA fromAttrToStr "style:border-line-width-left" as
	  , style'propertiesStyle'border_line_width_right = possibleA fromAttrToStr "style:border-line-width-right" as
	  , style'propertiesFo'padding = possibleA fromAttrToStr "fo:padding" as
	  , style'propertiesFo'padding_top = possibleA fromAttrToStr "fo:padding-top" as
	  , style'propertiesFo'padding_bottom = possibleA fromAttrToStr "fo:padding-bottom" as
	  , style'propertiesFo'padding_left = possibleA fromAttrToStr "fo:padding-left" as
	  , style'propertiesFo'padding_right = possibleA fromAttrToStr "fo:padding-right" as
	  , style'propertiesStyle'shadow = possibleA fromAttrToStr "style:shadow" as
	  , style'propertiesFo'keep_with_next = possibleA fromAttrToStr "fo:keep-with-next" as
	  , style'propertiesText'number_lines = defaultA fromAttrToStr "false" "text:number-lines" as
	  , style'propertiesText'line_number = possibleA fromAttrToStr "text:line-number" as
	  , style'propertiesStyle'decimal_places = possibleA fromAttrToStr "style:decimal-places" as
	  , style'propertiesStyle'tab_stop_distance = possibleA fromAttrToStr "style:tab-stop-distance" as
	  , style'propertiesText'dont_balance_text_columns = possibleA fromAttrToStr "text:dont-balance-text-columns" as
	  , style'propertiesStyle'ruby_align = possibleA fromAttrToTyp "style:ruby-align" as
	  , style'propertiesStyle'ruby_position = possibleA fromAttrToTyp "style:ruby-position" as
	  , style'propertiesStyle'width = possibleA fromAttrToStr "style:width" as
	  , style'propertiesStyle'rel_width = possibleA fromAttrToStr "style:rel-width" as
	  , style'propertiesStyle'may_break_between_rows = possibleA fromAttrToStr "style:may-break-between-rows" as
	  , style'propertiesTable'page_style_name = possibleA fromAttrToStr "table:page-style-name" as
	  , style'propertiesTable'display = possibleA fromAttrToStr "table:display" as
	  , style'propertiesStyle'column_width = possibleA fromAttrToStr "style:column-width" as
	  , style'propertiesStyle'rel_column_width = possibleA fromAttrToStr "style:rel-column-width" as
	  , style'propertiesStyle'use_optimal_column_width = possibleA fromAttrToStr "style:use-optimal-column-width" as
	  , style'propertiesStyle'row_height = possibleA fromAttrToStr "style:row-height" as
	  , style'propertiesStyle'min_row_height = possibleA fromAttrToStr "style:min-row-height" as
	  , style'propertiesStyle'use_optimal_row_height = possibleA fromAttrToStr "style:use-optimal-row-height" as
	  , style'propertiesTable'align = possibleA fromAttrToTyp "table:align" as
	  , style'propertiesTable'border_model = possibleA fromAttrToTyp "table:border-model" as
	  , style'propertiesFo'vertical_align = possibleA fromAttrToTyp "fo:vertical-align" as
	  , style'propertiesFo'direction = possibleA fromAttrToTyp "fo:direction" as
	  , style'propertiesStyle'glyph_orientation_vertical = possibleA fromAttrToTyp "style:glyph-orientation-vertical" as
	  , style'propertiesStyle'rotation_angle = possibleA fromAttrToStr "style:rotation-angle" as
	  , style'propertiesStyle'rotation_align = possibleA fromAttrToTyp "style:rotation-align" as
	  , style'propertiesStyle'cell_protect = possibleA fromAttrToStr "style:cell-protect" as
	  , style'propertiesFo'wrap_option = possibleA fromAttrToTyp "fo:wrap-option" as
	  , style'propertiesFo'page_width = possibleA fromAttrToStr "fo:page-width" as
	  , style'propertiesFo'page_height = possibleA fromAttrToStr "fo:page-height" as
	  , style'propertiesStyle'paper_tray_name = possibleA fromAttrToStr "style:paper-tray-name" as
	  , style'propertiesStyle'print_orientation = possibleA fromAttrToTyp "style:print-orientation" as
	  , style'propertiesStyle'print = possibleA fromAttrToStr "style:print" as
	  , style'propertiesStyle'print_page_order = possibleA fromAttrToTyp "style:print-page-order" as
	  , style'propertiesStyle'first_page_number = possibleA fromAttrToStr "style:first-page-number" as
	  , style'propertiesStyle'scale_to = possibleA fromAttrToStr "style:scale-to" as
	  , style'propertiesStyle'scale_to_pages = possibleA fromAttrToStr "style:scale-to-pages" as
	  , style'propertiesStyle'table_centering = possibleA fromAttrToTyp "style:table-centering" as
	  , style'propertiesStyle'footnote_max_height = possibleA fromAttrToStr "style:footnote-max-height" as
	  , style'propertiesStyle'vertical_align = possibleA fromAttrToTyp "style:vertical-align" as
	  , style'propertiesStyle'writing_mode = defaultA fromAttrToTyp Style'properties_style'writing_mode_lr_tb "style:writing-mode" as
	  , style'propertiesStyle'layout_grid_mode = possibleA fromAttrToTyp "style:layout-grid-mode" as
	  , style'propertiesStyle'layout_grid_base_height = possibleA fromAttrToStr "style:layout-grid-base-height" as
	  , style'propertiesStyle'layout_grid_ruby_height = possibleA fromAttrToStr "style:layout-grid-ruby-height" as
	  , style'propertiesStyle'layout_grid_lines = possibleA fromAttrToStr "style:layout-grid-lines" as
	  , style'propertiesStyle'layout_grid_color = possibleA fromAttrToStr "style:layout-grid-color" as
	  , style'propertiesStyle'layout_grid_ruby_below = possibleA fromAttrToStr "style:layout-grid-ruby-below" as
	  , style'propertiesStyle'layout_grid_print = possibleA fromAttrToStr "style:layout-grid-print" as
	  , style'propertiesStyle'layout_grid_display = possibleA fromAttrToStr "style:layout-grid-display" as
	  , style'propertiesStyle'snap_to_layout_grid = possibleA fromAttrToStr "style:snap-to-layout-grid" as
	  , style'propertiesDraw'stroke = possibleA fromAttrToTyp "draw:stroke" as
	  , style'propertiesDraw'stroke_dash = possibleA fromAttrToStr "draw:stroke-dash" as
	  , style'propertiesSvg'stroke_width = possibleA fromAttrToStr "svg:stroke-width" as
	  , style'propertiesSvg'stroke_color = possibleA fromAttrToStr "svg:stroke-color" as
	  , style'propertiesDraw'marker_start = possibleA fromAttrToStr "draw:marker-start" as
	  , style'propertiesDraw'marker_end = possibleA fromAttrToStr "draw:marker-end" as
	  , style'propertiesDraw'marker_start_width = possibleA fromAttrToStr "draw:marker-start-width" as
	  , style'propertiesDraw'marker_end_width = possibleA fromAttrToStr "draw:marker-end-width" as
	  , style'propertiesDraw'marker_start_center = possibleA fromAttrToStr "draw:marker-start-center" as
	  , style'propertiesDraw'marker_end_center = possibleA fromAttrToStr "draw:marker-end-center" as
	  , style'propertiesSvg'stroke_opacity = possibleA fromAttrToStr "svg:stroke-opacity" as
	  , style'propertiesSvg'stroke_linejoin = possibleA fromAttrToTyp "svg:stroke-linejoin" as
	  , style'propertiesDraw'auto_grow_width = possibleA fromAttrToStr "draw:auto-grow-width" as
	  , style'propertiesDraw'auto_grow_height = possibleA fromAttrToStr "draw:auto-grow-height" as
	  , style'propertiesDraw'fit_to_size = possibleA fromAttrToStr "draw:fit-to-size" as
	  , style'propertiesDraw'fit_to_contour = possibleA fromAttrToStr "draw:fit-to-contour" as
	  , style'propertiesDraw'textarea_horizontal_align = possibleA fromAttrToTyp "draw:textarea-horizontal-align" as
	  , style'propertiesDraw'textarea_vertical_align = possibleA fromAttrToTyp "draw:textarea-vertical-align" as
	  , style'propertiesDraw'writing_mode = defaultA fromAttrToTyp Style'properties_draw'writing_mode_lr_tb "draw:writing-mode" as
	  , style'propertiesDraw'fill = possibleA fromAttrToTyp "draw:fill" as
	  , style'propertiesDraw'fill_color = possibleA fromAttrToStr "draw:fill-color" as
	  , style'propertiesDraw'fill_gradient_name = possibleA fromAttrToStr "draw:fill-gradient-name" as
	  , style'propertiesDraw'gradient_step_count = possibleA fromAttrToStr "draw:gradient-step-count" as
	  , style'propertiesDraw'fill_hatch_name = possibleA fromAttrToStr "draw:fill-hatch-name" as
	  , style'propertiesDraw'fill_hatch_solid = possibleA fromAttrToStr "draw:fill-hatch-solid" as
	  , style'propertiesDraw'fill_image_name = possibleA fromAttrToStr "draw:fill-image-name" as
	  , style'propertiesStyle'repeat = possibleA fromAttrToTyp "style:repeat" as
	  , style'propertiesDraw'fill_image_width = possibleA fromAttrToStr "draw:fill-image-width" as
	  , style'propertiesDraw'fill_image_height = possibleA fromAttrToStr "draw:fill-image-height" as
	  , style'propertiesDraw'fill_image_ref_point_x = possibleA fromAttrToStr "draw:fill-image-ref-point-x" as
	  , style'propertiesDraw'fill_image_ref_point_y = possibleA fromAttrToStr "draw:fill-image-ref-point-y" as
	  , style'propertiesDraw'fill_image_ref_point = possibleA fromAttrToTyp "draw:fill-image-ref-point" as
	  , style'propertiesDraw'tile_repeat_offset = possibleA fromAttrToStr "draw:tile-repeat-offset" as
	  , style'propertiesDraw'transparency = possibleA fromAttrToStr "draw:transparency" as
	  , style'propertiesDraw'transparency_name = possibleA fromAttrToStr "draw:transparency-name" as
	  , style'propertiesDraw'color_mode = possibleA fromAttrToTyp "draw:color-mode" as
	  , style'propertiesDraw'luminance = possibleA fromAttrToStr "draw:luminance" as
	  , style'propertiesDraw'contrast = possibleA fromAttrToStr "draw:contrast" as
	  , style'propertiesDraw'gamma = possibleA fromAttrToStr "draw:gamma" as
	  , style'propertiesDraw'red = possibleA fromAttrToStr "draw:red" as
	  , style'propertiesDraw'green = possibleA fromAttrToStr "draw:green" as
	  , style'propertiesDraw'blue = possibleA fromAttrToStr "draw:blue" as
	  , style'propertiesDraw'color_inversion = possibleA fromAttrToStr "draw:color-inversion" as
	  , style'propertiesDraw'mirror = possibleA fromAttrToStr "draw:mirror" as
	  , style'propertiesDraw'shadow = possibleA fromAttrToTyp "draw:shadow" as
	  , style'propertiesDraw'shadow_offset_x = possibleA fromAttrToStr "draw:shadow-offset-x" as
	  , style'propertiesDraw'shadow_offset_y = possibleA fromAttrToStr "draw:shadow-offset-y" as
	  , style'propertiesDraw'shadow_color = possibleA fromAttrToStr "draw:shadow-color" as
	  , style'propertiesDraw'shadow_transparency = possibleA fromAttrToStr "draw:shadow-transparency" as
	  , style'propertiesDraw'start_line_spacing_horizontal = possibleA fromAttrToStr "draw:start-line-spacing-horizontal" as
	  , style'propertiesDraw'start_line_spacing_vertical = possibleA fromAttrToStr "draw:start-line-spacing-vertical" as
	  , style'propertiesDraw'end_line_spacing_horizontal = possibleA fromAttrToStr "draw:end-line-spacing-horizontal" as
	  , style'propertiesDraw'end_line_spacing_vertical = possibleA fromAttrToStr "draw:end-line-spacing-vertical" as
	  , style'propertiesDraw'line_distance = possibleA fromAttrToStr "draw:line-distance" as
	  , style'propertiesDraw'guide_overhang = possibleA fromAttrToStr "draw:guide-overhang" as
	  , style'propertiesDraw'guide_distance = possibleA fromAttrToStr "draw:guide-distance" as
	  , style'propertiesDraw'start_guide = possibleA fromAttrToStr "draw:start-guide" as
	  , style'propertiesDraw'end_guide = possibleA fromAttrToStr "draw:end-guide" as
	  , style'propertiesDraw'measure_align = possibleA fromAttrToTyp "draw:measure-align" as
	  , style'propertiesDraw'measure_vertical_align = possibleA fromAttrToTyp "draw:measure-vertical-align" as
	  , style'propertiesDraw'unit = possibleA fromAttrToTyp "draw:unit" as
	  , style'propertiesDraw'show_unit = possibleA fromAttrToStr "draw:show-unit" as
	  , style'propertiesDraw'placing = possibleA fromAttrToTyp "draw:placing" as
	  , style'propertiesDraw'parallel = possibleA fromAttrToStr "draw:parallel" as
	  , style'propertiesDraw'decimal_places = possibleA fromAttrToStr "draw:decimal-places" as
	  , style'propertiesDraw'frame_display_scrollbar = possibleA fromAttrToStr "draw:frame-display-scrollbar" as
	  , style'propertiesDraw'frame_display_border = possibleA fromAttrToStr "draw:frame-display-border" as
	  , style'propertiesDraw'frame_margin_horizontal = possibleA fromAttrToStr "draw:frame-margin-horizontal" as
	  , style'propertiesDraw'frame_margin_vertical = possibleA fromAttrToStr "draw:frame-margin-vertical" as
	  , style'propertiesDraw'size_protect = possibleA fromAttrToStr "draw:size-protect" as
	  , style'propertiesDraw'move_protect = possibleA fromAttrToStr "draw:move-protect" as
	  , style'propertiesDraw'visible_area_left = possibleA fromAttrToStr "draw:visible-area-left" as
	  , style'propertiesDraw'visible_area_top = possibleA fromAttrToStr "draw:visible-area-top" as
	  , style'propertiesDraw'visible_area_width = possibleA fromAttrToStr "draw:visible-area-width" as
	  , style'propertiesDraw'visible_area_height = possibleA fromAttrToStr "draw:visible-area-height" as
	  , style'propertiesDraw'fontwork_style = possibleA fromAttrToTyp "draw:fontwork-style" as
	  , style'propertiesDraw'fontwork_adjust = possibleA fromAttrToTyp "draw:fontwork-adjust" as
	  , style'propertiesDraw'fontwork_distance = possibleA fromAttrToStr "draw:fontwork-distance" as
	  , style'propertiesDraw'fontwork_start = possibleA fromAttrToStr "draw:fontwork-start" as
	  , style'propertiesDraw'fontwork_mirror = possibleA fromAttrToStr "draw:fontwork-mirror" as
	  , style'propertiesDraw'fontwork_outline = possibleA fromAttrToStr "draw:fontwork-outline" as
	  , style'propertiesDraw'fontwork_shadow = possibleA fromAttrToTyp "draw:fontwork-shadow" as
	  , style'propertiesDraw'fontwork_shadow_color = possibleA fromAttrToStr "draw:fontwork-shadow-color" as
	  , style'propertiesDraw'fontwork_shadow_offset_x = possibleA fromAttrToStr "draw:fontwork-shadow-offset-x" as
	  , style'propertiesDraw'fontwork_shadow_offset_y = possibleA fromAttrToStr "draw:fontwork-shadow-offset-y" as
	  , style'propertiesDraw'fontwork_form = possibleA fromAttrToTyp "draw:fontwork-form" as
	  , style'propertiesDraw'fontwork_hide_form = possibleA fromAttrToStr "draw:fontwork-hide-form" as
	  , style'propertiesDraw'fontwork_shadow_transparence = possibleA fromAttrToStr "draw:fontwork-shadow-transparence" as
	  , style'propertiesDraw'caption_type = possibleA fromAttrToTyp "draw:caption-type" as
	  , style'propertiesDraw'caption_angle_type = possibleA fromAttrToTyp "draw:caption-angle-type" as
	  , style'propertiesDraw'caption_angle = possibleA fromAttrToStr "draw:caption-angle" as
	  , style'propertiesDraw'caption_gap = possibleA fromAttrToStr "draw:caption-gap" as
	  , style'propertiesDraw'caption_escape_direction = possibleA fromAttrToTyp "draw:caption-escape-direction" as
	  , style'propertiesDraw'caption_escape = possibleA fromAttrToStr "draw:caption-escape" as
	  , style'propertiesDraw'caption_line_length = possibleA fromAttrToStr "draw:caption-line-length" as
	  , style'propertiesDraw'caption_fit_line_length = possibleA fromAttrToStr "draw:caption-fit-line-length" as
	  , style'propertiesPresentation'transition_type = possibleA fromAttrToTyp "presentation:transition-type" as
	  , style'propertiesPresentation'transition_style = possibleA fromAttrToTyp "presentation:transition-style" as
	  , style'propertiesPresentation'transition_speed = possibleA fromAttrToTyp "presentation:transition-speed" as
	  , style'propertiesPresentation'duration = possibleA fromAttrToStr "presentation:duration" as
	  , style'propertiesPresentation'visibility = possibleA fromAttrToTyp "presentation:visibility" as
	  , style'propertiesDraw'background_size = possibleA fromAttrToTyp "draw:background-size" as
	  , style'propertiesPresentation'background_objects_visible = possibleA fromAttrToStr "presentation:background-objects-visible" as
	  , style'propertiesPresentation'background_visible = possibleA fromAttrToStr "presentation:background-visible" as
	  , style'propertiesDr3d'horizontal_segments = possibleA fromAttrToStr "dr3d:horizontal-segments" as
	  , style'propertiesDr3d'vertical_segments = possibleA fromAttrToStr "dr3d:vertical-segments" as
	  , style'propertiesDr3d'edge_rounding = possibleA fromAttrToStr "dr3d:edge-rounding" as
	  , style'propertiesDr3d'edge_rounding_mode = possibleA fromAttrToTyp "dr3d:edge-rounding-mode" as
	  , style'propertiesDr3d'back_scale = possibleA fromAttrToStr "dr3d:back-scale" as
	  , style'propertiesDr3d'end_angle = possibleA fromAttrToStr "dr3d:end-angle" as
	  , style'propertiesDr3d'depth = possibleA fromAttrToStr "dr3d:depth" as
	  , style'propertiesDr3d'backface_culling = possibleA fromAttrToTyp "dr3d:backface-culling" as
	  , style'propertiesDr3d'lighting_mode = possibleA fromAttrToTyp "dr3d:lighting-mode" as
	  , style'propertiesDr3d'normals_kind = possibleA fromAttrToTyp "dr3d:normals-kind" as
	  , style'propertiesDr3d'normals_direction = possibleA fromAttrToTyp "dr3d:normals-direction" as
	  , style'propertiesDr3d'texture_generation_mode_x = possibleA fromAttrToTyp "dr3d:texture-generation-mode-x" as
	  , style'propertiesDr3d'texture_generation_mode_y = possibleA fromAttrToTyp "dr3d:texture-generation-mode-y" as
	  , style'propertiesDr3d'texture_kind = possibleA fromAttrToTyp "dr3d:texture-kind" as
	  , style'propertiesDr3d'texture_filter = possibleA fromAttrToTyp "dr3d:texture-filter" as
	  , style'propertiesDr3d'texture_mode = possibleA fromAttrToTyp "dr3d:texture-mode" as
	  , style'propertiesDr3d'ambient_color = possibleA fromAttrToStr "dr3d:ambient-color" as
	  , style'propertiesDr3d'emissive_color = possibleA fromAttrToStr "dr3d:emissive-color" as
	  , style'propertiesDr3d'specular_color = possibleA fromAttrToStr "dr3d:specular-color" as
	  , style'propertiesDr3d'diffuse_color = possibleA fromAttrToStr "dr3d:diffuse-color" as
	  , style'propertiesDr3d'shininess = possibleA fromAttrToStr "dr3d:shininess" as
	  , style'propertiesDr3d'shadow = possibleA fromAttrToTyp "dr3d:shadow" as
	  , style'propertiesDr3d'close_front = possibleA fromAttrToStr "dr3d:close-front" as
	  , style'propertiesDr3d'close_back = possibleA fromAttrToStr "dr3d:close-back" as
	  , style'propertiesText'space_before = possibleA fromAttrToStr "text:space-before" as
	  , style'propertiesText'min_label_width = possibleA fromAttrToStr "text:min-label-width" as
	  , style'propertiesText'min_label_distance = possibleA fromAttrToStr "text:min-label-distance" as
	  , style'propertiesText'enable_numbering = possibleA fromAttrToStr "text:enable-numbering" as
	  , style'propertiesStyle'list_style_name = possibleA fromAttrToStr "style:list-style-name" as
	  , style'propertiesChart'scale_text = defaultA fromAttrToStr "true" "chart:scale-text" as
	  , style'propertiesChart'stock_updown_bars = defaultA fromAttrToStr "false" "chart:stock-updown-bars" as
	  , style'propertiesChart'stock_with_volume = defaultA fromAttrToStr "false" "chart:stock-with-volume" as
	  , style'propertiesChart'three_dimensional = defaultA fromAttrToStr "false" "chart:three-dimensional" as
	  , style'propertiesChart'deep = defaultA fromAttrToStr "false" "chart:deep" as
	  , style'propertiesChart'lines = defaultA fromAttrToStr "false" "chart:lines" as
	  , style'propertiesChart'percentage = defaultA fromAttrToStr "false" "chart:percentage" as
	  , style'propertiesChart'solid_type = defaultA fromAttrToTyp Style'properties_chart'solid_type_cuboid "chart:solid-type" as
	  , style'propertiesChart'splines = defaultA fromAttrToStr "0" "chart:splines" as
	  , style'propertiesChart'stacked = defaultA fromAttrToStr "false" "chart:stacked" as
	  , style'propertiesChart'symbol = defaultA fromAttrToStr "-1" "chart:symbol" as
	  , style'propertiesChart'vertical = defaultA fromAttrToStr "false" "chart:vertical" as
	  , style'propertiesChart'lines_used = defaultA fromAttrToStr "0" "chart:lines-used" as
	  , style'propertiesChart'connect_bars = defaultA fromAttrToStr "false" "chart:connect-bars" as
	  , style'propertiesChart'spline_order = defaultA fromAttrToStr "2" "chart:spline-order" as
	  , style'propertiesChart'spline_resolution = defaultA fromAttrToStr "20" "chart:spline-resolution" as
	  , style'propertiesChart'pie_offset = defaultA fromAttrToStr "0" "chart:pie-offset" as
	  , style'propertiesChart'series_source = defaultA fromAttrToTyp Style'properties_chart'series_source_columns "chart:series-source" as
	  , style'propertiesChart'tick_marks_major_inner = defaultA fromAttrToStr "false" "chart:tick-marks-major-inner" as
	  , style'propertiesChart'tick_marks_major_outer = defaultA fromAttrToStr "true" "chart:tick-marks-major-outer" as
	  , style'propertiesChart'tick_marks_minor_inner = defaultA fromAttrToStr "false" "chart:tick-marks-minor-inner" as
	  , style'propertiesChart'tick_marks_minor_outer = defaultA fromAttrToStr "false" "chart:tick-marks-minor-outer" as
	  , style'propertiesChart'logarithmic = defaultA fromAttrToStr "false" "chart:logarithmic" as
	  , style'propertiesChart'maximum = possibleA fromAttrToStr "chart:maximum" as
	  , style'propertiesChart'minimum = possibleA fromAttrToStr "chart:minimum" as
	  , style'propertiesChart'origin = possibleA fromAttrToStr "chart:origin" as
	  , style'propertiesChart'interval_major = possibleA fromAttrToStr "chart:interval-major" as
	  , style'propertiesChart'interval_minor = possibleA fromAttrToStr "chart:interval-minor" as
	  , style'propertiesChart'gap_width = possibleA fromAttrToStr "chart:gap-width" as
	  , style'propertiesChart'overlap = possibleA fromAttrToStr "chart:overlap" as
	  , style'propertiesText'line_break = defaultA fromAttrToStr "true" "text:line-break" as
	  , style'propertiesChart'display_label = defaultA fromAttrToStr "true" "chart:display-label" as
	  , style'propertiesChart'label_arrangement = defaultA fromAttrToTyp Style'properties_chart'label_arrangement_side_by_side "chart:label-arrangement" as
	  , style'propertiesChart'text_overlap = defaultA fromAttrToStr "false" "chart:text-overlap" as
	  , style'propertiesChart'visible = defaultA fromAttrToStr "true" "chart:visible" as
	  , style'propertiesChart'link_data_style_to_source = defaultA fromAttrToStr "true" "chart:link-data-style-to-source" as
	  , style'propertiesChart'mean_value = possibleA fromAttrToStr "chart:mean-value" as
	  , style'propertiesChart'error_category = defaultA fromAttrToTyp Style'properties_chart'error_category_none "chart:error-category" as
	  , style'propertiesChart'error_percentage = possibleA fromAttrToStr "chart:error-percentage" as
	  , style'propertiesChart'error_margin = possibleA fromAttrToStr "chart:error-margin" as
	  , style'propertiesChart'error_lower_limit = possibleA fromAttrToStr "chart:error-lower-limit" as
	  , style'propertiesChart'error_upper_limit = possibleA fromAttrToStr "chart:error-upper-limit" as
	  , style'propertiesChart'error_upper_indicator = possibleA fromAttrToStr "chart:error-upper-indicator" as
	  , style'propertiesChart'error_lower_indicator = possibleA fromAttrToStr "chart:error-lower-indicator" as
	  , style'propertiesChart'regression_type = defaultA fromAttrToTyp Style'properties_chart'regression_type_none "chart:regression-type" as
	  , style'propertiesChart'data_label_number = defaultA fromAttrToTyp Style'properties_chart'data_label_number_none "chart:data-label-number" as
	  , style'propertiesChart'data_label_text = defaultA fromAttrToStr "false" "chart:data-label-text" as
	  , style'propertiesChart'data_label_symbol = defaultA fromAttrToStr "false" "chart:data-label-symbol" as
	  , style'propertiesText'rotation_angle = defaultA fromAttrToStr "0" "text:rotation-angle" as
	  , style'propertiesChart'symbol_width = possibleA fromAttrToStr "chart:symbol-width" as
	  , style'propertiesChart'symbol_height = possibleA fromAttrToStr "chart:symbol-height" as
	  , style'propertiesChart'symbol_image_name = possibleA fromAttrToStr "chart:symbol-image-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "style:num-prefix" (style'propertiesStyle'num_prefix v)
	, maybeToAttr toAttrFrStr "style:num-suffix" (style'propertiesStyle'num_suffix v)
	, maybeToAttr toAttrFrStr "style:num-format" (style'propertiesStyle'num_format v)
	, maybeToAttr toAttrFrStr "style:num-letter-sync" (style'propertiesStyle'num_letter_sync v)
	, maybeToAttr toAttrFrStr "fo:width" (style'propertiesFo'width v)
	, maybeToAttr toAttrFrStr "fo:height" (style'propertiesFo'height v)
	, maybeToAttr toAttrFrTyp "style:vertical-pos" (style'propertiesStyle'vertical_pos v)
	, maybeToAttr toAttrFrTyp "style:vertical-rel" (style'propertiesStyle'vertical_rel v)
	, maybeToAttr toAttrFrTyp "style:horizontal-pos" (style'propertiesStyle'horizontal_pos v)
	, maybeToAttr toAttrFrTyp "style:horizontal-rel" (style'propertiesStyle'horizontal_rel v)
	, maybeToAttr toAttrFrStr "svg:width" (style'propertiesSvg'width v)
	, maybeToAttr toAttrFrStr "svg:height" (style'propertiesSvg'height v)
	, maybeToAttr toAttrFrStr "fo:min-height" (style'propertiesFo'min_height v)
	, maybeToAttr toAttrFrStr "fo:min-width" (style'propertiesFo'min_width v)
	, maybeToAttr toAttrFrStr "fo:max-height" (style'propertiesFo'max_height v)
	, maybeToAttr toAttrFrStr "fo:max-width" (style'propertiesFo'max_width v)
	, maybeToAttr toAttrFrTyp "text:anchor-type" (style'propertiesText'anchor_type v)
	, maybeToAttr toAttrFrStr "text:anchor-page-number" (style'propertiesText'anchor_page_number v)
	, maybeToAttr toAttrFrStr "svg:x" (style'propertiesSvg'x v)
	, maybeToAttr toAttrFrStr "svg:y" (style'propertiesSvg'y v)
	, maybeToAttr toAttrFrStr "style:print-content" (style'propertiesStyle'print_content v)
	, maybeToAttr toAttrFrStr "style:protect" (style'propertiesStyle'protect v)
	, maybeToAttr toAttrFrTyp "style:wrap" (style'propertiesStyle'wrap v)
	, maybeToAttr toAttrFrStr "style:number-wrapped-paragraphs" (style'propertiesStyle'number_wrapped_paragraphs v)
	, maybeToAttr toAttrFrStr "style:wrap-contour" (style'propertiesStyle'wrap_contour v)
	, maybeToAttr toAttrFrTyp "style:wrap-contour-mode" (style'propertiesStyle'wrap_contour_mode v)
	, maybeToAttr toAttrFrTyp "style:run-through" (style'propertiesStyle'run_through v)
	, maybeToAttr toAttrFrStr "style:editable" (style'propertiesStyle'editable v)
	, maybeToAttr toAttrFrStr "style:mirror" (style'propertiesStyle'mirror v)
	, maybeToAttr toAttrFrStr "fo:clip" (style'propertiesFo'clip v)
	, maybeToAttr toAttrFrTyp "text:animation" (style'propertiesText'animation v)
	, maybeToAttr toAttrFrTyp "text:animation-direction" (style'propertiesText'animation_direction v)
	, maybeToAttr toAttrFrStr "text:animation-start-inside" (style'propertiesText'animation_start_inside v)
	, maybeToAttr toAttrFrStr "text:animation-stop-inside" (style'propertiesText'animation_stop_inside v)
	, maybeToAttr toAttrFrStr "text:animation-repeat" (style'propertiesText'animation_repeat v)
	, maybeToAttr toAttrFrStr "text:animation-delay" (style'propertiesText'animation_delay v)
	, maybeToAttr toAttrFrStr "text:animation-steps" (style'propertiesText'animation_steps v)
	, maybeToAttr toAttrFrTyp "fo:font-variant" (style'propertiesFo'font_variant v)
	, maybeToAttr toAttrFrTyp "fo:text-transform" (style'propertiesFo'text_transform v)
	, maybeToAttr toAttrFrStr "fo:color" (style'propertiesFo'color v)
	, maybeToAttr toAttrFrStr "style:use-window-font-color" (style'propertiesStyle'use_window_font_color v)
	, maybeToAttr toAttrFrStr "style:text-outline" (style'propertiesStyle'text_outline v)
	, maybeToAttr toAttrFrTyp "style:text-crossing-out" (style'propertiesStyle'text_crossing_out v)
	, maybeToAttr toAttrFrStr "style:text-position" (style'propertiesStyle'text_position v)
	, maybeToAttr toAttrFrTyp "style:text-align" (style'propertiesStyle'text_align v)
	, maybeToAttr toAttrFrStr "style:font-name" (style'propertiesStyle'font_name v)
	, maybeToAttr toAttrFrStr "fo:font-family" (style'propertiesFo'font_family v)
	, maybeToAttr toAttrFrTyp "style:font-family-generic" (style'propertiesStyle'font_family_generic v)
	, maybeToAttr toAttrFrStr "style:font-style-name" (style'propertiesStyle'font_style_name v)
	, maybeToAttr toAttrFrTyp "style:font-pitch" (style'propertiesStyle'font_pitch v)
	, maybeToAttr toAttrFrStr "style:font-charset" (style'propertiesStyle'font_charset v)
	, maybeToAttr toAttrFrStr "style:font-name-asian" (style'propertiesStyle'font_name_asian v)
	, maybeToAttr toAttrFrStr "style:font-family-asian" (style'propertiesStyle'font_family_asian v)
	, maybeToAttr toAttrFrTyp "style:font-family-generic-asian" (style'propertiesStyle'font_family_generic_asian v)
	, maybeToAttr toAttrFrStr "style:font-style-name-asian" (style'propertiesStyle'font_style_name_asian v)
	, maybeToAttr toAttrFrTyp "style:font-pitch-asian" (style'propertiesStyle'font_pitch_asian v)
	, maybeToAttr toAttrFrStr "style:font-charset-asian" (style'propertiesStyle'font_charset_asian v)
	, maybeToAttr toAttrFrStr "style:font-name-complex" (style'propertiesStyle'font_name_complex v)
	, maybeToAttr toAttrFrStr "style:font-family-complex" (style'propertiesStyle'font_family_complex v)
	, maybeToAttr toAttrFrTyp "style:font-family-generic-complex" (style'propertiesStyle'font_family_generic_complex v)
	, maybeToAttr toAttrFrStr "style:font-style-name-complex" (style'propertiesStyle'font_style_name_complex v)
	, maybeToAttr toAttrFrTyp "style:font-pitch-complex" (style'propertiesStyle'font_pitch_complex v)
	, maybeToAttr toAttrFrStr "style:font-charset-complex" (style'propertiesStyle'font_charset_complex v)
	, maybeToAttr toAttrFrStr "fo:font-size" (style'propertiesFo'font_size v)
	, maybeToAttr toAttrFrStr "style:font-size-rel" (style'propertiesStyle'font_size_rel v)
	, maybeToAttr toAttrFrStr "style:font-size-asian" (style'propertiesStyle'font_size_asian v)
	, maybeToAttr toAttrFrStr "style:font-size-rel-asian" (style'propertiesStyle'font_size_rel_asian v)
	, maybeToAttr toAttrFrStr "style:font-size-complex" (style'propertiesStyle'font_size_complex v)
	, maybeToAttr toAttrFrStr "style:font-size-rel-complex" (style'propertiesStyle'font_size_rel_complex v)
	, maybeToAttr toAttrFrStr "fo:letter-spacing" (style'propertiesFo'letter_spacing v)
	, maybeToAttr toAttrFrStr "fo:language" (style'propertiesFo'language v)
	, maybeToAttr toAttrFrStr "style:language-asian" (style'propertiesStyle'language_asian v)
	, maybeToAttr toAttrFrStr "style:language-complex" (style'propertiesStyle'language_complex v)
	, maybeToAttr toAttrFrStr "fo:country" (style'propertiesFo'country v)
	, maybeToAttr toAttrFrStr "style:country-asian" (style'propertiesStyle'country_asian v)
	, maybeToAttr toAttrFrStr "style:country-complex" (style'propertiesStyle'country_complex v)
	, maybeToAttr toAttrFrTyp "fo:font-style" (style'propertiesFo'font_style v)
	, maybeToAttr toAttrFrTyp "style:font-style-asian" (style'propertiesStyle'font_style_asian v)
	, maybeToAttr toAttrFrTyp "style:font-style-complex" (style'propertiesStyle'font_style_complex v)
	, maybeToAttr toAttrFrTyp "style:font-relief" (style'propertiesStyle'font_relief v)
	, maybeToAttr toAttrFrStr "fo:text-shadow" (style'propertiesFo'text_shadow v)
	, maybeToAttr toAttrFrTyp "style:text-underline" (style'propertiesStyle'text_underline v)
	, maybeToAttr toAttrFrTyp "style:text-autospace" (style'propertiesStyle'text_autospace v)
	, maybeToAttr toAttrFrTyp "style:punctuation-wrap" (style'propertiesStyle'punctuation_wrap v)
	, maybeToAttr toAttrFrTyp "style:line-break" (style'propertiesStyle'line_break v)
	, maybeToAttr toAttrFrStr "style:text-underline-color" (style'propertiesStyle'text_underline_color v)
	, maybeToAttr toAttrFrStr "fo:font-weight" (style'propertiesFo'font_weight v)
	, maybeToAttr toAttrFrStr "style:font-weight-asian" (style'propertiesStyle'font_weight_asian v)
	, maybeToAttr toAttrFrStr "style:font-weight-complex" (style'propertiesStyle'font_weight_complex v)
	, maybeToAttr toAttrFrStr "fo:score-spaces" (style'propertiesFo'score_spaces v)
	, maybeToAttr toAttrFrStr "style:letter-kerning" (style'propertiesStyle'letter_kerning v)
	, maybeToAttr toAttrFrStr "style:text-blinking" (style'propertiesStyle'text_blinking v)
	, maybeToAttr toAttrFrStr "style:text-background-color" (style'propertiesStyle'text_background_color v)
	, maybeToAttr toAttrFrTyp "style:text-combine" (style'propertiesStyle'text_combine v)
	, maybeToAttr toAttrFrStr "style:text-combine-start-char" (style'propertiesStyle'text_combine_start_char v)
	, maybeToAttr toAttrFrStr "style:text-combine-end-char" (style'propertiesStyle'text_combine_end_char v)
	, maybeToAttr toAttrFrStr "style:text-emphasize" (style'propertiesStyle'text_emphasize v)
	, maybeToAttr toAttrFrStr "style:text-scale" (style'propertiesStyle'text_scale v)
	, maybeToAttr toAttrFrStr "style:text-rotation-angle" (style'propertiesStyle'text_rotation_angle v)
	, maybeToAttr toAttrFrTyp "style:text-rotation-scale" (style'propertiesStyle'text_rotation_scale v)
	, maybeToAttr toAttrFrStr "fo:line-height" (style'propertiesFo'line_height v)
	, maybeToAttr toAttrFrStr "style:line-height-at-least" (style'propertiesStyle'line_height_at_least v)
	, maybeToAttr toAttrFrStr "style:line-spacing" (style'propertiesStyle'line_spacing v)
	, maybeToAttr toAttrFrTyp "fo:text-align" (style'propertiesFo'text_align v)
	, maybeToAttr toAttrFrTyp "fo:text-align-last" (style'propertiesFo'text_align_last v)
	, maybeToAttr toAttrFrTyp "style:text-align-source" (style'propertiesStyle'text_align_source v)
	, maybeToAttr toAttrFrStr "style:justify-single-word" (style'propertiesStyle'justify_single_word v)
	, maybeToAttr toAttrFrTyp "style:break-inside" (style'propertiesStyle'break_inside v)
	, maybeToAttr toAttrFrStr "fo:widows" (style'propertiesFo'widows v)
	, maybeToAttr toAttrFrStr "fo:orphans" (style'propertiesFo'orphans v)
	, maybeToAttr toAttrFrStr "fo:hyphenate" (style'propertiesFo'hyphenate v)
	, maybeToAttr toAttrFrTyp "fo:hyphenate-keep" (style'propertiesFo'hyphenate_keep v)
	, maybeToAttr toAttrFrStr "fo:hyphenation-remain-char-count" (style'propertiesFo'hyphenation_remain_char_count v)
	, maybeToAttr toAttrFrStr "fo:hyphenation-push-char-count" (style'propertiesFo'hyphenation_push_char_count v)
	, maybeToAttr toAttrFrStr "fo:hyphenation-ladder-count" (style'propertiesFo'hyphenation_ladder_count v)
	, maybeToAttr toAttrFrStr "style:page-number" (style'propertiesStyle'page_number v)
	, maybeToAttr toAttrFrStr "style:register-true" (style'propertiesStyle'register_true v)
	, maybeToAttr toAttrFrStr "style:register-truth-ref-style-name" (style'propertiesStyle'register_truth_ref_style_name v)
	, maybeToAttr toAttrFrStr "fo:margin-left" (style'propertiesFo'margin_left v)
	, maybeToAttr toAttrFrStr "fo:margin-right" (style'propertiesFo'margin_right v)
	, maybeToAttr toAttrFrStr "fo:text-indent" (style'propertiesFo'text_indent v)
	, maybeToAttr toAttrFrStr "style:auto-text-indent" (style'propertiesStyle'auto_text_indent v)
	, maybeToAttr toAttrFrStr "fo:margin-top" (style'propertiesFo'margin_top v)
	, maybeToAttr toAttrFrStr "fo:margin-bottom" (style'propertiesFo'margin_bottom v)
	, maybeToAttr toAttrFrTyp "fo:break-before" (style'propertiesFo'break_before v)
	, maybeToAttr toAttrFrTyp "fo:break-after" (style'propertiesFo'break_after v)
	, maybeToAttr toAttrFrStr "fo:background-color" (style'propertiesFo'background_color v)
	, maybeToAttr toAttrFrStr "style:background-transparency" (style'propertiesStyle'background_transparency v)
	, maybeToAttr toAttrFrStr "style:dynamic-spacing" (style'propertiesStyle'dynamic_spacing v)
	, maybeToAttr toAttrFrStr "fo:border" (style'propertiesFo'border v)
	, maybeToAttr toAttrFrStr "fo:border-top" (style'propertiesFo'border_top v)
	, maybeToAttr toAttrFrStr "fo:border-bottom" (style'propertiesFo'border_bottom v)
	, maybeToAttr toAttrFrStr "fo:border-left" (style'propertiesFo'border_left v)
	, maybeToAttr toAttrFrStr "fo:border-right" (style'propertiesFo'border_right v)
	, maybeToAttr toAttrFrStr "style:border-line-width" (style'propertiesStyle'border_line_width v)
	, maybeToAttr toAttrFrStr "style:border-line-width-top" (style'propertiesStyle'border_line_width_top v)
	, maybeToAttr toAttrFrStr "style:border-line-width-bottom" (style'propertiesStyle'border_line_width_bottom v)
	, maybeToAttr toAttrFrStr "style:border-line-width-left" (style'propertiesStyle'border_line_width_left v)
	, maybeToAttr toAttrFrStr "style:border-line-width-right" (style'propertiesStyle'border_line_width_right v)
	, maybeToAttr toAttrFrStr "fo:padding" (style'propertiesFo'padding v)
	, maybeToAttr toAttrFrStr "fo:padding-top" (style'propertiesFo'padding_top v)
	, maybeToAttr toAttrFrStr "fo:padding-bottom" (style'propertiesFo'padding_bottom v)
	, maybeToAttr toAttrFrStr "fo:padding-left" (style'propertiesFo'padding_left v)
	, maybeToAttr toAttrFrStr "fo:padding-right" (style'propertiesFo'padding_right v)
	, maybeToAttr toAttrFrStr "style:shadow" (style'propertiesStyle'shadow v)
	, maybeToAttr toAttrFrStr "fo:keep-with-next" (style'propertiesFo'keep_with_next v)
	, defaultToAttr toAttrFrStr "text:number-lines" (style'propertiesText'number_lines v)
	, maybeToAttr toAttrFrStr "text:line-number" (style'propertiesText'line_number v)
	, maybeToAttr toAttrFrStr "style:decimal-places" (style'propertiesStyle'decimal_places v)
	, maybeToAttr toAttrFrStr "style:tab-stop-distance" (style'propertiesStyle'tab_stop_distance v)
	, maybeToAttr toAttrFrStr "text:dont-balance-text-columns" (style'propertiesText'dont_balance_text_columns v)
	, maybeToAttr toAttrFrTyp "style:ruby-align" (style'propertiesStyle'ruby_align v)
	, maybeToAttr toAttrFrTyp "style:ruby-position" (style'propertiesStyle'ruby_position v)
	, maybeToAttr toAttrFrStr "style:width" (style'propertiesStyle'width v)
	, maybeToAttr toAttrFrStr "style:rel-width" (style'propertiesStyle'rel_width v)
	, maybeToAttr toAttrFrStr "style:may-break-between-rows" (style'propertiesStyle'may_break_between_rows v)
	, maybeToAttr toAttrFrStr "table:page-style-name" (style'propertiesTable'page_style_name v)
	, maybeToAttr toAttrFrStr "table:display" (style'propertiesTable'display v)
	, maybeToAttr toAttrFrStr "style:column-width" (style'propertiesStyle'column_width v)
	, maybeToAttr toAttrFrStr "style:rel-column-width" (style'propertiesStyle'rel_column_width v)
	, maybeToAttr toAttrFrStr "style:use-optimal-column-width" (style'propertiesStyle'use_optimal_column_width v)
	, maybeToAttr toAttrFrStr "style:row-height" (style'propertiesStyle'row_height v)
	, maybeToAttr toAttrFrStr "style:min-row-height" (style'propertiesStyle'min_row_height v)
	, maybeToAttr toAttrFrStr "style:use-optimal-row-height" (style'propertiesStyle'use_optimal_row_height v)
	, maybeToAttr toAttrFrTyp "table:align" (style'propertiesTable'align v)
	, maybeToAttr toAttrFrTyp "table:border-model" (style'propertiesTable'border_model v)
	, maybeToAttr toAttrFrTyp "fo:vertical-align" (style'propertiesFo'vertical_align v)
	, maybeToAttr toAttrFrTyp "fo:direction" (style'propertiesFo'direction v)
	, maybeToAttr toAttrFrTyp "style:glyph-orientation-vertical" (style'propertiesStyle'glyph_orientation_vertical v)
	, maybeToAttr toAttrFrStr "style:rotation-angle" (style'propertiesStyle'rotation_angle v)
	, maybeToAttr toAttrFrTyp "style:rotation-align" (style'propertiesStyle'rotation_align v)
	, maybeToAttr toAttrFrStr "style:cell-protect" (style'propertiesStyle'cell_protect v)
	, maybeToAttr toAttrFrTyp "fo:wrap-option" (style'propertiesFo'wrap_option v)
	, maybeToAttr toAttrFrStr "fo:page-width" (style'propertiesFo'page_width v)
	, maybeToAttr toAttrFrStr "fo:page-height" (style'propertiesFo'page_height v)
	, maybeToAttr toAttrFrStr "style:paper-tray-name" (style'propertiesStyle'paper_tray_name v)
	, maybeToAttr toAttrFrTyp "style:print-orientation" (style'propertiesStyle'print_orientation v)
	, maybeToAttr toAttrFrStr "style:print" (style'propertiesStyle'print v)
	, maybeToAttr toAttrFrTyp "style:print-page-order" (style'propertiesStyle'print_page_order v)
	, maybeToAttr toAttrFrStr "style:first-page-number" (style'propertiesStyle'first_page_number v)
	, maybeToAttr toAttrFrStr "style:scale-to" (style'propertiesStyle'scale_to v)
	, maybeToAttr toAttrFrStr "style:scale-to-pages" (style'propertiesStyle'scale_to_pages v)
	, maybeToAttr toAttrFrTyp "style:table-centering" (style'propertiesStyle'table_centering v)
	, maybeToAttr toAttrFrStr "style:footnote-max-height" (style'propertiesStyle'footnote_max_height v)
	, maybeToAttr toAttrFrTyp "style:vertical-align" (style'propertiesStyle'vertical_align v)
	, defaultToAttr toAttrFrTyp "style:writing-mode" (style'propertiesStyle'writing_mode v)
	, maybeToAttr toAttrFrTyp "style:layout-grid-mode" (style'propertiesStyle'layout_grid_mode v)
	, maybeToAttr toAttrFrStr "style:layout-grid-base-height" (style'propertiesStyle'layout_grid_base_height v)
	, maybeToAttr toAttrFrStr "style:layout-grid-ruby-height" (style'propertiesStyle'layout_grid_ruby_height v)
	, maybeToAttr toAttrFrStr "style:layout-grid-lines" (style'propertiesStyle'layout_grid_lines v)
	, maybeToAttr toAttrFrStr "style:layout-grid-color" (style'propertiesStyle'layout_grid_color v)
	, maybeToAttr toAttrFrStr "style:layout-grid-ruby-below" (style'propertiesStyle'layout_grid_ruby_below v)
	, maybeToAttr toAttrFrStr "style:layout-grid-print" (style'propertiesStyle'layout_grid_print v)
	, maybeToAttr toAttrFrStr "style:layout-grid-display" (style'propertiesStyle'layout_grid_display v)
	, maybeToAttr toAttrFrStr "style:snap-to-layout-grid" (style'propertiesStyle'snap_to_layout_grid v)
	, maybeToAttr toAttrFrTyp "draw:stroke" (style'propertiesDraw'stroke v)
	, maybeToAttr toAttrFrStr "draw:stroke-dash" (style'propertiesDraw'stroke_dash v)
	, maybeToAttr toAttrFrStr "svg:stroke-width" (style'propertiesSvg'stroke_width v)
	, maybeToAttr toAttrFrStr "svg:stroke-color" (style'propertiesSvg'stroke_color v)
	, maybeToAttr toAttrFrStr "draw:marker-start" (style'propertiesDraw'marker_start v)
	, maybeToAttr toAttrFrStr "draw:marker-end" (style'propertiesDraw'marker_end v)
	, maybeToAttr toAttrFrStr "draw:marker-start-width" (style'propertiesDraw'marker_start_width v)
	, maybeToAttr toAttrFrStr "draw:marker-end-width" (style'propertiesDraw'marker_end_width v)
	, maybeToAttr toAttrFrStr "draw:marker-start-center" (style'propertiesDraw'marker_start_center v)
	, maybeToAttr toAttrFrStr "draw:marker-end-center" (style'propertiesDraw'marker_end_center v)
	, maybeToAttr toAttrFrStr "svg:stroke-opacity" (style'propertiesSvg'stroke_opacity v)
	, maybeToAttr toAttrFrTyp "svg:stroke-linejoin" (style'propertiesSvg'stroke_linejoin v)
	, maybeToAttr toAttrFrStr "draw:auto-grow-width" (style'propertiesDraw'auto_grow_width v)
	, maybeToAttr toAttrFrStr "draw:auto-grow-height" (style'propertiesDraw'auto_grow_height v)
	, maybeToAttr toAttrFrStr "draw:fit-to-size" (style'propertiesDraw'fit_to_size v)
	, maybeToAttr toAttrFrStr "draw:fit-to-contour" (style'propertiesDraw'fit_to_contour v)
	, maybeToAttr toAttrFrTyp "draw:textarea-horizontal-align" (style'propertiesDraw'textarea_horizontal_align v)
	, maybeToAttr toAttrFrTyp "draw:textarea-vertical-align" (style'propertiesDraw'textarea_vertical_align v)
	, defaultToAttr toAttrFrTyp "draw:writing-mode" (style'propertiesDraw'writing_mode v)
	, maybeToAttr toAttrFrTyp "draw:fill" (style'propertiesDraw'fill v)
	, maybeToAttr toAttrFrStr "draw:fill-color" (style'propertiesDraw'fill_color v)
	, maybeToAttr toAttrFrStr "draw:fill-gradient-name" (style'propertiesDraw'fill_gradient_name v)
	, maybeToAttr toAttrFrStr "draw:gradient-step-count" (style'propertiesDraw'gradient_step_count v)
	, maybeToAttr toAttrFrStr "draw:fill-hatch-name" (style'propertiesDraw'fill_hatch_name v)
	, maybeToAttr toAttrFrStr "draw:fill-hatch-solid" (style'propertiesDraw'fill_hatch_solid v)
	, maybeToAttr toAttrFrStr "draw:fill-image-name" (style'propertiesDraw'fill_image_name v)
	, maybeToAttr toAttrFrTyp "style:repeat" (style'propertiesStyle'repeat v)
	, maybeToAttr toAttrFrStr "draw:fill-image-width" (style'propertiesDraw'fill_image_width v)
	, maybeToAttr toAttrFrStr "draw:fill-image-height" (style'propertiesDraw'fill_image_height v)
	, maybeToAttr toAttrFrStr "draw:fill-image-ref-point-x" (style'propertiesDraw'fill_image_ref_point_x v)
	, maybeToAttr toAttrFrStr "draw:fill-image-ref-point-y" (style'propertiesDraw'fill_image_ref_point_y v)
	, maybeToAttr toAttrFrTyp "draw:fill-image-ref-point" (style'propertiesDraw'fill_image_ref_point v)
	, maybeToAttr toAttrFrStr "draw:tile-repeat-offset" (style'propertiesDraw'tile_repeat_offset v)
	, maybeToAttr toAttrFrStr "draw:transparency" (style'propertiesDraw'transparency v)
	, maybeToAttr toAttrFrStr "draw:transparency-name" (style'propertiesDraw'transparency_name v)
	, maybeToAttr toAttrFrTyp "draw:color-mode" (style'propertiesDraw'color_mode v)
	, maybeToAttr toAttrFrStr "draw:luminance" (style'propertiesDraw'luminance v)
	, maybeToAttr toAttrFrStr "draw:contrast" (style'propertiesDraw'contrast v)
	, maybeToAttr toAttrFrStr "draw:gamma" (style'propertiesDraw'gamma v)
	, maybeToAttr toAttrFrStr "draw:red" (style'propertiesDraw'red v)
	, maybeToAttr toAttrFrStr "draw:green" (style'propertiesDraw'green v)
	, maybeToAttr toAttrFrStr "draw:blue" (style'propertiesDraw'blue v)
	, maybeToAttr toAttrFrStr "draw:color-inversion" (style'propertiesDraw'color_inversion v)
	, maybeToAttr toAttrFrStr "draw:mirror" (style'propertiesDraw'mirror v)
	, maybeToAttr toAttrFrTyp "draw:shadow" (style'propertiesDraw'shadow v)
	, maybeToAttr toAttrFrStr "draw:shadow-offset-x" (style'propertiesDraw'shadow_offset_x v)
	, maybeToAttr toAttrFrStr "draw:shadow-offset-y" (style'propertiesDraw'shadow_offset_y v)
	, maybeToAttr toAttrFrStr "draw:shadow-color" (style'propertiesDraw'shadow_color v)
	, maybeToAttr toAttrFrStr "draw:shadow-transparency" (style'propertiesDraw'shadow_transparency v)
	, maybeToAttr toAttrFrStr "draw:start-line-spacing-horizontal" (style'propertiesDraw'start_line_spacing_horizontal v)
	, maybeToAttr toAttrFrStr "draw:start-line-spacing-vertical" (style'propertiesDraw'start_line_spacing_vertical v)
	, maybeToAttr toAttrFrStr "draw:end-line-spacing-horizontal" (style'propertiesDraw'end_line_spacing_horizontal v)
	, maybeToAttr toAttrFrStr "draw:end-line-spacing-vertical" (style'propertiesDraw'end_line_spacing_vertical v)
	, maybeToAttr toAttrFrStr "draw:line-distance" (style'propertiesDraw'line_distance v)
	, maybeToAttr toAttrFrStr "draw:guide-overhang" (style'propertiesDraw'guide_overhang v)
	, maybeToAttr toAttrFrStr "draw:guide-distance" (style'propertiesDraw'guide_distance v)
	, maybeToAttr toAttrFrStr "draw:start-guide" (style'propertiesDraw'start_guide v)
	, maybeToAttr toAttrFrStr "draw:end-guide" (style'propertiesDraw'end_guide v)
	, maybeToAttr toAttrFrTyp "draw:measure-align" (style'propertiesDraw'measure_align v)
	, maybeToAttr toAttrFrTyp "draw:measure-vertical-align" (style'propertiesDraw'measure_vertical_align v)
	, maybeToAttr toAttrFrTyp "draw:unit" (style'propertiesDraw'unit v)
	, maybeToAttr toAttrFrStr "draw:show-unit" (style'propertiesDraw'show_unit v)
	, maybeToAttr toAttrFrTyp "draw:placing" (style'propertiesDraw'placing v)
	, maybeToAttr toAttrFrStr "draw:parallel" (style'propertiesDraw'parallel v)
	, maybeToAttr toAttrFrStr "draw:decimal-places" (style'propertiesDraw'decimal_places v)
	, maybeToAttr toAttrFrStr "draw:frame-display-scrollbar" (style'propertiesDraw'frame_display_scrollbar v)
	, maybeToAttr toAttrFrStr "draw:frame-display-border" (style'propertiesDraw'frame_display_border v)
	, maybeToAttr toAttrFrStr "draw:frame-margin-horizontal" (style'propertiesDraw'frame_margin_horizontal v)
	, maybeToAttr toAttrFrStr "draw:frame-margin-vertical" (style'propertiesDraw'frame_margin_vertical v)
	, maybeToAttr toAttrFrStr "draw:size-protect" (style'propertiesDraw'size_protect v)
	, maybeToAttr toAttrFrStr "draw:move-protect" (style'propertiesDraw'move_protect v)
	, maybeToAttr toAttrFrStr "draw:visible-area-left" (style'propertiesDraw'visible_area_left v)
	, maybeToAttr toAttrFrStr "draw:visible-area-top" (style'propertiesDraw'visible_area_top v)
	, maybeToAttr toAttrFrStr "draw:visible-area-width" (style'propertiesDraw'visible_area_width v)
	, maybeToAttr toAttrFrStr "draw:visible-area-height" (style'propertiesDraw'visible_area_height v)
	, maybeToAttr toAttrFrTyp "draw:fontwork-style" (style'propertiesDraw'fontwork_style v)
	, maybeToAttr toAttrFrTyp "draw:fontwork-adjust" (style'propertiesDraw'fontwork_adjust v)
	, maybeToAttr toAttrFrStr "draw:fontwork-distance" (style'propertiesDraw'fontwork_distance v)
	, maybeToAttr toAttrFrStr "draw:fontwork-start" (style'propertiesDraw'fontwork_start v)
	, maybeToAttr toAttrFrStr "draw:fontwork-mirror" (style'propertiesDraw'fontwork_mirror v)
	, maybeToAttr toAttrFrStr "draw:fontwork-outline" (style'propertiesDraw'fontwork_outline v)
	, maybeToAttr toAttrFrTyp "draw:fontwork-shadow" (style'propertiesDraw'fontwork_shadow v)
	, maybeToAttr toAttrFrStr "draw:fontwork-shadow-color" (style'propertiesDraw'fontwork_shadow_color v)
	, maybeToAttr toAttrFrStr "draw:fontwork-shadow-offset-x" (style'propertiesDraw'fontwork_shadow_offset_x v)
	, maybeToAttr toAttrFrStr "draw:fontwork-shadow-offset-y" (style'propertiesDraw'fontwork_shadow_offset_y v)
	, maybeToAttr toAttrFrTyp "draw:fontwork-form" (style'propertiesDraw'fontwork_form v)
	, maybeToAttr toAttrFrStr "draw:fontwork-hide-form" (style'propertiesDraw'fontwork_hide_form v)
	, maybeToAttr toAttrFrStr "draw:fontwork-shadow-transparence" (style'propertiesDraw'fontwork_shadow_transparence v)
	, maybeToAttr toAttrFrTyp "draw:caption-type" (style'propertiesDraw'caption_type v)
	, maybeToAttr toAttrFrTyp "draw:caption-angle-type" (style'propertiesDraw'caption_angle_type v)
	, maybeToAttr toAttrFrStr "draw:caption-angle" (style'propertiesDraw'caption_angle v)
	, maybeToAttr toAttrFrStr "draw:caption-gap" (style'propertiesDraw'caption_gap v)
	, maybeToAttr toAttrFrTyp "draw:caption-escape-direction" (style'propertiesDraw'caption_escape_direction v)
	, maybeToAttr toAttrFrStr "draw:caption-escape" (style'propertiesDraw'caption_escape v)
	, maybeToAttr toAttrFrStr "draw:caption-line-length" (style'propertiesDraw'caption_line_length v)
	, maybeToAttr toAttrFrStr "draw:caption-fit-line-length" (style'propertiesDraw'caption_fit_line_length v)
	, maybeToAttr toAttrFrTyp "presentation:transition-type" (style'propertiesPresentation'transition_type v)
	, maybeToAttr toAttrFrTyp "presentation:transition-style" (style'propertiesPresentation'transition_style v)
	, maybeToAttr toAttrFrTyp "presentation:transition-speed" (style'propertiesPresentation'transition_speed v)
	, maybeToAttr toAttrFrStr "presentation:duration" (style'propertiesPresentation'duration v)
	, maybeToAttr toAttrFrTyp "presentation:visibility" (style'propertiesPresentation'visibility v)
	, maybeToAttr toAttrFrTyp "draw:background-size" (style'propertiesDraw'background_size v)
	, maybeToAttr toAttrFrStr "presentation:background-objects-visible" (style'propertiesPresentation'background_objects_visible v)
	, maybeToAttr toAttrFrStr "presentation:background-visible" (style'propertiesPresentation'background_visible v)
	, maybeToAttr toAttrFrStr "dr3d:horizontal-segments" (style'propertiesDr3d'horizontal_segments v)
	, maybeToAttr toAttrFrStr "dr3d:vertical-segments" (style'propertiesDr3d'vertical_segments v)
	, maybeToAttr toAttrFrStr "dr3d:edge-rounding" (style'propertiesDr3d'edge_rounding v)
	, maybeToAttr toAttrFrTyp "dr3d:edge-rounding-mode" (style'propertiesDr3d'edge_rounding_mode v)
	, maybeToAttr toAttrFrStr "dr3d:back-scale" (style'propertiesDr3d'back_scale v)
	, maybeToAttr toAttrFrStr "dr3d:end-angle" (style'propertiesDr3d'end_angle v)
	, maybeToAttr toAttrFrStr "dr3d:depth" (style'propertiesDr3d'depth v)
	, maybeToAttr toAttrFrTyp "dr3d:backface-culling" (style'propertiesDr3d'backface_culling v)
	, maybeToAttr toAttrFrTyp "dr3d:lighting-mode" (style'propertiesDr3d'lighting_mode v)
	, maybeToAttr toAttrFrTyp "dr3d:normals-kind" (style'propertiesDr3d'normals_kind v)
	, maybeToAttr toAttrFrTyp "dr3d:normals-direction" (style'propertiesDr3d'normals_direction v)
	, maybeToAttr toAttrFrTyp "dr3d:texture-generation-mode-x" (style'propertiesDr3d'texture_generation_mode_x v)
	, maybeToAttr toAttrFrTyp "dr3d:texture-generation-mode-y" (style'propertiesDr3d'texture_generation_mode_y v)
	, maybeToAttr toAttrFrTyp "dr3d:texture-kind" (style'propertiesDr3d'texture_kind v)
	, maybeToAttr toAttrFrTyp "dr3d:texture-filter" (style'propertiesDr3d'texture_filter v)
	, maybeToAttr toAttrFrTyp "dr3d:texture-mode" (style'propertiesDr3d'texture_mode v)
	, maybeToAttr toAttrFrStr "dr3d:ambient-color" (style'propertiesDr3d'ambient_color v)
	, maybeToAttr toAttrFrStr "dr3d:emissive-color" (style'propertiesDr3d'emissive_color v)
	, maybeToAttr toAttrFrStr "dr3d:specular-color" (style'propertiesDr3d'specular_color v)
	, maybeToAttr toAttrFrStr "dr3d:diffuse-color" (style'propertiesDr3d'diffuse_color v)
	, maybeToAttr toAttrFrStr "dr3d:shininess" (style'propertiesDr3d'shininess v)
	, maybeToAttr toAttrFrTyp "dr3d:shadow" (style'propertiesDr3d'shadow v)
	, maybeToAttr toAttrFrStr "dr3d:close-front" (style'propertiesDr3d'close_front v)
	, maybeToAttr toAttrFrStr "dr3d:close-back" (style'propertiesDr3d'close_back v)
	, maybeToAttr toAttrFrStr "text:space-before" (style'propertiesText'space_before v)
	, maybeToAttr toAttrFrStr "text:min-label-width" (style'propertiesText'min_label_width v)
	, maybeToAttr toAttrFrStr "text:min-label-distance" (style'propertiesText'min_label_distance v)
	, maybeToAttr toAttrFrStr "text:enable-numbering" (style'propertiesText'enable_numbering v)
	, maybeToAttr toAttrFrStr "style:list-style-name" (style'propertiesStyle'list_style_name v)
	, defaultToAttr toAttrFrStr "chart:scale-text" (style'propertiesChart'scale_text v)
	, defaultToAttr toAttrFrStr "chart:stock-updown-bars" (style'propertiesChart'stock_updown_bars v)
	, defaultToAttr toAttrFrStr "chart:stock-with-volume" (style'propertiesChart'stock_with_volume v)
	, defaultToAttr toAttrFrStr "chart:three-dimensional" (style'propertiesChart'three_dimensional v)
	, defaultToAttr toAttrFrStr "chart:deep" (style'propertiesChart'deep v)
	, defaultToAttr toAttrFrStr "chart:lines" (style'propertiesChart'lines v)
	, defaultToAttr toAttrFrStr "chart:percentage" (style'propertiesChart'percentage v)
	, defaultToAttr toAttrFrTyp "chart:solid-type" (style'propertiesChart'solid_type v)
	, defaultToAttr toAttrFrStr "chart:splines" (style'propertiesChart'splines v)
	, defaultToAttr toAttrFrStr "chart:stacked" (style'propertiesChart'stacked v)
	, defaultToAttr toAttrFrStr "chart:symbol" (style'propertiesChart'symbol v)
	, defaultToAttr toAttrFrStr "chart:vertical" (style'propertiesChart'vertical v)
	, defaultToAttr toAttrFrStr "chart:lines-used" (style'propertiesChart'lines_used v)
	, defaultToAttr toAttrFrStr "chart:connect-bars" (style'propertiesChart'connect_bars v)
	, defaultToAttr toAttrFrStr "chart:spline-order" (style'propertiesChart'spline_order v)
	, defaultToAttr toAttrFrStr "chart:spline-resolution" (style'propertiesChart'spline_resolution v)
	, defaultToAttr toAttrFrStr "chart:pie-offset" (style'propertiesChart'pie_offset v)
	, defaultToAttr toAttrFrTyp "chart:series-source" (style'propertiesChart'series_source v)
	, defaultToAttr toAttrFrStr "chart:tick-marks-major-inner" (style'propertiesChart'tick_marks_major_inner v)
	, defaultToAttr toAttrFrStr "chart:tick-marks-major-outer" (style'propertiesChart'tick_marks_major_outer v)
	, defaultToAttr toAttrFrStr "chart:tick-marks-minor-inner" (style'propertiesChart'tick_marks_minor_inner v)
	, defaultToAttr toAttrFrStr "chart:tick-marks-minor-outer" (style'propertiesChart'tick_marks_minor_outer v)
	, defaultToAttr toAttrFrStr "chart:logarithmic" (style'propertiesChart'logarithmic v)
	, maybeToAttr toAttrFrStr "chart:maximum" (style'propertiesChart'maximum v)
	, maybeToAttr toAttrFrStr "chart:minimum" (style'propertiesChart'minimum v)
	, maybeToAttr toAttrFrStr "chart:origin" (style'propertiesChart'origin v)
	, maybeToAttr toAttrFrStr "chart:interval-major" (style'propertiesChart'interval_major v)
	, maybeToAttr toAttrFrStr "chart:interval-minor" (style'propertiesChart'interval_minor v)
	, maybeToAttr toAttrFrStr "chart:gap-width" (style'propertiesChart'gap_width v)
	, maybeToAttr toAttrFrStr "chart:overlap" (style'propertiesChart'overlap v)
	, defaultToAttr toAttrFrStr "text:line-break" (style'propertiesText'line_break v)
	, defaultToAttr toAttrFrStr "chart:display-label" (style'propertiesChart'display_label v)
	, defaultToAttr toAttrFrTyp "chart:label-arrangement" (style'propertiesChart'label_arrangement v)
	, defaultToAttr toAttrFrStr "chart:text-overlap" (style'propertiesChart'text_overlap v)
	, defaultToAttr toAttrFrStr "chart:visible" (style'propertiesChart'visible v)
	, defaultToAttr toAttrFrStr "chart:link-data-style-to-source" (style'propertiesChart'link_data_style_to_source v)
	, maybeToAttr toAttrFrStr "chart:mean-value" (style'propertiesChart'mean_value v)
	, defaultToAttr toAttrFrTyp "chart:error-category" (style'propertiesChart'error_category v)
	, maybeToAttr toAttrFrStr "chart:error-percentage" (style'propertiesChart'error_percentage v)
	, maybeToAttr toAttrFrStr "chart:error-margin" (style'propertiesChart'error_margin v)
	, maybeToAttr toAttrFrStr "chart:error-lower-limit" (style'propertiesChart'error_lower_limit v)
	, maybeToAttr toAttrFrStr "chart:error-upper-limit" (style'propertiesChart'error_upper_limit v)
	, maybeToAttr toAttrFrStr "chart:error-upper-indicator" (style'propertiesChart'error_upper_indicator v)
	, maybeToAttr toAttrFrStr "chart:error-lower-indicator" (style'propertiesChart'error_lower_indicator v)
	, defaultToAttr toAttrFrTyp "chart:regression-type" (style'propertiesChart'regression_type v)
	, defaultToAttr toAttrFrTyp "chart:data-label-number" (style'propertiesChart'data_label_number v)
	, defaultToAttr toAttrFrStr "chart:data-label-text" (style'propertiesChart'data_label_text v)
	, defaultToAttr toAttrFrStr "chart:data-label-symbol" (style'propertiesChart'data_label_symbol v)
	, defaultToAttr toAttrFrStr "text:rotation-angle" (style'propertiesText'rotation_angle v)
	, maybeToAttr toAttrFrStr "chart:symbol-width" (style'propertiesChart'symbol_width v)
	, maybeToAttr toAttrFrStr "chart:symbol-height" (style'propertiesChart'symbol_height v)
	, maybeToAttr toAttrFrStr "chart:symbol-image-name" (style'propertiesChart'symbol_image_name v)
	]
instance XmlAttrType Style'properties_style'vertical_pos where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "top" = Just Style'properties_style'vertical_pos_top
	    translate "middle" = Just Style'properties_style'vertical_pos_middle
	    translate "bottom" = Just Style'properties_style'vertical_pos_bottom
	    translate "from-top" = Just Style'properties_style'vertical_pos_from_top
	    translate "below" = Just Style'properties_style'vertical_pos_below
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'vertical_pos_top = Just (n, str2attr "top")
    toAttrFrTyp n Style'properties_style'vertical_pos_middle = Just (n, str2attr "middle")
    toAttrFrTyp n Style'properties_style'vertical_pos_bottom = Just (n, str2attr "bottom")
    toAttrFrTyp n Style'properties_style'vertical_pos_from_top = Just (n, str2attr "from-top")
    toAttrFrTyp n Style'properties_style'vertical_pos_below = Just (n, str2attr "below")
instance XmlAttrType Style'properties_style'vertical_rel where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "page" = Just Style'properties_style'vertical_rel_page
	    translate "page-content" = Just Style'properties_style'vertical_rel_page_content
	    translate "frame" = Just Style'properties_style'vertical_rel_frame
	    translate "frame-content" = Just Style'properties_style'vertical_rel_frame_content
	    translate "paragraph" = Just Style'properties_style'vertical_rel_paragraph
	    translate "paragraph-content" = Just Style'properties_style'vertical_rel_paragraph_content
	    translate "char" = Just Style'properties_style'vertical_rel_char
	    translate "line" = Just Style'properties_style'vertical_rel_line
	    translate "baseline" = Just Style'properties_style'vertical_rel_baseline
	    translate "text" = Just Style'properties_style'vertical_rel_text
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'vertical_rel_page = Just (n, str2attr "page")
    toAttrFrTyp n Style'properties_style'vertical_rel_page_content = Just (n, str2attr "page-content")
    toAttrFrTyp n Style'properties_style'vertical_rel_frame = Just (n, str2attr "frame")
    toAttrFrTyp n Style'properties_style'vertical_rel_frame_content = Just (n, str2attr "frame-content")
    toAttrFrTyp n Style'properties_style'vertical_rel_paragraph = Just (n, str2attr "paragraph")
    toAttrFrTyp n Style'properties_style'vertical_rel_paragraph_content = Just (n, str2attr "paragraph-content")
    toAttrFrTyp n Style'properties_style'vertical_rel_char = Just (n, str2attr "char")
    toAttrFrTyp n Style'properties_style'vertical_rel_line = Just (n, str2attr "line")
    toAttrFrTyp n Style'properties_style'vertical_rel_baseline = Just (n, str2attr "baseline")
    toAttrFrTyp n Style'properties_style'vertical_rel_text = Just (n, str2attr "text")
instance XmlAttrType Style'properties_style'horizontal_pos where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "left" = Just Style'properties_style'horizontal_pos_left
	    translate "center" = Just Style'properties_style'horizontal_pos_center
	    translate "right" = Just Style'properties_style'horizontal_pos_right
	    translate "from-left" = Just Style'properties_style'horizontal_pos_from_left
	    translate "inside" = Just Style'properties_style'horizontal_pos_inside
	    translate "outside" = Just Style'properties_style'horizontal_pos_outside
	    translate "from-inside" = Just Style'properties_style'horizontal_pos_from_inside
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'horizontal_pos_left = Just (n, str2attr "left")
    toAttrFrTyp n Style'properties_style'horizontal_pos_center = Just (n, str2attr "center")
    toAttrFrTyp n Style'properties_style'horizontal_pos_right = Just (n, str2attr "right")
    toAttrFrTyp n Style'properties_style'horizontal_pos_from_left = Just (n, str2attr "from-left")
    toAttrFrTyp n Style'properties_style'horizontal_pos_inside = Just (n, str2attr "inside")
    toAttrFrTyp n Style'properties_style'horizontal_pos_outside = Just (n, str2attr "outside")
    toAttrFrTyp n Style'properties_style'horizontal_pos_from_inside = Just (n, str2attr "from-inside")
instance XmlAttrType Style'properties_style'horizontal_rel where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "page" = Just Style'properties_style'horizontal_rel_page
	    translate "page-content" = Just Style'properties_style'horizontal_rel_page_content
	    translate "page-start-margin" = Just Style'properties_style'horizontal_rel_page_start_margin
	    translate "page-end-margin" = Just Style'properties_style'horizontal_rel_page_end_margin
	    translate "frame" = Just Style'properties_style'horizontal_rel_frame
	    translate "frame-content" = Just Style'properties_style'horizontal_rel_frame_content
	    translate "frame-start-margin" = Just Style'properties_style'horizontal_rel_frame_start_margin
	    translate "frame-end-margin" = Just Style'properties_style'horizontal_rel_frame_end_margin
	    translate "paragraph" = Just Style'properties_style'horizontal_rel_paragraph
	    translate "paragraph-content" = Just Style'properties_style'horizontal_rel_paragraph_content
	    translate "paragraph-start-margin" = Just Style'properties_style'horizontal_rel_paragraph_start_margin
	    translate "paragraph-end-margin" = Just Style'properties_style'horizontal_rel_paragraph_end_margin
	    translate "char" = Just Style'properties_style'horizontal_rel_char
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'horizontal_rel_page = Just (n, str2attr "page")
    toAttrFrTyp n Style'properties_style'horizontal_rel_page_content = Just (n, str2attr "page-content")
    toAttrFrTyp n Style'properties_style'horizontal_rel_page_start_margin = Just (n, str2attr "page-start-margin")
    toAttrFrTyp n Style'properties_style'horizontal_rel_page_end_margin = Just (n, str2attr "page-end-margin")
    toAttrFrTyp n Style'properties_style'horizontal_rel_frame = Just (n, str2attr "frame")
    toAttrFrTyp n Style'properties_style'horizontal_rel_frame_content = Just (n, str2attr "frame-content")
    toAttrFrTyp n Style'properties_style'horizontal_rel_frame_start_margin = Just (n, str2attr "frame-start-margin")
    toAttrFrTyp n Style'properties_style'horizontal_rel_frame_end_margin = Just (n, str2attr "frame-end-margin")
    toAttrFrTyp n Style'properties_style'horizontal_rel_paragraph = Just (n, str2attr "paragraph")
    toAttrFrTyp n Style'properties_style'horizontal_rel_paragraph_content = Just (n, str2attr "paragraph-content")
    toAttrFrTyp n Style'properties_style'horizontal_rel_paragraph_start_margin = Just (n, str2attr "paragraph-start-margin")
    toAttrFrTyp n Style'properties_style'horizontal_rel_paragraph_end_margin = Just (n, str2attr "paragraph-end-margin")
    toAttrFrTyp n Style'properties_style'horizontal_rel_char = Just (n, str2attr "char")
instance XmlAttrType Style'properties_text'anchor_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "page" = Just Style'properties_text'anchor_type_page
	    translate "frame" = Just Style'properties_text'anchor_type_frame
	    translate "paragraph" = Just Style'properties_text'anchor_type_paragraph
	    translate "char" = Just Style'properties_text'anchor_type_char
	    translate "as-char" = Just Style'properties_text'anchor_type_as_char
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_text'anchor_type_page = Just (n, str2attr "page")
    toAttrFrTyp n Style'properties_text'anchor_type_frame = Just (n, str2attr "frame")
    toAttrFrTyp n Style'properties_text'anchor_type_paragraph = Just (n, str2attr "paragraph")
    toAttrFrTyp n Style'properties_text'anchor_type_char = Just (n, str2attr "char")
    toAttrFrTyp n Style'properties_text'anchor_type_as_char = Just (n, str2attr "as-char")
instance XmlAttrType Style'properties_style'wrap where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Style'properties_style'wrap_none
	    translate "left" = Just Style'properties_style'wrap_left
	    translate "right" = Just Style'properties_style'wrap_right
	    translate "parallel" = Just Style'properties_style'wrap_parallel
	    translate "dynamic" = Just Style'properties_style'wrap_dynamic
	    translate "run-through" = Just Style'properties_style'wrap_run_through
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'wrap_none = Just (n, str2attr "none")
    toAttrFrTyp n Style'properties_style'wrap_left = Just (n, str2attr "left")
    toAttrFrTyp n Style'properties_style'wrap_right = Just (n, str2attr "right")
    toAttrFrTyp n Style'properties_style'wrap_parallel = Just (n, str2attr "parallel")
    toAttrFrTyp n Style'properties_style'wrap_dynamic = Just (n, str2attr "dynamic")
    toAttrFrTyp n Style'properties_style'wrap_run_through = Just (n, str2attr "run-through")
instance XmlAttrType Style'properties_style'wrap_contour_mode where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "full" = Just Style'properties_style'wrap_contour_mode_full
	    translate "outside" = Just Style'properties_style'wrap_contour_mode_outside
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'wrap_contour_mode_full = Just (n, str2attr "full")
    toAttrFrTyp n Style'properties_style'wrap_contour_mode_outside = Just (n, str2attr "outside")
instance XmlAttrType Style'properties_style'run_through where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "foreground" = Just Style'properties_style'run_through_foreground
	    translate "background" = Just Style'properties_style'run_through_background
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'run_through_foreground = Just (n, str2attr "foreground")
    toAttrFrTyp n Style'properties_style'run_through_background = Just (n, str2attr "background")
instance XmlAttrType Style'properties_text'animation where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Style'properties_text'animation_none
	    translate "scroll" = Just Style'properties_text'animation_scroll
	    translate "alternate" = Just Style'properties_text'animation_alternate
	    translate "slide" = Just Style'properties_text'animation_slide
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_text'animation_none = Just (n, str2attr "none")
    toAttrFrTyp n Style'properties_text'animation_scroll = Just (n, str2attr "scroll")
    toAttrFrTyp n Style'properties_text'animation_alternate = Just (n, str2attr "alternate")
    toAttrFrTyp n Style'properties_text'animation_slide = Just (n, str2attr "slide")
instance XmlAttrType Style'properties_text'animation_direction where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "left" = Just Style'properties_text'animation_direction_left
	    translate "right" = Just Style'properties_text'animation_direction_right
	    translate "up" = Just Style'properties_text'animation_direction_up
	    translate "down" = Just Style'properties_text'animation_direction_down
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_text'animation_direction_left = Just (n, str2attr "left")
    toAttrFrTyp n Style'properties_text'animation_direction_right = Just (n, str2attr "right")
    toAttrFrTyp n Style'properties_text'animation_direction_up = Just (n, str2attr "up")
    toAttrFrTyp n Style'properties_text'animation_direction_down = Just (n, str2attr "down")
instance XmlAttrType Style'properties_fo'font_variant where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "normal" = Just Style'properties_fo'font_variant_normal
	    translate "small-caps" = Just Style'properties_fo'font_variant_small_caps
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_fo'font_variant_normal = Just (n, str2attr "normal")
    toAttrFrTyp n Style'properties_fo'font_variant_small_caps = Just (n, str2attr "small-caps")
instance XmlAttrType Style'properties_fo'text_transform where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Style'properties_fo'text_transform_none
	    translate "lowercase" = Just Style'properties_fo'text_transform_lowercase
	    translate "uppercase" = Just Style'properties_fo'text_transform_uppercase
	    translate "capitalize" = Just Style'properties_fo'text_transform_capitalize
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_fo'text_transform_none = Just (n, str2attr "none")
    toAttrFrTyp n Style'properties_fo'text_transform_lowercase = Just (n, str2attr "lowercase")
    toAttrFrTyp n Style'properties_fo'text_transform_uppercase = Just (n, str2attr "uppercase")
    toAttrFrTyp n Style'properties_fo'text_transform_capitalize = Just (n, str2attr "capitalize")
instance XmlAttrType Style'properties_style'text_crossing_out where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Style'properties_style'text_crossing_out_none
	    translate "single-line" = Just Style'properties_style'text_crossing_out_single_line
	    translate "double-line" = Just Style'properties_style'text_crossing_out_double_line
	    translate "thick-line" = Just Style'properties_style'text_crossing_out_thick_line
	    translate "slash" = Just Style'properties_style'text_crossing_out_slash
	    translate "X" = Just Style'properties_style'text_crossing_out_X
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'text_crossing_out_none = Just (n, str2attr "none")
    toAttrFrTyp n Style'properties_style'text_crossing_out_single_line = Just (n, str2attr "single-line")
    toAttrFrTyp n Style'properties_style'text_crossing_out_double_line = Just (n, str2attr "double-line")
    toAttrFrTyp n Style'properties_style'text_crossing_out_thick_line = Just (n, str2attr "thick-line")
    toAttrFrTyp n Style'properties_style'text_crossing_out_slash = Just (n, str2attr "slash")
    toAttrFrTyp n Style'properties_style'text_crossing_out_X = Just (n, str2attr "X")
instance XmlAttrType Style'properties_style'text_align where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "left" = Just Style'properties_style'text_align_left
	    translate "right" = Just Style'properties_style'text_align_right
	    translate "start" = Just Style'properties_style'text_align_start
	    translate "center" = Just Style'properties_style'text_align_center
	    translate "end" = Just Style'properties_style'text_align_end
	    translate "justify" = Just Style'properties_style'text_align_justify
	    translate "justified" = Just Style'properties_style'text_align_justified
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'text_align_left = Just (n, str2attr "left")
    toAttrFrTyp n Style'properties_style'text_align_right = Just (n, str2attr "right")
    toAttrFrTyp n Style'properties_style'text_align_start = Just (n, str2attr "start")
    toAttrFrTyp n Style'properties_style'text_align_center = Just (n, str2attr "center")
    toAttrFrTyp n Style'properties_style'text_align_end = Just (n, str2attr "end")
    toAttrFrTyp n Style'properties_style'text_align_justify = Just (n, str2attr "justify")
    toAttrFrTyp n Style'properties_style'text_align_justified = Just (n, str2attr "justified")
instance XmlAttrType Style'properties_style'font_family_generic where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "roman" = Just Style'properties_style'font_family_generic_roman
	    translate "swiss" = Just Style'properties_style'font_family_generic_swiss
	    translate "modern" = Just Style'properties_style'font_family_generic_modern
	    translate "decorative" = Just Style'properties_style'font_family_generic_decorative
	    translate "script" = Just Style'properties_style'font_family_generic_script
	    translate "system" = Just Style'properties_style'font_family_generic_system
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'font_family_generic_roman = Just (n, str2attr "roman")
    toAttrFrTyp n Style'properties_style'font_family_generic_swiss = Just (n, str2attr "swiss")
    toAttrFrTyp n Style'properties_style'font_family_generic_modern = Just (n, str2attr "modern")
    toAttrFrTyp n Style'properties_style'font_family_generic_decorative = Just (n, str2attr "decorative")
    toAttrFrTyp n Style'properties_style'font_family_generic_script = Just (n, str2attr "script")
    toAttrFrTyp n Style'properties_style'font_family_generic_system = Just (n, str2attr "system")
instance XmlAttrType Style'properties_style'font_pitch where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "fixed" = Just Style'properties_style'font_pitch_fixed
	    translate "variable" = Just Style'properties_style'font_pitch_variable
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'font_pitch_fixed = Just (n, str2attr "fixed")
    toAttrFrTyp n Style'properties_style'font_pitch_variable = Just (n, str2attr "variable")
instance XmlAttrType Style'properties_style'font_family_generic_asian where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "roman" = Just Style'properties_style'font_family_generic_asian_roman
	    translate "swiss" = Just Style'properties_style'font_family_generic_asian_swiss
	    translate "modern" = Just Style'properties_style'font_family_generic_asian_modern
	    translate "decorative" = Just Style'properties_style'font_family_generic_asian_decorative
	    translate "script" = Just Style'properties_style'font_family_generic_asian_script
	    translate "system" = Just Style'properties_style'font_family_generic_asian_system
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'font_family_generic_asian_roman = Just (n, str2attr "roman")
    toAttrFrTyp n Style'properties_style'font_family_generic_asian_swiss = Just (n, str2attr "swiss")
    toAttrFrTyp n Style'properties_style'font_family_generic_asian_modern = Just (n, str2attr "modern")
    toAttrFrTyp n Style'properties_style'font_family_generic_asian_decorative = Just (n, str2attr "decorative")
    toAttrFrTyp n Style'properties_style'font_family_generic_asian_script = Just (n, str2attr "script")
    toAttrFrTyp n Style'properties_style'font_family_generic_asian_system = Just (n, str2attr "system")
instance XmlAttrType Style'properties_style'font_pitch_asian where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "fixed" = Just Style'properties_style'font_pitch_asian_fixed
	    translate "variable" = Just Style'properties_style'font_pitch_asian_variable
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'font_pitch_asian_fixed = Just (n, str2attr "fixed")
    toAttrFrTyp n Style'properties_style'font_pitch_asian_variable = Just (n, str2attr "variable")
instance XmlAttrType Style'properties_style'font_family_generic_complex where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "roman" = Just Style'properties_style'font_family_generic_complex_roman
	    translate "swiss" = Just Style'properties_style'font_family_generic_complex_swiss
	    translate "modern" = Just Style'properties_style'font_family_generic_complex_modern
	    translate "decorative" = Just Style'properties_style'font_family_generic_complex_decorative
	    translate "script" = Just Style'properties_style'font_family_generic_complex_script
	    translate "system" = Just Style'properties_style'font_family_generic_complex_system
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'font_family_generic_complex_roman = Just (n, str2attr "roman")
    toAttrFrTyp n Style'properties_style'font_family_generic_complex_swiss = Just (n, str2attr "swiss")
    toAttrFrTyp n Style'properties_style'font_family_generic_complex_modern = Just (n, str2attr "modern")
    toAttrFrTyp n Style'properties_style'font_family_generic_complex_decorative = Just (n, str2attr "decorative")
    toAttrFrTyp n Style'properties_style'font_family_generic_complex_script = Just (n, str2attr "script")
    toAttrFrTyp n Style'properties_style'font_family_generic_complex_system = Just (n, str2attr "system")
instance XmlAttrType Style'properties_style'font_pitch_complex where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "fixed" = Just Style'properties_style'font_pitch_complex_fixed
	    translate "variable" = Just Style'properties_style'font_pitch_complex_variable
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'font_pitch_complex_fixed = Just (n, str2attr "fixed")
    toAttrFrTyp n Style'properties_style'font_pitch_complex_variable = Just (n, str2attr "variable")
instance XmlAttrType Style'properties_fo'font_style where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "normal" = Just Style'properties_fo'font_style_normal
	    translate "italic" = Just Style'properties_fo'font_style_italic
	    translate "oblique" = Just Style'properties_fo'font_style_oblique
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_fo'font_style_normal = Just (n, str2attr "normal")
    toAttrFrTyp n Style'properties_fo'font_style_italic = Just (n, str2attr "italic")
    toAttrFrTyp n Style'properties_fo'font_style_oblique = Just (n, str2attr "oblique")
instance XmlAttrType Style'properties_style'font_style_asian where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "normal" = Just Style'properties_style'font_style_asian_normal
	    translate "italic" = Just Style'properties_style'font_style_asian_italic
	    translate "oblique" = Just Style'properties_style'font_style_asian_oblique
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'font_style_asian_normal = Just (n, str2attr "normal")
    toAttrFrTyp n Style'properties_style'font_style_asian_italic = Just (n, str2attr "italic")
    toAttrFrTyp n Style'properties_style'font_style_asian_oblique = Just (n, str2attr "oblique")
instance XmlAttrType Style'properties_style'font_style_complex where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "normal" = Just Style'properties_style'font_style_complex_normal
	    translate "italic" = Just Style'properties_style'font_style_complex_italic
	    translate "oblique" = Just Style'properties_style'font_style_complex_oblique
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'font_style_complex_normal = Just (n, str2attr "normal")
    toAttrFrTyp n Style'properties_style'font_style_complex_italic = Just (n, str2attr "italic")
    toAttrFrTyp n Style'properties_style'font_style_complex_oblique = Just (n, str2attr "oblique")
instance XmlAttrType Style'properties_style'font_relief where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Style'properties_style'font_relief_none
	    translate "embossed" = Just Style'properties_style'font_relief_embossed
	    translate "engraved" = Just Style'properties_style'font_relief_engraved
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'font_relief_none = Just (n, str2attr "none")
    toAttrFrTyp n Style'properties_style'font_relief_embossed = Just (n, str2attr "embossed")
    toAttrFrTyp n Style'properties_style'font_relief_engraved = Just (n, str2attr "engraved")
instance XmlAttrType Style'properties_style'text_underline where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Style'properties_style'text_underline_none
	    translate "single" = Just Style'properties_style'text_underline_single
	    translate "double" = Just Style'properties_style'text_underline_double
	    translate "dotted" = Just Style'properties_style'text_underline_dotted
	    translate "dash" = Just Style'properties_style'text_underline_dash
	    translate "long-dash" = Just Style'properties_style'text_underline_long_dash
	    translate "dot-dash" = Just Style'properties_style'text_underline_dot_dash
	    translate "dot-dot-dash" = Just Style'properties_style'text_underline_dot_dot_dash
	    translate "wave" = Just Style'properties_style'text_underline_wave
	    translate "bold" = Just Style'properties_style'text_underline_bold
	    translate "bold-dotted" = Just Style'properties_style'text_underline_bold_dotted
	    translate "bold-dash" = Just Style'properties_style'text_underline_bold_dash
	    translate "bold-long-dash" = Just Style'properties_style'text_underline_bold_long_dash
	    translate "bold-dot-dash" = Just Style'properties_style'text_underline_bold_dot_dash
	    translate "bold-dot-dot-dash" = Just Style'properties_style'text_underline_bold_dot_dot_dash
	    translate "bold-wave" = Just Style'properties_style'text_underline_bold_wave
	    translate "double-wave" = Just Style'properties_style'text_underline_double_wave
	    translate "small-wave" = Just Style'properties_style'text_underline_small_wave
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'text_underline_none = Just (n, str2attr "none")
    toAttrFrTyp n Style'properties_style'text_underline_single = Just (n, str2attr "single")
    toAttrFrTyp n Style'properties_style'text_underline_double = Just (n, str2attr "double")
    toAttrFrTyp n Style'properties_style'text_underline_dotted = Just (n, str2attr "dotted")
    toAttrFrTyp n Style'properties_style'text_underline_dash = Just (n, str2attr "dash")
    toAttrFrTyp n Style'properties_style'text_underline_long_dash = Just (n, str2attr "long-dash")
    toAttrFrTyp n Style'properties_style'text_underline_dot_dash = Just (n, str2attr "dot-dash")
    toAttrFrTyp n Style'properties_style'text_underline_dot_dot_dash = Just (n, str2attr "dot-dot-dash")
    toAttrFrTyp n Style'properties_style'text_underline_wave = Just (n, str2attr "wave")
    toAttrFrTyp n Style'properties_style'text_underline_bold = Just (n, str2attr "bold")
    toAttrFrTyp n Style'properties_style'text_underline_bold_dotted = Just (n, str2attr "bold-dotted")
    toAttrFrTyp n Style'properties_style'text_underline_bold_dash = Just (n, str2attr "bold-dash")
    toAttrFrTyp n Style'properties_style'text_underline_bold_long_dash = Just (n, str2attr "bold-long-dash")
    toAttrFrTyp n Style'properties_style'text_underline_bold_dot_dash = Just (n, str2attr "bold-dot-dash")
    toAttrFrTyp n Style'properties_style'text_underline_bold_dot_dot_dash = Just (n, str2attr "bold-dot-dot-dash")
    toAttrFrTyp n Style'properties_style'text_underline_bold_wave = Just (n, str2attr "bold-wave")
    toAttrFrTyp n Style'properties_style'text_underline_double_wave = Just (n, str2attr "double-wave")
    toAttrFrTyp n Style'properties_style'text_underline_small_wave = Just (n, str2attr "small-wave")
instance XmlAttrType Style'properties_style'text_autospace where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Style'properties_style'text_autospace_none
	    translate "ideograph-alpha" = Just Style'properties_style'text_autospace_ideograph_alpha
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'text_autospace_none = Just (n, str2attr "none")
    toAttrFrTyp n Style'properties_style'text_autospace_ideograph_alpha = Just (n, str2attr "ideograph-alpha")
instance XmlAttrType Style'properties_style'punctuation_wrap where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "simple" = Just Style'properties_style'punctuation_wrap_simple
	    translate "hanging" = Just Style'properties_style'punctuation_wrap_hanging
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'punctuation_wrap_simple = Just (n, str2attr "simple")
    toAttrFrTyp n Style'properties_style'punctuation_wrap_hanging = Just (n, str2attr "hanging")
instance XmlAttrType Style'properties_style'line_break where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "normal" = Just Style'properties_style'line_break_normal
	    translate "strict" = Just Style'properties_style'line_break_strict
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'line_break_normal = Just (n, str2attr "normal")
    toAttrFrTyp n Style'properties_style'line_break_strict = Just (n, str2attr "strict")
instance XmlAttrType Style'properties_style'text_combine where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Style'properties_style'text_combine_none
	    translate "letters" = Just Style'properties_style'text_combine_letters
	    translate "lines" = Just Style'properties_style'text_combine_lines
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'text_combine_none = Just (n, str2attr "none")
    toAttrFrTyp n Style'properties_style'text_combine_letters = Just (n, str2attr "letters")
    toAttrFrTyp n Style'properties_style'text_combine_lines = Just (n, str2attr "lines")
instance XmlAttrType Style'properties_style'text_rotation_scale where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "fixed" = Just Style'properties_style'text_rotation_scale_fixed
	    translate "line-height" = Just Style'properties_style'text_rotation_scale_line_height
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'text_rotation_scale_fixed = Just (n, str2attr "fixed")
    toAttrFrTyp n Style'properties_style'text_rotation_scale_line_height = Just (n, str2attr "line-height")
instance XmlAttrType Style'properties_fo'text_align where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "start" = Just Style'properties_fo'text_align_start
	    translate "end" = Just Style'properties_fo'text_align_end
	    translate "center" = Just Style'properties_fo'text_align_center
	    translate "justify" = Just Style'properties_fo'text_align_justify
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_fo'text_align_start = Just (n, str2attr "start")
    toAttrFrTyp n Style'properties_fo'text_align_end = Just (n, str2attr "end")
    toAttrFrTyp n Style'properties_fo'text_align_center = Just (n, str2attr "center")
    toAttrFrTyp n Style'properties_fo'text_align_justify = Just (n, str2attr "justify")
instance XmlAttrType Style'properties_fo'text_align_last where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "start" = Just Style'properties_fo'text_align_last_start
	    translate "center" = Just Style'properties_fo'text_align_last_center
	    translate "justify" = Just Style'properties_fo'text_align_last_justify
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_fo'text_align_last_start = Just (n, str2attr "start")
    toAttrFrTyp n Style'properties_fo'text_align_last_center = Just (n, str2attr "center")
    toAttrFrTyp n Style'properties_fo'text_align_last_justify = Just (n, str2attr "justify")
instance XmlAttrType Style'properties_style'text_align_source where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "fix" = Just Style'properties_style'text_align_source_fix
	    translate "value-type" = Just Style'properties_style'text_align_source_value_type
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'text_align_source_fix = Just (n, str2attr "fix")
    toAttrFrTyp n Style'properties_style'text_align_source_value_type = Just (n, str2attr "value-type")
instance XmlAttrType Style'properties_style'break_inside where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "auto" = Just Style'properties_style'break_inside_auto
	    translate "avoid" = Just Style'properties_style'break_inside_avoid
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'break_inside_auto = Just (n, str2attr "auto")
    toAttrFrTyp n Style'properties_style'break_inside_avoid = Just (n, str2attr "avoid")
instance XmlAttrType Style'properties_fo'hyphenate_keep where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Style'properties_fo'hyphenate_keep_none
	    translate "page" = Just Style'properties_fo'hyphenate_keep_page
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_fo'hyphenate_keep_none = Just (n, str2attr "none")
    toAttrFrTyp n Style'properties_fo'hyphenate_keep_page = Just (n, str2attr "page")
instance XmlAttrType Style'properties_fo'break_before where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "auto" = Just Style'properties_fo'break_before_auto
	    translate "column" = Just Style'properties_fo'break_before_column
	    translate "page" = Just Style'properties_fo'break_before_page
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_fo'break_before_auto = Just (n, str2attr "auto")
    toAttrFrTyp n Style'properties_fo'break_before_column = Just (n, str2attr "column")
    toAttrFrTyp n Style'properties_fo'break_before_page = Just (n, str2attr "page")
instance XmlAttrType Style'properties_fo'break_after where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "auto" = Just Style'properties_fo'break_after_auto
	    translate "column" = Just Style'properties_fo'break_after_column
	    translate "page" = Just Style'properties_fo'break_after_page
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_fo'break_after_auto = Just (n, str2attr "auto")
    toAttrFrTyp n Style'properties_fo'break_after_column = Just (n, str2attr "column")
    toAttrFrTyp n Style'properties_fo'break_after_page = Just (n, str2attr "page")
instance XmlAttrType Style'properties_style'ruby_align where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "left" = Just Style'properties_style'ruby_align_left
	    translate "center" = Just Style'properties_style'ruby_align_center
	    translate "right" = Just Style'properties_style'ruby_align_right
	    translate "distribute-letter" = Just Style'properties_style'ruby_align_distribute_letter
	    translate "distribute-space" = Just Style'properties_style'ruby_align_distribute_space
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'ruby_align_left = Just (n, str2attr "left")
    toAttrFrTyp n Style'properties_style'ruby_align_center = Just (n, str2attr "center")
    toAttrFrTyp n Style'properties_style'ruby_align_right = Just (n, str2attr "right")
    toAttrFrTyp n Style'properties_style'ruby_align_distribute_letter = Just (n, str2attr "distribute-letter")
    toAttrFrTyp n Style'properties_style'ruby_align_distribute_space = Just (n, str2attr "distribute-space")
instance XmlAttrType Style'properties_style'ruby_position where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "above" = Just Style'properties_style'ruby_position_above
	    translate "below" = Just Style'properties_style'ruby_position_below
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'ruby_position_above = Just (n, str2attr "above")
    toAttrFrTyp n Style'properties_style'ruby_position_below = Just (n, str2attr "below")
instance XmlAttrType Style'properties_table'align where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "left" = Just Style'properties_table'align_left
	    translate "center" = Just Style'properties_table'align_center
	    translate "right" = Just Style'properties_table'align_right
	    translate "margins" = Just Style'properties_table'align_margins
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_table'align_left = Just (n, str2attr "left")
    toAttrFrTyp n Style'properties_table'align_center = Just (n, str2attr "center")
    toAttrFrTyp n Style'properties_table'align_right = Just (n, str2attr "right")
    toAttrFrTyp n Style'properties_table'align_margins = Just (n, str2attr "margins")
instance XmlAttrType Style'properties_table'border_model where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "collapsing" = Just Style'properties_table'border_model_collapsing
	    translate "separating" = Just Style'properties_table'border_model_separating
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_table'border_model_collapsing = Just (n, str2attr "collapsing")
    toAttrFrTyp n Style'properties_table'border_model_separating = Just (n, str2attr "separating")
instance XmlAttrType Style'properties_fo'vertical_align where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "top" = Just Style'properties_fo'vertical_align_top
	    translate "middle" = Just Style'properties_fo'vertical_align_middle
	    translate "bottom" = Just Style'properties_fo'vertical_align_bottom
	    translate "automatic" = Just Style'properties_fo'vertical_align_automatic
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_fo'vertical_align_top = Just (n, str2attr "top")
    toAttrFrTyp n Style'properties_fo'vertical_align_middle = Just (n, str2attr "middle")
    toAttrFrTyp n Style'properties_fo'vertical_align_bottom = Just (n, str2attr "bottom")
    toAttrFrTyp n Style'properties_fo'vertical_align_automatic = Just (n, str2attr "automatic")
instance XmlAttrType Style'properties_fo'direction where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "ltr" = Just Style'properties_fo'direction_ltr
	    translate "ttb" = Just Style'properties_fo'direction_ttb
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_fo'direction_ltr = Just (n, str2attr "ltr")
    toAttrFrTyp n Style'properties_fo'direction_ttb = Just (n, str2attr "ttb")
instance XmlAttrType Style'properties_style'glyph_orientation_vertical where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "auto" = Just Style'properties_style'glyph_orientation_vertical_auto
	    translate "0" = Just Style'properties_style'glyph_orientation_vertical_0
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'glyph_orientation_vertical_auto = Just (n, str2attr "auto")
    toAttrFrTyp n Style'properties_style'glyph_orientation_vertical_0 = Just (n, str2attr "0")
instance XmlAttrType Style'properties_style'rotation_align where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Style'properties_style'rotation_align_none
	    translate "bottom" = Just Style'properties_style'rotation_align_bottom
	    translate "top" = Just Style'properties_style'rotation_align_top
	    translate "center" = Just Style'properties_style'rotation_align_center
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'rotation_align_none = Just (n, str2attr "none")
    toAttrFrTyp n Style'properties_style'rotation_align_bottom = Just (n, str2attr "bottom")
    toAttrFrTyp n Style'properties_style'rotation_align_top = Just (n, str2attr "top")
    toAttrFrTyp n Style'properties_style'rotation_align_center = Just (n, str2attr "center")
instance XmlAttrType Style'properties_fo'wrap_option where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "no-wrap" = Just Style'properties_fo'wrap_option_no_wrap
	    translate "wrap" = Just Style'properties_fo'wrap_option_wrap
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_fo'wrap_option_no_wrap = Just (n, str2attr "no-wrap")
    toAttrFrTyp n Style'properties_fo'wrap_option_wrap = Just (n, str2attr "wrap")
instance XmlAttrType Style'properties_style'print_orientation where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "portrait" = Just Style'properties_style'print_orientation_portrait
	    translate "landscape" = Just Style'properties_style'print_orientation_landscape
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'print_orientation_portrait = Just (n, str2attr "portrait")
    toAttrFrTyp n Style'properties_style'print_orientation_landscape = Just (n, str2attr "landscape")
instance XmlAttrType Style'properties_style'print_page_order where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "ttb" = Just Style'properties_style'print_page_order_ttb
	    translate "ltr" = Just Style'properties_style'print_page_order_ltr
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'print_page_order_ttb = Just (n, str2attr "ttb")
    toAttrFrTyp n Style'properties_style'print_page_order_ltr = Just (n, str2attr "ltr")
instance XmlAttrType Style'properties_style'table_centering where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "horizontal" = Just Style'properties_style'table_centering_horizontal
	    translate "vertical" = Just Style'properties_style'table_centering_vertical
	    translate "both" = Just Style'properties_style'table_centering_both
	    translate "none" = Just Style'properties_style'table_centering_none
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'table_centering_horizontal = Just (n, str2attr "horizontal")
    toAttrFrTyp n Style'properties_style'table_centering_vertical = Just (n, str2attr "vertical")
    toAttrFrTyp n Style'properties_style'table_centering_both = Just (n, str2attr "both")
    toAttrFrTyp n Style'properties_style'table_centering_none = Just (n, str2attr "none")
instance XmlAttrType Style'properties_style'vertical_align where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "top" = Just Style'properties_style'vertical_align_top
	    translate "bottom" = Just Style'properties_style'vertical_align_bottom
	    translate "middle" = Just Style'properties_style'vertical_align_middle
	    translate "basline" = Just Style'properties_style'vertical_align_basline
	    translate "auto" = Just Style'properties_style'vertical_align_auto
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'vertical_align_top = Just (n, str2attr "top")
    toAttrFrTyp n Style'properties_style'vertical_align_bottom = Just (n, str2attr "bottom")
    toAttrFrTyp n Style'properties_style'vertical_align_middle = Just (n, str2attr "middle")
    toAttrFrTyp n Style'properties_style'vertical_align_basline = Just (n, str2attr "basline")
    toAttrFrTyp n Style'properties_style'vertical_align_auto = Just (n, str2attr "auto")
instance XmlAttrType Style'properties_style'writing_mode where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "lr-tb" = Just Style'properties_style'writing_mode_lr_tb
	    translate "rl-tb" = Just Style'properties_style'writing_mode_rl_tb
	    translate "tb-rl" = Just Style'properties_style'writing_mode_tb_rl
	    translate "tb-lr" = Just Style'properties_style'writing_mode_tb_lr
	    translate "lr" = Just Style'properties_style'writing_mode_lr
	    translate "rl" = Just Style'properties_style'writing_mode_rl
	    translate "tb" = Just Style'properties_style'writing_mode_tb
	    translate "page" = Just Style'properties_style'writing_mode_page
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'writing_mode_lr_tb = Just (n, str2attr "lr-tb")
    toAttrFrTyp n Style'properties_style'writing_mode_rl_tb = Just (n, str2attr "rl-tb")
    toAttrFrTyp n Style'properties_style'writing_mode_tb_rl = Just (n, str2attr "tb-rl")
    toAttrFrTyp n Style'properties_style'writing_mode_tb_lr = Just (n, str2attr "tb-lr")
    toAttrFrTyp n Style'properties_style'writing_mode_lr = Just (n, str2attr "lr")
    toAttrFrTyp n Style'properties_style'writing_mode_rl = Just (n, str2attr "rl")
    toAttrFrTyp n Style'properties_style'writing_mode_tb = Just (n, str2attr "tb")
    toAttrFrTyp n Style'properties_style'writing_mode_page = Just (n, str2attr "page")
instance XmlAttrType Style'properties_style'layout_grid_mode where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Style'properties_style'layout_grid_mode_none
	    translate "line" = Just Style'properties_style'layout_grid_mode_line
	    translate "both" = Just Style'properties_style'layout_grid_mode_both
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'layout_grid_mode_none = Just (n, str2attr "none")
    toAttrFrTyp n Style'properties_style'layout_grid_mode_line = Just (n, str2attr "line")
    toAttrFrTyp n Style'properties_style'layout_grid_mode_both = Just (n, str2attr "both")
instance XmlAttrType Style'properties_draw'stroke where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Style'properties_draw'stroke_none
	    translate "dash" = Just Style'properties_draw'stroke_dash
	    translate "solid" = Just Style'properties_draw'stroke_solid
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_draw'stroke_none = Just (n, str2attr "none")
    toAttrFrTyp n Style'properties_draw'stroke_dash = Just (n, str2attr "dash")
    toAttrFrTyp n Style'properties_draw'stroke_solid = Just (n, str2attr "solid")
instance XmlAttrType Style'properties_svg'stroke_linejoin where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "miter" = Just Style'properties_svg'stroke_linejoin_miter
	    translate "round" = Just Style'properties_svg'stroke_linejoin_round
	    translate "bevel" = Just Style'properties_svg'stroke_linejoin_bevel
	    translate "middle" = Just Style'properties_svg'stroke_linejoin_middle
	    translate "none" = Just Style'properties_svg'stroke_linejoin_none
	    translate "inherit" = Just Style'properties_svg'stroke_linejoin_inherit
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_svg'stroke_linejoin_miter = Just (n, str2attr "miter")
    toAttrFrTyp n Style'properties_svg'stroke_linejoin_round = Just (n, str2attr "round")
    toAttrFrTyp n Style'properties_svg'stroke_linejoin_bevel = Just (n, str2attr "bevel")
    toAttrFrTyp n Style'properties_svg'stroke_linejoin_middle = Just (n, str2attr "middle")
    toAttrFrTyp n Style'properties_svg'stroke_linejoin_none = Just (n, str2attr "none")
    toAttrFrTyp n Style'properties_svg'stroke_linejoin_inherit = Just (n, str2attr "inherit")
instance XmlAttrType Style'properties_draw'textarea_horizontal_align where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "left" = Just Style'properties_draw'textarea_horizontal_align_left
	    translate "center" = Just Style'properties_draw'textarea_horizontal_align_center
	    translate "right" = Just Style'properties_draw'textarea_horizontal_align_right
	    translate "justify" = Just Style'properties_draw'textarea_horizontal_align_justify
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_draw'textarea_horizontal_align_left = Just (n, str2attr "left")
    toAttrFrTyp n Style'properties_draw'textarea_horizontal_align_center = Just (n, str2attr "center")
    toAttrFrTyp n Style'properties_draw'textarea_horizontal_align_right = Just (n, str2attr "right")
    toAttrFrTyp n Style'properties_draw'textarea_horizontal_align_justify = Just (n, str2attr "justify")
instance XmlAttrType Style'properties_draw'textarea_vertical_align where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "top" = Just Style'properties_draw'textarea_vertical_align_top
	    translate "middle" = Just Style'properties_draw'textarea_vertical_align_middle
	    translate "bottom" = Just Style'properties_draw'textarea_vertical_align_bottom
	    translate "justify" = Just Style'properties_draw'textarea_vertical_align_justify
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_draw'textarea_vertical_align_top = Just (n, str2attr "top")
    toAttrFrTyp n Style'properties_draw'textarea_vertical_align_middle = Just (n, str2attr "middle")
    toAttrFrTyp n Style'properties_draw'textarea_vertical_align_bottom = Just (n, str2attr "bottom")
    toAttrFrTyp n Style'properties_draw'textarea_vertical_align_justify = Just (n, str2attr "justify")
instance XmlAttrType Style'properties_draw'writing_mode where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "lr-tb" = Just Style'properties_draw'writing_mode_lr_tb
	    translate "tb-rl" = Just Style'properties_draw'writing_mode_tb_rl
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_draw'writing_mode_lr_tb = Just (n, str2attr "lr-tb")
    toAttrFrTyp n Style'properties_draw'writing_mode_tb_rl = Just (n, str2attr "tb-rl")
instance XmlAttrType Style'properties_draw'fill where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Style'properties_draw'fill_none
	    translate "solid" = Just Style'properties_draw'fill_solid
	    translate "bitmap" = Just Style'properties_draw'fill_bitmap
	    translate "gradient" = Just Style'properties_draw'fill_gradient
	    translate "hatch" = Just Style'properties_draw'fill_hatch
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_draw'fill_none = Just (n, str2attr "none")
    toAttrFrTyp n Style'properties_draw'fill_solid = Just (n, str2attr "solid")
    toAttrFrTyp n Style'properties_draw'fill_bitmap = Just (n, str2attr "bitmap")
    toAttrFrTyp n Style'properties_draw'fill_gradient = Just (n, str2attr "gradient")
    toAttrFrTyp n Style'properties_draw'fill_hatch = Just (n, str2attr "hatch")
instance XmlAttrType Style'properties_style'repeat where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "no-repeat" = Just Style'properties_style'repeat_no_repeat
	    translate "repeat" = Just Style'properties_style'repeat_repeat
	    translate "stretch" = Just Style'properties_style'repeat_stretch
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_style'repeat_no_repeat = Just (n, str2attr "no-repeat")
    toAttrFrTyp n Style'properties_style'repeat_repeat = Just (n, str2attr "repeat")
    toAttrFrTyp n Style'properties_style'repeat_stretch = Just (n, str2attr "stretch")
instance XmlAttrType Style'properties_draw'fill_image_ref_point where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "top-left" = Just Style'properties_draw'fill_image_ref_point_top_left
	    translate "top" = Just Style'properties_draw'fill_image_ref_point_top
	    translate "top-right" = Just Style'properties_draw'fill_image_ref_point_top_right
	    translate "left" = Just Style'properties_draw'fill_image_ref_point_left
	    translate "center" = Just Style'properties_draw'fill_image_ref_point_center
	    translate "right" = Just Style'properties_draw'fill_image_ref_point_right
	    translate "bottom-left" = Just Style'properties_draw'fill_image_ref_point_bottom_left
	    translate "bottom" = Just Style'properties_draw'fill_image_ref_point_bottom
	    translate "bottom-right" = Just Style'properties_draw'fill_image_ref_point_bottom_right
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_draw'fill_image_ref_point_top_left = Just (n, str2attr "top-left")
    toAttrFrTyp n Style'properties_draw'fill_image_ref_point_top = Just (n, str2attr "top")
    toAttrFrTyp n Style'properties_draw'fill_image_ref_point_top_right = Just (n, str2attr "top-right")
    toAttrFrTyp n Style'properties_draw'fill_image_ref_point_left = Just (n, str2attr "left")
    toAttrFrTyp n Style'properties_draw'fill_image_ref_point_center = Just (n, str2attr "center")
    toAttrFrTyp n Style'properties_draw'fill_image_ref_point_right = Just (n, str2attr "right")
    toAttrFrTyp n Style'properties_draw'fill_image_ref_point_bottom_left = Just (n, str2attr "bottom-left")
    toAttrFrTyp n Style'properties_draw'fill_image_ref_point_bottom = Just (n, str2attr "bottom")
    toAttrFrTyp n Style'properties_draw'fill_image_ref_point_bottom_right = Just (n, str2attr "bottom-right")
instance XmlAttrType Style'properties_draw'color_mode where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "greyscale" = Just Style'properties_draw'color_mode_greyscale
	    translate "mono" = Just Style'properties_draw'color_mode_mono
	    translate "watermark" = Just Style'properties_draw'color_mode_watermark
	    translate "standard" = Just Style'properties_draw'color_mode_standard
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_draw'color_mode_greyscale = Just (n, str2attr "greyscale")
    toAttrFrTyp n Style'properties_draw'color_mode_mono = Just (n, str2attr "mono")
    toAttrFrTyp n Style'properties_draw'color_mode_watermark = Just (n, str2attr "watermark")
    toAttrFrTyp n Style'properties_draw'color_mode_standard = Just (n, str2attr "standard")
instance XmlAttrType Style'properties_draw'shadow where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "visible" = Just Style'properties_draw'shadow_visible
	    translate "hidden" = Just Style'properties_draw'shadow_hidden
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_draw'shadow_visible = Just (n, str2attr "visible")
    toAttrFrTyp n Style'properties_draw'shadow_hidden = Just (n, str2attr "hidden")
instance XmlAttrType Style'properties_draw'measure_align where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "automatic" = Just Style'properties_draw'measure_align_automatic
	    translate "left-outside" = Just Style'properties_draw'measure_align_left_outside
	    translate "inside" = Just Style'properties_draw'measure_align_inside
	    translate "right-outside" = Just Style'properties_draw'measure_align_right_outside
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_draw'measure_align_automatic = Just (n, str2attr "automatic")
    toAttrFrTyp n Style'properties_draw'measure_align_left_outside = Just (n, str2attr "left-outside")
    toAttrFrTyp n Style'properties_draw'measure_align_inside = Just (n, str2attr "inside")
    toAttrFrTyp n Style'properties_draw'measure_align_right_outside = Just (n, str2attr "right-outside")
instance XmlAttrType Style'properties_draw'measure_vertical_align where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "automatic" = Just Style'properties_draw'measure_vertical_align_automatic
	    translate "above" = Just Style'properties_draw'measure_vertical_align_above
	    translate "below" = Just Style'properties_draw'measure_vertical_align_below
	    translate "center" = Just Style'properties_draw'measure_vertical_align_center
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_draw'measure_vertical_align_automatic = Just (n, str2attr "automatic")
    toAttrFrTyp n Style'properties_draw'measure_vertical_align_above = Just (n, str2attr "above")
    toAttrFrTyp n Style'properties_draw'measure_vertical_align_below = Just (n, str2attr "below")
    toAttrFrTyp n Style'properties_draw'measure_vertical_align_center = Just (n, str2attr "center")
instance XmlAttrType Style'properties_draw'unit where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "automatic" = Just Style'properties_draw'unit_automatic
	    translate "mm" = Just Style'properties_draw'unit_mm
	    translate "cm" = Just Style'properties_draw'unit_cm
	    translate "m" = Just Style'properties_draw'unit_m
	    translate "km" = Just Style'properties_draw'unit_km
	    translate "pt" = Just Style'properties_draw'unit_pt
	    translate "pc" = Just Style'properties_draw'unit_pc
	    translate "inch" = Just Style'properties_draw'unit_inch
	    translate "ft" = Just Style'properties_draw'unit_ft
	    translate "mi" = Just Style'properties_draw'unit_mi
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_draw'unit_automatic = Just (n, str2attr "automatic")
    toAttrFrTyp n Style'properties_draw'unit_mm = Just (n, str2attr "mm")
    toAttrFrTyp n Style'properties_draw'unit_cm = Just (n, str2attr "cm")
    toAttrFrTyp n Style'properties_draw'unit_m = Just (n, str2attr "m")
    toAttrFrTyp n Style'properties_draw'unit_km = Just (n, str2attr "km")
    toAttrFrTyp n Style'properties_draw'unit_pt = Just (n, str2attr "pt")
    toAttrFrTyp n Style'properties_draw'unit_pc = Just (n, str2attr "pc")
    toAttrFrTyp n Style'properties_draw'unit_inch = Just (n, str2attr "inch")
    toAttrFrTyp n Style'properties_draw'unit_ft = Just (n, str2attr "ft")
    toAttrFrTyp n Style'properties_draw'unit_mi = Just (n, str2attr "mi")
instance XmlAttrType Style'properties_draw'placing where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "below" = Just Style'properties_draw'placing_below
	    translate "above" = Just Style'properties_draw'placing_above
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_draw'placing_below = Just (n, str2attr "below")
    toAttrFrTyp n Style'properties_draw'placing_above = Just (n, str2attr "above")
instance XmlAttrType Style'properties_draw'fontwork_style where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "rotate" = Just Style'properties_draw'fontwork_style_rotate
	    translate "upright" = Just Style'properties_draw'fontwork_style_upright
	    translate "slant-x" = Just Style'properties_draw'fontwork_style_slant_x
	    translate "slant-y" = Just Style'properties_draw'fontwork_style_slant_y
	    translate "none" = Just Style'properties_draw'fontwork_style_none
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_draw'fontwork_style_rotate = Just (n, str2attr "rotate")
    toAttrFrTyp n Style'properties_draw'fontwork_style_upright = Just (n, str2attr "upright")
    toAttrFrTyp n Style'properties_draw'fontwork_style_slant_x = Just (n, str2attr "slant-x")
    toAttrFrTyp n Style'properties_draw'fontwork_style_slant_y = Just (n, str2attr "slant-y")
    toAttrFrTyp n Style'properties_draw'fontwork_style_none = Just (n, str2attr "none")
instance XmlAttrType Style'properties_draw'fontwork_adjust where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "left" = Just Style'properties_draw'fontwork_adjust_left
	    translate "right" = Just Style'properties_draw'fontwork_adjust_right
	    translate "autosize" = Just Style'properties_draw'fontwork_adjust_autosize
	    translate "center" = Just Style'properties_draw'fontwork_adjust_center
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_draw'fontwork_adjust_left = Just (n, str2attr "left")
    toAttrFrTyp n Style'properties_draw'fontwork_adjust_right = Just (n, str2attr "right")
    toAttrFrTyp n Style'properties_draw'fontwork_adjust_autosize = Just (n, str2attr "autosize")
    toAttrFrTyp n Style'properties_draw'fontwork_adjust_center = Just (n, str2attr "center")
instance XmlAttrType Style'properties_draw'fontwork_shadow where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "normal" = Just Style'properties_draw'fontwork_shadow_normal
	    translate "slant" = Just Style'properties_draw'fontwork_shadow_slant
	    translate "none" = Just Style'properties_draw'fontwork_shadow_none
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_draw'fontwork_shadow_normal = Just (n, str2attr "normal")
    toAttrFrTyp n Style'properties_draw'fontwork_shadow_slant = Just (n, str2attr "slant")
    toAttrFrTyp n Style'properties_draw'fontwork_shadow_none = Just (n, str2attr "none")
instance XmlAttrType Style'properties_draw'fontwork_form where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Style'properties_draw'fontwork_form_none
	    translate "top-circle" = Just Style'properties_draw'fontwork_form_top_circle
	    translate "bottom-circle" = Just Style'properties_draw'fontwork_form_bottom_circle
	    translate "left-circle" = Just Style'properties_draw'fontwork_form_left_circle
	    translate "right-circle" = Just Style'properties_draw'fontwork_form_right_circle
	    translate "top-arc" = Just Style'properties_draw'fontwork_form_top_arc
	    translate "bottom-arc" = Just Style'properties_draw'fontwork_form_bottom_arc
	    translate "left-arc" = Just Style'properties_draw'fontwork_form_left_arc
	    translate "right-arc" = Just Style'properties_draw'fontwork_form_right_arc
	    translate "button1" = Just Style'properties_draw'fontwork_form_button1
	    translate "button2" = Just Style'properties_draw'fontwork_form_button2
	    translate "button3" = Just Style'properties_draw'fontwork_form_button3
	    translate "button4" = Just Style'properties_draw'fontwork_form_button4
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_draw'fontwork_form_none = Just (n, str2attr "none")
    toAttrFrTyp n Style'properties_draw'fontwork_form_top_circle = Just (n, str2attr "top-circle")
    toAttrFrTyp n Style'properties_draw'fontwork_form_bottom_circle = Just (n, str2attr "bottom-circle")
    toAttrFrTyp n Style'properties_draw'fontwork_form_left_circle = Just (n, str2attr "left-circle")
    toAttrFrTyp n Style'properties_draw'fontwork_form_right_circle = Just (n, str2attr "right-circle")
    toAttrFrTyp n Style'properties_draw'fontwork_form_top_arc = Just (n, str2attr "top-arc")
    toAttrFrTyp n Style'properties_draw'fontwork_form_bottom_arc = Just (n, str2attr "bottom-arc")
    toAttrFrTyp n Style'properties_draw'fontwork_form_left_arc = Just (n, str2attr "left-arc")
    toAttrFrTyp n Style'properties_draw'fontwork_form_right_arc = Just (n, str2attr "right-arc")
    toAttrFrTyp n Style'properties_draw'fontwork_form_button1 = Just (n, str2attr "button1")
    toAttrFrTyp n Style'properties_draw'fontwork_form_button2 = Just (n, str2attr "button2")
    toAttrFrTyp n Style'properties_draw'fontwork_form_button3 = Just (n, str2attr "button3")
    toAttrFrTyp n Style'properties_draw'fontwork_form_button4 = Just (n, str2attr "button4")
instance XmlAttrType Style'properties_draw'caption_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "straight-line" = Just Style'properties_draw'caption_type_straight_line
	    translate "angled-line" = Just Style'properties_draw'caption_type_angled_line
	    translate "angled-connector-line" = Just Style'properties_draw'caption_type_angled_connector_line
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_draw'caption_type_straight_line = Just (n, str2attr "straight-line")
    toAttrFrTyp n Style'properties_draw'caption_type_angled_line = Just (n, str2attr "angled-line")
    toAttrFrTyp n Style'properties_draw'caption_type_angled_connector_line = Just (n, str2attr "angled-connector-line")
instance XmlAttrType Style'properties_draw'caption_angle_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "fixed" = Just Style'properties_draw'caption_angle_type_fixed
	    translate "free" = Just Style'properties_draw'caption_angle_type_free
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_draw'caption_angle_type_fixed = Just (n, str2attr "fixed")
    toAttrFrTyp n Style'properties_draw'caption_angle_type_free = Just (n, str2attr "free")
instance XmlAttrType Style'properties_draw'caption_escape_direction where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "horizontal" = Just Style'properties_draw'caption_escape_direction_horizontal
	    translate "vertical" = Just Style'properties_draw'caption_escape_direction_vertical
	    translate "auto" = Just Style'properties_draw'caption_escape_direction_auto
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_draw'caption_escape_direction_horizontal = Just (n, str2attr "horizontal")
    toAttrFrTyp n Style'properties_draw'caption_escape_direction_vertical = Just (n, str2attr "vertical")
    toAttrFrTyp n Style'properties_draw'caption_escape_direction_auto = Just (n, str2attr "auto")
instance XmlAttrType Style'properties_presentation'transition_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "manual" = Just Style'properties_presentation'transition_type_manual
	    translate "automatic" = Just Style'properties_presentation'transition_type_automatic
	    translate "semi-automatic" = Just Style'properties_presentation'transition_type_semi_automatic
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_presentation'transition_type_manual = Just (n, str2attr "manual")
    toAttrFrTyp n Style'properties_presentation'transition_type_automatic = Just (n, str2attr "automatic")
    toAttrFrTyp n Style'properties_presentation'transition_type_semi_automatic = Just (n, str2attr "semi-automatic")
instance XmlAttrType Style'properties_presentation'transition_style where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Style'properties_presentation'transition_style_none
	    translate "fade-from-left" = Just Style'properties_presentation'transition_style_fade_from_left
	    translate "fade-from-top" = Just Style'properties_presentation'transition_style_fade_from_top
	    translate "fade-from-right" = Just Style'properties_presentation'transition_style_fade_from_right
	    translate "fade-from-bottom" = Just Style'properties_presentation'transition_style_fade_from_bottom
	    translate "fade-to-center" = Just Style'properties_presentation'transition_style_fade_to_center
	    translate "fade-from-center" = Just Style'properties_presentation'transition_style_fade_from_center
	    translate "move-from-left" = Just Style'properties_presentation'transition_style_move_from_left
	    translate "move-from-top" = Just Style'properties_presentation'transition_style_move_from_top
	    translate "move-from-right" = Just Style'properties_presentation'transition_style_move_from_right
	    translate "move-from-bottom" = Just Style'properties_presentation'transition_style_move_from_bottom
	    translate "roll-from-top" = Just Style'properties_presentation'transition_style_roll_from_top
	    translate "roll-from-left" = Just Style'properties_presentation'transition_style_roll_from_left
	    translate "roll-from-right" = Just Style'properties_presentation'transition_style_roll_from_right
	    translate "roll-from-bottom" = Just Style'properties_presentation'transition_style_roll_from_bottom
	    translate "vertical-stripes" = Just Style'properties_presentation'transition_style_vertical_stripes
	    translate "horizontal-stripes" = Just Style'properties_presentation'transition_style_horizontal_stripes
	    translate "clockwise" = Just Style'properties_presentation'transition_style_clockwise
	    translate "counterclockwise" = Just Style'properties_presentation'transition_style_counterclockwise
	    translate "fade-from-upperleft" = Just Style'properties_presentation'transition_style_fade_from_upperleft
	    translate "fade-from-upperright" = Just Style'properties_presentation'transition_style_fade_from_upperright
	    translate "fade-from-lowerleft" = Just Style'properties_presentation'transition_style_fade_from_lowerleft
	    translate "fade-from-lowerright" = Just Style'properties_presentation'transition_style_fade_from_lowerright
	    translate "close-vertical" = Just Style'properties_presentation'transition_style_close_vertical
	    translate "close-horizontal" = Just Style'properties_presentation'transition_style_close_horizontal
	    translate "open-vertical" = Just Style'properties_presentation'transition_style_open_vertical
	    translate "open-horizontal" = Just Style'properties_presentation'transition_style_open_horizontal
	    translate "spiralin-left" = Just Style'properties_presentation'transition_style_spiralin_left
	    translate "spiralin-right" = Just Style'properties_presentation'transition_style_spiralin_right
	    translate "spiralout-left" = Just Style'properties_presentation'transition_style_spiralout_left
	    translate "spiralout-right" = Just Style'properties_presentation'transition_style_spiralout_right
	    translate "dissolve" = Just Style'properties_presentation'transition_style_dissolve
	    translate "wavyline-from-left" = Just Style'properties_presentation'transition_style_wavyline_from_left
	    translate "wavyline-from-top" = Just Style'properties_presentation'transition_style_wavyline_from_top
	    translate "wavyline-from-right" = Just Style'properties_presentation'transition_style_wavyline_from_right
	    translate "wavyline-from-bottom" = Just Style'properties_presentation'transition_style_wavyline_from_bottom
	    translate "random" = Just Style'properties_presentation'transition_style_random
	    translate "stretch-from-left" = Just Style'properties_presentation'transition_style_stretch_from_left
	    translate "stretch-from-top" = Just Style'properties_presentation'transition_style_stretch_from_top
	    translate "stretch-from-right" = Just Style'properties_presentation'transition_style_stretch_from_right
	    translate "stretch-from-bottom" = Just Style'properties_presentation'transition_style_stretch_from_bottom
	    translate "vertical-lines" = Just Style'properties_presentation'transition_style_vertical_lines
	    translate "horizontal-lines" = Just Style'properties_presentation'transition_style_horizontal_lines
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_presentation'transition_style_none = Just (n, str2attr "none")
    toAttrFrTyp n Style'properties_presentation'transition_style_fade_from_left = Just (n, str2attr "fade-from-left")
    toAttrFrTyp n Style'properties_presentation'transition_style_fade_from_top = Just (n, str2attr "fade-from-top")
    toAttrFrTyp n Style'properties_presentation'transition_style_fade_from_right = Just (n, str2attr "fade-from-right")
    toAttrFrTyp n Style'properties_presentation'transition_style_fade_from_bottom = Just (n, str2attr "fade-from-bottom")
    toAttrFrTyp n Style'properties_presentation'transition_style_fade_to_center = Just (n, str2attr "fade-to-center")
    toAttrFrTyp n Style'properties_presentation'transition_style_fade_from_center = Just (n, str2attr "fade-from-center")
    toAttrFrTyp n Style'properties_presentation'transition_style_move_from_left = Just (n, str2attr "move-from-left")
    toAttrFrTyp n Style'properties_presentation'transition_style_move_from_top = Just (n, str2attr "move-from-top")
    toAttrFrTyp n Style'properties_presentation'transition_style_move_from_right = Just (n, str2attr "move-from-right")
    toAttrFrTyp n Style'properties_presentation'transition_style_move_from_bottom = Just (n, str2attr "move-from-bottom")
    toAttrFrTyp n Style'properties_presentation'transition_style_roll_from_top = Just (n, str2attr "roll-from-top")
    toAttrFrTyp n Style'properties_presentation'transition_style_roll_from_left = Just (n, str2attr "roll-from-left")
    toAttrFrTyp n Style'properties_presentation'transition_style_roll_from_right = Just (n, str2attr "roll-from-right")
    toAttrFrTyp n Style'properties_presentation'transition_style_roll_from_bottom = Just (n, str2attr "roll-from-bottom")
    toAttrFrTyp n Style'properties_presentation'transition_style_vertical_stripes = Just (n, str2attr "vertical-stripes")
    toAttrFrTyp n Style'properties_presentation'transition_style_horizontal_stripes = Just (n, str2attr "horizontal-stripes")
    toAttrFrTyp n Style'properties_presentation'transition_style_clockwise = Just (n, str2attr "clockwise")
    toAttrFrTyp n Style'properties_presentation'transition_style_counterclockwise = Just (n, str2attr "counterclockwise")
    toAttrFrTyp n Style'properties_presentation'transition_style_fade_from_upperleft = Just (n, str2attr "fade-from-upperleft")
    toAttrFrTyp n Style'properties_presentation'transition_style_fade_from_upperright = Just (n, str2attr "fade-from-upperright")
    toAttrFrTyp n Style'properties_presentation'transition_style_fade_from_lowerleft = Just (n, str2attr "fade-from-lowerleft")
    toAttrFrTyp n Style'properties_presentation'transition_style_fade_from_lowerright = Just (n, str2attr "fade-from-lowerright")
    toAttrFrTyp n Style'properties_presentation'transition_style_close_vertical = Just (n, str2attr "close-vertical")
    toAttrFrTyp n Style'properties_presentation'transition_style_close_horizontal = Just (n, str2attr "close-horizontal")
    toAttrFrTyp n Style'properties_presentation'transition_style_open_vertical = Just (n, str2attr "open-vertical")
    toAttrFrTyp n Style'properties_presentation'transition_style_open_horizontal = Just (n, str2attr "open-horizontal")
    toAttrFrTyp n Style'properties_presentation'transition_style_spiralin_left = Just (n, str2attr "spiralin-left")
    toAttrFrTyp n Style'properties_presentation'transition_style_spiralin_right = Just (n, str2attr "spiralin-right")
    toAttrFrTyp n Style'properties_presentation'transition_style_spiralout_left = Just (n, str2attr "spiralout-left")
    toAttrFrTyp n Style'properties_presentation'transition_style_spiralout_right = Just (n, str2attr "spiralout-right")
    toAttrFrTyp n Style'properties_presentation'transition_style_dissolve = Just (n, str2attr "dissolve")
    toAttrFrTyp n Style'properties_presentation'transition_style_wavyline_from_left = Just (n, str2attr "wavyline-from-left")
    toAttrFrTyp n Style'properties_presentation'transition_style_wavyline_from_top = Just (n, str2attr "wavyline-from-top")
    toAttrFrTyp n Style'properties_presentation'transition_style_wavyline_from_right = Just (n, str2attr "wavyline-from-right")
    toAttrFrTyp n Style'properties_presentation'transition_style_wavyline_from_bottom = Just (n, str2attr "wavyline-from-bottom")
    toAttrFrTyp n Style'properties_presentation'transition_style_random = Just (n, str2attr "random")
    toAttrFrTyp n Style'properties_presentation'transition_style_stretch_from_left = Just (n, str2attr "stretch-from-left")
    toAttrFrTyp n Style'properties_presentation'transition_style_stretch_from_top = Just (n, str2attr "stretch-from-top")
    toAttrFrTyp n Style'properties_presentation'transition_style_stretch_from_right = Just (n, str2attr "stretch-from-right")
    toAttrFrTyp n Style'properties_presentation'transition_style_stretch_from_bottom = Just (n, str2attr "stretch-from-bottom")
    toAttrFrTyp n Style'properties_presentation'transition_style_vertical_lines = Just (n, str2attr "vertical-lines")
    toAttrFrTyp n Style'properties_presentation'transition_style_horizontal_lines = Just (n, str2attr "horizontal-lines")
instance XmlAttrType Style'properties_presentation'transition_speed where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "slow" = Just Style'properties_presentation'transition_speed_slow
	    translate "medium" = Just Style'properties_presentation'transition_speed_medium
	    translate "fast" = Just Style'properties_presentation'transition_speed_fast
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_presentation'transition_speed_slow = Just (n, str2attr "slow")
    toAttrFrTyp n Style'properties_presentation'transition_speed_medium = Just (n, str2attr "medium")
    toAttrFrTyp n Style'properties_presentation'transition_speed_fast = Just (n, str2attr "fast")
instance XmlAttrType Style'properties_presentation'visibility where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "visible" = Just Style'properties_presentation'visibility_visible
	    translate "hidden" = Just Style'properties_presentation'visibility_hidden
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_presentation'visibility_visible = Just (n, str2attr "visible")
    toAttrFrTyp n Style'properties_presentation'visibility_hidden = Just (n, str2attr "hidden")
instance XmlAttrType Style'properties_draw'background_size where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "full" = Just Style'properties_draw'background_size_full
	    translate "border" = Just Style'properties_draw'background_size_border
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_draw'background_size_full = Just (n, str2attr "full")
    toAttrFrTyp n Style'properties_draw'background_size_border = Just (n, str2attr "border")
instance XmlAttrType Style'properties_dr3d'edge_rounding_mode where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "correct" = Just Style'properties_dr3d'edge_rounding_mode_correct
	    translate "attractive" = Just Style'properties_dr3d'edge_rounding_mode_attractive
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_dr3d'edge_rounding_mode_correct = Just (n, str2attr "correct")
    toAttrFrTyp n Style'properties_dr3d'edge_rounding_mode_attractive = Just (n, str2attr "attractive")
instance XmlAttrType Style'properties_dr3d'backface_culling where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "enabled" = Just Style'properties_dr3d'backface_culling_enabled
	    translate "disabled" = Just Style'properties_dr3d'backface_culling_disabled
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_dr3d'backface_culling_enabled = Just (n, str2attr "enabled")
    toAttrFrTyp n Style'properties_dr3d'backface_culling_disabled = Just (n, str2attr "disabled")
instance XmlAttrType Style'properties_dr3d'lighting_mode where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "standard" = Just Style'properties_dr3d'lighting_mode_standard
	    translate "double-sided" = Just Style'properties_dr3d'lighting_mode_double_sided
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_dr3d'lighting_mode_standard = Just (n, str2attr "standard")
    toAttrFrTyp n Style'properties_dr3d'lighting_mode_double_sided = Just (n, str2attr "double-sided")
instance XmlAttrType Style'properties_dr3d'normals_kind where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "object" = Just Style'properties_dr3d'normals_kind_object
	    translate "flat" = Just Style'properties_dr3d'normals_kind_flat
	    translate "sphere" = Just Style'properties_dr3d'normals_kind_sphere
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_dr3d'normals_kind_object = Just (n, str2attr "object")
    toAttrFrTyp n Style'properties_dr3d'normals_kind_flat = Just (n, str2attr "flat")
    toAttrFrTyp n Style'properties_dr3d'normals_kind_sphere = Just (n, str2attr "sphere")
instance XmlAttrType Style'properties_dr3d'normals_direction where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "normal" = Just Style'properties_dr3d'normals_direction_normal
	    translate "inverse" = Just Style'properties_dr3d'normals_direction_inverse
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_dr3d'normals_direction_normal = Just (n, str2attr "normal")
    toAttrFrTyp n Style'properties_dr3d'normals_direction_inverse = Just (n, str2attr "inverse")
instance XmlAttrType Style'properties_dr3d'texture_generation_mode_x where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "object" = Just Style'properties_dr3d'texture_generation_mode_x_object
	    translate "parallel" = Just Style'properties_dr3d'texture_generation_mode_x_parallel
	    translate "sphere" = Just Style'properties_dr3d'texture_generation_mode_x_sphere
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_dr3d'texture_generation_mode_x_object = Just (n, str2attr "object")
    toAttrFrTyp n Style'properties_dr3d'texture_generation_mode_x_parallel = Just (n, str2attr "parallel")
    toAttrFrTyp n Style'properties_dr3d'texture_generation_mode_x_sphere = Just (n, str2attr "sphere")
instance XmlAttrType Style'properties_dr3d'texture_generation_mode_y where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "object" = Just Style'properties_dr3d'texture_generation_mode_y_object
	    translate "parallel" = Just Style'properties_dr3d'texture_generation_mode_y_parallel
	    translate "sphere" = Just Style'properties_dr3d'texture_generation_mode_y_sphere
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_dr3d'texture_generation_mode_y_object = Just (n, str2attr "object")
    toAttrFrTyp n Style'properties_dr3d'texture_generation_mode_y_parallel = Just (n, str2attr "parallel")
    toAttrFrTyp n Style'properties_dr3d'texture_generation_mode_y_sphere = Just (n, str2attr "sphere")
instance XmlAttrType Style'properties_dr3d'texture_kind where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "luminance" = Just Style'properties_dr3d'texture_kind_luminance
	    translate "intesity" = Just Style'properties_dr3d'texture_kind_intesity
	    translate "color" = Just Style'properties_dr3d'texture_kind_color
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_dr3d'texture_kind_luminance = Just (n, str2attr "luminance")
    toAttrFrTyp n Style'properties_dr3d'texture_kind_intesity = Just (n, str2attr "intesity")
    toAttrFrTyp n Style'properties_dr3d'texture_kind_color = Just (n, str2attr "color")
instance XmlAttrType Style'properties_dr3d'texture_filter where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "enabled" = Just Style'properties_dr3d'texture_filter_enabled
	    translate "disabled" = Just Style'properties_dr3d'texture_filter_disabled
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_dr3d'texture_filter_enabled = Just (n, str2attr "enabled")
    toAttrFrTyp n Style'properties_dr3d'texture_filter_disabled = Just (n, str2attr "disabled")
instance XmlAttrType Style'properties_dr3d'texture_mode where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "replace" = Just Style'properties_dr3d'texture_mode_replace
	    translate "modulate" = Just Style'properties_dr3d'texture_mode_modulate
	    translate "blend" = Just Style'properties_dr3d'texture_mode_blend
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_dr3d'texture_mode_replace = Just (n, str2attr "replace")
    toAttrFrTyp n Style'properties_dr3d'texture_mode_modulate = Just (n, str2attr "modulate")
    toAttrFrTyp n Style'properties_dr3d'texture_mode_blend = Just (n, str2attr "blend")
instance XmlAttrType Style'properties_dr3d'shadow where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "visible" = Just Style'properties_dr3d'shadow_visible
	    translate "hidden" = Just Style'properties_dr3d'shadow_hidden
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_dr3d'shadow_visible = Just (n, str2attr "visible")
    toAttrFrTyp n Style'properties_dr3d'shadow_hidden = Just (n, str2attr "hidden")
instance XmlAttrType Style'properties_chart'solid_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "cuboid" = Just Style'properties_chart'solid_type_cuboid
	    translate "cylinder" = Just Style'properties_chart'solid_type_cylinder
	    translate "cone" = Just Style'properties_chart'solid_type_cone
	    translate "pyramid" = Just Style'properties_chart'solid_type_pyramid
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_chart'solid_type_cuboid = Just (n, str2attr "cuboid")
    toAttrFrTyp n Style'properties_chart'solid_type_cylinder = Just (n, str2attr "cylinder")
    toAttrFrTyp n Style'properties_chart'solid_type_cone = Just (n, str2attr "cone")
    toAttrFrTyp n Style'properties_chart'solid_type_pyramid = Just (n, str2attr "pyramid")
instance XmlAttrType Style'properties_chart'series_source where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "columns" = Just Style'properties_chart'series_source_columns
	    translate "rows" = Just Style'properties_chart'series_source_rows
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_chart'series_source_columns = Just (n, str2attr "columns")
    toAttrFrTyp n Style'properties_chart'series_source_rows = Just (n, str2attr "rows")
instance XmlAttrType Style'properties_chart'label_arrangement where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "side-by-side" = Just Style'properties_chart'label_arrangement_side_by_side
	    translate "stagger-even" = Just Style'properties_chart'label_arrangement_stagger_even
	    translate "stagger-odd" = Just Style'properties_chart'label_arrangement_stagger_odd
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_chart'label_arrangement_side_by_side = Just (n, str2attr "side-by-side")
    toAttrFrTyp n Style'properties_chart'label_arrangement_stagger_even = Just (n, str2attr "stagger-even")
    toAttrFrTyp n Style'properties_chart'label_arrangement_stagger_odd = Just (n, str2attr "stagger-odd")
instance XmlAttrType Style'properties_chart'error_category where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Style'properties_chart'error_category_none
	    translate "variance" = Just Style'properties_chart'error_category_variance
	    translate "standard-deviation" = Just Style'properties_chart'error_category_standard_deviation
	    translate "percentage" = Just Style'properties_chart'error_category_percentage
	    translate "error-margin" = Just Style'properties_chart'error_category_error_margin
	    translate "constant" = Just Style'properties_chart'error_category_constant
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_chart'error_category_none = Just (n, str2attr "none")
    toAttrFrTyp n Style'properties_chart'error_category_variance = Just (n, str2attr "variance")
    toAttrFrTyp n Style'properties_chart'error_category_standard_deviation = Just (n, str2attr "standard-deviation")
    toAttrFrTyp n Style'properties_chart'error_category_percentage = Just (n, str2attr "percentage")
    toAttrFrTyp n Style'properties_chart'error_category_error_margin = Just (n, str2attr "error-margin")
    toAttrFrTyp n Style'properties_chart'error_category_constant = Just (n, str2attr "constant")
instance XmlAttrType Style'properties_chart'regression_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Style'properties_chart'regression_type_none
	    translate "linear" = Just Style'properties_chart'regression_type_linear
	    translate "logarithmic" = Just Style'properties_chart'regression_type_logarithmic
	    translate "exponential" = Just Style'properties_chart'regression_type_exponential
	    translate "power" = Just Style'properties_chart'regression_type_power
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_chart'regression_type_none = Just (n, str2attr "none")
    toAttrFrTyp n Style'properties_chart'regression_type_linear = Just (n, str2attr "linear")
    toAttrFrTyp n Style'properties_chart'regression_type_logarithmic = Just (n, str2attr "logarithmic")
    toAttrFrTyp n Style'properties_chart'regression_type_exponential = Just (n, str2attr "exponential")
    toAttrFrTyp n Style'properties_chart'regression_type_power = Just (n, str2attr "power")
instance XmlAttrType Style'properties_chart'data_label_number where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Style'properties_chart'data_label_number_none
	    translate "value" = Just Style'properties_chart'data_label_number_value
	    translate "percentage" = Just Style'properties_chart'data_label_number_percentage
	    translate _ = Nothing
    toAttrFrTyp n Style'properties_chart'data_label_number_none = Just (n, str2attr "none")
    toAttrFrTyp n Style'properties_chart'data_label_number_value = Just (n, str2attr "value")
    toAttrFrTyp n Style'properties_chart'data_label_number_percentage = Just (n, str2attr "percentage")
instance XmlContent Style'tab_stops where
    fromElem (CElem (Elem "style:tab-stops" [] c0):rest) =
	(\(a,ca)->
	   (Just (Style'tab_stops a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Style'tab_stops a) =
	[CElem (Elem "style:tab-stops" [] (concatMap toElem a))]
instance XmlContent Style'tab_stop where
    fromElem (CElem (Elem "style:tab-stop" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "style:tab-stop" (toAttrs as) [])]
instance XmlAttributes Style'tab_stop where
    fromAttrs as =
	Style'tab_stop
	  { style'tab_stopStyle'position = definiteA fromAttrToStr "style:tab-stop" "style:position" as
	  , style'tab_stopStyle'type = defaultA fromAttrToTyp Style'tab_stop_style'type_left "style:type" as
	  , style'tab_stopStyle'char = possibleA fromAttrToStr "style:char" as
	  , style'tab_stopStyle'leader_char = defaultA fromAttrToStr " " "style:leader-char" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "style:position" (style'tab_stopStyle'position v)
	, defaultToAttr toAttrFrTyp "style:type" (style'tab_stopStyle'type v)
	, maybeToAttr toAttrFrStr "style:char" (style'tab_stopStyle'char v)
	, defaultToAttr toAttrFrStr "style:leader-char" (style'tab_stopStyle'leader_char v)
	]
instance XmlAttrType Style'tab_stop_style'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "left" = Just Style'tab_stop_style'type_left
	    translate "center" = Just Style'tab_stop_style'type_center
	    translate "right" = Just Style'tab_stop_style'type_right
	    translate "char" = Just Style'tab_stop_style'type_char
	    translate "default" = Just Style'tab_stop_style'type_default
	    translate _ = Nothing
    toAttrFrTyp n Style'tab_stop_style'type_left = Just (n, str2attr "left")
    toAttrFrTyp n Style'tab_stop_style'type_center = Just (n, str2attr "center")
    toAttrFrTyp n Style'tab_stop_style'type_right = Just (n, str2attr "right")
    toAttrFrTyp n Style'tab_stop_style'type_char = Just (n, str2attr "char")
    toAttrFrTyp n Style'tab_stop_style'type_default = Just (n, str2attr "default")
instance XmlContent Style'drop_cap where
    fromElem (CElem (Elem "style:drop-cap" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "style:drop-cap" (toAttrs as) [])]
instance XmlAttributes Style'drop_cap where
    fromAttrs as =
	Style'drop_cap
	  { style'drop_capStyle'length = defaultA fromAttrToStr "1" "style:length" as
	  , style'drop_capStyle'lines = defaultA fromAttrToStr "1" "style:lines" as
	  , style'drop_capStyle'distance = defaultA fromAttrToStr "0cm" "style:distance" as
	  , style'drop_capStyle'style_name = possibleA fromAttrToStr "style:style-name" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "style:length" (style'drop_capStyle'length v)
	, defaultToAttr toAttrFrStr "style:lines" (style'drop_capStyle'lines v)
	, defaultToAttr toAttrFrStr "style:distance" (style'drop_capStyle'distance v)
	, maybeToAttr toAttrFrStr "style:style-name" (style'drop_capStyle'style_name v)
	]
instance XmlContent Style'background_image where
    fromElem (CElem (Elem "style:background-image" as c0):rest) =
	(\(a,ca)->
	   (Just (Style'background_image (fromAttrs as) a), rest))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Style'background_image as a) =
	[CElem (Elem "style:background-image" (toAttrs as) (maybe [] toElem a))]
instance XmlAttributes Style'background_image_Attrs where
    fromAttrs as =
	Style'background_image_Attrs
	  { style'background_imageXlink'type = possibleA fromAttrToTyp "xlink:type" as
	  , style'background_imageXlink'href = possibleA fromAttrToStr "xlink:href" as
	  , style'background_imageXlink'show = possibleA fromAttrToTyp "xlink:show" as
	  , style'background_imageXlink'actuate = possibleA fromAttrToTyp "xlink:actuate" as
	  , style'background_imageStyle'repeat = defaultA fromAttrToTyp Style'background_image_style'repeat_repeat "style:repeat" as
	  , style'background_imageStyle'position = defaultA fromAttrToStr "center" "style:position" as
	  , style'background_imageStyle'filter_name = possibleA fromAttrToStr "style:filter-name" as
	  , style'background_imageDraw'transparency = possibleA fromAttrToStr "draw:transparency" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrTyp "xlink:type" (style'background_imageXlink'type v)
	, maybeToAttr toAttrFrStr "xlink:href" (style'background_imageXlink'href v)
	, maybeToAttr toAttrFrTyp "xlink:show" (style'background_imageXlink'show v)
	, maybeToAttr toAttrFrTyp "xlink:actuate" (style'background_imageXlink'actuate v)
	, defaultToAttr toAttrFrTyp "style:repeat" (style'background_imageStyle'repeat v)
	, defaultToAttr toAttrFrStr "style:position" (style'background_imageStyle'position v)
	, maybeToAttr toAttrFrStr "style:filter-name" (style'background_imageStyle'filter_name v)
	, maybeToAttr toAttrFrStr "draw:transparency" (style'background_imageDraw'transparency v)
	]
instance XmlAttrType Style'background_image_xlink'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "simple" = Just Style'background_image_xlink'type_simple
	    translate _ = Nothing
    toAttrFrTyp n Style'background_image_xlink'type_simple = Just (n, str2attr "simple")
instance XmlAttrType Style'background_image_xlink'show where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "embed" = Just Style'background_image_xlink'show_embed
	    translate _ = Nothing
    toAttrFrTyp n Style'background_image_xlink'show_embed = Just (n, str2attr "embed")
instance XmlAttrType Style'background_image_xlink'actuate where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "onLoad" = Just Style'background_image_xlink'actuate_onLoad
	    translate _ = Nothing
    toAttrFrTyp n Style'background_image_xlink'actuate_onLoad = Just (n, str2attr "onLoad")
instance XmlAttrType Style'background_image_style'repeat where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "no-repeat" = Just Style'background_image_style'repeat_no_repeat
	    translate "repeat" = Just Style'background_image_style'repeat_repeat
	    translate "stretch" = Just Style'background_image_style'repeat_stretch
	    translate _ = Nothing
    toAttrFrTyp n Style'background_image_style'repeat_no_repeat = Just (n, str2attr "no-repeat")
    toAttrFrTyp n Style'background_image_style'repeat_repeat = Just (n, str2attr "repeat")
    toAttrFrTyp n Style'background_image_style'repeat_stretch = Just (n, str2attr "stretch")
instance XmlContent Style'symbol_image where
    fromElem (CElem (Elem "style:symbol-image" as c0):rest) =
	(\(a,ca)->
	   (Just (Style'symbol_image (fromAttrs as) a), rest))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Style'symbol_image as a) =
	[CElem (Elem "style:symbol-image" (toAttrs as) (maybe [] toElem a))]
instance XmlAttributes Style'symbol_image_Attrs where
    fromAttrs as =
	Style'symbol_image_Attrs
	  { style'symbol_imageXlink'type = possibleA fromAttrToTyp "xlink:type" as
	  , style'symbol_imageXlink'href = possibleA fromAttrToStr "xlink:href" as
	  , style'symbol_imageXlink'show = possibleA fromAttrToTyp "xlink:show" as
	  , style'symbol_imageXlink'actuate = possibleA fromAttrToTyp "xlink:actuate" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrTyp "xlink:type" (style'symbol_imageXlink'type v)
	, maybeToAttr toAttrFrStr "xlink:href" (style'symbol_imageXlink'href v)
	, maybeToAttr toAttrFrTyp "xlink:show" (style'symbol_imageXlink'show v)
	, maybeToAttr toAttrFrTyp "xlink:actuate" (style'symbol_imageXlink'actuate v)
	]
instance XmlAttrType Style'symbol_image_xlink'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "simple" = Just Style'symbol_image_xlink'type_simple
	    translate _ = Nothing
    toAttrFrTyp n Style'symbol_image_xlink'type_simple = Just (n, str2attr "simple")
instance XmlAttrType Style'symbol_image_xlink'show where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "embed" = Just Style'symbol_image_xlink'show_embed
	    translate _ = Nothing
    toAttrFrTyp n Style'symbol_image_xlink'show_embed = Just (n, str2attr "embed")
instance XmlAttrType Style'symbol_image_xlink'actuate where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "onLoad" = Just Style'symbol_image_xlink'actuate_onLoad
	    translate _ = Nothing
    toAttrFrTyp n Style'symbol_image_xlink'actuate_onLoad = Just (n, str2attr "onLoad")
instance XmlContent Style'columns where
    fromElem (CElem (Elem "style:columns" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Style'columns (fromAttrs as) a b), rest))
	   (many fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Style'columns as a b) =
	[CElem (Elem "style:columns" (toAttrs as) (maybe [] toElem a ++
						   concatMap toElem b))]
instance XmlAttributes Style'columns_Attrs where
    fromAttrs as =
	Style'columns_Attrs
	  { style'columnsFo'column_count = possibleA fromAttrToStr "fo:column-count" as
	  , style'columnsFo'column_gap = possibleA fromAttrToStr "fo:column-gap" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "fo:column-count" (style'columnsFo'column_count v)
	, maybeToAttr toAttrFrStr "fo:column-gap" (style'columnsFo'column_gap v)
	]
instance XmlContent Style'column where
    fromElem (CElem (Elem "style:column" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "style:column" (toAttrs as) [])]
instance XmlAttributes Style'column where
    fromAttrs as =
	Style'column
	  { style'columnStyle'rel_width = possibleA fromAttrToStr "style:rel-width" as
	  , style'columnFo'margin_left = possibleA fromAttrToStr "fo:margin-left" as
	  , style'columnFo'margin_right = possibleA fromAttrToStr "fo:margin-right" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "style:rel-width" (style'columnStyle'rel_width v)
	, maybeToAttr toAttrFrStr "fo:margin-left" (style'columnFo'margin_left v)
	, maybeToAttr toAttrFrStr "fo:margin-right" (style'columnFo'margin_right v)
	]
instance XmlContent Style'column_sep where
    fromElem (CElem (Elem "style:column-sep" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "style:column-sep" (toAttrs as) [])]
instance XmlAttributes Style'column_sep where
    fromAttrs as =
	Style'column_sep
	  { style'column_sepStyle'style = defaultA fromAttrToTyp Style'column_sep_style'style_solid "style:style" as
	  , style'column_sepStyle'width = definiteA fromAttrToStr "style:column-sep" "style:width" as
	  , style'column_sepStyle'height = defaultA fromAttrToStr "100%" "style:height" as
	  , style'column_sepStyle'vertical_align = defaultA fromAttrToTyp Style'column_sep_style'vertical_align_top "style:vertical-align" as
	  , style'column_sepStyle'color = defaultA fromAttrToStr "#000000" "style:color" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrTyp "style:style" (style'column_sepStyle'style v)
	, toAttrFrStr "style:width" (style'column_sepStyle'width v)
	, defaultToAttr toAttrFrStr "style:height" (style'column_sepStyle'height v)
	, defaultToAttr toAttrFrTyp "style:vertical-align" (style'column_sepStyle'vertical_align v)
	, defaultToAttr toAttrFrStr "style:color" (style'column_sepStyle'color v)
	]
instance XmlAttrType Style'column_sep_style'style where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Style'column_sep_style'style_none
	    translate "solid" = Just Style'column_sep_style'style_solid
	    translate "dotted" = Just Style'column_sep_style'style_dotted
	    translate "dashed" = Just Style'column_sep_style'style_dashed
	    translate "dot-dashed" = Just Style'column_sep_style'style_dot_dashed
	    translate _ = Nothing
    toAttrFrTyp n Style'column_sep_style'style_none = Just (n, str2attr "none")
    toAttrFrTyp n Style'column_sep_style'style_solid = Just (n, str2attr "solid")
    toAttrFrTyp n Style'column_sep_style'style_dotted = Just (n, str2attr "dotted")
    toAttrFrTyp n Style'column_sep_style'style_dashed = Just (n, str2attr "dashed")
    toAttrFrTyp n Style'column_sep_style'style_dot_dashed = Just (n, str2attr "dot-dashed")
instance XmlAttrType Style'column_sep_style'vertical_align where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "top" = Just Style'column_sep_style'vertical_align_top
	    translate "middle" = Just Style'column_sep_style'vertical_align_middle
	    translate "bottom" = Just Style'column_sep_style'vertical_align_bottom
	    translate _ = Nothing
    toAttrFrTyp n Style'column_sep_style'vertical_align_top = Just (n, str2attr "top")
    toAttrFrTyp n Style'column_sep_style'vertical_align_middle = Just (n, str2attr "middle")
    toAttrFrTyp n Style'column_sep_style'vertical_align_bottom = Just (n, str2attr "bottom")
instance XmlContent Style'page_master where
    fromElem (CElem (Elem "style:page-master" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (Just (Style'page_master (fromAttrs as) a b c), rest))
	      (fromElem cb))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Style'page_master as a b c) =
	[CElem (Elem "style:page-master" (toAttrs as) (maybe [] toElem a ++
						       maybe [] toElem b ++ maybe [] toElem c))]
instance XmlAttributes Style'page_master_Attrs where
    fromAttrs as =
	Style'page_master_Attrs
	  { style'page_masterStyle'name = definiteA fromAttrToStr "style:page-master" "style:name" as
	  , style'page_masterStyle'page_usage = defaultA fromAttrToTyp Style'page_master_style'page_usage_all "style:page-usage" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "style:name" (style'page_masterStyle'name v)
	, defaultToAttr toAttrFrTyp "style:page-usage" (style'page_masterStyle'page_usage v)
	]
instance XmlAttrType Style'page_master_style'page_usage where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "all" = Just Style'page_master_style'page_usage_all
	    translate "left" = Just Style'page_master_style'page_usage_left
	    translate "right" = Just Style'page_master_style'page_usage_right
	    translate "mirrored" = Just Style'page_master_style'page_usage_mirrored
	    translate _ = Nothing
    toAttrFrTyp n Style'page_master_style'page_usage_all = Just (n, str2attr "all")
    toAttrFrTyp n Style'page_master_style'page_usage_left = Just (n, str2attr "left")
    toAttrFrTyp n Style'page_master_style'page_usage_right = Just (n, str2attr "right")
    toAttrFrTyp n Style'page_master_style'page_usage_mirrored = Just (n, str2attr "mirrored")
instance XmlContent Style'header_style where
    fromElem (CElem (Elem "style:header-style" [] c0):rest) =
	(\(a,ca)->
	   (Just (Style'header_style a), rest))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Style'header_style a) =
	[CElem (Elem "style:header-style" [] (maybe [] toElem a))]
instance XmlContent Style'footer_style where
    fromElem (CElem (Elem "style:footer-style" [] c0):rest) =
	(\(a,ca)->
	   (Just (Style'footer_style a), rest))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Style'footer_style a) =
	[CElem (Elem "style:footer-style" [] (maybe [] toElem a))]
instance XmlContent Style'footnote_sep where
    fromElem (CElem (Elem "style:footnote-sep" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "style:footnote-sep" (toAttrs as) [])]
instance XmlAttributes Style'footnote_sep where
    fromAttrs as =
	Style'footnote_sep
	  { style'footnote_sepStyle'width = possibleA fromAttrToStr "style:width" as
	  , style'footnote_sepStyle'rel_width = possibleA fromAttrToStr "style:rel-width" as
	  , style'footnote_sepStyle'color = possibleA fromAttrToStr "style:color" as
	  , style'footnote_sepStyle'adjustment = defaultA fromAttrToTyp Style'footnote_sep_style'adjustment_left "style:adjustment" as
	  , style'footnote_sepStyle'distance_before_sep = possibleA fromAttrToStr "style:distance-before-sep" as
	  , style'footnote_sepStyle'distance_after_sep = possibleA fromAttrToStr "style:distance-after-sep" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "style:width" (style'footnote_sepStyle'width v)
	, maybeToAttr toAttrFrStr "style:rel-width" (style'footnote_sepStyle'rel_width v)
	, maybeToAttr toAttrFrStr "style:color" (style'footnote_sepStyle'color v)
	, defaultToAttr toAttrFrTyp "style:adjustment" (style'footnote_sepStyle'adjustment v)
	, maybeToAttr toAttrFrStr "style:distance-before-sep" (style'footnote_sepStyle'distance_before_sep v)
	, maybeToAttr toAttrFrStr "style:distance-after-sep" (style'footnote_sepStyle'distance_after_sep v)
	]
instance XmlAttrType Style'footnote_sep_style'adjustment where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "left" = Just Style'footnote_sep_style'adjustment_left
	    translate "center" = Just Style'footnote_sep_style'adjustment_center
	    translate "right" = Just Style'footnote_sep_style'adjustment_right
	    translate _ = Nothing
    toAttrFrTyp n Style'footnote_sep_style'adjustment_left = Just (n, str2attr "left")
    toAttrFrTyp n Style'footnote_sep_style'adjustment_center = Just (n, str2attr "center")
    toAttrFrTyp n Style'footnote_sep_style'adjustment_right = Just (n, str2attr "right")
instance XmlContent Style'master_page where
    fromElem (CElem (Elem "style:master-page" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (\(d,cd)->
		    (\(e,ce)->
		       (\(f,cf)->
			  (Just (Style'master_page (fromAttrs as) a b c d e f), rest))
		       (fromElem ce))
		    (many fromElem cd))
		 (many fromElem cc))
	      (fromElem cb))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Style'master_page as a b c d e f) =
	[CElem (Elem "style:master-page" (toAttrs as) (maybe [] toElem a ++
						       maybe [] toElem b ++ maybe [] toElem c ++
						       concatMap toElem d ++ concatMap toElem e ++
						       maybe [] toElem f))]
instance XmlAttributes Style'master_page_Attrs where
    fromAttrs as =
	Style'master_page_Attrs
	  { style'master_pageStyle'name = definiteA fromAttrToStr "style:master-page" "style:name" as
	  , style'master_pageStyle'page_master_name = definiteA fromAttrToStr "style:master-page" "style:page-master-name" as
	  , style'master_pageStyle'next_style_name = possibleA fromAttrToStr "style:next-style-name" as
	  , style'master_pageDraw'style_name = possibleA fromAttrToStr "draw:style-name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "style:name" (style'master_pageStyle'name v)
	, toAttrFrStr "style:page-master-name" (style'master_pageStyle'page_master_name v)
	, maybeToAttr toAttrFrStr "style:next-style-name" (style'master_pageStyle'next_style_name v)
	, maybeToAttr toAttrFrStr "draw:style-name" (style'master_pageDraw'style_name v)
	]
instance XmlContent Style'handout_master where
    fromElem (CElem (Elem "style:handout-master" as c0):rest) =
	(\(a,ca)->
	   (Just (Style'handout_master (fromAttrs as) a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Style'handout_master as a) =
	[CElem (Elem "style:handout-master" (toAttrs as) (concatMap toElem a))]
instance XmlAttributes Style'handout_master_Attrs where
    fromAttrs as =
	Style'handout_master_Attrs
	  { style'handout_masterPresentation'presentation_page_layout_name = possibleA fromAttrToStr "presentation:presentation-page-layout-name" as
	  , style'handout_masterStyle'page_master_name = possibleA fromAttrToStr "style:page-master-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "presentation:presentation-page-layout-name" (style'handout_masterPresentation'presentation_page_layout_name v)
	, maybeToAttr toAttrFrStr "style:page-master-name" (style'handout_masterStyle'page_master_name v)
	]
instance XmlContent Style'header where
    fromElem (CElem (Elem "style:header" as c0):rest) =
	case (\(a,ca)->
		(\(b,cb)->
		   (\(c,cc)->
		      (\(d,cd)->
			 (\(e,ce)->
			    (\(f,cf)->
			       (a,b,c,d,e,f,cf))
			    (many fromElem ce))
			 (fromElem cd))
		      (fromElem cc))
		   (fromElem cb))
		(fromElem ca))
	     (fromElem c0) of
	(a,b,c,d,e,f,_) -> (Just (Style'headerText'variable_decls_Text'sequence_decls_Text'user_field_decls_Text'dde_connection_decls_Text'alphabetical_index_auto_mark_file_Text'h_Text'p_Text'ordered_list_Text'unordered_list_Table'table_Text'section_Text'table_of_content_Text'illustration_index_Text'table_index_Text'object_index_Text'user_index_Text'alphabetical_index_Text'bibliography_Text'index_title_Text'change_Text'change_start_Text'change_end (fromAttrs as) a
																																																										   b
																																																										   c
																																																										   d
																																																										   e
																																																										   f), rest)
	(Nothing,Nothing,Nothing,Nothing,Nothing,[],_) ->
		case (\(a,ca)->
			(\(b,cb)->
			   (\(c,cc)->
			      (a,b,c,cc))
			   (fromElem cb))
			(fromElem ca))
		     (fromElem c0) of
		(a,b,c,_) -> (Just (Style'headerStyle'region_left_Style'region_center_Style'region_right (fromAttrs as) a
															b
															c), rest)
		(Nothing,Nothing,Nothing,_) ->
		    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Style'headerText'variable_decls_Text'sequence_decls_Text'user_field_decls_Text'dde_connection_decls_Text'alphabetical_index_auto_mark_file_Text'h_Text'p_Text'ordered_list_Text'unordered_list_Table'table_Text'section_Text'table_of_content_Text'illustration_index_Text'table_index_Text'object_index_Text'user_index_Text'alphabetical_index_Text'bibliography_Text'index_title_Text'change_Text'change_start_Text'change_end as a
																																																						 b
																																																						 c
																																																						 d
																																																						 e
																																																						 f) = [CElem (Elem "style:header" (toAttrs as) (maybe [] toElem a
																																																												++
																																																												maybe [] toElem b
																																																												++
																																																												maybe [] toElem c
																																																												++
																																																												maybe [] toElem d
																																																												++
																																																												maybe [] toElem e
																																																												++
																																																												concatMap toElem f) )]
    toElem (Style'headerStyle'region_left_Style'region_center_Style'region_right as a
										    b
										    c) = [CElem (Elem "style:header" (toAttrs as) (maybe [] toElem a
																   ++
																   maybe [] toElem b
																   ++
																   maybe [] toElem c) )]
instance XmlAttributes Style'header_Attrs where
    fromAttrs as =
	Style'header_Attrs
	  { style'headerStyle'display = defaultA fromAttrToStr "true" "style:display" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "style:display" (style'headerStyle'display v)
	]
instance XmlContent Style'footer where
    fromElem (CElem (Elem "style:footer" as c0):rest) =
	case (\(a,ca)->
		(\(b,cb)->
		   (\(c,cc)->
		      (\(d,cd)->
			 (\(e,ce)->
			    (\(f,cf)->
			       (a,b,c,d,e,f,cf))
			    (many fromElem ce))
			 (fromElem cd))
		      (fromElem cc))
		   (fromElem cb))
		(fromElem ca))
	     (fromElem c0) of
	(a,b,c,d,e,f,_) -> (Just (Style'footerText'variable_decls_Text'sequence_decls_Text'user_field_decls_Text'dde_connection_decls_Text'alphabetical_index_auto_mark_file_Text'h_Text'p_Text'ordered_list_Text'unordered_list_Table'table_Text'section_Text'table_of_content_Text'illustration_index_Text'table_index_Text'object_index_Text'user_index_Text'alphabetical_index_Text'bibliography_Text'index_title_Text'change_Text'change_start_Text'change_end (fromAttrs as) a
																																																										   b
																																																										   c
																																																										   d
																																																										   e
																																																										   f), rest)
	(Nothing,Nothing,Nothing,Nothing,Nothing,[],_) ->
		case (\(a,ca)->
			(\(b,cb)->
			   (\(c,cc)->
			      (a,b,c,cc))
			   (fromElem cb))
			(fromElem ca))
		     (fromElem c0) of
		(a,b,c,_) -> (Just (Style'footerStyle'region_left_Style'region_center_Style'region_right (fromAttrs as) a
															b
															c), rest)
		(Nothing,Nothing,Nothing,_) ->
		    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Style'footerText'variable_decls_Text'sequence_decls_Text'user_field_decls_Text'dde_connection_decls_Text'alphabetical_index_auto_mark_file_Text'h_Text'p_Text'ordered_list_Text'unordered_list_Table'table_Text'section_Text'table_of_content_Text'illustration_index_Text'table_index_Text'object_index_Text'user_index_Text'alphabetical_index_Text'bibliography_Text'index_title_Text'change_Text'change_start_Text'change_end as a
																																																						 b
																																																						 c
																																																						 d
																																																						 e
																																																						 f) = [CElem (Elem "style:footer" (toAttrs as) (maybe [] toElem a
																																																												++
																																																												maybe [] toElem b
																																																												++
																																																												maybe [] toElem c
																																																												++
																																																												maybe [] toElem d
																																																												++
																																																												maybe [] toElem e
																																																												++
																																																												concatMap toElem f) )]
    toElem (Style'footerStyle'region_left_Style'region_center_Style'region_right as a
										    b
										    c) = [CElem (Elem "style:footer" (toAttrs as) (maybe [] toElem a
																   ++
																   maybe [] toElem b
																   ++
																   maybe [] toElem c) )]
instance XmlAttributes Style'footer_Attrs where
    fromAttrs as =
	Style'footer_Attrs
	  { style'footerStyle'display = defaultA fromAttrToStr "true" "style:display" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "style:display" (style'footerStyle'display v)
	]
instance XmlContent Style'header_left where
    fromElem (CElem (Elem "style:header-left" as c0):rest) =
	case (\(a,ca)->
		(\(b,cb)->
		   (\(c,cc)->
		      (\(d,cd)->
			 (\(e,ce)->
			    (\(f,cf)->
			       (a,b,c,d,e,f,cf))
			    (many fromElem ce))
			 (fromElem cd))
		      (fromElem cc))
		   (fromElem cb))
		(fromElem ca))
	     (fromElem c0) of
	(a,b,c,d,e,f,_) -> (Just (Style'header_leftText'variable_decls_Text'sequence_decls_Text'user_field_decls_Text'dde_connection_decls_Text'alphabetical_index_auto_mark_file_Text'h_Text'p_Text'ordered_list_Text'unordered_list_Table'table_Text'section_Text'table_of_content_Text'illustration_index_Text'table_index_Text'object_index_Text'user_index_Text'alphabetical_index_Text'bibliography_Text'index_title_Text'change_Text'change_start_Text'change_end (fromAttrs as) a
																																																											b
																																																											c
																																																											d
																																																											e
																																																											f), rest)
	(Nothing,Nothing,Nothing,Nothing,Nothing,[],_) ->
		case (\(a,ca)->
			(\(b,cb)->
			   (\(c,cc)->
			      (a,b,c,cc))
			   (fromElem cb))
			(fromElem ca))
		     (fromElem c0) of
		(a,b,c,_) -> (Just (Style'header_leftStyle'region_left_Style'region_center_Style'region_right (fromAttrs as) a
															     b
															     c), rest)
		(Nothing,Nothing,Nothing,_) ->
		    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Style'header_leftText'variable_decls_Text'sequence_decls_Text'user_field_decls_Text'dde_connection_decls_Text'alphabetical_index_auto_mark_file_Text'h_Text'p_Text'ordered_list_Text'unordered_list_Table'table_Text'section_Text'table_of_content_Text'illustration_index_Text'table_index_Text'object_index_Text'user_index_Text'alphabetical_index_Text'bibliography_Text'index_title_Text'change_Text'change_start_Text'change_end as a
																																																						      b
																																																						      c
																																																						      d
																																																						      e
																																																						      f) = [CElem (Elem "style:header-left" (toAttrs as) (maybe [] toElem a
																																																													  ++
																																																													  maybe [] toElem b
																																																													  ++
																																																													  maybe [] toElem c
																																																													  ++
																																																													  maybe [] toElem d
																																																													  ++
																																																													  maybe [] toElem e
																																																													  ++
																																																													  concatMap toElem f) )]
    toElem (Style'header_leftStyle'region_left_Style'region_center_Style'region_right as a
											 b
											 c) = [CElem (Elem "style:header-left" (toAttrs as) (maybe [] toElem a
																	     ++
																	     maybe [] toElem b
																	     ++
																	     maybe [] toElem c) )]
instance XmlAttributes Style'header_left_Attrs where
    fromAttrs as =
	Style'header_left_Attrs
	  { style'header_leftStyle'display = defaultA fromAttrToStr "true" "style:display" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "style:display" (style'header_leftStyle'display v)
	]
instance XmlContent Style'footer_left where
    fromElem (CElem (Elem "style:footer-left" as c0):rest) =
	case (\(a,ca)->
		(\(b,cb)->
		   (\(c,cc)->
		      (\(d,cd)->
			 (\(e,ce)->
			    (\(f,cf)->
			       (a,b,c,d,e,f,cf))
			    (many fromElem ce))
			 (fromElem cd))
		      (fromElem cc))
		   (fromElem cb))
		(fromElem ca))
	     (fromElem c0) of
	(a,b,c,d,e,f,_) -> (Just (Style'footer_leftText'variable_decls_Text'sequence_decls_Text'user_field_decls_Text'dde_connection_decls_Text'alphabetical_index_auto_mark_file_Text'h_Text'p_Text'ordered_list_Text'unordered_list_Table'table_Text'section_Text'table_of_content_Text'illustration_index_Text'table_index_Text'object_index_Text'user_index_Text'alphabetical_index_Text'bibliography_Text'index_title_Text'change_Text'change_start_Text'change_end (fromAttrs as) a
																																																											b
																																																											c
																																																											d
																																																											e
																																																											f), rest)
	(Nothing,Nothing,Nothing,Nothing,Nothing,[],_) ->
		case (\(a,ca)->
			(\(b,cb)->
			   (\(c,cc)->
			      (a,b,c,cc))
			   (fromElem cb))
			(fromElem ca))
		     (fromElem c0) of
		(a,b,c,_) -> (Just (Style'footer_leftStyle'region_left_Style'region_center_Style'region_right (fromAttrs as) a
															     b
															     c), rest)
		(Nothing,Nothing,Nothing,_) ->
		    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Style'footer_leftText'variable_decls_Text'sequence_decls_Text'user_field_decls_Text'dde_connection_decls_Text'alphabetical_index_auto_mark_file_Text'h_Text'p_Text'ordered_list_Text'unordered_list_Table'table_Text'section_Text'table_of_content_Text'illustration_index_Text'table_index_Text'object_index_Text'user_index_Text'alphabetical_index_Text'bibliography_Text'index_title_Text'change_Text'change_start_Text'change_end as a
																																																						      b
																																																						      c
																																																						      d
																																																						      e
																																																						      f) = [CElem (Elem "style:footer-left" (toAttrs as) (maybe [] toElem a
																																																													  ++
																																																													  maybe [] toElem b
																																																													  ++
																																																													  maybe [] toElem c
																																																													  ++
																																																													  maybe [] toElem d
																																																													  ++
																																																													  maybe [] toElem e
																																																													  ++
																																																													  concatMap toElem f) )]
    toElem (Style'footer_leftStyle'region_left_Style'region_center_Style'region_right as a
											 b
											 c) = [CElem (Elem "style:footer-left" (toAttrs as) (maybe [] toElem a
																	     ++
																	     maybe [] toElem b
																	     ++
																	     maybe [] toElem c) )]
instance XmlAttributes Style'footer_left_Attrs where
    fromAttrs as =
	Style'footer_left_Attrs
	  { style'footer_leftStyle'display = defaultA fromAttrToStr "true" "style:display" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "style:display" (style'footer_leftStyle'display v)
	]
instance XmlContent Style'region_left where
    fromElem (CElem (Elem "style:region-left" [] c0):rest) =
	(\(a,ca)->
	   (Just (Style'region_left a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Style'region_left a) =
	[CElem (Elem "style:region-left" [] (concatMap toElem a))]
instance XmlContent Style'region_center where
    fromElem (CElem (Elem "style:region-center" [] c0):rest) =
	(\(a,ca)->
	   (Just (Style'region_center a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Style'region_center a) =
	[CElem (Elem "style:region-center" [] (concatMap toElem a))]
instance XmlContent Style'region_right where
    fromElem (CElem (Elem "style:region-right" [] c0):rest) =
	(\(a,ca)->
	   (Just (Style'region_right a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Style'region_right a) =
	[CElem (Elem "style:region-right" [] (concatMap toElem a))]
instance XmlContent Meta'generator where
    fromElem (CElem (Elem "meta:generator" [] c0):rest) =
	(\(a,ca)->
	   (Just (Meta'generator a), rest))
	(definite fromText "text" "meta:generator" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Meta'generator a) =
	[CElem (Elem "meta:generator" [] (toText a))]
instance XmlContent Dc'title where
    fromElem (CElem (Elem "dc:title" [] c0):rest) =
	(\(a,ca)->
	   (Just (Dc'title a), rest))
	(definite fromText "text" "dc:title" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Dc'title a) =
	[CElem (Elem "dc:title" [] (toText a))]
instance XmlContent Dc'description where
    fromElem (CElem (Elem "dc:description" [] c0):rest) =
	(\(a,ca)->
	   (Just (Dc'description a), rest))
	(definite fromText "text" "dc:description" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Dc'description a) =
	[CElem (Elem "dc:description" [] (toText a))]
instance XmlContent Dc'subject where
    fromElem (CElem (Elem "dc:subject" [] c0):rest) =
	(\(a,ca)->
	   (Just (Dc'subject a), rest))
	(definite fromText "text" "dc:subject" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Dc'subject a) =
	[CElem (Elem "dc:subject" [] (toText a))]
instance XmlContent Meta'keywords where
    fromElem (CElem (Elem "meta:keywords" [] c0):rest) =
	(\(a,ca)->
	   (Just (Meta'keywords a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Meta'keywords a) =
	[CElem (Elem "meta:keywords" [] (concatMap toElem a))]
instance XmlContent Meta'keyword where
    fromElem (CElem (Elem "meta:keyword" [] c0):rest) =
	(\(a,ca)->
	   (Just (Meta'keyword a), rest))
	(definite fromText "text" "meta:keyword" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Meta'keyword a) =
	[CElem (Elem "meta:keyword" [] (toText a))]
instance XmlContent Meta'initial_creator where
    fromElem (CElem (Elem "meta:initial-creator" [] c0):rest) =
	(\(a,ca)->
	   (Just (Meta'initial_creator a), rest))
	(definite fromText "text" "meta:initial-creator" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Meta'initial_creator a) =
	[CElem (Elem "meta:initial-creator" [] (toText a))]
instance XmlContent Dc'creator where
    fromElem (CElem (Elem "dc:creator" [] c0):rest) =
	(\(a,ca)->
	   (Just (Dc'creator a), rest))
	(definite fromText "text" "dc:creator" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Dc'creator a) =
	[CElem (Elem "dc:creator" [] (toText a))]
instance XmlContent Meta'printed_by where
    fromElem (CElem (Elem "meta:printed-by" [] c0):rest) =
	(\(a,ca)->
	   (Just (Meta'printed_by a), rest))
	(definite fromText "text" "meta:printed-by" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Meta'printed_by a) =
	[CElem (Elem "meta:printed-by" [] (toText a))]
instance XmlContent Meta'creation_date where
    fromElem (CElem (Elem "meta:creation-date" [] c0):rest) =
	(\(a,ca)->
	   (Just (Meta'creation_date a), rest))
	(definite fromText "text" "meta:creation-date" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Meta'creation_date a) =
	[CElem (Elem "meta:creation-date" [] (toText a))]
instance XmlContent Dc'date where
    fromElem (CElem (Elem "dc:date" [] c0):rest) =
	(\(a,ca)->
	   (Just (Dc'date a), rest))
	(definite fromText "text" "dc:date" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Dc'date a) =
	[CElem (Elem "dc:date" [] (toText a))]
instance XmlContent Meta'print_date where
    fromElem (CElem (Elem "meta:print-date" [] c0):rest) =
	(\(a,ca)->
	   (Just (Meta'print_date a), rest))
	(definite fromText "text" "meta:print-date" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Meta'print_date a) =
	[CElem (Elem "meta:print-date" [] (toText a))]
instance XmlContent Meta'template where
    fromElem (CElem (Elem "meta:template" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "meta:template" (toAttrs as) [])]
instance XmlAttributes Meta'template where
    fromAttrs as =
	Meta'template
	  { meta'templateXlink'type = defaultA fromAttrToTyp Meta'template_xlink'type_simple "xlink:type" as
	  , meta'templateXlink'actuate = defaultA fromAttrToTyp Meta'template_xlink'actuate_onRequest "xlink:actuate" as
	  , meta'templateXlink'href = definiteA fromAttrToStr "meta:template" "xlink:href" as
	  , meta'templateXlink'title = possibleA fromAttrToStr "xlink:title" as
	  , meta'templateMeta'date = possibleA fromAttrToStr "meta:date" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrTyp "xlink:type" (meta'templateXlink'type v)
	, defaultToAttr toAttrFrTyp "xlink:actuate" (meta'templateXlink'actuate v)
	, toAttrFrStr "xlink:href" (meta'templateXlink'href v)
	, maybeToAttr toAttrFrStr "xlink:title" (meta'templateXlink'title v)
	, maybeToAttr toAttrFrStr "meta:date" (meta'templateMeta'date v)
	]
instance XmlAttrType Meta'template_xlink'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "simple" = Just Meta'template_xlink'type_simple
	    translate _ = Nothing
    toAttrFrTyp n Meta'template_xlink'type_simple = Just (n, str2attr "simple")
instance XmlAttrType Meta'template_xlink'actuate where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "onRequest" = Just Meta'template_xlink'actuate_onRequest
	    translate _ = Nothing
    toAttrFrTyp n Meta'template_xlink'actuate_onRequest = Just (n, str2attr "onRequest")
instance XmlContent Meta'auto_reload where
    fromElem (CElem (Elem "meta:auto-reload" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "meta:auto-reload" (toAttrs as) [])]
instance XmlAttributes Meta'auto_reload where
    fromAttrs as =
	Meta'auto_reload
	  { meta'auto_reloadXlink'type = possibleA fromAttrToTyp "xlink:type" as
	  , meta'auto_reloadXlink'show = possibleA fromAttrToTyp "xlink:show" as
	  , meta'auto_reloadXlink'actuate = possibleA fromAttrToTyp "xlink:actuate" as
	  , meta'auto_reloadXlink'href = possibleA fromAttrToStr "xlink:href" as
	  , meta'auto_reloadMeta'delay = defaultA fromAttrToStr "P0S" "meta:delay" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrTyp "xlink:type" (meta'auto_reloadXlink'type v)
	, maybeToAttr toAttrFrTyp "xlink:show" (meta'auto_reloadXlink'show v)
	, maybeToAttr toAttrFrTyp "xlink:actuate" (meta'auto_reloadXlink'actuate v)
	, maybeToAttr toAttrFrStr "xlink:href" (meta'auto_reloadXlink'href v)
	, defaultToAttr toAttrFrStr "meta:delay" (meta'auto_reloadMeta'delay v)
	]
instance XmlAttrType Meta'auto_reload_xlink'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "simple" = Just Meta'auto_reload_xlink'type_simple
	    translate _ = Nothing
    toAttrFrTyp n Meta'auto_reload_xlink'type_simple = Just (n, str2attr "simple")
instance XmlAttrType Meta'auto_reload_xlink'show where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "replace" = Just Meta'auto_reload_xlink'show_replace
	    translate _ = Nothing
    toAttrFrTyp n Meta'auto_reload_xlink'show_replace = Just (n, str2attr "replace")
instance XmlAttrType Meta'auto_reload_xlink'actuate where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "onLoad" = Just Meta'auto_reload_xlink'actuate_onLoad
	    translate _ = Nothing
    toAttrFrTyp n Meta'auto_reload_xlink'actuate_onLoad = Just (n, str2attr "onLoad")
instance XmlContent Meta'hyperlink_behaviour where
    fromElem (CElem (Elem "meta:hyperlink-behaviour" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "meta:hyperlink-behaviour" (toAttrs as) [])]
instance XmlAttributes Meta'hyperlink_behaviour where
    fromAttrs as =
	Meta'hyperlink_behaviour
	  { meta'hyperlink_behaviourOffice'target_frame_name = possibleA fromAttrToStr "office:target-frame-name" as
	  , meta'hyperlink_behaviourXlink'show = possibleA fromAttrToTyp "xlink:show" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "office:target-frame-name" (meta'hyperlink_behaviourOffice'target_frame_name v)
	, maybeToAttr toAttrFrTyp "xlink:show" (meta'hyperlink_behaviourXlink'show v)
	]
instance XmlAttrType Meta'hyperlink_behaviour_xlink'show where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "new" = Just Meta'hyperlink_behaviour_xlink'show_new
	    translate "replace" = Just Meta'hyperlink_behaviour_xlink'show_replace
	    translate _ = Nothing
    toAttrFrTyp n Meta'hyperlink_behaviour_xlink'show_new = Just (n, str2attr "new")
    toAttrFrTyp n Meta'hyperlink_behaviour_xlink'show_replace = Just (n, str2attr "replace")
instance XmlContent Dc'language where
    fromElem (CElem (Elem "dc:language" [] c0):rest) =
	(\(a,ca)->
	   (Just (Dc'language a), rest))
	(definite fromText "text" "dc:language" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Dc'language a) =
	[CElem (Elem "dc:language" [] (toText a))]
instance XmlContent Meta'editing_cycles where
    fromElem (CElem (Elem "meta:editing-cycles" [] c0):rest) =
	(\(a,ca)->
	   (Just (Meta'editing_cycles a), rest))
	(definite fromText "text" "meta:editing-cycles" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Meta'editing_cycles a) =
	[CElem (Elem "meta:editing-cycles" [] (toText a))]
instance XmlContent Meta'editing_duration where
    fromElem (CElem (Elem "meta:editing-duration" [] c0):rest) =
	(\(a,ca)->
	   (Just (Meta'editing_duration a), rest))
	(definite fromText "text" "meta:editing-duration" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Meta'editing_duration a) =
	[CElem (Elem "meta:editing-duration" [] (toText a))]
instance XmlContent Meta'user_defined where
    fromElem (CElem (Elem "meta:user-defined" as c0):rest) =
	(\(a,ca)->
	   (Just (Meta'user_defined (fromAttrs as) a), rest))
	(definite fromText "text" "meta:user-defined" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Meta'user_defined as a) =
	[CElem (Elem "meta:user-defined" (toAttrs as) (toText a))]
instance XmlAttributes Meta'user_defined_Attrs where
    fromAttrs as =
	Meta'user_defined_Attrs
	  { meta'user_definedMeta'name = definiteA fromAttrToStr "meta:user-defined" "meta:name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "meta:name" (meta'user_definedMeta'name v)
	]
instance XmlContent Meta'document_statistic where
    fromElem (CElem (Elem "meta:document-statistic" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "meta:document-statistic" (toAttrs as) [])]
instance XmlAttributes Meta'document_statistic where
    fromAttrs as =
	Meta'document_statistic
	  { meta'document_statisticMeta'page_count = possibleA fromAttrToStr "meta:page-count" as
	  , meta'document_statisticMeta'table_count = possibleA fromAttrToStr "meta:table-count" as
	  , meta'document_statisticMeta'draw_count = possibleA fromAttrToStr "meta:draw-count" as
	  , meta'document_statisticMeta'image_count = possibleA fromAttrToStr "meta:image-count" as
	  , meta'document_statisticMeta'ole_object_count = possibleA fromAttrToStr "meta:ole-object-count" as
	  , meta'document_statisticMeta'paragraph_count = possibleA fromAttrToStr "meta:paragraph-count" as
	  , meta'document_statisticMeta'word_count = possibleA fromAttrToStr "meta:word-count" as
	  , meta'document_statisticMeta'character_count = possibleA fromAttrToStr "meta:character-count" as
	  , meta'document_statisticMeta'row_count = possibleA fromAttrToStr "meta:row-count" as
	  , meta'document_statisticMeta'cell_count = possibleA fromAttrToStr "meta:cell-count" as
	  , meta'document_statisticMeta'object_count = possibleA fromAttrToStr "meta:object-count" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "meta:page-count" (meta'document_statisticMeta'page_count v)
	, maybeToAttr toAttrFrStr "meta:table-count" (meta'document_statisticMeta'table_count v)
	, maybeToAttr toAttrFrStr "meta:draw-count" (meta'document_statisticMeta'draw_count v)
	, maybeToAttr toAttrFrStr "meta:image-count" (meta'document_statisticMeta'image_count v)
	, maybeToAttr toAttrFrStr "meta:ole-object-count" (meta'document_statisticMeta'ole_object_count v)
	, maybeToAttr toAttrFrStr "meta:paragraph-count" (meta'document_statisticMeta'paragraph_count v)
	, maybeToAttr toAttrFrStr "meta:word-count" (meta'document_statisticMeta'word_count v)
	, maybeToAttr toAttrFrStr "meta:character-count" (meta'document_statisticMeta'character_count v)
	, maybeToAttr toAttrFrStr "meta:row-count" (meta'document_statisticMeta'row_count v)
	, maybeToAttr toAttrFrStr "meta:cell-count" (meta'document_statisticMeta'cell_count v)
	, maybeToAttr toAttrFrStr "meta:object-count" (meta'document_statisticMeta'object_count v)
	]
instance XmlContent Script'library_embedded where
    fromElem (CElem (Elem "script:library-embedded" as c0):rest) =
	(\(a,ca)->
	   (Just (Script'library_embedded (fromAttrs as) a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Script'library_embedded as a) =
	[CElem (Elem "script:library-embedded" (toAttrs as) (concatMap toElem a))]
instance XmlAttributes Script'library_embedded_Attrs where
    fromAttrs as =
	Script'library_embedded_Attrs
	  { script'library_embeddedScript'name = definiteA fromAttrToStr "script:library-embedded" "script:name" as
	  , script'library_embeddedScript'password = possibleA fromAttrToStr "script:password" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "script:name" (script'library_embeddedScript'name v)
	, maybeToAttr toAttrFrStr "script:password" (script'library_embeddedScript'password v)
	]
instance XmlContent Script'library_linked where
    fromElem (CElem (Elem "script:library-linked" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "script:library-linked" (toAttrs as) [])]
instance XmlAttributes Script'library_linked where
    fromAttrs as =
	Script'library_linked
	  { script'library_linkedScript'name = definiteA fromAttrToStr "script:library-linked" "script:name" as
	  , script'library_linkedXlink'href = definiteA fromAttrToStr "script:library-linked" "xlink:href" as
	  , script'library_linkedXlink'type = defaultA fromAttrToTyp Script'library_linked_xlink'type_simple "xlink:type" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "script:name" (script'library_linkedScript'name v)
	, toAttrFrStr "xlink:href" (script'library_linkedXlink'href v)
	, defaultToAttr toAttrFrTyp "xlink:type" (script'library_linkedXlink'type v)
	]
instance XmlAttrType Script'library_linked_xlink'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "simple" = Just Script'library_linked_xlink'type_simple
	    translate _ = Nothing
    toAttrFrTyp n Script'library_linked_xlink'type_simple = Just (n, str2attr "simple")
instance XmlContent Script'module where
    fromElem (CElem (Elem "script:module" as c0):rest) =
	(\(a,ca)->
	   (Just (Script'module (fromAttrs as) a), rest))
	(definite fromText "text" "script:module" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Script'module as a) =
	[CElem (Elem "script:module" (toAttrs as) (toText a))]
instance XmlAttributes Script'module_Attrs where
    fromAttrs as =
	Script'module_Attrs
	  { script'moduleScript'name = definiteA fromAttrToStr "script:module" "script:name" as
	  , script'moduleScript'language = possibleA fromAttrToStr "script:language" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "script:name" (script'moduleScript'name v)
	, maybeToAttr toAttrFrStr "script:language" (script'moduleScript'language v)
	]
instance XmlContent Script'event where
    fromElem (CElem (Elem "script:event" as c0):rest) =
	(\(a,ca)->
	   (Just (Script'event (fromAttrs as) a), rest))
	(definite fromText "text" "script:event" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Script'event as a) =
	[CElem (Elem "script:event" (toAttrs as) (toText a))]
instance XmlAttributes Script'event_Attrs where
    fromAttrs as =
	Script'event_Attrs
	  { script'eventScript'language = definiteA fromAttrToStr "script:event" "script:language" as
	  , script'eventScript'event_name = definiteA fromAttrToStr "script:event" "script:event-name" as
	  , script'eventScript'location = definiteA fromAttrToTyp "script:event" "script:location" as
	  , script'eventScript'macro_name = definiteA fromAttrToStr "script:event" "script:macro-name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "script:language" (script'eventScript'language v)
	, toAttrFrStr "script:event-name" (script'eventScript'event_name v)
	, toAttrFrTyp "script:location" (script'eventScript'location v)
	, toAttrFrStr "script:macro-name" (script'eventScript'macro_name v)
	]
instance XmlAttrType Script'event_script'location where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "document" = Just Script'event_script'location_document
	    translate "application" = Just Script'event_script'location_application
	    translate _ = Nothing
    toAttrFrTyp n Script'event_script'location_document = Just (n, str2attr "document")
    toAttrFrTyp n Script'event_script'location_application = Just (n, str2attr "application")
instance XmlContent Draw'rect where
    fromElem (CElem (Elem "draw:rect" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Draw'rect (fromAttrs as) a b), rest))
	   (many fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Draw'rect as a b) =
	[CElem (Elem "draw:rect" (toAttrs as) (maybe [] toElem a ++
					       concatMap toElem b))]
instance XmlAttributes Draw'rect_Attrs where
    fromAttrs as =
	Draw'rect_Attrs
	  { draw'rectSvg'x = possibleA fromAttrToStr "svg:x" as
	  , draw'rectSvg'y = possibleA fromAttrToStr "svg:y" as
	  , draw'rectTable'end_cell_address = possibleA fromAttrToStr "table:end-cell-address" as
	  , draw'rectTable'end_x = possibleA fromAttrToStr "table:end-x" as
	  , draw'rectTable'end_y = possibleA fromAttrToStr "table:end-y" as
	  , draw'rectTable'table_background = possibleA fromAttrToTyp "table:table-background" as
	  , draw'rectSvg'width = possibleA fromAttrToStr "svg:width" as
	  , draw'rectSvg'height = possibleA fromAttrToStr "svg:height" as
	  , draw'rectDraw'style_name = possibleA fromAttrToStr "draw:style-name" as
	  , draw'rectPresentation'style_name = possibleA fromAttrToStr "presentation:style-name" as
	  , draw'rectDraw'text_style_name = possibleA fromAttrToStr "draw:text-style-name" as
	  , draw'rectDraw'transform = possibleA fromAttrToStr "draw:transform" as
	  , draw'rectDraw'corner_radius = possibleA fromAttrToStr "draw:corner-radius" as
	  , draw'rectDraw'z_index = possibleA fromAttrToStr "draw:z-index" as
	  , draw'rectDraw'id = possibleA fromAttrToStr "draw:id" as
	  , draw'rectText'anchor_type = possibleA fromAttrToTyp "text:anchor-type" as
	  , draw'rectText'anchor_page_number = possibleA fromAttrToStr "text:anchor-page-number" as
	  , draw'rectDraw'layer = possibleA fromAttrToStr "draw:layer" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "svg:x" (draw'rectSvg'x v)
	, maybeToAttr toAttrFrStr "svg:y" (draw'rectSvg'y v)
	, maybeToAttr toAttrFrStr "table:end-cell-address" (draw'rectTable'end_cell_address v)
	, maybeToAttr toAttrFrStr "table:end-x" (draw'rectTable'end_x v)
	, maybeToAttr toAttrFrStr "table:end-y" (draw'rectTable'end_y v)
	, maybeToAttr toAttrFrTyp "table:table-background" (draw'rectTable'table_background v)
	, maybeToAttr toAttrFrStr "svg:width" (draw'rectSvg'width v)
	, maybeToAttr toAttrFrStr "svg:height" (draw'rectSvg'height v)
	, maybeToAttr toAttrFrStr "draw:style-name" (draw'rectDraw'style_name v)
	, maybeToAttr toAttrFrStr "presentation:style-name" (draw'rectPresentation'style_name v)
	, maybeToAttr toAttrFrStr "draw:text-style-name" (draw'rectDraw'text_style_name v)
	, maybeToAttr toAttrFrStr "draw:transform" (draw'rectDraw'transform v)
	, maybeToAttr toAttrFrStr "draw:corner-radius" (draw'rectDraw'corner_radius v)
	, maybeToAttr toAttrFrStr "draw:z-index" (draw'rectDraw'z_index v)
	, maybeToAttr toAttrFrStr "draw:id" (draw'rectDraw'id v)
	, maybeToAttr toAttrFrTyp "text:anchor-type" (draw'rectText'anchor_type v)
	, maybeToAttr toAttrFrStr "text:anchor-page-number" (draw'rectText'anchor_page_number v)
	, maybeToAttr toAttrFrStr "draw:layer" (draw'rectDraw'layer v)
	]
instance XmlAttrType Draw'rect_table'table_background where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Draw'rect_table'table_background_true
	    translate "false" = Just Draw'rect_table'table_background_false
	    translate _ = Nothing
    toAttrFrTyp n Draw'rect_table'table_background_true = Just (n, str2attr "true")
    toAttrFrTyp n Draw'rect_table'table_background_false = Just (n, str2attr "false")
instance XmlAttrType Draw'rect_text'anchor_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "page" = Just Draw'rect_text'anchor_type_page
	    translate "frame" = Just Draw'rect_text'anchor_type_frame
	    translate "paragraph" = Just Draw'rect_text'anchor_type_paragraph
	    translate "char" = Just Draw'rect_text'anchor_type_char
	    translate "as-char" = Just Draw'rect_text'anchor_type_as_char
	    translate _ = Nothing
    toAttrFrTyp n Draw'rect_text'anchor_type_page = Just (n, str2attr "page")
    toAttrFrTyp n Draw'rect_text'anchor_type_frame = Just (n, str2attr "frame")
    toAttrFrTyp n Draw'rect_text'anchor_type_paragraph = Just (n, str2attr "paragraph")
    toAttrFrTyp n Draw'rect_text'anchor_type_char = Just (n, str2attr "char")
    toAttrFrTyp n Draw'rect_text'anchor_type_as_char = Just (n, str2attr "as-char")
instance XmlContent Draw'line where
    fromElem (CElem (Elem "draw:line" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Draw'line (fromAttrs as) a b), rest))
	   (many fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Draw'line as a b) =
	[CElem (Elem "draw:line" (toAttrs as) (maybe [] toElem a ++
					       concatMap toElem b))]
instance XmlAttributes Draw'line_Attrs where
    fromAttrs as =
	Draw'line_Attrs
	  { draw'lineSvg'x1 = possibleA fromAttrToStr "svg:x1" as
	  , draw'lineSvg'y1 = possibleA fromAttrToStr "svg:y1" as
	  , draw'lineSvg'x2 = definiteA fromAttrToStr "draw:line" "svg:x2" as
	  , draw'lineSvg'y2 = definiteA fromAttrToStr "draw:line" "svg:y2" as
	  , draw'lineSvg'y = possibleA fromAttrToStr "svg:y" as
	  , draw'lineDraw'style_name = possibleA fromAttrToStr "draw:style-name" as
	  , draw'linePresentation'style_name = possibleA fromAttrToStr "presentation:style-name" as
	  , draw'lineDraw'text_style_name = possibleA fromAttrToStr "draw:text-style-name" as
	  , draw'lineDraw'transform = possibleA fromAttrToStr "draw:transform" as
	  , draw'lineDraw'z_index = possibleA fromAttrToStr "draw:z-index" as
	  , draw'lineTable'end_cell_address = possibleA fromAttrToStr "table:end-cell-address" as
	  , draw'lineTable'end_x = possibleA fromAttrToStr "table:end-x" as
	  , draw'lineTable'end_y = possibleA fromAttrToStr "table:end-y" as
	  , draw'lineTable'table_background = possibleA fromAttrToTyp "table:table-background" as
	  , draw'lineDraw'id = possibleA fromAttrToStr "draw:id" as
	  , draw'lineText'anchor_type = possibleA fromAttrToTyp "text:anchor-type" as
	  , draw'lineText'anchor_page_number = possibleA fromAttrToStr "text:anchor-page-number" as
	  , draw'lineDraw'layer = possibleA fromAttrToStr "draw:layer" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "svg:x1" (draw'lineSvg'x1 v)
	, maybeToAttr toAttrFrStr "svg:y1" (draw'lineSvg'y1 v)
	, toAttrFrStr "svg:x2" (draw'lineSvg'x2 v)
	, toAttrFrStr "svg:y2" (draw'lineSvg'y2 v)
	, maybeToAttr toAttrFrStr "svg:y" (draw'lineSvg'y v)
	, maybeToAttr toAttrFrStr "draw:style-name" (draw'lineDraw'style_name v)
	, maybeToAttr toAttrFrStr "presentation:style-name" (draw'linePresentation'style_name v)
	, maybeToAttr toAttrFrStr "draw:text-style-name" (draw'lineDraw'text_style_name v)
	, maybeToAttr toAttrFrStr "draw:transform" (draw'lineDraw'transform v)
	, maybeToAttr toAttrFrStr "draw:z-index" (draw'lineDraw'z_index v)
	, maybeToAttr toAttrFrStr "table:end-cell-address" (draw'lineTable'end_cell_address v)
	, maybeToAttr toAttrFrStr "table:end-x" (draw'lineTable'end_x v)
	, maybeToAttr toAttrFrStr "table:end-y" (draw'lineTable'end_y v)
	, maybeToAttr toAttrFrTyp "table:table-background" (draw'lineTable'table_background v)
	, maybeToAttr toAttrFrStr "draw:id" (draw'lineDraw'id v)
	, maybeToAttr toAttrFrTyp "text:anchor-type" (draw'lineText'anchor_type v)
	, maybeToAttr toAttrFrStr "text:anchor-page-number" (draw'lineText'anchor_page_number v)
	, maybeToAttr toAttrFrStr "draw:layer" (draw'lineDraw'layer v)
	]
instance XmlAttrType Draw'line_table'table_background where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Draw'line_table'table_background_true
	    translate "false" = Just Draw'line_table'table_background_false
	    translate _ = Nothing
    toAttrFrTyp n Draw'line_table'table_background_true = Just (n, str2attr "true")
    toAttrFrTyp n Draw'line_table'table_background_false = Just (n, str2attr "false")
instance XmlAttrType Draw'line_text'anchor_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "page" = Just Draw'line_text'anchor_type_page
	    translate "frame" = Just Draw'line_text'anchor_type_frame
	    translate "paragraph" = Just Draw'line_text'anchor_type_paragraph
	    translate "char" = Just Draw'line_text'anchor_type_char
	    translate "as-char" = Just Draw'line_text'anchor_type_as_char
	    translate _ = Nothing
    toAttrFrTyp n Draw'line_text'anchor_type_page = Just (n, str2attr "page")
    toAttrFrTyp n Draw'line_text'anchor_type_frame = Just (n, str2attr "frame")
    toAttrFrTyp n Draw'line_text'anchor_type_paragraph = Just (n, str2attr "paragraph")
    toAttrFrTyp n Draw'line_text'anchor_type_char = Just (n, str2attr "char")
    toAttrFrTyp n Draw'line_text'anchor_type_as_char = Just (n, str2attr "as-char")
instance XmlContent Draw'polyline where
    fromElem (CElem (Elem "draw:polyline" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Draw'polyline (fromAttrs as) a b), rest))
	   (many fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Draw'polyline as a b) =
	[CElem (Elem "draw:polyline" (toAttrs as) (maybe [] toElem a ++
						   concatMap toElem b))]
instance XmlAttributes Draw'polyline_Attrs where
    fromAttrs as =
	Draw'polyline_Attrs
	  { draw'polylineSvg'x = possibleA fromAttrToStr "svg:x" as
	  , draw'polylineSvg'y = possibleA fromAttrToStr "svg:y" as
	  , draw'polylineSvg'width = possibleA fromAttrToStr "svg:width" as
	  , draw'polylineSvg'height = possibleA fromAttrToStr "svg:height" as
	  , draw'polylineSvg'viewBox = definiteA fromAttrToStr "draw:polyline" "svg:viewBox" as
	  , draw'polylineDraw'points = definiteA fromAttrToStr "draw:polyline" "draw:points" as
	  , draw'polylineDraw'style_name = possibleA fromAttrToStr "draw:style-name" as
	  , draw'polylinePresentation'style_name = possibleA fromAttrToStr "presentation:style-name" as
	  , draw'polylineDraw'text_style_name = possibleA fromAttrToStr "draw:text-style-name" as
	  , draw'polylineDraw'transform = possibleA fromAttrToStr "draw:transform" as
	  , draw'polylineDraw'z_index = possibleA fromAttrToStr "draw:z-index" as
	  , draw'polylineTable'end_cell_address = possibleA fromAttrToStr "table:end-cell-address" as
	  , draw'polylineTable'end_x = possibleA fromAttrToStr "table:end-x" as
	  , draw'polylineTable'end_y = possibleA fromAttrToStr "table:end-y" as
	  , draw'polylineTable'table_background = possibleA fromAttrToTyp "table:table-background" as
	  , draw'polylineDraw'id = possibleA fromAttrToStr "draw:id" as
	  , draw'polylineText'anchor_type = possibleA fromAttrToTyp "text:anchor-type" as
	  , draw'polylineText'anchor_page_number = possibleA fromAttrToStr "text:anchor-page-number" as
	  , draw'polylineDraw'layer = possibleA fromAttrToStr "draw:layer" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "svg:x" (draw'polylineSvg'x v)
	, maybeToAttr toAttrFrStr "svg:y" (draw'polylineSvg'y v)
	, maybeToAttr toAttrFrStr "svg:width" (draw'polylineSvg'width v)
	, maybeToAttr toAttrFrStr "svg:height" (draw'polylineSvg'height v)
	, toAttrFrStr "svg:viewBox" (draw'polylineSvg'viewBox v)
	, toAttrFrStr "draw:points" (draw'polylineDraw'points v)
	, maybeToAttr toAttrFrStr "draw:style-name" (draw'polylineDraw'style_name v)
	, maybeToAttr toAttrFrStr "presentation:style-name" (draw'polylinePresentation'style_name v)
	, maybeToAttr toAttrFrStr "draw:text-style-name" (draw'polylineDraw'text_style_name v)
	, maybeToAttr toAttrFrStr "draw:transform" (draw'polylineDraw'transform v)
	, maybeToAttr toAttrFrStr "draw:z-index" (draw'polylineDraw'z_index v)
	, maybeToAttr toAttrFrStr "table:end-cell-address" (draw'polylineTable'end_cell_address v)
	, maybeToAttr toAttrFrStr "table:end-x" (draw'polylineTable'end_x v)
	, maybeToAttr toAttrFrStr "table:end-y" (draw'polylineTable'end_y v)
	, maybeToAttr toAttrFrTyp "table:table-background" (draw'polylineTable'table_background v)
	, maybeToAttr toAttrFrStr "draw:id" (draw'polylineDraw'id v)
	, maybeToAttr toAttrFrTyp "text:anchor-type" (draw'polylineText'anchor_type v)
	, maybeToAttr toAttrFrStr "text:anchor-page-number" (draw'polylineText'anchor_page_number v)
	, maybeToAttr toAttrFrStr "draw:layer" (draw'polylineDraw'layer v)
	]
instance XmlAttrType Draw'polyline_table'table_background where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Draw'polyline_table'table_background_true
	    translate "false" = Just Draw'polyline_table'table_background_false
	    translate _ = Nothing
    toAttrFrTyp n Draw'polyline_table'table_background_true = Just (n, str2attr "true")
    toAttrFrTyp n Draw'polyline_table'table_background_false = Just (n, str2attr "false")
instance XmlAttrType Draw'polyline_text'anchor_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "page" = Just Draw'polyline_text'anchor_type_page
	    translate "frame" = Just Draw'polyline_text'anchor_type_frame
	    translate "paragraph" = Just Draw'polyline_text'anchor_type_paragraph
	    translate "char" = Just Draw'polyline_text'anchor_type_char
	    translate "as-char" = Just Draw'polyline_text'anchor_type_as_char
	    translate _ = Nothing
    toAttrFrTyp n Draw'polyline_text'anchor_type_page = Just (n, str2attr "page")
    toAttrFrTyp n Draw'polyline_text'anchor_type_frame = Just (n, str2attr "frame")
    toAttrFrTyp n Draw'polyline_text'anchor_type_paragraph = Just (n, str2attr "paragraph")
    toAttrFrTyp n Draw'polyline_text'anchor_type_char = Just (n, str2attr "char")
    toAttrFrTyp n Draw'polyline_text'anchor_type_as_char = Just (n, str2attr "as-char")
instance XmlContent Draw'polygon where
    fromElem (CElem (Elem "draw:polygon" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Draw'polygon (fromAttrs as) a b), rest))
	   (many fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Draw'polygon as a b) =
	[CElem (Elem "draw:polygon" (toAttrs as) (maybe [] toElem a ++
						  concatMap toElem b))]
instance XmlAttributes Draw'polygon_Attrs where
    fromAttrs as =
	Draw'polygon_Attrs
	  { draw'polygonSvg'x = possibleA fromAttrToStr "svg:x" as
	  , draw'polygonSvg'y = possibleA fromAttrToStr "svg:y" as
	  , draw'polygonTable'end_cell_address = possibleA fromAttrToStr "table:end-cell-address" as
	  , draw'polygonTable'end_x = possibleA fromAttrToStr "table:end-x" as
	  , draw'polygonTable'end_y = possibleA fromAttrToStr "table:end-y" as
	  , draw'polygonTable'table_background = possibleA fromAttrToTyp "table:table-background" as
	  , draw'polygonSvg'width = possibleA fromAttrToStr "svg:width" as
	  , draw'polygonSvg'height = possibleA fromAttrToStr "svg:height" as
	  , draw'polygonSvg'viewBox = definiteA fromAttrToStr "draw:polygon" "svg:viewBox" as
	  , draw'polygonDraw'points = definiteA fromAttrToStr "draw:polygon" "draw:points" as
	  , draw'polygonDraw'style_name = possibleA fromAttrToStr "draw:style-name" as
	  , draw'polygonPresentation'style_name = possibleA fromAttrToStr "presentation:style-name" as
	  , draw'polygonDraw'text_style_name = possibleA fromAttrToStr "draw:text-style-name" as
	  , draw'polygonDraw'transform = possibleA fromAttrToStr "draw:transform" as
	  , draw'polygonDraw'z_index = possibleA fromAttrToStr "draw:z-index" as
	  , draw'polygonDraw'id = possibleA fromAttrToStr "draw:id" as
	  , draw'polygonText'anchor_type = possibleA fromAttrToTyp "text:anchor-type" as
	  , draw'polygonText'anchor_page_number = possibleA fromAttrToStr "text:anchor-page-number" as
	  , draw'polygonDraw'layer = possibleA fromAttrToStr "draw:layer" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "svg:x" (draw'polygonSvg'x v)
	, maybeToAttr toAttrFrStr "svg:y" (draw'polygonSvg'y v)
	, maybeToAttr toAttrFrStr "table:end-cell-address" (draw'polygonTable'end_cell_address v)
	, maybeToAttr toAttrFrStr "table:end-x" (draw'polygonTable'end_x v)
	, maybeToAttr toAttrFrStr "table:end-y" (draw'polygonTable'end_y v)
	, maybeToAttr toAttrFrTyp "table:table-background" (draw'polygonTable'table_background v)
	, maybeToAttr toAttrFrStr "svg:width" (draw'polygonSvg'width v)
	, maybeToAttr toAttrFrStr "svg:height" (draw'polygonSvg'height v)
	, toAttrFrStr "svg:viewBox" (draw'polygonSvg'viewBox v)
	, toAttrFrStr "draw:points" (draw'polygonDraw'points v)
	, maybeToAttr toAttrFrStr "draw:style-name" (draw'polygonDraw'style_name v)
	, maybeToAttr toAttrFrStr "presentation:style-name" (draw'polygonPresentation'style_name v)
	, maybeToAttr toAttrFrStr "draw:text-style-name" (draw'polygonDraw'text_style_name v)
	, maybeToAttr toAttrFrStr "draw:transform" (draw'polygonDraw'transform v)
	, maybeToAttr toAttrFrStr "draw:z-index" (draw'polygonDraw'z_index v)
	, maybeToAttr toAttrFrStr "draw:id" (draw'polygonDraw'id v)
	, maybeToAttr toAttrFrTyp "text:anchor-type" (draw'polygonText'anchor_type v)
	, maybeToAttr toAttrFrStr "text:anchor-page-number" (draw'polygonText'anchor_page_number v)
	, maybeToAttr toAttrFrStr "draw:layer" (draw'polygonDraw'layer v)
	]
instance XmlAttrType Draw'polygon_table'table_background where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Draw'polygon_table'table_background_true
	    translate "false" = Just Draw'polygon_table'table_background_false
	    translate _ = Nothing
    toAttrFrTyp n Draw'polygon_table'table_background_true = Just (n, str2attr "true")
    toAttrFrTyp n Draw'polygon_table'table_background_false = Just (n, str2attr "false")
instance XmlAttrType Draw'polygon_text'anchor_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "page" = Just Draw'polygon_text'anchor_type_page
	    translate "frame" = Just Draw'polygon_text'anchor_type_frame
	    translate "paragraph" = Just Draw'polygon_text'anchor_type_paragraph
	    translate "char" = Just Draw'polygon_text'anchor_type_char
	    translate "as-char" = Just Draw'polygon_text'anchor_type_as_char
	    translate _ = Nothing
    toAttrFrTyp n Draw'polygon_text'anchor_type_page = Just (n, str2attr "page")
    toAttrFrTyp n Draw'polygon_text'anchor_type_frame = Just (n, str2attr "frame")
    toAttrFrTyp n Draw'polygon_text'anchor_type_paragraph = Just (n, str2attr "paragraph")
    toAttrFrTyp n Draw'polygon_text'anchor_type_char = Just (n, str2attr "char")
    toAttrFrTyp n Draw'polygon_text'anchor_type_as_char = Just (n, str2attr "as-char")
instance XmlContent Draw'path where
    fromElem (CElem (Elem "draw:path" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Draw'path (fromAttrs as) a b), rest))
	   (many fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Draw'path as a b) =
	[CElem (Elem "draw:path" (toAttrs as) (maybe [] toElem a ++
					       concatMap toElem b))]
instance XmlAttributes Draw'path_Attrs where
    fromAttrs as =
	Draw'path_Attrs
	  { draw'pathSvg'x = possibleA fromAttrToStr "svg:x" as
	  , draw'pathSvg'y = possibleA fromAttrToStr "svg:y" as
	  , draw'pathTable'end_cell_address = possibleA fromAttrToStr "table:end-cell-address" as
	  , draw'pathTable'end_x = possibleA fromAttrToStr "table:end-x" as
	  , draw'pathTable'end_y = possibleA fromAttrToStr "table:end-y" as
	  , draw'pathTable'table_background = possibleA fromAttrToTyp "table:table-background" as
	  , draw'pathSvg'width = possibleA fromAttrToStr "svg:width" as
	  , draw'pathSvg'height = possibleA fromAttrToStr "svg:height" as
	  , draw'pathSvg'viewBox = definiteA fromAttrToStr "draw:path" "svg:viewBox" as
	  , draw'pathSvg'd = definiteA fromAttrToStr "draw:path" "svg:d" as
	  , draw'pathDraw'style_name = possibleA fromAttrToStr "draw:style-name" as
	  , draw'pathPresentation'style_name = possibleA fromAttrToStr "presentation:style-name" as
	  , draw'pathDraw'text_style_name = possibleA fromAttrToStr "draw:text-style-name" as
	  , draw'pathDraw'transform = possibleA fromAttrToStr "draw:transform" as
	  , draw'pathDraw'z_index = possibleA fromAttrToStr "draw:z-index" as
	  , draw'pathDraw'id = possibleA fromAttrToStr "draw:id" as
	  , draw'pathText'anchor_type = possibleA fromAttrToTyp "text:anchor-type" as
	  , draw'pathText'anchor_page_number = possibleA fromAttrToStr "text:anchor-page-number" as
	  , draw'pathDraw'layer = possibleA fromAttrToStr "draw:layer" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "svg:x" (draw'pathSvg'x v)
	, maybeToAttr toAttrFrStr "svg:y" (draw'pathSvg'y v)
	, maybeToAttr toAttrFrStr "table:end-cell-address" (draw'pathTable'end_cell_address v)
	, maybeToAttr toAttrFrStr "table:end-x" (draw'pathTable'end_x v)
	, maybeToAttr toAttrFrStr "table:end-y" (draw'pathTable'end_y v)
	, maybeToAttr toAttrFrTyp "table:table-background" (draw'pathTable'table_background v)
	, maybeToAttr toAttrFrStr "svg:width" (draw'pathSvg'width v)
	, maybeToAttr toAttrFrStr "svg:height" (draw'pathSvg'height v)
	, toAttrFrStr "svg:viewBox" (draw'pathSvg'viewBox v)
	, toAttrFrStr "svg:d" (draw'pathSvg'd v)
	, maybeToAttr toAttrFrStr "draw:style-name" (draw'pathDraw'style_name v)
	, maybeToAttr toAttrFrStr "presentation:style-name" (draw'pathPresentation'style_name v)
	, maybeToAttr toAttrFrStr "draw:text-style-name" (draw'pathDraw'text_style_name v)
	, maybeToAttr toAttrFrStr "draw:transform" (draw'pathDraw'transform v)
	, maybeToAttr toAttrFrStr "draw:z-index" (draw'pathDraw'z_index v)
	, maybeToAttr toAttrFrStr "draw:id" (draw'pathDraw'id v)
	, maybeToAttr toAttrFrTyp "text:anchor-type" (draw'pathText'anchor_type v)
	, maybeToAttr toAttrFrStr "text:anchor-page-number" (draw'pathText'anchor_page_number v)
	, maybeToAttr toAttrFrStr "draw:layer" (draw'pathDraw'layer v)
	]
instance XmlAttrType Draw'path_table'table_background where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Draw'path_table'table_background_true
	    translate "false" = Just Draw'path_table'table_background_false
	    translate _ = Nothing
    toAttrFrTyp n Draw'path_table'table_background_true = Just (n, str2attr "true")
    toAttrFrTyp n Draw'path_table'table_background_false = Just (n, str2attr "false")
instance XmlAttrType Draw'path_text'anchor_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "page" = Just Draw'path_text'anchor_type_page
	    translate "frame" = Just Draw'path_text'anchor_type_frame
	    translate "paragraph" = Just Draw'path_text'anchor_type_paragraph
	    translate "char" = Just Draw'path_text'anchor_type_char
	    translate "as-char" = Just Draw'path_text'anchor_type_as_char
	    translate _ = Nothing
    toAttrFrTyp n Draw'path_text'anchor_type_page = Just (n, str2attr "page")
    toAttrFrTyp n Draw'path_text'anchor_type_frame = Just (n, str2attr "frame")
    toAttrFrTyp n Draw'path_text'anchor_type_paragraph = Just (n, str2attr "paragraph")
    toAttrFrTyp n Draw'path_text'anchor_type_char = Just (n, str2attr "char")
    toAttrFrTyp n Draw'path_text'anchor_type_as_char = Just (n, str2attr "as-char")
instance XmlContent Draw'circle where
    fromElem (CElem (Elem "draw:circle" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Draw'circle (fromAttrs as) a b), rest))
	   (many fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Draw'circle as a b) =
	[CElem (Elem "draw:circle" (toAttrs as) (maybe [] toElem a ++
						 concatMap toElem b))]
instance XmlAttributes Draw'circle_Attrs where
    fromAttrs as =
	Draw'circle_Attrs
	  { draw'circleSvg'x = possibleA fromAttrToStr "svg:x" as
	  , draw'circleSvg'y = possibleA fromAttrToStr "svg:y" as
	  , draw'circleSvg'width = possibleA fromAttrToStr "svg:width" as
	  , draw'circleSvg'height = possibleA fromAttrToStr "svg:height" as
	  , draw'circleDraw'style_name = possibleA fromAttrToStr "draw:style-name" as
	  , draw'circlePresentation'style_name = possibleA fromAttrToStr "presentation:style-name" as
	  , draw'circleDraw'text_style_name = possibleA fromAttrToStr "draw:text-style-name" as
	  , draw'circleDraw'transform = possibleA fromAttrToStr "draw:transform" as
	  , draw'circleDraw'z_index = possibleA fromAttrToStr "draw:z-index" as
	  , draw'circleTable'end_cell_address = possibleA fromAttrToStr "table:end-cell-address" as
	  , draw'circleTable'end_x = possibleA fromAttrToStr "table:end-x" as
	  , draw'circleTable'end_y = possibleA fromAttrToStr "table:end-y" as
	  , draw'circleTable'table_background = possibleA fromAttrToTyp "table:table-background" as
	  , draw'circleDraw'id = possibleA fromAttrToStr "draw:id" as
	  , draw'circleDraw'kind = defaultA fromAttrToTyp Draw'circle_draw'kind_full "draw:kind" as
	  , draw'circleDraw'start_angle = possibleA fromAttrToStr "draw:start-angle" as
	  , draw'circleDraw'end_angle = possibleA fromAttrToStr "draw:end-angle" as
	  , draw'circleText'anchor_type = possibleA fromAttrToTyp "text:anchor-type" as
	  , draw'circleText'anchor_page_number = possibleA fromAttrToStr "text:anchor-page-number" as
	  , draw'circleDraw'layer = possibleA fromAttrToStr "draw:layer" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "svg:x" (draw'circleSvg'x v)
	, maybeToAttr toAttrFrStr "svg:y" (draw'circleSvg'y v)
	, maybeToAttr toAttrFrStr "svg:width" (draw'circleSvg'width v)
	, maybeToAttr toAttrFrStr "svg:height" (draw'circleSvg'height v)
	, maybeToAttr toAttrFrStr "draw:style-name" (draw'circleDraw'style_name v)
	, maybeToAttr toAttrFrStr "presentation:style-name" (draw'circlePresentation'style_name v)
	, maybeToAttr toAttrFrStr "draw:text-style-name" (draw'circleDraw'text_style_name v)
	, maybeToAttr toAttrFrStr "draw:transform" (draw'circleDraw'transform v)
	, maybeToAttr toAttrFrStr "draw:z-index" (draw'circleDraw'z_index v)
	, maybeToAttr toAttrFrStr "table:end-cell-address" (draw'circleTable'end_cell_address v)
	, maybeToAttr toAttrFrStr "table:end-x" (draw'circleTable'end_x v)
	, maybeToAttr toAttrFrStr "table:end-y" (draw'circleTable'end_y v)
	, maybeToAttr toAttrFrTyp "table:table-background" (draw'circleTable'table_background v)
	, maybeToAttr toAttrFrStr "draw:id" (draw'circleDraw'id v)
	, defaultToAttr toAttrFrTyp "draw:kind" (draw'circleDraw'kind v)
	, maybeToAttr toAttrFrStr "draw:start-angle" (draw'circleDraw'start_angle v)
	, maybeToAttr toAttrFrStr "draw:end-angle" (draw'circleDraw'end_angle v)
	, maybeToAttr toAttrFrTyp "text:anchor-type" (draw'circleText'anchor_type v)
	, maybeToAttr toAttrFrStr "text:anchor-page-number" (draw'circleText'anchor_page_number v)
	, maybeToAttr toAttrFrStr "draw:layer" (draw'circleDraw'layer v)
	]
instance XmlAttrType Draw'circle_table'table_background where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Draw'circle_table'table_background_true
	    translate "false" = Just Draw'circle_table'table_background_false
	    translate _ = Nothing
    toAttrFrTyp n Draw'circle_table'table_background_true = Just (n, str2attr "true")
    toAttrFrTyp n Draw'circle_table'table_background_false = Just (n, str2attr "false")
instance XmlAttrType Draw'circle_draw'kind where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "full" = Just Draw'circle_draw'kind_full
	    translate "section" = Just Draw'circle_draw'kind_section
	    translate "cut" = Just Draw'circle_draw'kind_cut
	    translate "arc" = Just Draw'circle_draw'kind_arc
	    translate _ = Nothing
    toAttrFrTyp n Draw'circle_draw'kind_full = Just (n, str2attr "full")
    toAttrFrTyp n Draw'circle_draw'kind_section = Just (n, str2attr "section")
    toAttrFrTyp n Draw'circle_draw'kind_cut = Just (n, str2attr "cut")
    toAttrFrTyp n Draw'circle_draw'kind_arc = Just (n, str2attr "arc")
instance XmlAttrType Draw'circle_text'anchor_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "page" = Just Draw'circle_text'anchor_type_page
	    translate "frame" = Just Draw'circle_text'anchor_type_frame
	    translate "paragraph" = Just Draw'circle_text'anchor_type_paragraph
	    translate "char" = Just Draw'circle_text'anchor_type_char
	    translate "as-char" = Just Draw'circle_text'anchor_type_as_char
	    translate _ = Nothing
    toAttrFrTyp n Draw'circle_text'anchor_type_page = Just (n, str2attr "page")
    toAttrFrTyp n Draw'circle_text'anchor_type_frame = Just (n, str2attr "frame")
    toAttrFrTyp n Draw'circle_text'anchor_type_paragraph = Just (n, str2attr "paragraph")
    toAttrFrTyp n Draw'circle_text'anchor_type_char = Just (n, str2attr "char")
    toAttrFrTyp n Draw'circle_text'anchor_type_as_char = Just (n, str2attr "as-char")
instance XmlContent Draw'ellipse where
    fromElem (CElem (Elem "draw:ellipse" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Draw'ellipse (fromAttrs as) a b), rest))
	   (many fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Draw'ellipse as a b) =
	[CElem (Elem "draw:ellipse" (toAttrs as) (maybe [] toElem a ++
						  concatMap toElem b))]
instance XmlAttributes Draw'ellipse_Attrs where
    fromAttrs as =
	Draw'ellipse_Attrs
	  { draw'ellipseSvg'x = possibleA fromAttrToStr "svg:x" as
	  , draw'ellipseSvg'y = possibleA fromAttrToStr "svg:y" as
	  , draw'ellipseSvg'width = possibleA fromAttrToStr "svg:width" as
	  , draw'ellipseSvg'height = possibleA fromAttrToStr "svg:height" as
	  , draw'ellipseDraw'style_name = possibleA fromAttrToStr "draw:style-name" as
	  , draw'ellipsePresentation'style_name = possibleA fromAttrToStr "presentation:style-name" as
	  , draw'ellipseDraw'text_style_name = possibleA fromAttrToStr "draw:text-style-name" as
	  , draw'ellipseDraw'transform = possibleA fromAttrToStr "draw:transform" as
	  , draw'ellipseDraw'z_index = possibleA fromAttrToStr "draw:z-index" as
	  , draw'ellipseTable'end_cell_address = possibleA fromAttrToStr "table:end-cell-address" as
	  , draw'ellipseTable'end_x = possibleA fromAttrToStr "table:end-x" as
	  , draw'ellipseTable'end_y = possibleA fromAttrToStr "table:end-y" as
	  , draw'ellipseTable'table_background = possibleA fromAttrToTyp "table:table-background" as
	  , draw'ellipseDraw'id = possibleA fromAttrToStr "draw:id" as
	  , draw'ellipseDraw'kind = defaultA fromAttrToTyp Draw'ellipse_draw'kind_full "draw:kind" as
	  , draw'ellipseDraw'start_angle = possibleA fromAttrToStr "draw:start-angle" as
	  , draw'ellipseDraw'end_angle = possibleA fromAttrToStr "draw:end-angle" as
	  , draw'ellipseText'anchor_type = possibleA fromAttrToTyp "text:anchor-type" as
	  , draw'ellipseText'anchor_page_number = possibleA fromAttrToStr "text:anchor-page-number" as
	  , draw'ellipseDraw'layer = possibleA fromAttrToStr "draw:layer" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "svg:x" (draw'ellipseSvg'x v)
	, maybeToAttr toAttrFrStr "svg:y" (draw'ellipseSvg'y v)
	, maybeToAttr toAttrFrStr "svg:width" (draw'ellipseSvg'width v)
	, maybeToAttr toAttrFrStr "svg:height" (draw'ellipseSvg'height v)
	, maybeToAttr toAttrFrStr "draw:style-name" (draw'ellipseDraw'style_name v)
	, maybeToAttr toAttrFrStr "presentation:style-name" (draw'ellipsePresentation'style_name v)
	, maybeToAttr toAttrFrStr "draw:text-style-name" (draw'ellipseDraw'text_style_name v)
	, maybeToAttr toAttrFrStr "draw:transform" (draw'ellipseDraw'transform v)
	, maybeToAttr toAttrFrStr "draw:z-index" (draw'ellipseDraw'z_index v)
	, maybeToAttr toAttrFrStr "table:end-cell-address" (draw'ellipseTable'end_cell_address v)
	, maybeToAttr toAttrFrStr "table:end-x" (draw'ellipseTable'end_x v)
	, maybeToAttr toAttrFrStr "table:end-y" (draw'ellipseTable'end_y v)
	, maybeToAttr toAttrFrTyp "table:table-background" (draw'ellipseTable'table_background v)
	, maybeToAttr toAttrFrStr "draw:id" (draw'ellipseDraw'id v)
	, defaultToAttr toAttrFrTyp "draw:kind" (draw'ellipseDraw'kind v)
	, maybeToAttr toAttrFrStr "draw:start-angle" (draw'ellipseDraw'start_angle v)
	, maybeToAttr toAttrFrStr "draw:end-angle" (draw'ellipseDraw'end_angle v)
	, maybeToAttr toAttrFrTyp "text:anchor-type" (draw'ellipseText'anchor_type v)
	, maybeToAttr toAttrFrStr "text:anchor-page-number" (draw'ellipseText'anchor_page_number v)
	, maybeToAttr toAttrFrStr "draw:layer" (draw'ellipseDraw'layer v)
	]
instance XmlAttrType Draw'ellipse_table'table_background where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Draw'ellipse_table'table_background_true
	    translate "false" = Just Draw'ellipse_table'table_background_false
	    translate _ = Nothing
    toAttrFrTyp n Draw'ellipse_table'table_background_true = Just (n, str2attr "true")
    toAttrFrTyp n Draw'ellipse_table'table_background_false = Just (n, str2attr "false")
instance XmlAttrType Draw'ellipse_draw'kind where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "full" = Just Draw'ellipse_draw'kind_full
	    translate "section" = Just Draw'ellipse_draw'kind_section
	    translate "cut" = Just Draw'ellipse_draw'kind_cut
	    translate "arc" = Just Draw'ellipse_draw'kind_arc
	    translate _ = Nothing
    toAttrFrTyp n Draw'ellipse_draw'kind_full = Just (n, str2attr "full")
    toAttrFrTyp n Draw'ellipse_draw'kind_section = Just (n, str2attr "section")
    toAttrFrTyp n Draw'ellipse_draw'kind_cut = Just (n, str2attr "cut")
    toAttrFrTyp n Draw'ellipse_draw'kind_arc = Just (n, str2attr "arc")
instance XmlAttrType Draw'ellipse_text'anchor_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "page" = Just Draw'ellipse_text'anchor_type_page
	    translate "frame" = Just Draw'ellipse_text'anchor_type_frame
	    translate "paragraph" = Just Draw'ellipse_text'anchor_type_paragraph
	    translate "char" = Just Draw'ellipse_text'anchor_type_char
	    translate "as-char" = Just Draw'ellipse_text'anchor_type_as_char
	    translate _ = Nothing
    toAttrFrTyp n Draw'ellipse_text'anchor_type_page = Just (n, str2attr "page")
    toAttrFrTyp n Draw'ellipse_text'anchor_type_frame = Just (n, str2attr "frame")
    toAttrFrTyp n Draw'ellipse_text'anchor_type_paragraph = Just (n, str2attr "paragraph")
    toAttrFrTyp n Draw'ellipse_text'anchor_type_char = Just (n, str2attr "char")
    toAttrFrTyp n Draw'ellipse_text'anchor_type_as_char = Just (n, str2attr "as-char")
instance XmlContent Draw'connector where
    fromElem (CElem (Elem "draw:connector" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Draw'connector (fromAttrs as) a b), rest))
	   (many fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Draw'connector as a b) =
	[CElem (Elem "draw:connector" (toAttrs as) (maybe [] toElem a ++
						    concatMap toElem b))]
instance XmlAttributes Draw'connector_Attrs where
    fromAttrs as =
	Draw'connector_Attrs
	  { draw'connectorDraw'type = defaultA fromAttrToTyp Draw'connector_draw'type_standard "draw:type" as
	  , draw'connectorDraw'line_skew = possibleA fromAttrToStr "draw:line-skew" as
	  , draw'connectorDraw'style_name = possibleA fromAttrToStr "draw:style-name" as
	  , draw'connectorPresentation'style_name = possibleA fromAttrToStr "presentation:style-name" as
	  , draw'connectorDraw'text_style_name = possibleA fromAttrToStr "draw:text-style-name" as
	  , draw'connectorSvg'x1 = definiteA fromAttrToStr "draw:connector" "svg:x1" as
	  , draw'connectorSvg'y1 = definiteA fromAttrToStr "draw:connector" "svg:y1" as
	  , draw'connectorSvg'x2 = definiteA fromAttrToStr "draw:connector" "svg:x2" as
	  , draw'connectorSvg'y2 = definiteA fromAttrToStr "draw:connector" "svg:y2" as
	  , draw'connectorDraw'start_shape = possibleA fromAttrToStr "draw:start-shape" as
	  , draw'connectorDraw'start_glue_point = possibleA fromAttrToStr "draw:start-glue-point" as
	  , draw'connectorDraw'end_shape = possibleA fromAttrToStr "draw:end-shape" as
	  , draw'connectorDraw'end_glue_point = possibleA fromAttrToStr "draw:end-glue-point" as
	  , draw'connectorDraw'z_index = possibleA fromAttrToStr "draw:z-index" as
	  , draw'connectorTable'end_cell_address = possibleA fromAttrToStr "table:end-cell-address" as
	  , draw'connectorTable'end_x = possibleA fromAttrToStr "table:end-x" as
	  , draw'connectorTable'end_y = possibleA fromAttrToStr "table:end-y" as
	  , draw'connectorTable'table_background = possibleA fromAttrToTyp "table:table-background" as
	  , draw'connectorDraw'id = possibleA fromAttrToStr "draw:id" as
	  , draw'connectorText'anchor_type = possibleA fromAttrToTyp "text:anchor-type" as
	  , draw'connectorText'anchor_page_number = possibleA fromAttrToStr "text:anchor-page-number" as
	  , draw'connectorDraw'layer = possibleA fromAttrToStr "draw:layer" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrTyp "draw:type" (draw'connectorDraw'type v)
	, maybeToAttr toAttrFrStr "draw:line-skew" (draw'connectorDraw'line_skew v)
	, maybeToAttr toAttrFrStr "draw:style-name" (draw'connectorDraw'style_name v)
	, maybeToAttr toAttrFrStr "presentation:style-name" (draw'connectorPresentation'style_name v)
	, maybeToAttr toAttrFrStr "draw:text-style-name" (draw'connectorDraw'text_style_name v)
	, toAttrFrStr "svg:x1" (draw'connectorSvg'x1 v)
	, toAttrFrStr "svg:y1" (draw'connectorSvg'y1 v)
	, toAttrFrStr "svg:x2" (draw'connectorSvg'x2 v)
	, toAttrFrStr "svg:y2" (draw'connectorSvg'y2 v)
	, maybeToAttr toAttrFrStr "draw:start-shape" (draw'connectorDraw'start_shape v)
	, maybeToAttr toAttrFrStr "draw:start-glue-point" (draw'connectorDraw'start_glue_point v)
	, maybeToAttr toAttrFrStr "draw:end-shape" (draw'connectorDraw'end_shape v)
	, maybeToAttr toAttrFrStr "draw:end-glue-point" (draw'connectorDraw'end_glue_point v)
	, maybeToAttr toAttrFrStr "draw:z-index" (draw'connectorDraw'z_index v)
	, maybeToAttr toAttrFrStr "table:end-cell-address" (draw'connectorTable'end_cell_address v)
	, maybeToAttr toAttrFrStr "table:end-x" (draw'connectorTable'end_x v)
	, maybeToAttr toAttrFrStr "table:end-y" (draw'connectorTable'end_y v)
	, maybeToAttr toAttrFrTyp "table:table-background" (draw'connectorTable'table_background v)
	, maybeToAttr toAttrFrStr "draw:id" (draw'connectorDraw'id v)
	, maybeToAttr toAttrFrTyp "text:anchor-type" (draw'connectorText'anchor_type v)
	, maybeToAttr toAttrFrStr "text:anchor-page-number" (draw'connectorText'anchor_page_number v)
	, maybeToAttr toAttrFrStr "draw:layer" (draw'connectorDraw'layer v)
	]
instance XmlAttrType Draw'connector_draw'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "standard" = Just Draw'connector_draw'type_standard
	    translate "lines" = Just Draw'connector_draw'type_lines
	    translate "line" = Just Draw'connector_draw'type_line
	    translate "curve" = Just Draw'connector_draw'type_curve
	    translate _ = Nothing
    toAttrFrTyp n Draw'connector_draw'type_standard = Just (n, str2attr "standard")
    toAttrFrTyp n Draw'connector_draw'type_lines = Just (n, str2attr "lines")
    toAttrFrTyp n Draw'connector_draw'type_line = Just (n, str2attr "line")
    toAttrFrTyp n Draw'connector_draw'type_curve = Just (n, str2attr "curve")
instance XmlAttrType Draw'connector_table'table_background where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Draw'connector_table'table_background_true
	    translate "false" = Just Draw'connector_table'table_background_false
	    translate _ = Nothing
    toAttrFrTyp n Draw'connector_table'table_background_true = Just (n, str2attr "true")
    toAttrFrTyp n Draw'connector_table'table_background_false = Just (n, str2attr "false")
instance XmlAttrType Draw'connector_text'anchor_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "page" = Just Draw'connector_text'anchor_type_page
	    translate "frame" = Just Draw'connector_text'anchor_type_frame
	    translate "paragraph" = Just Draw'connector_text'anchor_type_paragraph
	    translate "char" = Just Draw'connector_text'anchor_type_char
	    translate "as-char" = Just Draw'connector_text'anchor_type_as_char
	    translate _ = Nothing
    toAttrFrTyp n Draw'connector_text'anchor_type_page = Just (n, str2attr "page")
    toAttrFrTyp n Draw'connector_text'anchor_type_frame = Just (n, str2attr "frame")
    toAttrFrTyp n Draw'connector_text'anchor_type_paragraph = Just (n, str2attr "paragraph")
    toAttrFrTyp n Draw'connector_text'anchor_type_char = Just (n, str2attr "char")
    toAttrFrTyp n Draw'connector_text'anchor_type_as_char = Just (n, str2attr "as-char")
instance XmlContent Draw'control where
    fromElem (CElem (Elem "draw:control" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "draw:control" (toAttrs as) [])]
instance XmlAttributes Draw'control where
    fromAttrs as =
	Draw'control
	  { draw'controlDraw'style_name = possibleA fromAttrToStr "draw:style-name" as
	  , draw'controlPresentation'style_name = possibleA fromAttrToStr "presentation:style-name" as
	  , draw'controlDraw'text_style_name = possibleA fromAttrToStr "draw:text-style-name" as
	  , draw'controlSvg'x = possibleA fromAttrToStr "svg:x" as
	  , draw'controlSvg'y = possibleA fromAttrToStr "svg:y" as
	  , draw'controlSvg'width = possibleA fromAttrToStr "svg:width" as
	  , draw'controlSvg'height = possibleA fromAttrToStr "svg:height" as
	  , draw'controlForm'id = definiteA fromAttrToStr "draw:control" "form:id" as
	  , draw'controlDraw'z_index = possibleA fromAttrToStr "draw:z-index" as
	  , draw'controlTable'end_cell_address = possibleA fromAttrToStr "table:end-cell-address" as
	  , draw'controlTable'end_x = possibleA fromAttrToStr "table:end-x" as
	  , draw'controlTable'end_y = possibleA fromAttrToStr "table:end-y" as
	  , draw'controlTable'table_background = possibleA fromAttrToTyp "table:table-background" as
	  , draw'controlDraw'id = possibleA fromAttrToStr "draw:id" as
	  , draw'controlText'anchor_type = possibleA fromAttrToTyp "text:anchor-type" as
	  , draw'controlText'anchor_page_number = possibleA fromAttrToStr "text:anchor-page-number" as
	  , draw'controlDraw'layer = possibleA fromAttrToStr "draw:layer" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "draw:style-name" (draw'controlDraw'style_name v)
	, maybeToAttr toAttrFrStr "presentation:style-name" (draw'controlPresentation'style_name v)
	, maybeToAttr toAttrFrStr "draw:text-style-name" (draw'controlDraw'text_style_name v)
	, maybeToAttr toAttrFrStr "svg:x" (draw'controlSvg'x v)
	, maybeToAttr toAttrFrStr "svg:y" (draw'controlSvg'y v)
	, maybeToAttr toAttrFrStr "svg:width" (draw'controlSvg'width v)
	, maybeToAttr toAttrFrStr "svg:height" (draw'controlSvg'height v)
	, toAttrFrStr "form:id" (draw'controlForm'id v)
	, maybeToAttr toAttrFrStr "draw:z-index" (draw'controlDraw'z_index v)
	, maybeToAttr toAttrFrStr "table:end-cell-address" (draw'controlTable'end_cell_address v)
	, maybeToAttr toAttrFrStr "table:end-x" (draw'controlTable'end_x v)
	, maybeToAttr toAttrFrStr "table:end-y" (draw'controlTable'end_y v)
	, maybeToAttr toAttrFrTyp "table:table-background" (draw'controlTable'table_background v)
	, maybeToAttr toAttrFrStr "draw:id" (draw'controlDraw'id v)
	, maybeToAttr toAttrFrTyp "text:anchor-type" (draw'controlText'anchor_type v)
	, maybeToAttr toAttrFrStr "text:anchor-page-number" (draw'controlText'anchor_page_number v)
	, maybeToAttr toAttrFrStr "draw:layer" (draw'controlDraw'layer v)
	]
instance XmlAttrType Draw'control_table'table_background where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Draw'control_table'table_background_true
	    translate "false" = Just Draw'control_table'table_background_false
	    translate _ = Nothing
    toAttrFrTyp n Draw'control_table'table_background_true = Just (n, str2attr "true")
    toAttrFrTyp n Draw'control_table'table_background_false = Just (n, str2attr "false")
instance XmlAttrType Draw'control_text'anchor_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "page" = Just Draw'control_text'anchor_type_page
	    translate "frame" = Just Draw'control_text'anchor_type_frame
	    translate "paragraph" = Just Draw'control_text'anchor_type_paragraph
	    translate "char" = Just Draw'control_text'anchor_type_char
	    translate "as-char" = Just Draw'control_text'anchor_type_as_char
	    translate _ = Nothing
    toAttrFrTyp n Draw'control_text'anchor_type_page = Just (n, str2attr "page")
    toAttrFrTyp n Draw'control_text'anchor_type_frame = Just (n, str2attr "frame")
    toAttrFrTyp n Draw'control_text'anchor_type_paragraph = Just (n, str2attr "paragraph")
    toAttrFrTyp n Draw'control_text'anchor_type_char = Just (n, str2attr "char")
    toAttrFrTyp n Draw'control_text'anchor_type_as_char = Just (n, str2attr "as-char")
instance XmlContent Draw'g where
    fromElem (CElem (Elem "draw:g" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Draw'g (fromAttrs as) a b), rest))
	   (many fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Draw'g as a b) =
	[CElem (Elem "draw:g" (toAttrs as) (maybe [] toElem a ++
					    concatMap toElem b))]
instance XmlAttributes Draw'g_Attrs where
    fromAttrs as =
	Draw'g_Attrs
	  { draw'gSvg'y = possibleA fromAttrToStr "svg:y" as
	  , draw'gDraw'transform = possibleA fromAttrToStr "draw:transform" as
	  , draw'gDraw'name = possibleA fromAttrToStr "draw:name" as
	  , draw'gDraw'style_name = possibleA fromAttrToStr "draw:style-name" as
	  , draw'gPresentation'style_name = possibleA fromAttrToStr "presentation:style-name" as
	  , draw'gDraw'text_style_name = possibleA fromAttrToStr "draw:text-style-name" as
	  , draw'gDraw'z_index = possibleA fromAttrToStr "draw:z-index" as
	  , draw'gTable'end_cell_address = possibleA fromAttrToStr "table:end-cell-address" as
	  , draw'gTable'end_x = possibleA fromAttrToStr "table:end-x" as
	  , draw'gTable'end_y = possibleA fromAttrToStr "table:end-y" as
	  , draw'gTable'table_background = possibleA fromAttrToTyp "table:table-background" as
	  , draw'gDraw'id = possibleA fromAttrToStr "draw:id" as
	  , draw'gText'anchor_type = possibleA fromAttrToTyp "text:anchor-type" as
	  , draw'gText'anchor_page_number = possibleA fromAttrToStr "text:anchor-page-number" as
	  , draw'gDraw'layer = possibleA fromAttrToStr "draw:layer" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "svg:y" (draw'gSvg'y v)
	, maybeToAttr toAttrFrStr "draw:transform" (draw'gDraw'transform v)
	, maybeToAttr toAttrFrStr "draw:name" (draw'gDraw'name v)
	, maybeToAttr toAttrFrStr "draw:style-name" (draw'gDraw'style_name v)
	, maybeToAttr toAttrFrStr "presentation:style-name" (draw'gPresentation'style_name v)
	, maybeToAttr toAttrFrStr "draw:text-style-name" (draw'gDraw'text_style_name v)
	, maybeToAttr toAttrFrStr "draw:z-index" (draw'gDraw'z_index v)
	, maybeToAttr toAttrFrStr "table:end-cell-address" (draw'gTable'end_cell_address v)
	, maybeToAttr toAttrFrStr "table:end-x" (draw'gTable'end_x v)
	, maybeToAttr toAttrFrStr "table:end-y" (draw'gTable'end_y v)
	, maybeToAttr toAttrFrTyp "table:table-background" (draw'gTable'table_background v)
	, maybeToAttr toAttrFrStr "draw:id" (draw'gDraw'id v)
	, maybeToAttr toAttrFrTyp "text:anchor-type" (draw'gText'anchor_type v)
	, maybeToAttr toAttrFrStr "text:anchor-page-number" (draw'gText'anchor_page_number v)
	, maybeToAttr toAttrFrStr "draw:layer" (draw'gDraw'layer v)
	]
instance XmlAttrType Draw'g_table'table_background where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Draw'g_table'table_background_true
	    translate "false" = Just Draw'g_table'table_background_false
	    translate _ = Nothing
    toAttrFrTyp n Draw'g_table'table_background_true = Just (n, str2attr "true")
    toAttrFrTyp n Draw'g_table'table_background_false = Just (n, str2attr "false")
instance XmlAttrType Draw'g_text'anchor_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "page" = Just Draw'g_text'anchor_type_page
	    translate "frame" = Just Draw'g_text'anchor_type_frame
	    translate "paragraph" = Just Draw'g_text'anchor_type_paragraph
	    translate "char" = Just Draw'g_text'anchor_type_char
	    translate "as-char" = Just Draw'g_text'anchor_type_as_char
	    translate _ = Nothing
    toAttrFrTyp n Draw'g_text'anchor_type_page = Just (n, str2attr "page")
    toAttrFrTyp n Draw'g_text'anchor_type_frame = Just (n, str2attr "frame")
    toAttrFrTyp n Draw'g_text'anchor_type_paragraph = Just (n, str2attr "paragraph")
    toAttrFrTyp n Draw'g_text'anchor_type_char = Just (n, str2attr "char")
    toAttrFrTyp n Draw'g_text'anchor_type_as_char = Just (n, str2attr "as-char")
instance XmlContent Draw'page_thumbnail where
    fromElem (CElem (Elem "draw:page-thumbnail" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "draw:page-thumbnail" (toAttrs as) [])]
instance XmlAttributes Draw'page_thumbnail where
    fromAttrs as =
	Draw'page_thumbnail
	  { draw'page_thumbnailDraw'page_number = possibleA fromAttrToStr "draw:page-number" as
	  , draw'page_thumbnailSvg'x = possibleA fromAttrToStr "svg:x" as
	  , draw'page_thumbnailSvg'y = possibleA fromAttrToStr "svg:y" as
	  , draw'page_thumbnailSvg'width = possibleA fromAttrToStr "svg:width" as
	  , draw'page_thumbnailSvg'height = possibleA fromAttrToStr "svg:height" as
	  , draw'page_thumbnailDraw'style_name = possibleA fromAttrToStr "draw:style-name" as
	  , draw'page_thumbnailPresentation'style_name = possibleA fromAttrToStr "presentation:style-name" as
	  , draw'page_thumbnailDraw'text_style_name = possibleA fromAttrToStr "draw:text-style-name" as
	  , draw'page_thumbnailPresentation'class = possibleA fromAttrToTyp "presentation:class" as
	  , draw'page_thumbnailPresentation'placeholder = possibleA fromAttrToTyp "presentation:placeholder" as
	  , draw'page_thumbnailPresentation'user_transformed = possibleA fromAttrToTyp "presentation:user-transformed" as
	  , draw'page_thumbnailDraw'z_index = possibleA fromAttrToStr "draw:z-index" as
	  , draw'page_thumbnailTable'end_cell_address = possibleA fromAttrToStr "table:end-cell-address" as
	  , draw'page_thumbnailTable'end_x = possibleA fromAttrToStr "table:end-x" as
	  , draw'page_thumbnailTable'end_y = possibleA fromAttrToStr "table:end-y" as
	  , draw'page_thumbnailTable'table_background = possibleA fromAttrToTyp "table:table-background" as
	  , draw'page_thumbnailDraw'id = possibleA fromAttrToStr "draw:id" as
	  , draw'page_thumbnailText'anchor_type = possibleA fromAttrToTyp "text:anchor-type" as
	  , draw'page_thumbnailText'anchor_page_number = possibleA fromAttrToStr "text:anchor-page-number" as
	  , draw'page_thumbnailDraw'layer = possibleA fromAttrToStr "draw:layer" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "draw:page-number" (draw'page_thumbnailDraw'page_number v)
	, maybeToAttr toAttrFrStr "svg:x" (draw'page_thumbnailSvg'x v)
	, maybeToAttr toAttrFrStr "svg:y" (draw'page_thumbnailSvg'y v)
	, maybeToAttr toAttrFrStr "svg:width" (draw'page_thumbnailSvg'width v)
	, maybeToAttr toAttrFrStr "svg:height" (draw'page_thumbnailSvg'height v)
	, maybeToAttr toAttrFrStr "draw:style-name" (draw'page_thumbnailDraw'style_name v)
	, maybeToAttr toAttrFrStr "presentation:style-name" (draw'page_thumbnailPresentation'style_name v)
	, maybeToAttr toAttrFrStr "draw:text-style-name" (draw'page_thumbnailDraw'text_style_name v)
	, maybeToAttr toAttrFrTyp "presentation:class" (draw'page_thumbnailPresentation'class v)
	, maybeToAttr toAttrFrTyp "presentation:placeholder" (draw'page_thumbnailPresentation'placeholder v)
	, maybeToAttr toAttrFrTyp "presentation:user-transformed" (draw'page_thumbnailPresentation'user_transformed v)
	, maybeToAttr toAttrFrStr "draw:z-index" (draw'page_thumbnailDraw'z_index v)
	, maybeToAttr toAttrFrStr "table:end-cell-address" (draw'page_thumbnailTable'end_cell_address v)
	, maybeToAttr toAttrFrStr "table:end-x" (draw'page_thumbnailTable'end_x v)
	, maybeToAttr toAttrFrStr "table:end-y" (draw'page_thumbnailTable'end_y v)
	, maybeToAttr toAttrFrTyp "table:table-background" (draw'page_thumbnailTable'table_background v)
	, maybeToAttr toAttrFrStr "draw:id" (draw'page_thumbnailDraw'id v)
	, maybeToAttr toAttrFrTyp "text:anchor-type" (draw'page_thumbnailText'anchor_type v)
	, maybeToAttr toAttrFrStr "text:anchor-page-number" (draw'page_thumbnailText'anchor_page_number v)
	, maybeToAttr toAttrFrStr "draw:layer" (draw'page_thumbnailDraw'layer v)
	]
instance XmlAttrType Draw'page_thumbnail_presentation'class where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "title" = Just Draw'page_thumbnail_presentation'class_title
	    translate "outline" = Just Draw'page_thumbnail_presentation'class_outline
	    translate "subtitle" = Just Draw'page_thumbnail_presentation'class_subtitle
	    translate "text" = Just Draw'page_thumbnail_presentation'class_text
	    translate "graphic" = Just Draw'page_thumbnail_presentation'class_graphic
	    translate "object" = Just Draw'page_thumbnail_presentation'class_object
	    translate "chart" = Just Draw'page_thumbnail_presentation'class_chart
	    translate "table" = Just Draw'page_thumbnail_presentation'class_table
	    translate "orgchart" = Just Draw'page_thumbnail_presentation'class_orgchart
	    translate "page" = Just Draw'page_thumbnail_presentation'class_page
	    translate "notes" = Just Draw'page_thumbnail_presentation'class_notes
	    translate _ = Nothing
    toAttrFrTyp n Draw'page_thumbnail_presentation'class_title = Just (n, str2attr "title")
    toAttrFrTyp n Draw'page_thumbnail_presentation'class_outline = Just (n, str2attr "outline")
    toAttrFrTyp n Draw'page_thumbnail_presentation'class_subtitle = Just (n, str2attr "subtitle")
    toAttrFrTyp n Draw'page_thumbnail_presentation'class_text = Just (n, str2attr "text")
    toAttrFrTyp n Draw'page_thumbnail_presentation'class_graphic = Just (n, str2attr "graphic")
    toAttrFrTyp n Draw'page_thumbnail_presentation'class_object = Just (n, str2attr "object")
    toAttrFrTyp n Draw'page_thumbnail_presentation'class_chart = Just (n, str2attr "chart")
    toAttrFrTyp n Draw'page_thumbnail_presentation'class_table = Just (n, str2attr "table")
    toAttrFrTyp n Draw'page_thumbnail_presentation'class_orgchart = Just (n, str2attr "orgchart")
    toAttrFrTyp n Draw'page_thumbnail_presentation'class_page = Just (n, str2attr "page")
    toAttrFrTyp n Draw'page_thumbnail_presentation'class_notes = Just (n, str2attr "notes")
instance XmlAttrType Draw'page_thumbnail_presentation'placeholder where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Draw'page_thumbnail_presentation'placeholder_true
	    translate "false" = Just Draw'page_thumbnail_presentation'placeholder_false
	    translate _ = Nothing
    toAttrFrTyp n Draw'page_thumbnail_presentation'placeholder_true = Just (n, str2attr "true")
    toAttrFrTyp n Draw'page_thumbnail_presentation'placeholder_false = Just (n, str2attr "false")
instance XmlAttrType Draw'page_thumbnail_presentation'user_transformed where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Draw'page_thumbnail_presentation'user_transformed_true
	    translate "false" = Just Draw'page_thumbnail_presentation'user_transformed_false
	    translate _ = Nothing
    toAttrFrTyp n Draw'page_thumbnail_presentation'user_transformed_true = Just (n, str2attr "true")
    toAttrFrTyp n Draw'page_thumbnail_presentation'user_transformed_false = Just (n, str2attr "false")
instance XmlAttrType Draw'page_thumbnail_table'table_background where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Draw'page_thumbnail_table'table_background_true
	    translate "false" = Just Draw'page_thumbnail_table'table_background_false
	    translate _ = Nothing
    toAttrFrTyp n Draw'page_thumbnail_table'table_background_true = Just (n, str2attr "true")
    toAttrFrTyp n Draw'page_thumbnail_table'table_background_false = Just (n, str2attr "false")
instance XmlAttrType Draw'page_thumbnail_text'anchor_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "page" = Just Draw'page_thumbnail_text'anchor_type_page
	    translate "frame" = Just Draw'page_thumbnail_text'anchor_type_frame
	    translate "paragraph" = Just Draw'page_thumbnail_text'anchor_type_paragraph
	    translate "char" = Just Draw'page_thumbnail_text'anchor_type_char
	    translate "as-char" = Just Draw'page_thumbnail_text'anchor_type_as_char
	    translate _ = Nothing
    toAttrFrTyp n Draw'page_thumbnail_text'anchor_type_page = Just (n, str2attr "page")
    toAttrFrTyp n Draw'page_thumbnail_text'anchor_type_frame = Just (n, str2attr "frame")
    toAttrFrTyp n Draw'page_thumbnail_text'anchor_type_paragraph = Just (n, str2attr "paragraph")
    toAttrFrTyp n Draw'page_thumbnail_text'anchor_type_char = Just (n, str2attr "char")
    toAttrFrTyp n Draw'page_thumbnail_text'anchor_type_as_char = Just (n, str2attr "as-char")
instance XmlContent Draw'caption where
    fromElem (CElem (Elem "draw:caption" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Draw'caption (fromAttrs as) a b), rest))
	   (many fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Draw'caption as a b) =
	[CElem (Elem "draw:caption" (toAttrs as) (maybe [] toElem a ++
						  concatMap toElem b))]
instance XmlAttributes Draw'caption_Attrs where
    fromAttrs as =
	Draw'caption_Attrs
	  { draw'captionSvg'x = possibleA fromAttrToStr "svg:x" as
	  , draw'captionSvg'y = possibleA fromAttrToStr "svg:y" as
	  , draw'captionTable'end_cell_address = possibleA fromAttrToStr "table:end-cell-address" as
	  , draw'captionTable'end_x = possibleA fromAttrToStr "table:end-x" as
	  , draw'captionTable'end_y = possibleA fromAttrToStr "table:end-y" as
	  , draw'captionTable'table_background = possibleA fromAttrToTyp "table:table-background" as
	  , draw'captionSvg'width = possibleA fromAttrToStr "svg:width" as
	  , draw'captionSvg'height = possibleA fromAttrToStr "svg:height" as
	  , draw'captionDraw'style_name = possibleA fromAttrToStr "draw:style-name" as
	  , draw'captionPresentation'style_name = possibleA fromAttrToStr "presentation:style-name" as
	  , draw'captionDraw'text_style_name = possibleA fromAttrToStr "draw:text-style-name" as
	  , draw'captionDraw'transform = possibleA fromAttrToStr "draw:transform" as
	  , draw'captionDraw'caption_point_x = possibleA fromAttrToStr "draw:caption-point-x" as
	  , draw'captionDraw'caption_point_y = possibleA fromAttrToStr "draw:caption-point-y" as
	  , draw'captionDraw'z_index = possibleA fromAttrToStr "draw:z-index" as
	  , draw'captionDraw'id = possibleA fromAttrToStr "draw:id" as
	  , draw'captionText'anchor_type = possibleA fromAttrToTyp "text:anchor-type" as
	  , draw'captionText'anchor_page_number = possibleA fromAttrToStr "text:anchor-page-number" as
	  , draw'captionDraw'layer = possibleA fromAttrToStr "draw:layer" as
	  , draw'captionDraw'corner_radius = possibleA fromAttrToStr "draw:corner-radius" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "svg:x" (draw'captionSvg'x v)
	, maybeToAttr toAttrFrStr "svg:y" (draw'captionSvg'y v)
	, maybeToAttr toAttrFrStr "table:end-cell-address" (draw'captionTable'end_cell_address v)
	, maybeToAttr toAttrFrStr "table:end-x" (draw'captionTable'end_x v)
	, maybeToAttr toAttrFrStr "table:end-y" (draw'captionTable'end_y v)
	, maybeToAttr toAttrFrTyp "table:table-background" (draw'captionTable'table_background v)
	, maybeToAttr toAttrFrStr "svg:width" (draw'captionSvg'width v)
	, maybeToAttr toAttrFrStr "svg:height" (draw'captionSvg'height v)
	, maybeToAttr toAttrFrStr "draw:style-name" (draw'captionDraw'style_name v)
	, maybeToAttr toAttrFrStr "presentation:style-name" (draw'captionPresentation'style_name v)
	, maybeToAttr toAttrFrStr "draw:text-style-name" (draw'captionDraw'text_style_name v)
	, maybeToAttr toAttrFrStr "draw:transform" (draw'captionDraw'transform v)
	, maybeToAttr toAttrFrStr "draw:caption-point-x" (draw'captionDraw'caption_point_x v)
	, maybeToAttr toAttrFrStr "draw:caption-point-y" (draw'captionDraw'caption_point_y v)
	, maybeToAttr toAttrFrStr "draw:z-index" (draw'captionDraw'z_index v)
	, maybeToAttr toAttrFrStr "draw:id" (draw'captionDraw'id v)
	, maybeToAttr toAttrFrTyp "text:anchor-type" (draw'captionText'anchor_type v)
	, maybeToAttr toAttrFrStr "text:anchor-page-number" (draw'captionText'anchor_page_number v)
	, maybeToAttr toAttrFrStr "draw:layer" (draw'captionDraw'layer v)
	, maybeToAttr toAttrFrStr "draw:corner-radius" (draw'captionDraw'corner_radius v)
	]
instance XmlAttrType Draw'caption_table'table_background where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Draw'caption_table'table_background_true
	    translate "false" = Just Draw'caption_table'table_background_false
	    translate _ = Nothing
    toAttrFrTyp n Draw'caption_table'table_background_true = Just (n, str2attr "true")
    toAttrFrTyp n Draw'caption_table'table_background_false = Just (n, str2attr "false")
instance XmlAttrType Draw'caption_text'anchor_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "page" = Just Draw'caption_text'anchor_type_page
	    translate "frame" = Just Draw'caption_text'anchor_type_frame
	    translate "paragraph" = Just Draw'caption_text'anchor_type_paragraph
	    translate "char" = Just Draw'caption_text'anchor_type_char
	    translate "as-char" = Just Draw'caption_text'anchor_type_as_char
	    translate _ = Nothing
    toAttrFrTyp n Draw'caption_text'anchor_type_page = Just (n, str2attr "page")
    toAttrFrTyp n Draw'caption_text'anchor_type_frame = Just (n, str2attr "frame")
    toAttrFrTyp n Draw'caption_text'anchor_type_paragraph = Just (n, str2attr "paragraph")
    toAttrFrTyp n Draw'caption_text'anchor_type_char = Just (n, str2attr "char")
    toAttrFrTyp n Draw'caption_text'anchor_type_as_char = Just (n, str2attr "as-char")
instance XmlContent Draw'measure where
    fromElem (CElem (Elem "draw:measure" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Draw'measure (fromAttrs as) a b), rest))
	   (many fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Draw'measure as a b) =
	[CElem (Elem "draw:measure" (toAttrs as) (maybe [] toElem a ++
						  concatMap toElem b))]
instance XmlAttributes Draw'measure_Attrs where
    fromAttrs as =
	Draw'measure_Attrs
	  { draw'measureSvg'x1 = definiteA fromAttrToStr "draw:measure" "svg:x1" as
	  , draw'measureSvg'y1 = definiteA fromAttrToStr "draw:measure" "svg:y1" as
	  , draw'measureSvg'x2 = definiteA fromAttrToStr "draw:measure" "svg:x2" as
	  , draw'measureSvg'y2 = definiteA fromAttrToStr "draw:measure" "svg:y2" as
	  , draw'measureTable'end_cell_address = possibleA fromAttrToStr "table:end-cell-address" as
	  , draw'measureTable'end_x = possibleA fromAttrToStr "table:end-x" as
	  , draw'measureTable'end_y = possibleA fromAttrToStr "table:end-y" as
	  , draw'measureTable'table_background = possibleA fromAttrToTyp "table:table-background" as
	  , draw'measureDraw'style_name = possibleA fromAttrToStr "draw:style-name" as
	  , draw'measurePresentation'style_name = possibleA fromAttrToStr "presentation:style-name" as
	  , draw'measureDraw'text_style_name = possibleA fromAttrToStr "draw:text-style-name" as
	  , draw'measureDraw'transform = possibleA fromAttrToStr "draw:transform" as
	  , draw'measureDraw'z_index = possibleA fromAttrToStr "draw:z-index" as
	  , draw'measureDraw'id = possibleA fromAttrToStr "draw:id" as
	  , draw'measureText'anchor_type = possibleA fromAttrToTyp "text:anchor-type" as
	  , draw'measureText'anchor_page_number = possibleA fromAttrToStr "text:anchor-page-number" as
	  , draw'measureDraw'layer = possibleA fromAttrToStr "draw:layer" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "svg:x1" (draw'measureSvg'x1 v)
	, toAttrFrStr "svg:y1" (draw'measureSvg'y1 v)
	, toAttrFrStr "svg:x2" (draw'measureSvg'x2 v)
	, toAttrFrStr "svg:y2" (draw'measureSvg'y2 v)
	, maybeToAttr toAttrFrStr "table:end-cell-address" (draw'measureTable'end_cell_address v)
	, maybeToAttr toAttrFrStr "table:end-x" (draw'measureTable'end_x v)
	, maybeToAttr toAttrFrStr "table:end-y" (draw'measureTable'end_y v)
	, maybeToAttr toAttrFrTyp "table:table-background" (draw'measureTable'table_background v)
	, maybeToAttr toAttrFrStr "draw:style-name" (draw'measureDraw'style_name v)
	, maybeToAttr toAttrFrStr "presentation:style-name" (draw'measurePresentation'style_name v)
	, maybeToAttr toAttrFrStr "draw:text-style-name" (draw'measureDraw'text_style_name v)
	, maybeToAttr toAttrFrStr "draw:transform" (draw'measureDraw'transform v)
	, maybeToAttr toAttrFrStr "draw:z-index" (draw'measureDraw'z_index v)
	, maybeToAttr toAttrFrStr "draw:id" (draw'measureDraw'id v)
	, maybeToAttr toAttrFrTyp "text:anchor-type" (draw'measureText'anchor_type v)
	, maybeToAttr toAttrFrStr "text:anchor-page-number" (draw'measureText'anchor_page_number v)
	, maybeToAttr toAttrFrStr "draw:layer" (draw'measureDraw'layer v)
	]
instance XmlAttrType Draw'measure_table'table_background where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Draw'measure_table'table_background_true
	    translate "false" = Just Draw'measure_table'table_background_false
	    translate _ = Nothing
    toAttrFrTyp n Draw'measure_table'table_background_true = Just (n, str2attr "true")
    toAttrFrTyp n Draw'measure_table'table_background_false = Just (n, str2attr "false")
instance XmlAttrType Draw'measure_text'anchor_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "page" = Just Draw'measure_text'anchor_type_page
	    translate "frame" = Just Draw'measure_text'anchor_type_frame
	    translate "paragraph" = Just Draw'measure_text'anchor_type_paragraph
	    translate "char" = Just Draw'measure_text'anchor_type_char
	    translate "as-char" = Just Draw'measure_text'anchor_type_as_char
	    translate _ = Nothing
    toAttrFrTyp n Draw'measure_text'anchor_type_page = Just (n, str2attr "page")
    toAttrFrTyp n Draw'measure_text'anchor_type_frame = Just (n, str2attr "frame")
    toAttrFrTyp n Draw'measure_text'anchor_type_paragraph = Just (n, str2attr "paragraph")
    toAttrFrTyp n Draw'measure_text'anchor_type_char = Just (n, str2attr "char")
    toAttrFrTyp n Draw'measure_text'anchor_type_as_char = Just (n, str2attr "as-char")
instance XmlContent Draw'gradient where
    fromElem (CElem (Elem "draw:gradient" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "draw:gradient" (toAttrs as) [])]
instance XmlAttributes Draw'gradient where
    fromAttrs as =
	Draw'gradient
	  { draw'gradientDraw'name = definiteA fromAttrToStr "draw:gradient" "draw:name" as
	  , draw'gradientDraw'style = definiteA fromAttrToTyp "draw:gradient" "draw:style" as
	  , draw'gradientDraw'cx = possibleA fromAttrToStr "draw:cx" as
	  , draw'gradientDraw'cy = possibleA fromAttrToStr "draw:cy" as
	  , draw'gradientDraw'start_color = possibleA fromAttrToStr "draw:start-color" as
	  , draw'gradientDraw'end_color = possibleA fromAttrToStr "draw:end-color" as
	  , draw'gradientDraw'start_intensity = possibleA fromAttrToStr "draw:start-intensity" as
	  , draw'gradientDraw'end_intensity = possibleA fromAttrToStr "draw:end-intensity" as
	  , draw'gradientDraw'angle = possibleA fromAttrToStr "draw:angle" as
	  , draw'gradientDraw'border = possibleA fromAttrToStr "draw:border" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "draw:name" (draw'gradientDraw'name v)
	, toAttrFrTyp "draw:style" (draw'gradientDraw'style v)
	, maybeToAttr toAttrFrStr "draw:cx" (draw'gradientDraw'cx v)
	, maybeToAttr toAttrFrStr "draw:cy" (draw'gradientDraw'cy v)
	, maybeToAttr toAttrFrStr "draw:start-color" (draw'gradientDraw'start_color v)
	, maybeToAttr toAttrFrStr "draw:end-color" (draw'gradientDraw'end_color v)
	, maybeToAttr toAttrFrStr "draw:start-intensity" (draw'gradientDraw'start_intensity v)
	, maybeToAttr toAttrFrStr "draw:end-intensity" (draw'gradientDraw'end_intensity v)
	, maybeToAttr toAttrFrStr "draw:angle" (draw'gradientDraw'angle v)
	, maybeToAttr toAttrFrStr "draw:border" (draw'gradientDraw'border v)
	]
instance XmlAttrType Draw'gradient_draw'style where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "linear" = Just Draw'gradient_draw'style_linear
	    translate "axial" = Just Draw'gradient_draw'style_axial
	    translate "radial" = Just Draw'gradient_draw'style_radial
	    translate "ellipsoid" = Just Draw'gradient_draw'style_ellipsoid
	    translate "square" = Just Draw'gradient_draw'style_square
	    translate "rectangular" = Just Draw'gradient_draw'style_rectangular
	    translate _ = Nothing
    toAttrFrTyp n Draw'gradient_draw'style_linear = Just (n, str2attr "linear")
    toAttrFrTyp n Draw'gradient_draw'style_axial = Just (n, str2attr "axial")
    toAttrFrTyp n Draw'gradient_draw'style_radial = Just (n, str2attr "radial")
    toAttrFrTyp n Draw'gradient_draw'style_ellipsoid = Just (n, str2attr "ellipsoid")
    toAttrFrTyp n Draw'gradient_draw'style_square = Just (n, str2attr "square")
    toAttrFrTyp n Draw'gradient_draw'style_rectangular = Just (n, str2attr "rectangular")
instance XmlContent Draw'hatch where
    fromElem (CElem (Elem "draw:hatch" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "draw:hatch" (toAttrs as) [])]
instance XmlAttributes Draw'hatch where
    fromAttrs as =
	Draw'hatch
	  { draw'hatchDraw'name = definiteA fromAttrToStr "draw:hatch" "draw:name" as
	  , draw'hatchDraw'style = definiteA fromAttrToTyp "draw:hatch" "draw:style" as
	  , draw'hatchDraw'color = possibleA fromAttrToStr "draw:color" as
	  , draw'hatchDraw'distance = possibleA fromAttrToStr "draw:distance" as
	  , draw'hatchDraw'rotation = possibleA fromAttrToStr "draw:rotation" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "draw:name" (draw'hatchDraw'name v)
	, toAttrFrTyp "draw:style" (draw'hatchDraw'style v)
	, maybeToAttr toAttrFrStr "draw:color" (draw'hatchDraw'color v)
	, maybeToAttr toAttrFrStr "draw:distance" (draw'hatchDraw'distance v)
	, maybeToAttr toAttrFrStr "draw:rotation" (draw'hatchDraw'rotation v)
	]
instance XmlAttrType Draw'hatch_draw'style where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "single" = Just Draw'hatch_draw'style_single
	    translate "double" = Just Draw'hatch_draw'style_double
	    translate "triple" = Just Draw'hatch_draw'style_triple
	    translate _ = Nothing
    toAttrFrTyp n Draw'hatch_draw'style_single = Just (n, str2attr "single")
    toAttrFrTyp n Draw'hatch_draw'style_double = Just (n, str2attr "double")
    toAttrFrTyp n Draw'hatch_draw'style_triple = Just (n, str2attr "triple")
instance XmlContent Draw'fill_image where
    fromElem (CElem (Elem "draw:fill-image" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "draw:fill-image" (toAttrs as) [])]
instance XmlAttributes Draw'fill_image where
    fromAttrs as =
	Draw'fill_image
	  { draw'fill_imageDraw'name = definiteA fromAttrToStr "draw:fill-image" "draw:name" as
	  , draw'fill_imageXlink'href = definiteA fromAttrToStr "draw:fill-image" "xlink:href" as
	  , draw'fill_imageXlink'type = possibleA fromAttrToTyp "xlink:type" as
	  , draw'fill_imageXlink'show = possibleA fromAttrToTyp "xlink:show" as
	  , draw'fill_imageXlink'actuate = possibleA fromAttrToTyp "xlink:actuate" as
	  , draw'fill_imageSvg'width = possibleA fromAttrToStr "svg:width" as
	  , draw'fill_imageSvg'height = possibleA fromAttrToStr "svg:height" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "draw:name" (draw'fill_imageDraw'name v)
	, toAttrFrStr "xlink:href" (draw'fill_imageXlink'href v)
	, maybeToAttr toAttrFrTyp "xlink:type" (draw'fill_imageXlink'type v)
	, maybeToAttr toAttrFrTyp "xlink:show" (draw'fill_imageXlink'show v)
	, maybeToAttr toAttrFrTyp "xlink:actuate" (draw'fill_imageXlink'actuate v)
	, maybeToAttr toAttrFrStr "svg:width" (draw'fill_imageSvg'width v)
	, maybeToAttr toAttrFrStr "svg:height" (draw'fill_imageSvg'height v)
	]
instance XmlAttrType Draw'fill_image_xlink'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "simple" = Just Draw'fill_image_xlink'type_simple
	    translate _ = Nothing
    toAttrFrTyp n Draw'fill_image_xlink'type_simple = Just (n, str2attr "simple")
instance XmlAttrType Draw'fill_image_xlink'show where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "embed" = Just Draw'fill_image_xlink'show_embed
	    translate _ = Nothing
    toAttrFrTyp n Draw'fill_image_xlink'show_embed = Just (n, str2attr "embed")
instance XmlAttrType Draw'fill_image_xlink'actuate where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "onLoad" = Just Draw'fill_image_xlink'actuate_onLoad
	    translate _ = Nothing
    toAttrFrTyp n Draw'fill_image_xlink'actuate_onLoad = Just (n, str2attr "onLoad")
instance XmlContent Draw'transparency where
    fromElem (CElem (Elem "draw:transparency" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "draw:transparency" (toAttrs as) [])]
instance XmlAttributes Draw'transparency where
    fromAttrs as =
	Draw'transparency
	  { draw'transparencyDraw'name = definiteA fromAttrToStr "draw:transparency" "draw:name" as
	  , draw'transparencyDraw'style = definiteA fromAttrToTyp "draw:transparency" "draw:style" as
	  , draw'transparencyDraw'cx = possibleA fromAttrToStr "draw:cx" as
	  , draw'transparencyDraw'cy = possibleA fromAttrToStr "draw:cy" as
	  , draw'transparencyDraw'start = possibleA fromAttrToStr "draw:start" as
	  , draw'transparencyDraw'end = possibleA fromAttrToStr "draw:end" as
	  , draw'transparencyDraw'angle = possibleA fromAttrToStr "draw:angle" as
	  , draw'transparencyDraw'border = possibleA fromAttrToStr "draw:border" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "draw:name" (draw'transparencyDraw'name v)
	, toAttrFrTyp "draw:style" (draw'transparencyDraw'style v)
	, maybeToAttr toAttrFrStr "draw:cx" (draw'transparencyDraw'cx v)
	, maybeToAttr toAttrFrStr "draw:cy" (draw'transparencyDraw'cy v)
	, maybeToAttr toAttrFrStr "draw:start" (draw'transparencyDraw'start v)
	, maybeToAttr toAttrFrStr "draw:end" (draw'transparencyDraw'end v)
	, maybeToAttr toAttrFrStr "draw:angle" (draw'transparencyDraw'angle v)
	, maybeToAttr toAttrFrStr "draw:border" (draw'transparencyDraw'border v)
	]
instance XmlAttrType Draw'transparency_draw'style where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "linear" = Just Draw'transparency_draw'style_linear
	    translate "axial" = Just Draw'transparency_draw'style_axial
	    translate "radial" = Just Draw'transparency_draw'style_radial
	    translate "ellipsoid" = Just Draw'transparency_draw'style_ellipsoid
	    translate "square" = Just Draw'transparency_draw'style_square
	    translate "rectangular" = Just Draw'transparency_draw'style_rectangular
	    translate _ = Nothing
    toAttrFrTyp n Draw'transparency_draw'style_linear = Just (n, str2attr "linear")
    toAttrFrTyp n Draw'transparency_draw'style_axial = Just (n, str2attr "axial")
    toAttrFrTyp n Draw'transparency_draw'style_radial = Just (n, str2attr "radial")
    toAttrFrTyp n Draw'transparency_draw'style_ellipsoid = Just (n, str2attr "ellipsoid")
    toAttrFrTyp n Draw'transparency_draw'style_square = Just (n, str2attr "square")
    toAttrFrTyp n Draw'transparency_draw'style_rectangular = Just (n, str2attr "rectangular")
instance XmlContent Draw'marker where
    fromElem (CElem (Elem "draw:marker" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "draw:marker" (toAttrs as) [])]
instance XmlAttributes Draw'marker where
    fromAttrs as =
	Draw'marker
	  { draw'markerDraw'name = definiteA fromAttrToStr "draw:marker" "draw:name" as
	  , draw'markerSvg'viewBox = definiteA fromAttrToStr "draw:marker" "svg:viewBox" as
	  , draw'markerSvg'd = definiteA fromAttrToStr "draw:marker" "svg:d" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "draw:name" (draw'markerDraw'name v)
	, toAttrFrStr "svg:viewBox" (draw'markerSvg'viewBox v)
	, toAttrFrStr "svg:d" (draw'markerSvg'd v)
	]
instance XmlContent Draw'stroke_dash where
    fromElem (CElem (Elem "draw:stroke-dash" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "draw:stroke-dash" (toAttrs as) [])]
instance XmlAttributes Draw'stroke_dash where
    fromAttrs as =
	Draw'stroke_dash
	  { draw'stroke_dashDraw'name = definiteA fromAttrToStr "draw:stroke-dash" "draw:name" as
	  , draw'stroke_dashDraw'style = possibleA fromAttrToTyp "draw:style" as
	  , draw'stroke_dashDraw'dots1 = possibleA fromAttrToStr "draw:dots1" as
	  , draw'stroke_dashDraw'dots1_length = possibleA fromAttrToStr "draw:dots1-length" as
	  , draw'stroke_dashDraw'dots2 = possibleA fromAttrToStr "draw:dots2" as
	  , draw'stroke_dashDraw'dots2_length = possibleA fromAttrToStr "draw:dots2-length" as
	  , draw'stroke_dashDraw'distance = possibleA fromAttrToStr "draw:distance" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "draw:name" (draw'stroke_dashDraw'name v)
	, maybeToAttr toAttrFrTyp "draw:style" (draw'stroke_dashDraw'style v)
	, maybeToAttr toAttrFrStr "draw:dots1" (draw'stroke_dashDraw'dots1 v)
	, maybeToAttr toAttrFrStr "draw:dots1-length" (draw'stroke_dashDraw'dots1_length v)
	, maybeToAttr toAttrFrStr "draw:dots2" (draw'stroke_dashDraw'dots2 v)
	, maybeToAttr toAttrFrStr "draw:dots2-length" (draw'stroke_dashDraw'dots2_length v)
	, maybeToAttr toAttrFrStr "draw:distance" (draw'stroke_dashDraw'distance v)
	]
instance XmlAttrType Draw'stroke_dash_draw'style where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "rect" = Just Draw'stroke_dash_draw'style_rect
	    translate "round" = Just Draw'stroke_dash_draw'style_round
	    translate _ = Nothing
    toAttrFrTyp n Draw'stroke_dash_draw'style_rect = Just (n, str2attr "rect")
    toAttrFrTyp n Draw'stroke_dash_draw'style_round = Just (n, str2attr "round")
instance XmlContent Presentation'sound where
    fromElem (CElem (Elem "presentation:sound" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "presentation:sound" (toAttrs as) [])]
instance XmlAttributes Presentation'sound where
    fromAttrs as =
	Presentation'sound
	  { presentation'soundXlink'href = definiteA fromAttrToStr "presentation:sound" "xlink:href" as
	  , presentation'soundXlink'type = defaultA fromAttrToTyp Presentation'sound_xlink'type_simple "xlink:type" as
	  , presentation'soundXlink'show = possibleA fromAttrToTyp "xlink:show" as
	  , presentation'soundXlink'actuate = defaultA fromAttrToTyp Presentation'sound_xlink'actuate_onRequest "xlink:actuate" as
	  , presentation'soundPresentation'play_full = possibleA fromAttrToStr "presentation:play-full" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "xlink:href" (presentation'soundXlink'href v)
	, defaultToAttr toAttrFrTyp "xlink:type" (presentation'soundXlink'type v)
	, maybeToAttr toAttrFrTyp "xlink:show" (presentation'soundXlink'show v)
	, defaultToAttr toAttrFrTyp "xlink:actuate" (presentation'soundXlink'actuate v)
	, maybeToAttr toAttrFrStr "presentation:play-full" (presentation'soundPresentation'play_full v)
	]
instance XmlAttrType Presentation'sound_xlink'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "simple" = Just Presentation'sound_xlink'type_simple
	    translate _ = Nothing
    toAttrFrTyp n Presentation'sound_xlink'type_simple = Just (n, str2attr "simple")
instance XmlAttrType Presentation'sound_xlink'show where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "new" = Just Presentation'sound_xlink'show_new
	    translate "replace" = Just Presentation'sound_xlink'show_replace
	    translate _ = Nothing
    toAttrFrTyp n Presentation'sound_xlink'show_new = Just (n, str2attr "new")
    toAttrFrTyp n Presentation'sound_xlink'show_replace = Just (n, str2attr "replace")
instance XmlAttrType Presentation'sound_xlink'actuate where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "onRequest" = Just Presentation'sound_xlink'actuate_onRequest
	    translate _ = Nothing
    toAttrFrTyp n Presentation'sound_xlink'actuate_onRequest = Just (n, str2attr "onRequest")
instance XmlContent Presentation'show_shape where
    fromElem (CElem (Elem "presentation:show-shape" as c0):rest) =
	(\(a,ca)->
	   (Just (Presentation'show_shape (fromAttrs as) a), rest))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Presentation'show_shape as a) =
	[CElem (Elem "presentation:show-shape" (toAttrs as) (maybe [] toElem a))]
instance XmlAttributes Presentation'show_shape_Attrs where
    fromAttrs as =
	Presentation'show_shape_Attrs
	  { presentation'show_shapeDraw'shape_id = definiteA fromAttrToStr "presentation:show-shape" "draw:shape-id" as
	  , presentation'show_shapePresentation'effect = defaultA fromAttrToTyp Presentation'show_shape_presentation'effect_none "presentation:effect" as
	  , presentation'show_shapePresentation'direction = defaultA fromAttrToTyp Presentation'show_shape_presentation'direction_none "presentation:direction" as
	  , presentation'show_shapePresentation'speed = defaultA fromAttrToTyp Presentation'show_shape_presentation'speed_medium "presentation:speed" as
	  , presentation'show_shapePresentation'start_scale = defaultA fromAttrToStr "100%" "presentation:start-scale" as
	  , presentation'show_shapePresentation'path_id = possibleA fromAttrToStr "presentation:path-id" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "draw:shape-id" (presentation'show_shapeDraw'shape_id v)
	, defaultToAttr toAttrFrTyp "presentation:effect" (presentation'show_shapePresentation'effect v)
	, defaultToAttr toAttrFrTyp "presentation:direction" (presentation'show_shapePresentation'direction v)
	, defaultToAttr toAttrFrTyp "presentation:speed" (presentation'show_shapePresentation'speed v)
	, defaultToAttr toAttrFrStr "presentation:start-scale" (presentation'show_shapePresentation'start_scale v)
	, maybeToAttr toAttrFrStr "presentation:path-id" (presentation'show_shapePresentation'path_id v)
	]
instance XmlAttrType Presentation'show_shape_presentation'effect where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Presentation'show_shape_presentation'effect_none
	    translate "fade" = Just Presentation'show_shape_presentation'effect_fade
	    translate "move" = Just Presentation'show_shape_presentation'effect_move
	    translate "stripes" = Just Presentation'show_shape_presentation'effect_stripes
	    translate "open" = Just Presentation'show_shape_presentation'effect_open
	    translate "close" = Just Presentation'show_shape_presentation'effect_close
	    translate "dissolve" = Just Presentation'show_shape_presentation'effect_dissolve
	    translate "wavyline" = Just Presentation'show_shape_presentation'effect_wavyline
	    translate "random" = Just Presentation'show_shape_presentation'effect_random
	    translate "lines" = Just Presentation'show_shape_presentation'effect_lines
	    translate "laser" = Just Presentation'show_shape_presentation'effect_laser
	    translate "appear" = Just Presentation'show_shape_presentation'effect_appear
	    translate "hide" = Just Presentation'show_shape_presentation'effect_hide
	    translate "move-short" = Just Presentation'show_shape_presentation'effect_move_short
	    translate "checkerboard" = Just Presentation'show_shape_presentation'effect_checkerboard
	    translate "rotate" = Just Presentation'show_shape_presentation'effect_rotate
	    translate "stretch" = Just Presentation'show_shape_presentation'effect_stretch
	    translate _ = Nothing
    toAttrFrTyp n Presentation'show_shape_presentation'effect_none = Just (n, str2attr "none")
    toAttrFrTyp n Presentation'show_shape_presentation'effect_fade = Just (n, str2attr "fade")
    toAttrFrTyp n Presentation'show_shape_presentation'effect_move = Just (n, str2attr "move")
    toAttrFrTyp n Presentation'show_shape_presentation'effect_stripes = Just (n, str2attr "stripes")
    toAttrFrTyp n Presentation'show_shape_presentation'effect_open = Just (n, str2attr "open")
    toAttrFrTyp n Presentation'show_shape_presentation'effect_close = Just (n, str2attr "close")
    toAttrFrTyp n Presentation'show_shape_presentation'effect_dissolve = Just (n, str2attr "dissolve")
    toAttrFrTyp n Presentation'show_shape_presentation'effect_wavyline = Just (n, str2attr "wavyline")
    toAttrFrTyp n Presentation'show_shape_presentation'effect_random = Just (n, str2attr "random")
    toAttrFrTyp n Presentation'show_shape_presentation'effect_lines = Just (n, str2attr "lines")
    toAttrFrTyp n Presentation'show_shape_presentation'effect_laser = Just (n, str2attr "laser")
    toAttrFrTyp n Presentation'show_shape_presentation'effect_appear = Just (n, str2attr "appear")
    toAttrFrTyp n Presentation'show_shape_presentation'effect_hide = Just (n, str2attr "hide")
    toAttrFrTyp n Presentation'show_shape_presentation'effect_move_short = Just (n, str2attr "move-short")
    toAttrFrTyp n Presentation'show_shape_presentation'effect_checkerboard = Just (n, str2attr "checkerboard")
    toAttrFrTyp n Presentation'show_shape_presentation'effect_rotate = Just (n, str2attr "rotate")
    toAttrFrTyp n Presentation'show_shape_presentation'effect_stretch = Just (n, str2attr "stretch")
instance XmlAttrType Presentation'show_shape_presentation'direction where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Presentation'show_shape_presentation'direction_none
	    translate "from-left" = Just Presentation'show_shape_presentation'direction_from_left
	    translate "from-top" = Just Presentation'show_shape_presentation'direction_from_top
	    translate "from-right" = Just Presentation'show_shape_presentation'direction_from_right
	    translate "from-bottom" = Just Presentation'show_shape_presentation'direction_from_bottom
	    translate "from-center" = Just Presentation'show_shape_presentation'direction_from_center
	    translate "from-upper-left" = Just Presentation'show_shape_presentation'direction_from_upper_left
	    translate "from-upper-right" = Just Presentation'show_shape_presentation'direction_from_upper_right
	    translate "from-lower-left" = Just Presentation'show_shape_presentation'direction_from_lower_left
	    translate "from-lower-right" = Just Presentation'show_shape_presentation'direction_from_lower_right
	    translate "to-left" = Just Presentation'show_shape_presentation'direction_to_left
	    translate "to-top" = Just Presentation'show_shape_presentation'direction_to_top
	    translate "to-right" = Just Presentation'show_shape_presentation'direction_to_right
	    translate "to-bottom" = Just Presentation'show_shape_presentation'direction_to_bottom
	    translate "to-upper-left" = Just Presentation'show_shape_presentation'direction_to_upper_left
	    translate "to-upper-right" = Just Presentation'show_shape_presentation'direction_to_upper_right
	    translate "to-lower-right" = Just Presentation'show_shape_presentation'direction_to_lower_right
	    translate "to-lower-left" = Just Presentation'show_shape_presentation'direction_to_lower_left
	    translate "path" = Just Presentation'show_shape_presentation'direction_path
	    translate "spiral-inward-left" = Just Presentation'show_shape_presentation'direction_spiral_inward_left
	    translate "spiral-inward-right" = Just Presentation'show_shape_presentation'direction_spiral_inward_right
	    translate "spiral-outward-left" = Just Presentation'show_shape_presentation'direction_spiral_outward_left
	    translate "spiral-outward-right" = Just Presentation'show_shape_presentation'direction_spiral_outward_right
	    translate "vertical" = Just Presentation'show_shape_presentation'direction_vertical
	    translate "horizontal" = Just Presentation'show_shape_presentation'direction_horizontal
	    translate "to-center" = Just Presentation'show_shape_presentation'direction_to_center
	    translate "clockwise" = Just Presentation'show_shape_presentation'direction_clockwise
	    translate "counter-clockwise" = Just Presentation'show_shape_presentation'direction_counter_clockwise
	    translate _ = Nothing
    toAttrFrTyp n Presentation'show_shape_presentation'direction_none = Just (n, str2attr "none")
    toAttrFrTyp n Presentation'show_shape_presentation'direction_from_left = Just (n, str2attr "from-left")
    toAttrFrTyp n Presentation'show_shape_presentation'direction_from_top = Just (n, str2attr "from-top")
    toAttrFrTyp n Presentation'show_shape_presentation'direction_from_right = Just (n, str2attr "from-right")
    toAttrFrTyp n Presentation'show_shape_presentation'direction_from_bottom = Just (n, str2attr "from-bottom")
    toAttrFrTyp n Presentation'show_shape_presentation'direction_from_center = Just (n, str2attr "from-center")
    toAttrFrTyp n Presentation'show_shape_presentation'direction_from_upper_left = Just (n, str2attr "from-upper-left")
    toAttrFrTyp n Presentation'show_shape_presentation'direction_from_upper_right = Just (n, str2attr "from-upper-right")
    toAttrFrTyp n Presentation'show_shape_presentation'direction_from_lower_left = Just (n, str2attr "from-lower-left")
    toAttrFrTyp n Presentation'show_shape_presentation'direction_from_lower_right = Just (n, str2attr "from-lower-right")
    toAttrFrTyp n Presentation'show_shape_presentation'direction_to_left = Just (n, str2attr "to-left")
    toAttrFrTyp n Presentation'show_shape_presentation'direction_to_top = Just (n, str2attr "to-top")
    toAttrFrTyp n Presentation'show_shape_presentation'direction_to_right = Just (n, str2attr "to-right")
    toAttrFrTyp n Presentation'show_shape_presentation'direction_to_bottom = Just (n, str2attr "to-bottom")
    toAttrFrTyp n Presentation'show_shape_presentation'direction_to_upper_left = Just (n, str2attr "to-upper-left")
    toAttrFrTyp n Presentation'show_shape_presentation'direction_to_upper_right = Just (n, str2attr "to-upper-right")
    toAttrFrTyp n Presentation'show_shape_presentation'direction_to_lower_right = Just (n, str2attr "to-lower-right")
    toAttrFrTyp n Presentation'show_shape_presentation'direction_to_lower_left = Just (n, str2attr "to-lower-left")
    toAttrFrTyp n Presentation'show_shape_presentation'direction_path = Just (n, str2attr "path")
    toAttrFrTyp n Presentation'show_shape_presentation'direction_spiral_inward_left = Just (n, str2attr "spiral-inward-left")
    toAttrFrTyp n Presentation'show_shape_presentation'direction_spiral_inward_right = Just (n, str2attr "spiral-inward-right")
    toAttrFrTyp n Presentation'show_shape_presentation'direction_spiral_outward_left = Just (n, str2attr "spiral-outward-left")
    toAttrFrTyp n Presentation'show_shape_presentation'direction_spiral_outward_right = Just (n, str2attr "spiral-outward-right")
    toAttrFrTyp n Presentation'show_shape_presentation'direction_vertical = Just (n, str2attr "vertical")
    toAttrFrTyp n Presentation'show_shape_presentation'direction_horizontal = Just (n, str2attr "horizontal")
    toAttrFrTyp n Presentation'show_shape_presentation'direction_to_center = Just (n, str2attr "to-center")
    toAttrFrTyp n Presentation'show_shape_presentation'direction_clockwise = Just (n, str2attr "clockwise")
    toAttrFrTyp n Presentation'show_shape_presentation'direction_counter_clockwise = Just (n, str2attr "counter-clockwise")
instance XmlAttrType Presentation'show_shape_presentation'speed where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "slow" = Just Presentation'show_shape_presentation'speed_slow
	    translate "medium" = Just Presentation'show_shape_presentation'speed_medium
	    translate "fast" = Just Presentation'show_shape_presentation'speed_fast
	    translate _ = Nothing
    toAttrFrTyp n Presentation'show_shape_presentation'speed_slow = Just (n, str2attr "slow")
    toAttrFrTyp n Presentation'show_shape_presentation'speed_medium = Just (n, str2attr "medium")
    toAttrFrTyp n Presentation'show_shape_presentation'speed_fast = Just (n, str2attr "fast")
instance XmlContent Presentation'show_text where
    fromElem (CElem (Elem "presentation:show-text" as c0):rest) =
	(\(a,ca)->
	   (Just (Presentation'show_text (fromAttrs as) a), rest))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Presentation'show_text as a) =
	[CElem (Elem "presentation:show-text" (toAttrs as) (maybe [] toElem a))]
instance XmlAttributes Presentation'show_text_Attrs where
    fromAttrs as =
	Presentation'show_text_Attrs
	  { presentation'show_textDraw'shape_id = definiteA fromAttrToStr "presentation:show-text" "draw:shape-id" as
	  , presentation'show_textPresentation'effect = defaultA fromAttrToTyp Presentation'show_text_presentation'effect_none "presentation:effect" as
	  , presentation'show_textPresentation'direction = defaultA fromAttrToTyp Presentation'show_text_presentation'direction_none "presentation:direction" as
	  , presentation'show_textPresentation'speed = defaultA fromAttrToTyp Presentation'show_text_presentation'speed_medium "presentation:speed" as
	  , presentation'show_textPresentation'start_scale = defaultA fromAttrToStr "100%" "presentation:start-scale" as
	  , presentation'show_textPresentation'path_id = possibleA fromAttrToStr "presentation:path-id" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "draw:shape-id" (presentation'show_textDraw'shape_id v)
	, defaultToAttr toAttrFrTyp "presentation:effect" (presentation'show_textPresentation'effect v)
	, defaultToAttr toAttrFrTyp "presentation:direction" (presentation'show_textPresentation'direction v)
	, defaultToAttr toAttrFrTyp "presentation:speed" (presentation'show_textPresentation'speed v)
	, defaultToAttr toAttrFrStr "presentation:start-scale" (presentation'show_textPresentation'start_scale v)
	, maybeToAttr toAttrFrStr "presentation:path-id" (presentation'show_textPresentation'path_id v)
	]
instance XmlAttrType Presentation'show_text_presentation'effect where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Presentation'show_text_presentation'effect_none
	    translate "fade" = Just Presentation'show_text_presentation'effect_fade
	    translate "move" = Just Presentation'show_text_presentation'effect_move
	    translate "stripes" = Just Presentation'show_text_presentation'effect_stripes
	    translate "open" = Just Presentation'show_text_presentation'effect_open
	    translate "close" = Just Presentation'show_text_presentation'effect_close
	    translate "dissolve" = Just Presentation'show_text_presentation'effect_dissolve
	    translate "wavyline" = Just Presentation'show_text_presentation'effect_wavyline
	    translate "random" = Just Presentation'show_text_presentation'effect_random
	    translate "lines" = Just Presentation'show_text_presentation'effect_lines
	    translate "laser" = Just Presentation'show_text_presentation'effect_laser
	    translate "appear" = Just Presentation'show_text_presentation'effect_appear
	    translate "hide" = Just Presentation'show_text_presentation'effect_hide
	    translate "move-short" = Just Presentation'show_text_presentation'effect_move_short
	    translate "checkerboard" = Just Presentation'show_text_presentation'effect_checkerboard
	    translate "rotate" = Just Presentation'show_text_presentation'effect_rotate
	    translate "stretch" = Just Presentation'show_text_presentation'effect_stretch
	    translate _ = Nothing
    toAttrFrTyp n Presentation'show_text_presentation'effect_none = Just (n, str2attr "none")
    toAttrFrTyp n Presentation'show_text_presentation'effect_fade = Just (n, str2attr "fade")
    toAttrFrTyp n Presentation'show_text_presentation'effect_move = Just (n, str2attr "move")
    toAttrFrTyp n Presentation'show_text_presentation'effect_stripes = Just (n, str2attr "stripes")
    toAttrFrTyp n Presentation'show_text_presentation'effect_open = Just (n, str2attr "open")
    toAttrFrTyp n Presentation'show_text_presentation'effect_close = Just (n, str2attr "close")
    toAttrFrTyp n Presentation'show_text_presentation'effect_dissolve = Just (n, str2attr "dissolve")
    toAttrFrTyp n Presentation'show_text_presentation'effect_wavyline = Just (n, str2attr "wavyline")
    toAttrFrTyp n Presentation'show_text_presentation'effect_random = Just (n, str2attr "random")
    toAttrFrTyp n Presentation'show_text_presentation'effect_lines = Just (n, str2attr "lines")
    toAttrFrTyp n Presentation'show_text_presentation'effect_laser = Just (n, str2attr "laser")
    toAttrFrTyp n Presentation'show_text_presentation'effect_appear = Just (n, str2attr "appear")
    toAttrFrTyp n Presentation'show_text_presentation'effect_hide = Just (n, str2attr "hide")
    toAttrFrTyp n Presentation'show_text_presentation'effect_move_short = Just (n, str2attr "move-short")
    toAttrFrTyp n Presentation'show_text_presentation'effect_checkerboard = Just (n, str2attr "checkerboard")
    toAttrFrTyp n Presentation'show_text_presentation'effect_rotate = Just (n, str2attr "rotate")
    toAttrFrTyp n Presentation'show_text_presentation'effect_stretch = Just (n, str2attr "stretch")
instance XmlAttrType Presentation'show_text_presentation'direction where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Presentation'show_text_presentation'direction_none
	    translate "from-left" = Just Presentation'show_text_presentation'direction_from_left
	    translate "from-top" = Just Presentation'show_text_presentation'direction_from_top
	    translate "from-right" = Just Presentation'show_text_presentation'direction_from_right
	    translate "from-bottom" = Just Presentation'show_text_presentation'direction_from_bottom
	    translate "from-center" = Just Presentation'show_text_presentation'direction_from_center
	    translate "from-upper-left" = Just Presentation'show_text_presentation'direction_from_upper_left
	    translate "from-upper-right" = Just Presentation'show_text_presentation'direction_from_upper_right
	    translate "from-lower-left" = Just Presentation'show_text_presentation'direction_from_lower_left
	    translate "from-lower-right" = Just Presentation'show_text_presentation'direction_from_lower_right
	    translate "to-left" = Just Presentation'show_text_presentation'direction_to_left
	    translate "to-top" = Just Presentation'show_text_presentation'direction_to_top
	    translate "to-right" = Just Presentation'show_text_presentation'direction_to_right
	    translate "to-bottom" = Just Presentation'show_text_presentation'direction_to_bottom
	    translate "to-upper-left" = Just Presentation'show_text_presentation'direction_to_upper_left
	    translate "to-upper-right" = Just Presentation'show_text_presentation'direction_to_upper_right
	    translate "to-lower-right" = Just Presentation'show_text_presentation'direction_to_lower_right
	    translate "to-lower-left" = Just Presentation'show_text_presentation'direction_to_lower_left
	    translate "path" = Just Presentation'show_text_presentation'direction_path
	    translate "spiral-inward-left" = Just Presentation'show_text_presentation'direction_spiral_inward_left
	    translate "spiral-inward-right" = Just Presentation'show_text_presentation'direction_spiral_inward_right
	    translate "spiral-outward-left" = Just Presentation'show_text_presentation'direction_spiral_outward_left
	    translate "spiral-outward-right" = Just Presentation'show_text_presentation'direction_spiral_outward_right
	    translate "vertical" = Just Presentation'show_text_presentation'direction_vertical
	    translate "horizontal" = Just Presentation'show_text_presentation'direction_horizontal
	    translate "to-center" = Just Presentation'show_text_presentation'direction_to_center
	    translate "clockwise" = Just Presentation'show_text_presentation'direction_clockwise
	    translate "counter-clockwise" = Just Presentation'show_text_presentation'direction_counter_clockwise
	    translate _ = Nothing
    toAttrFrTyp n Presentation'show_text_presentation'direction_none = Just (n, str2attr "none")
    toAttrFrTyp n Presentation'show_text_presentation'direction_from_left = Just (n, str2attr "from-left")
    toAttrFrTyp n Presentation'show_text_presentation'direction_from_top = Just (n, str2attr "from-top")
    toAttrFrTyp n Presentation'show_text_presentation'direction_from_right = Just (n, str2attr "from-right")
    toAttrFrTyp n Presentation'show_text_presentation'direction_from_bottom = Just (n, str2attr "from-bottom")
    toAttrFrTyp n Presentation'show_text_presentation'direction_from_center = Just (n, str2attr "from-center")
    toAttrFrTyp n Presentation'show_text_presentation'direction_from_upper_left = Just (n, str2attr "from-upper-left")
    toAttrFrTyp n Presentation'show_text_presentation'direction_from_upper_right = Just (n, str2attr "from-upper-right")
    toAttrFrTyp n Presentation'show_text_presentation'direction_from_lower_left = Just (n, str2attr "from-lower-left")
    toAttrFrTyp n Presentation'show_text_presentation'direction_from_lower_right = Just (n, str2attr "from-lower-right")
    toAttrFrTyp n Presentation'show_text_presentation'direction_to_left = Just (n, str2attr "to-left")
    toAttrFrTyp n Presentation'show_text_presentation'direction_to_top = Just (n, str2attr "to-top")
    toAttrFrTyp n Presentation'show_text_presentation'direction_to_right = Just (n, str2attr "to-right")
    toAttrFrTyp n Presentation'show_text_presentation'direction_to_bottom = Just (n, str2attr "to-bottom")
    toAttrFrTyp n Presentation'show_text_presentation'direction_to_upper_left = Just (n, str2attr "to-upper-left")
    toAttrFrTyp n Presentation'show_text_presentation'direction_to_upper_right = Just (n, str2attr "to-upper-right")
    toAttrFrTyp n Presentation'show_text_presentation'direction_to_lower_right = Just (n, str2attr "to-lower-right")
    toAttrFrTyp n Presentation'show_text_presentation'direction_to_lower_left = Just (n, str2attr "to-lower-left")
    toAttrFrTyp n Presentation'show_text_presentation'direction_path = Just (n, str2attr "path")
    toAttrFrTyp n Presentation'show_text_presentation'direction_spiral_inward_left = Just (n, str2attr "spiral-inward-left")
    toAttrFrTyp n Presentation'show_text_presentation'direction_spiral_inward_right = Just (n, str2attr "spiral-inward-right")
    toAttrFrTyp n Presentation'show_text_presentation'direction_spiral_outward_left = Just (n, str2attr "spiral-outward-left")
    toAttrFrTyp n Presentation'show_text_presentation'direction_spiral_outward_right = Just (n, str2attr "spiral-outward-right")
    toAttrFrTyp n Presentation'show_text_presentation'direction_vertical = Just (n, str2attr "vertical")
    toAttrFrTyp n Presentation'show_text_presentation'direction_horizontal = Just (n, str2attr "horizontal")
    toAttrFrTyp n Presentation'show_text_presentation'direction_to_center = Just (n, str2attr "to-center")
    toAttrFrTyp n Presentation'show_text_presentation'direction_clockwise = Just (n, str2attr "clockwise")
    toAttrFrTyp n Presentation'show_text_presentation'direction_counter_clockwise = Just (n, str2attr "counter-clockwise")
instance XmlAttrType Presentation'show_text_presentation'speed where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "slow" = Just Presentation'show_text_presentation'speed_slow
	    translate "medium" = Just Presentation'show_text_presentation'speed_medium
	    translate "fast" = Just Presentation'show_text_presentation'speed_fast
	    translate _ = Nothing
    toAttrFrTyp n Presentation'show_text_presentation'speed_slow = Just (n, str2attr "slow")
    toAttrFrTyp n Presentation'show_text_presentation'speed_medium = Just (n, str2attr "medium")
    toAttrFrTyp n Presentation'show_text_presentation'speed_fast = Just (n, str2attr "fast")
instance XmlContent Presentation'hide_shape where
    fromElem (CElem (Elem "presentation:hide-shape" as c0):rest) =
	(\(a,ca)->
	   (Just (Presentation'hide_shape (fromAttrs as) a), rest))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Presentation'hide_shape as a) =
	[CElem (Elem "presentation:hide-shape" (toAttrs as) (maybe [] toElem a))]
instance XmlAttributes Presentation'hide_shape_Attrs where
    fromAttrs as =
	Presentation'hide_shape_Attrs
	  { presentation'hide_shapeDraw'shape_id = definiteA fromAttrToStr "presentation:hide-shape" "draw:shape-id" as
	  , presentation'hide_shapePresentation'effect = defaultA fromAttrToTyp Presentation'hide_shape_presentation'effect_none "presentation:effect" as
	  , presentation'hide_shapePresentation'direction = defaultA fromAttrToTyp Presentation'hide_shape_presentation'direction_none "presentation:direction" as
	  , presentation'hide_shapePresentation'speed = defaultA fromAttrToTyp Presentation'hide_shape_presentation'speed_medium "presentation:speed" as
	  , presentation'hide_shapePresentation'start_scale = defaultA fromAttrToStr "100%" "presentation:start-scale" as
	  , presentation'hide_shapePresentation'path_id = possibleA fromAttrToStr "presentation:path-id" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "draw:shape-id" (presentation'hide_shapeDraw'shape_id v)
	, defaultToAttr toAttrFrTyp "presentation:effect" (presentation'hide_shapePresentation'effect v)
	, defaultToAttr toAttrFrTyp "presentation:direction" (presentation'hide_shapePresentation'direction v)
	, defaultToAttr toAttrFrTyp "presentation:speed" (presentation'hide_shapePresentation'speed v)
	, defaultToAttr toAttrFrStr "presentation:start-scale" (presentation'hide_shapePresentation'start_scale v)
	, maybeToAttr toAttrFrStr "presentation:path-id" (presentation'hide_shapePresentation'path_id v)
	]
instance XmlAttrType Presentation'hide_shape_presentation'effect where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Presentation'hide_shape_presentation'effect_none
	    translate "fade" = Just Presentation'hide_shape_presentation'effect_fade
	    translate "move" = Just Presentation'hide_shape_presentation'effect_move
	    translate "stripes" = Just Presentation'hide_shape_presentation'effect_stripes
	    translate "open" = Just Presentation'hide_shape_presentation'effect_open
	    translate "close" = Just Presentation'hide_shape_presentation'effect_close
	    translate "dissolve" = Just Presentation'hide_shape_presentation'effect_dissolve
	    translate "wavyline" = Just Presentation'hide_shape_presentation'effect_wavyline
	    translate "random" = Just Presentation'hide_shape_presentation'effect_random
	    translate "lines" = Just Presentation'hide_shape_presentation'effect_lines
	    translate "laser" = Just Presentation'hide_shape_presentation'effect_laser
	    translate "appear" = Just Presentation'hide_shape_presentation'effect_appear
	    translate "hide" = Just Presentation'hide_shape_presentation'effect_hide
	    translate "move-short" = Just Presentation'hide_shape_presentation'effect_move_short
	    translate "checkerboard" = Just Presentation'hide_shape_presentation'effect_checkerboard
	    translate "rotate" = Just Presentation'hide_shape_presentation'effect_rotate
	    translate "stretch" = Just Presentation'hide_shape_presentation'effect_stretch
	    translate _ = Nothing
    toAttrFrTyp n Presentation'hide_shape_presentation'effect_none = Just (n, str2attr "none")
    toAttrFrTyp n Presentation'hide_shape_presentation'effect_fade = Just (n, str2attr "fade")
    toAttrFrTyp n Presentation'hide_shape_presentation'effect_move = Just (n, str2attr "move")
    toAttrFrTyp n Presentation'hide_shape_presentation'effect_stripes = Just (n, str2attr "stripes")
    toAttrFrTyp n Presentation'hide_shape_presentation'effect_open = Just (n, str2attr "open")
    toAttrFrTyp n Presentation'hide_shape_presentation'effect_close = Just (n, str2attr "close")
    toAttrFrTyp n Presentation'hide_shape_presentation'effect_dissolve = Just (n, str2attr "dissolve")
    toAttrFrTyp n Presentation'hide_shape_presentation'effect_wavyline = Just (n, str2attr "wavyline")
    toAttrFrTyp n Presentation'hide_shape_presentation'effect_random = Just (n, str2attr "random")
    toAttrFrTyp n Presentation'hide_shape_presentation'effect_lines = Just (n, str2attr "lines")
    toAttrFrTyp n Presentation'hide_shape_presentation'effect_laser = Just (n, str2attr "laser")
    toAttrFrTyp n Presentation'hide_shape_presentation'effect_appear = Just (n, str2attr "appear")
    toAttrFrTyp n Presentation'hide_shape_presentation'effect_hide = Just (n, str2attr "hide")
    toAttrFrTyp n Presentation'hide_shape_presentation'effect_move_short = Just (n, str2attr "move-short")
    toAttrFrTyp n Presentation'hide_shape_presentation'effect_checkerboard = Just (n, str2attr "checkerboard")
    toAttrFrTyp n Presentation'hide_shape_presentation'effect_rotate = Just (n, str2attr "rotate")
    toAttrFrTyp n Presentation'hide_shape_presentation'effect_stretch = Just (n, str2attr "stretch")
instance XmlAttrType Presentation'hide_shape_presentation'direction where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Presentation'hide_shape_presentation'direction_none
	    translate "from-left" = Just Presentation'hide_shape_presentation'direction_from_left
	    translate "from-top" = Just Presentation'hide_shape_presentation'direction_from_top
	    translate "from-right" = Just Presentation'hide_shape_presentation'direction_from_right
	    translate "from-bottom" = Just Presentation'hide_shape_presentation'direction_from_bottom
	    translate "from-center" = Just Presentation'hide_shape_presentation'direction_from_center
	    translate "from-upper-left" = Just Presentation'hide_shape_presentation'direction_from_upper_left
	    translate "from-upper-right" = Just Presentation'hide_shape_presentation'direction_from_upper_right
	    translate "from-lower-left" = Just Presentation'hide_shape_presentation'direction_from_lower_left
	    translate "from-lower-right" = Just Presentation'hide_shape_presentation'direction_from_lower_right
	    translate "to-left" = Just Presentation'hide_shape_presentation'direction_to_left
	    translate "to-top" = Just Presentation'hide_shape_presentation'direction_to_top
	    translate "to-right" = Just Presentation'hide_shape_presentation'direction_to_right
	    translate "to-bottom" = Just Presentation'hide_shape_presentation'direction_to_bottom
	    translate "to-upper-left" = Just Presentation'hide_shape_presentation'direction_to_upper_left
	    translate "to-upper-right" = Just Presentation'hide_shape_presentation'direction_to_upper_right
	    translate "to-lower-right" = Just Presentation'hide_shape_presentation'direction_to_lower_right
	    translate "to-lower-left" = Just Presentation'hide_shape_presentation'direction_to_lower_left
	    translate "path" = Just Presentation'hide_shape_presentation'direction_path
	    translate "spiral-inward-left" = Just Presentation'hide_shape_presentation'direction_spiral_inward_left
	    translate "spiral-inward-right" = Just Presentation'hide_shape_presentation'direction_spiral_inward_right
	    translate "spiral-outward-left" = Just Presentation'hide_shape_presentation'direction_spiral_outward_left
	    translate "spiral-outward-right" = Just Presentation'hide_shape_presentation'direction_spiral_outward_right
	    translate "vertical" = Just Presentation'hide_shape_presentation'direction_vertical
	    translate "horizontal" = Just Presentation'hide_shape_presentation'direction_horizontal
	    translate "to-center" = Just Presentation'hide_shape_presentation'direction_to_center
	    translate "clockwise" = Just Presentation'hide_shape_presentation'direction_clockwise
	    translate "counter-clockwise" = Just Presentation'hide_shape_presentation'direction_counter_clockwise
	    translate _ = Nothing
    toAttrFrTyp n Presentation'hide_shape_presentation'direction_none = Just (n, str2attr "none")
    toAttrFrTyp n Presentation'hide_shape_presentation'direction_from_left = Just (n, str2attr "from-left")
    toAttrFrTyp n Presentation'hide_shape_presentation'direction_from_top = Just (n, str2attr "from-top")
    toAttrFrTyp n Presentation'hide_shape_presentation'direction_from_right = Just (n, str2attr "from-right")
    toAttrFrTyp n Presentation'hide_shape_presentation'direction_from_bottom = Just (n, str2attr "from-bottom")
    toAttrFrTyp n Presentation'hide_shape_presentation'direction_from_center = Just (n, str2attr "from-center")
    toAttrFrTyp n Presentation'hide_shape_presentation'direction_from_upper_left = Just (n, str2attr "from-upper-left")
    toAttrFrTyp n Presentation'hide_shape_presentation'direction_from_upper_right = Just (n, str2attr "from-upper-right")
    toAttrFrTyp n Presentation'hide_shape_presentation'direction_from_lower_left = Just (n, str2attr "from-lower-left")
    toAttrFrTyp n Presentation'hide_shape_presentation'direction_from_lower_right = Just (n, str2attr "from-lower-right")
    toAttrFrTyp n Presentation'hide_shape_presentation'direction_to_left = Just (n, str2attr "to-left")
    toAttrFrTyp n Presentation'hide_shape_presentation'direction_to_top = Just (n, str2attr "to-top")
    toAttrFrTyp n Presentation'hide_shape_presentation'direction_to_right = Just (n, str2attr "to-right")
    toAttrFrTyp n Presentation'hide_shape_presentation'direction_to_bottom = Just (n, str2attr "to-bottom")
    toAttrFrTyp n Presentation'hide_shape_presentation'direction_to_upper_left = Just (n, str2attr "to-upper-left")
    toAttrFrTyp n Presentation'hide_shape_presentation'direction_to_upper_right = Just (n, str2attr "to-upper-right")
    toAttrFrTyp n Presentation'hide_shape_presentation'direction_to_lower_right = Just (n, str2attr "to-lower-right")
    toAttrFrTyp n Presentation'hide_shape_presentation'direction_to_lower_left = Just (n, str2attr "to-lower-left")
    toAttrFrTyp n Presentation'hide_shape_presentation'direction_path = Just (n, str2attr "path")
    toAttrFrTyp n Presentation'hide_shape_presentation'direction_spiral_inward_left = Just (n, str2attr "spiral-inward-left")
    toAttrFrTyp n Presentation'hide_shape_presentation'direction_spiral_inward_right = Just (n, str2attr "spiral-inward-right")
    toAttrFrTyp n Presentation'hide_shape_presentation'direction_spiral_outward_left = Just (n, str2attr "spiral-outward-left")
    toAttrFrTyp n Presentation'hide_shape_presentation'direction_spiral_outward_right = Just (n, str2attr "spiral-outward-right")
    toAttrFrTyp n Presentation'hide_shape_presentation'direction_vertical = Just (n, str2attr "vertical")
    toAttrFrTyp n Presentation'hide_shape_presentation'direction_horizontal = Just (n, str2attr "horizontal")
    toAttrFrTyp n Presentation'hide_shape_presentation'direction_to_center = Just (n, str2attr "to-center")
    toAttrFrTyp n Presentation'hide_shape_presentation'direction_clockwise = Just (n, str2attr "clockwise")
    toAttrFrTyp n Presentation'hide_shape_presentation'direction_counter_clockwise = Just (n, str2attr "counter-clockwise")
instance XmlAttrType Presentation'hide_shape_presentation'speed where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "slow" = Just Presentation'hide_shape_presentation'speed_slow
	    translate "medium" = Just Presentation'hide_shape_presentation'speed_medium
	    translate "fast" = Just Presentation'hide_shape_presentation'speed_fast
	    translate _ = Nothing
    toAttrFrTyp n Presentation'hide_shape_presentation'speed_slow = Just (n, str2attr "slow")
    toAttrFrTyp n Presentation'hide_shape_presentation'speed_medium = Just (n, str2attr "medium")
    toAttrFrTyp n Presentation'hide_shape_presentation'speed_fast = Just (n, str2attr "fast")
instance XmlContent Presentation'hide_text where
    fromElem (CElem (Elem "presentation:hide-text" as c0):rest) =
	(\(a,ca)->
	   (Just (Presentation'hide_text (fromAttrs as) a), rest))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Presentation'hide_text as a) =
	[CElem (Elem "presentation:hide-text" (toAttrs as) (maybe [] toElem a))]
instance XmlAttributes Presentation'hide_text_Attrs where
    fromAttrs as =
	Presentation'hide_text_Attrs
	  { presentation'hide_textDraw'shape_id = definiteA fromAttrToStr "presentation:hide-text" "draw:shape-id" as
	  , presentation'hide_textPresentation'effect = defaultA fromAttrToTyp Presentation'hide_text_presentation'effect_none "presentation:effect" as
	  , presentation'hide_textPresentation'direction = defaultA fromAttrToTyp Presentation'hide_text_presentation'direction_none "presentation:direction" as
	  , presentation'hide_textPresentation'speed = defaultA fromAttrToTyp Presentation'hide_text_presentation'speed_medium "presentation:speed" as
	  , presentation'hide_textPresentation'start_scale = defaultA fromAttrToStr "100%" "presentation:start-scale" as
	  , presentation'hide_textPresentation'path_id = possibleA fromAttrToStr "presentation:path-id" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "draw:shape-id" (presentation'hide_textDraw'shape_id v)
	, defaultToAttr toAttrFrTyp "presentation:effect" (presentation'hide_textPresentation'effect v)
	, defaultToAttr toAttrFrTyp "presentation:direction" (presentation'hide_textPresentation'direction v)
	, defaultToAttr toAttrFrTyp "presentation:speed" (presentation'hide_textPresentation'speed v)
	, defaultToAttr toAttrFrStr "presentation:start-scale" (presentation'hide_textPresentation'start_scale v)
	, maybeToAttr toAttrFrStr "presentation:path-id" (presentation'hide_textPresentation'path_id v)
	]
instance XmlAttrType Presentation'hide_text_presentation'effect where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Presentation'hide_text_presentation'effect_none
	    translate "fade" = Just Presentation'hide_text_presentation'effect_fade
	    translate "move" = Just Presentation'hide_text_presentation'effect_move
	    translate "stripes" = Just Presentation'hide_text_presentation'effect_stripes
	    translate "open" = Just Presentation'hide_text_presentation'effect_open
	    translate "close" = Just Presentation'hide_text_presentation'effect_close
	    translate "dissolve" = Just Presentation'hide_text_presentation'effect_dissolve
	    translate "wavyline" = Just Presentation'hide_text_presentation'effect_wavyline
	    translate "random" = Just Presentation'hide_text_presentation'effect_random
	    translate "lines" = Just Presentation'hide_text_presentation'effect_lines
	    translate "laser" = Just Presentation'hide_text_presentation'effect_laser
	    translate "appear" = Just Presentation'hide_text_presentation'effect_appear
	    translate "hide" = Just Presentation'hide_text_presentation'effect_hide
	    translate "move-short" = Just Presentation'hide_text_presentation'effect_move_short
	    translate "checkerboard" = Just Presentation'hide_text_presentation'effect_checkerboard
	    translate "rotate" = Just Presentation'hide_text_presentation'effect_rotate
	    translate "stretch" = Just Presentation'hide_text_presentation'effect_stretch
	    translate _ = Nothing
    toAttrFrTyp n Presentation'hide_text_presentation'effect_none = Just (n, str2attr "none")
    toAttrFrTyp n Presentation'hide_text_presentation'effect_fade = Just (n, str2attr "fade")
    toAttrFrTyp n Presentation'hide_text_presentation'effect_move = Just (n, str2attr "move")
    toAttrFrTyp n Presentation'hide_text_presentation'effect_stripes = Just (n, str2attr "stripes")
    toAttrFrTyp n Presentation'hide_text_presentation'effect_open = Just (n, str2attr "open")
    toAttrFrTyp n Presentation'hide_text_presentation'effect_close = Just (n, str2attr "close")
    toAttrFrTyp n Presentation'hide_text_presentation'effect_dissolve = Just (n, str2attr "dissolve")
    toAttrFrTyp n Presentation'hide_text_presentation'effect_wavyline = Just (n, str2attr "wavyline")
    toAttrFrTyp n Presentation'hide_text_presentation'effect_random = Just (n, str2attr "random")
    toAttrFrTyp n Presentation'hide_text_presentation'effect_lines = Just (n, str2attr "lines")
    toAttrFrTyp n Presentation'hide_text_presentation'effect_laser = Just (n, str2attr "laser")
    toAttrFrTyp n Presentation'hide_text_presentation'effect_appear = Just (n, str2attr "appear")
    toAttrFrTyp n Presentation'hide_text_presentation'effect_hide = Just (n, str2attr "hide")
    toAttrFrTyp n Presentation'hide_text_presentation'effect_move_short = Just (n, str2attr "move-short")
    toAttrFrTyp n Presentation'hide_text_presentation'effect_checkerboard = Just (n, str2attr "checkerboard")
    toAttrFrTyp n Presentation'hide_text_presentation'effect_rotate = Just (n, str2attr "rotate")
    toAttrFrTyp n Presentation'hide_text_presentation'effect_stretch = Just (n, str2attr "stretch")
instance XmlAttrType Presentation'hide_text_presentation'direction where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Presentation'hide_text_presentation'direction_none
	    translate "from-left" = Just Presentation'hide_text_presentation'direction_from_left
	    translate "from-top" = Just Presentation'hide_text_presentation'direction_from_top
	    translate "from-right" = Just Presentation'hide_text_presentation'direction_from_right
	    translate "from-bottom" = Just Presentation'hide_text_presentation'direction_from_bottom
	    translate "from-center" = Just Presentation'hide_text_presentation'direction_from_center
	    translate "from-upper-left" = Just Presentation'hide_text_presentation'direction_from_upper_left
	    translate "from-upper-right" = Just Presentation'hide_text_presentation'direction_from_upper_right
	    translate "from-lower-left" = Just Presentation'hide_text_presentation'direction_from_lower_left
	    translate "from-lower-right" = Just Presentation'hide_text_presentation'direction_from_lower_right
	    translate "to-left" = Just Presentation'hide_text_presentation'direction_to_left
	    translate "to-top" = Just Presentation'hide_text_presentation'direction_to_top
	    translate "to-right" = Just Presentation'hide_text_presentation'direction_to_right
	    translate "to-bottom" = Just Presentation'hide_text_presentation'direction_to_bottom
	    translate "to-upper-left" = Just Presentation'hide_text_presentation'direction_to_upper_left
	    translate "to-upper-right" = Just Presentation'hide_text_presentation'direction_to_upper_right
	    translate "to-lower-right" = Just Presentation'hide_text_presentation'direction_to_lower_right
	    translate "to-lower-left" = Just Presentation'hide_text_presentation'direction_to_lower_left
	    translate "path" = Just Presentation'hide_text_presentation'direction_path
	    translate "spiral-inward-left" = Just Presentation'hide_text_presentation'direction_spiral_inward_left
	    translate "spiral-inward-right" = Just Presentation'hide_text_presentation'direction_spiral_inward_right
	    translate "spiral-outward-left" = Just Presentation'hide_text_presentation'direction_spiral_outward_left
	    translate "spiral-outward-right" = Just Presentation'hide_text_presentation'direction_spiral_outward_right
	    translate "vertical" = Just Presentation'hide_text_presentation'direction_vertical
	    translate "horizontal" = Just Presentation'hide_text_presentation'direction_horizontal
	    translate "to-center" = Just Presentation'hide_text_presentation'direction_to_center
	    translate "clockwise" = Just Presentation'hide_text_presentation'direction_clockwise
	    translate "counter-clockwise" = Just Presentation'hide_text_presentation'direction_counter_clockwise
	    translate _ = Nothing
    toAttrFrTyp n Presentation'hide_text_presentation'direction_none = Just (n, str2attr "none")
    toAttrFrTyp n Presentation'hide_text_presentation'direction_from_left = Just (n, str2attr "from-left")
    toAttrFrTyp n Presentation'hide_text_presentation'direction_from_top = Just (n, str2attr "from-top")
    toAttrFrTyp n Presentation'hide_text_presentation'direction_from_right = Just (n, str2attr "from-right")
    toAttrFrTyp n Presentation'hide_text_presentation'direction_from_bottom = Just (n, str2attr "from-bottom")
    toAttrFrTyp n Presentation'hide_text_presentation'direction_from_center = Just (n, str2attr "from-center")
    toAttrFrTyp n Presentation'hide_text_presentation'direction_from_upper_left = Just (n, str2attr "from-upper-left")
    toAttrFrTyp n Presentation'hide_text_presentation'direction_from_upper_right = Just (n, str2attr "from-upper-right")
    toAttrFrTyp n Presentation'hide_text_presentation'direction_from_lower_left = Just (n, str2attr "from-lower-left")
    toAttrFrTyp n Presentation'hide_text_presentation'direction_from_lower_right = Just (n, str2attr "from-lower-right")
    toAttrFrTyp n Presentation'hide_text_presentation'direction_to_left = Just (n, str2attr "to-left")
    toAttrFrTyp n Presentation'hide_text_presentation'direction_to_top = Just (n, str2attr "to-top")
    toAttrFrTyp n Presentation'hide_text_presentation'direction_to_right = Just (n, str2attr "to-right")
    toAttrFrTyp n Presentation'hide_text_presentation'direction_to_bottom = Just (n, str2attr "to-bottom")
    toAttrFrTyp n Presentation'hide_text_presentation'direction_to_upper_left = Just (n, str2attr "to-upper-left")
    toAttrFrTyp n Presentation'hide_text_presentation'direction_to_upper_right = Just (n, str2attr "to-upper-right")
    toAttrFrTyp n Presentation'hide_text_presentation'direction_to_lower_right = Just (n, str2attr "to-lower-right")
    toAttrFrTyp n Presentation'hide_text_presentation'direction_to_lower_left = Just (n, str2attr "to-lower-left")
    toAttrFrTyp n Presentation'hide_text_presentation'direction_path = Just (n, str2attr "path")
    toAttrFrTyp n Presentation'hide_text_presentation'direction_spiral_inward_left = Just (n, str2attr "spiral-inward-left")
    toAttrFrTyp n Presentation'hide_text_presentation'direction_spiral_inward_right = Just (n, str2attr "spiral-inward-right")
    toAttrFrTyp n Presentation'hide_text_presentation'direction_spiral_outward_left = Just (n, str2attr "spiral-outward-left")
    toAttrFrTyp n Presentation'hide_text_presentation'direction_spiral_outward_right = Just (n, str2attr "spiral-outward-right")
    toAttrFrTyp n Presentation'hide_text_presentation'direction_vertical = Just (n, str2attr "vertical")
    toAttrFrTyp n Presentation'hide_text_presentation'direction_horizontal = Just (n, str2attr "horizontal")
    toAttrFrTyp n Presentation'hide_text_presentation'direction_to_center = Just (n, str2attr "to-center")
    toAttrFrTyp n Presentation'hide_text_presentation'direction_clockwise = Just (n, str2attr "clockwise")
    toAttrFrTyp n Presentation'hide_text_presentation'direction_counter_clockwise = Just (n, str2attr "counter-clockwise")
instance XmlAttrType Presentation'hide_text_presentation'speed where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "slow" = Just Presentation'hide_text_presentation'speed_slow
	    translate "medium" = Just Presentation'hide_text_presentation'speed_medium
	    translate "fast" = Just Presentation'hide_text_presentation'speed_fast
	    translate _ = Nothing
    toAttrFrTyp n Presentation'hide_text_presentation'speed_slow = Just (n, str2attr "slow")
    toAttrFrTyp n Presentation'hide_text_presentation'speed_medium = Just (n, str2attr "medium")
    toAttrFrTyp n Presentation'hide_text_presentation'speed_fast = Just (n, str2attr "fast")
instance XmlContent Presentation'dim where
    fromElem (CElem (Elem "presentation:dim" as c0):rest) =
	(\(a,ca)->
	   (Just (Presentation'dim (fromAttrs as) a), rest))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Presentation'dim as a) =
	[CElem (Elem "presentation:dim" (toAttrs as) (maybe [] toElem a))]
instance XmlAttributes Presentation'dim_Attrs where
    fromAttrs as =
	Presentation'dim_Attrs
	  { presentation'dimDraw'shape_id = definiteA fromAttrToStr "presentation:dim" "draw:shape-id" as
	  , presentation'dimDraw'color = definiteA fromAttrToStr "presentation:dim" "draw:color" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "draw:shape-id" (presentation'dimDraw'shape_id v)
	, toAttrFrStr "draw:color" (presentation'dimDraw'color v)
	]
instance XmlContent Presentation'play where
    fromElem (CElem (Elem "presentation:play" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "presentation:play" (toAttrs as) [])]
instance XmlAttributes Presentation'play where
    fromAttrs as =
	Presentation'play
	  { presentation'playDraw'shape_id = definiteA fromAttrToStr "presentation:play" "draw:shape-id" as
	  , presentation'playPresentation'speed = defaultA fromAttrToTyp Presentation'play_presentation'speed_medium "presentation:speed" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "draw:shape-id" (presentation'playDraw'shape_id v)
	, defaultToAttr toAttrFrTyp "presentation:speed" (presentation'playPresentation'speed v)
	]
instance XmlAttrType Presentation'play_presentation'speed where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "slow" = Just Presentation'play_presentation'speed_slow
	    translate "medium" = Just Presentation'play_presentation'speed_medium
	    translate "fast" = Just Presentation'play_presentation'speed_fast
	    translate _ = Nothing
    toAttrFrTyp n Presentation'play_presentation'speed_slow = Just (n, str2attr "slow")
    toAttrFrTyp n Presentation'play_presentation'speed_medium = Just (n, str2attr "medium")
    toAttrFrTyp n Presentation'play_presentation'speed_fast = Just (n, str2attr "fast")
instance XmlContent Presentation'animations where
    fromElem (CElem (Elem "presentation:animations" [] c0):rest) =
	(\(a,ca)->
	   (Just (Presentation'animations a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Presentation'animations a) =
	[CElem (Elem "presentation:animations" [] (concatMap toElem a))]
instance XmlContent Presentation'animations_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Presentation'animations_Presentation'show_shape a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Presentation'animations_Presentation'show_text a), rest)
		(_,_) ->
			case (fromElem c0) of
			(Just a,rest) -> (Just (Presentation'animations_Presentation'hide_shape a), rest)
			(_,_) ->
				case (fromElem c0) of
				(Just a,rest) -> (Just (Presentation'animations_Presentation'hide_text a), rest)
				(_,_) ->
					case (fromElem c0) of
					(Just a,rest) -> (Just (Presentation'animations_Presentation'dim a), rest)
					(_,_) ->
						case (fromElem c0) of
						(Just a,rest) -> (Just (Presentation'animations_Presentation'play a), rest)
						(_,_) ->
						    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Presentation'animations_Presentation'show_shape a) = toElem a
    toElem (Presentation'animations_Presentation'show_text a) = toElem a
    toElem (Presentation'animations_Presentation'hide_shape a) = toElem a
    toElem (Presentation'animations_Presentation'hide_text a) = toElem a
    toElem (Presentation'animations_Presentation'dim a) = toElem a
    toElem (Presentation'animations_Presentation'play a) = toElem a
instance XmlContent Presentation'show where
    fromElem (CElem (Elem "presentation:show" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "presentation:show" (toAttrs as) [])]
instance XmlAttributes Presentation'show where
    fromAttrs as =
	Presentation'show
	  { presentation'showPresentation'name = definiteA fromAttrToStr "presentation:show" "presentation:name" as
	  , presentation'showPresentation'pages = definiteA fromAttrToStr "presentation:show" "presentation:pages" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "presentation:name" (presentation'showPresentation'name v)
	, toAttrFrStr "presentation:pages" (presentation'showPresentation'pages v)
	]
instance XmlContent Presentation'settings where
    fromElem (CElem (Elem "presentation:settings" as c0):rest) =
	(\(a,ca)->
	   (Just (Presentation'settings (fromAttrs as) a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Presentation'settings as a) =
	[CElem (Elem "presentation:settings" (toAttrs as) (concatMap toElem a))]
instance XmlAttributes Presentation'settings_Attrs where
    fromAttrs as =
	Presentation'settings_Attrs
	  { presentation'settingsPresentation'start_page = possibleA fromAttrToStr "presentation:start-page" as
	  , presentation'settingsPresentation'show = possibleA fromAttrToStr "presentation:show" as
	  , presentation'settingsPresentation'full_screen = defaultA fromAttrToStr "true" "presentation:full-screen" as
	  , presentation'settingsPresentation'endless = defaultA fromAttrToStr "false" "presentation:endless" as
	  , presentation'settingsPresentation'pause = possibleA fromAttrToStr "presentation:pause" as
	  , presentation'settingsPresentation'show_logo = defaultA fromAttrToStr "false" "presentation:show-logo" as
	  , presentation'settingsPresentation'force_manual = defaultA fromAttrToStr "false" "presentation:force-manual" as
	  , presentation'settingsPresentation'mouse_visible = defaultA fromAttrToStr "true" "presentation:mouse-visible" as
	  , presentation'settingsPresentation'mouse_as_pen = defaultA fromAttrToStr "false" "presentation:mouse-as-pen" as
	  , presentation'settingsPresentation'start_with_navigator = defaultA fromAttrToStr "false" "presentation:start-with-navigator" as
	  , presentation'settingsPresentation'animations = defaultA fromAttrToTyp Presentation'settings_presentation'animations_enabled "presentation:animations" as
	  , presentation'settingsPresentation'stay_on_top = defaultA fromAttrToStr "false" "presentation:stay-on-top" as
	  , presentation'settingsPresentation'transition_on_click = defaultA fromAttrToTyp Presentation'settings_presentation'transition_on_click_enabled "presentation:transition-on-click" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "presentation:start-page" (presentation'settingsPresentation'start_page v)
	, maybeToAttr toAttrFrStr "presentation:show" (presentation'settingsPresentation'show v)
	, defaultToAttr toAttrFrStr "presentation:full-screen" (presentation'settingsPresentation'full_screen v)
	, defaultToAttr toAttrFrStr "presentation:endless" (presentation'settingsPresentation'endless v)
	, maybeToAttr toAttrFrStr "presentation:pause" (presentation'settingsPresentation'pause v)
	, defaultToAttr toAttrFrStr "presentation:show-logo" (presentation'settingsPresentation'show_logo v)
	, defaultToAttr toAttrFrStr "presentation:force-manual" (presentation'settingsPresentation'force_manual v)
	, defaultToAttr toAttrFrStr "presentation:mouse-visible" (presentation'settingsPresentation'mouse_visible v)
	, defaultToAttr toAttrFrStr "presentation:mouse-as-pen" (presentation'settingsPresentation'mouse_as_pen v)
	, defaultToAttr toAttrFrStr "presentation:start-with-navigator" (presentation'settingsPresentation'start_with_navigator v)
	, defaultToAttr toAttrFrTyp "presentation:animations" (presentation'settingsPresentation'animations v)
	, defaultToAttr toAttrFrStr "presentation:stay-on-top" (presentation'settingsPresentation'stay_on_top v)
	, defaultToAttr toAttrFrTyp "presentation:transition-on-click" (presentation'settingsPresentation'transition_on_click v)
	]
instance XmlAttrType Presentation'settings_presentation'animations where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "enabled" = Just Presentation'settings_presentation'animations_enabled
	    translate "disabled" = Just Presentation'settings_presentation'animations_disabled
	    translate _ = Nothing
    toAttrFrTyp n Presentation'settings_presentation'animations_enabled = Just (n, str2attr "enabled")
    toAttrFrTyp n Presentation'settings_presentation'animations_disabled = Just (n, str2attr "disabled")
instance XmlAttrType Presentation'settings_presentation'transition_on_click where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "enabled" = Just Presentation'settings_presentation'transition_on_click_enabled
	    translate "disabled" = Just Presentation'settings_presentation'transition_on_click_disabled
	    translate _ = Nothing
    toAttrFrTyp n Presentation'settings_presentation'transition_on_click_enabled = Just (n, str2attr "enabled")
    toAttrFrTyp n Presentation'settings_presentation'transition_on_click_disabled = Just (n, str2attr "disabled")
instance XmlContent Draw'page where
    fromElem (CElem (Elem "draw:page" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (\(d,cd)->
		    (Just (Draw'page (fromAttrs as) a b c d), rest))
		 (fromElem cc))
	      (fromElem cb))
	   (many fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Draw'page as a b c d) =
	[CElem (Elem "draw:page" (toAttrs as) (maybe [] toElem a ++
					       concatMap toElem b ++ maybe [] toElem c ++
					       maybe [] toElem d))]
instance XmlAttributes Draw'page_Attrs where
    fromAttrs as =
	Draw'page_Attrs
	  { draw'pageDraw'name = possibleA fromAttrToStr "draw:name" as
	  , draw'pageDraw'style_name = possibleA fromAttrToStr "draw:style-name" as
	  , draw'pageDraw'master_page_name = definiteA fromAttrToStr "draw:page" "draw:master-page-name" as
	  , draw'pagePresentation'presentation_page_layout_name = possibleA fromAttrToStr "presentation:presentation-page-layout-name" as
	  , draw'pageDraw'id = possibleA fromAttrToStr "draw:id" as
	  , draw'pageXlink'href = possibleA fromAttrToStr "xlink:href" as
	  , draw'pageXlink'type = possibleA fromAttrToTyp "xlink:type" as
	  , draw'pageXlink'show = possibleA fromAttrToTyp "xlink:show" as
	  , draw'pageXlink'actuate = possibleA fromAttrToTyp "xlink:actuate" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "draw:name" (draw'pageDraw'name v)
	, maybeToAttr toAttrFrStr "draw:style-name" (draw'pageDraw'style_name v)
	, toAttrFrStr "draw:master-page-name" (draw'pageDraw'master_page_name v)
	, maybeToAttr toAttrFrStr "presentation:presentation-page-layout-name" (draw'pagePresentation'presentation_page_layout_name v)
	, maybeToAttr toAttrFrStr "draw:id" (draw'pageDraw'id v)
	, maybeToAttr toAttrFrStr "xlink:href" (draw'pageXlink'href v)
	, maybeToAttr toAttrFrTyp "xlink:type" (draw'pageXlink'type v)
	, maybeToAttr toAttrFrTyp "xlink:show" (draw'pageXlink'show v)
	, maybeToAttr toAttrFrTyp "xlink:actuate" (draw'pageXlink'actuate v)
	]
instance XmlAttrType Draw'page_xlink'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "simple" = Just Draw'page_xlink'type_simple
	    translate _ = Nothing
    toAttrFrTyp n Draw'page_xlink'type_simple = Just (n, str2attr "simple")
instance XmlAttrType Draw'page_xlink'show where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "replace" = Just Draw'page_xlink'show_replace
	    translate _ = Nothing
    toAttrFrTyp n Draw'page_xlink'show_replace = Just (n, str2attr "replace")
instance XmlAttrType Draw'page_xlink'actuate where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "onRequest" = Just Draw'page_xlink'actuate_onRequest
	    translate _ = Nothing
    toAttrFrTyp n Draw'page_xlink'actuate_onRequest = Just (n, str2attr "onRequest")
instance XmlContent Presentation'notes where
    fromElem (CElem (Elem "presentation:notes" as c0):rest) =
	(\(a,ca)->
	   (Just (Presentation'notes (fromAttrs as) a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Presentation'notes as a) =
	[CElem (Elem "presentation:notes" (toAttrs as) (concatMap toElem a))]
instance XmlAttributes Presentation'notes_Attrs where
    fromAttrs as =
	Presentation'notes_Attrs
	  { presentation'notesStyle'page_master_name = possibleA fromAttrToStr "style:page-master-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "style:page-master-name" (presentation'notesStyle'page_master_name v)
	]
instance XmlContent Style'presentation_page_layout where
    fromElem (CElem (Elem "style:presentation-page-layout" as c0):rest) =
	(\(a,ca)->
	   (Just (Style'presentation_page_layout (fromAttrs as) a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Style'presentation_page_layout as a) =
	[CElem (Elem "style:presentation-page-layout" (toAttrs as) (concatMap toElem a))]
instance XmlAttributes Style'presentation_page_layout_Attrs where
    fromAttrs as =
	Style'presentation_page_layout_Attrs
	  { style'presentation_page_layoutStyle'name = definiteA fromAttrToStr "style:presentation-page-layout" "style:name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "style:name" (style'presentation_page_layoutStyle'name v)
	]
instance XmlContent Presentation'placeholder where
    fromElem (CElem (Elem "presentation:placeholder" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "presentation:placeholder" (toAttrs as) [])]
instance XmlAttributes Presentation'placeholder where
    fromAttrs as =
	Presentation'placeholder
	  { presentation'placeholderPresentation'object = definiteA fromAttrToTyp "presentation:placeholder" "presentation:object" as
	  , presentation'placeholderSvg'x = definiteA fromAttrToStr "presentation:placeholder" "svg:x" as
	  , presentation'placeholderSvg'y = definiteA fromAttrToStr "presentation:placeholder" "svg:y" as
	  , presentation'placeholderSvg'width = definiteA fromAttrToStr "presentation:placeholder" "svg:width" as
	  , presentation'placeholderSvg'height = definiteA fromAttrToStr "presentation:placeholder" "svg:height" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrTyp "presentation:object" (presentation'placeholderPresentation'object v)
	, toAttrFrStr "svg:x" (presentation'placeholderSvg'x v)
	, toAttrFrStr "svg:y" (presentation'placeholderSvg'y v)
	, toAttrFrStr "svg:width" (presentation'placeholderSvg'width v)
	, toAttrFrStr "svg:height" (presentation'placeholderSvg'height v)
	]
instance XmlAttrType Presentation'placeholder_presentation'object where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "title" = Just Presentation'placeholder_presentation'object_title
	    translate "outline" = Just Presentation'placeholder_presentation'object_outline
	    translate "subtitle" = Just Presentation'placeholder_presentation'object_subtitle
	    translate "text" = Just Presentation'placeholder_presentation'object_text
	    translate "graphic" = Just Presentation'placeholder_presentation'object_graphic
	    translate "object" = Just Presentation'placeholder_presentation'object_object
	    translate "chart" = Just Presentation'placeholder_presentation'object_chart
	    translate "orgchart" = Just Presentation'placeholder_presentation'object_orgchart
	    translate "page" = Just Presentation'placeholder_presentation'object_page
	    translate "notes" = Just Presentation'placeholder_presentation'object_notes
	    translate "handout" = Just Presentation'placeholder_presentation'object_handout
	    translate _ = Nothing
    toAttrFrTyp n Presentation'placeholder_presentation'object_title = Just (n, str2attr "title")
    toAttrFrTyp n Presentation'placeholder_presentation'object_outline = Just (n, str2attr "outline")
    toAttrFrTyp n Presentation'placeholder_presentation'object_subtitle = Just (n, str2attr "subtitle")
    toAttrFrTyp n Presentation'placeholder_presentation'object_text = Just (n, str2attr "text")
    toAttrFrTyp n Presentation'placeholder_presentation'object_graphic = Just (n, str2attr "graphic")
    toAttrFrTyp n Presentation'placeholder_presentation'object_object = Just (n, str2attr "object")
    toAttrFrTyp n Presentation'placeholder_presentation'object_chart = Just (n, str2attr "chart")
    toAttrFrTyp n Presentation'placeholder_presentation'object_orgchart = Just (n, str2attr "orgchart")
    toAttrFrTyp n Presentation'placeholder_presentation'object_page = Just (n, str2attr "page")
    toAttrFrTyp n Presentation'placeholder_presentation'object_notes = Just (n, str2attr "notes")
    toAttrFrTyp n Presentation'placeholder_presentation'object_handout = Just (n, str2attr "handout")
instance XmlContent Draw'text_box where
    fromElem (CElem (Elem "draw:text-box" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (Just (Draw'text_box (fromAttrs as) a b c), rest))
	      (many fromElem cb))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Draw'text_box as a b c) =
	[CElem (Elem "draw:text-box" (toAttrs as) (maybe [] toElem a ++
						   maybe [] toElem b ++ concatMap toElem c))]
instance XmlAttributes Draw'text_box_Attrs where
    fromAttrs as =
	Draw'text_box_Attrs
	  { draw'text_boxDraw'style_name = possibleA fromAttrToStr "draw:style-name" as
	  , draw'text_boxPresentation'style_name = possibleA fromAttrToStr "presentation:style-name" as
	  , draw'text_boxDraw'text_style_name = possibleA fromAttrToStr "draw:text-style-name" as
	  , draw'text_boxDraw'transform = possibleA fromAttrToStr "draw:transform" as
	  , draw'text_boxDraw'name = possibleA fromAttrToStr "draw:name" as
	  , draw'text_boxDraw'chain_next_name = possibleA fromAttrToStr "draw:chain-next-name" as
	  , draw'text_boxText'anchor_type = possibleA fromAttrToTyp "text:anchor-type" as
	  , draw'text_boxText'anchor_page_number = possibleA fromAttrToStr "text:anchor-page-number" as
	  , draw'text_boxSvg'x = possibleA fromAttrToStr "svg:x" as
	  , draw'text_boxSvg'y = possibleA fromAttrToStr "svg:y" as
	  , draw'text_boxTable'end_cell_address = possibleA fromAttrToStr "table:end-cell-address" as
	  , draw'text_boxTable'end_x = possibleA fromAttrToStr "table:end-x" as
	  , draw'text_boxTable'end_y = possibleA fromAttrToStr "table:end-y" as
	  , draw'text_boxTable'table_background = possibleA fromAttrToTyp "table:table-background" as
	  , draw'text_boxSvg'width = possibleA fromAttrToStr "svg:width" as
	  , draw'text_boxSvg'height = possibleA fromAttrToStr "svg:height" as
	  , draw'text_boxStyle'rel_width = possibleA fromAttrToStr "style:rel-width" as
	  , draw'text_boxStyle'rel_height = possibleA fromAttrToStr "style:rel-height" as
	  , draw'text_boxFo'min_height = possibleA fromAttrToStr "fo:min-height" as
	  , draw'text_boxDraw'z_index = possibleA fromAttrToStr "draw:z-index" as
	  , draw'text_boxPresentation'class = possibleA fromAttrToTyp "presentation:class" as
	  , draw'text_boxPresentation'placeholder = possibleA fromAttrToTyp "presentation:placeholder" as
	  , draw'text_boxPresentation'user_transformed = possibleA fromAttrToTyp "presentation:user-transformed" as
	  , draw'text_boxDraw'id = possibleA fromAttrToStr "draw:id" as
	  , draw'text_boxDraw'layer = possibleA fromAttrToStr "draw:layer" as
	  , draw'text_boxDraw'corner_radius = possibleA fromAttrToStr "draw:corner-radius" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "draw:style-name" (draw'text_boxDraw'style_name v)
	, maybeToAttr toAttrFrStr "presentation:style-name" (draw'text_boxPresentation'style_name v)
	, maybeToAttr toAttrFrStr "draw:text-style-name" (draw'text_boxDraw'text_style_name v)
	, maybeToAttr toAttrFrStr "draw:transform" (draw'text_boxDraw'transform v)
	, maybeToAttr toAttrFrStr "draw:name" (draw'text_boxDraw'name v)
	, maybeToAttr toAttrFrStr "draw:chain-next-name" (draw'text_boxDraw'chain_next_name v)
	, maybeToAttr toAttrFrTyp "text:anchor-type" (draw'text_boxText'anchor_type v)
	, maybeToAttr toAttrFrStr "text:anchor-page-number" (draw'text_boxText'anchor_page_number v)
	, maybeToAttr toAttrFrStr "svg:x" (draw'text_boxSvg'x v)
	, maybeToAttr toAttrFrStr "svg:y" (draw'text_boxSvg'y v)
	, maybeToAttr toAttrFrStr "table:end-cell-address" (draw'text_boxTable'end_cell_address v)
	, maybeToAttr toAttrFrStr "table:end-x" (draw'text_boxTable'end_x v)
	, maybeToAttr toAttrFrStr "table:end-y" (draw'text_boxTable'end_y v)
	, maybeToAttr toAttrFrTyp "table:table-background" (draw'text_boxTable'table_background v)
	, maybeToAttr toAttrFrStr "svg:width" (draw'text_boxSvg'width v)
	, maybeToAttr toAttrFrStr "svg:height" (draw'text_boxSvg'height v)
	, maybeToAttr toAttrFrStr "style:rel-width" (draw'text_boxStyle'rel_width v)
	, maybeToAttr toAttrFrStr "style:rel-height" (draw'text_boxStyle'rel_height v)
	, maybeToAttr toAttrFrStr "fo:min-height" (draw'text_boxFo'min_height v)
	, maybeToAttr toAttrFrStr "draw:z-index" (draw'text_boxDraw'z_index v)
	, maybeToAttr toAttrFrTyp "presentation:class" (draw'text_boxPresentation'class v)
	, maybeToAttr toAttrFrTyp "presentation:placeholder" (draw'text_boxPresentation'placeholder v)
	, maybeToAttr toAttrFrTyp "presentation:user-transformed" (draw'text_boxPresentation'user_transformed v)
	, maybeToAttr toAttrFrStr "draw:id" (draw'text_boxDraw'id v)
	, maybeToAttr toAttrFrStr "draw:layer" (draw'text_boxDraw'layer v)
	, maybeToAttr toAttrFrStr "draw:corner-radius" (draw'text_boxDraw'corner_radius v)
	]
instance XmlAttrType Draw'text_box_text'anchor_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "page" = Just Draw'text_box_text'anchor_type_page
	    translate "frame" = Just Draw'text_box_text'anchor_type_frame
	    translate "paragraph" = Just Draw'text_box_text'anchor_type_paragraph
	    translate "char" = Just Draw'text_box_text'anchor_type_char
	    translate "as-char" = Just Draw'text_box_text'anchor_type_as_char
	    translate _ = Nothing
    toAttrFrTyp n Draw'text_box_text'anchor_type_page = Just (n, str2attr "page")
    toAttrFrTyp n Draw'text_box_text'anchor_type_frame = Just (n, str2attr "frame")
    toAttrFrTyp n Draw'text_box_text'anchor_type_paragraph = Just (n, str2attr "paragraph")
    toAttrFrTyp n Draw'text_box_text'anchor_type_char = Just (n, str2attr "char")
    toAttrFrTyp n Draw'text_box_text'anchor_type_as_char = Just (n, str2attr "as-char")
instance XmlAttrType Draw'text_box_table'table_background where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Draw'text_box_table'table_background_true
	    translate "false" = Just Draw'text_box_table'table_background_false
	    translate _ = Nothing
    toAttrFrTyp n Draw'text_box_table'table_background_true = Just (n, str2attr "true")
    toAttrFrTyp n Draw'text_box_table'table_background_false = Just (n, str2attr "false")
instance XmlAttrType Draw'text_box_presentation'class where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "title" = Just Draw'text_box_presentation'class_title
	    translate "outline" = Just Draw'text_box_presentation'class_outline
	    translate "subtitle" = Just Draw'text_box_presentation'class_subtitle
	    translate "text" = Just Draw'text_box_presentation'class_text
	    translate "graphic" = Just Draw'text_box_presentation'class_graphic
	    translate "object" = Just Draw'text_box_presentation'class_object
	    translate "chart" = Just Draw'text_box_presentation'class_chart
	    translate "table" = Just Draw'text_box_presentation'class_table
	    translate "orgchart" = Just Draw'text_box_presentation'class_orgchart
	    translate "page" = Just Draw'text_box_presentation'class_page
	    translate "notes" = Just Draw'text_box_presentation'class_notes
	    translate _ = Nothing
    toAttrFrTyp n Draw'text_box_presentation'class_title = Just (n, str2attr "title")
    toAttrFrTyp n Draw'text_box_presentation'class_outline = Just (n, str2attr "outline")
    toAttrFrTyp n Draw'text_box_presentation'class_subtitle = Just (n, str2attr "subtitle")
    toAttrFrTyp n Draw'text_box_presentation'class_text = Just (n, str2attr "text")
    toAttrFrTyp n Draw'text_box_presentation'class_graphic = Just (n, str2attr "graphic")
    toAttrFrTyp n Draw'text_box_presentation'class_object = Just (n, str2attr "object")
    toAttrFrTyp n Draw'text_box_presentation'class_chart = Just (n, str2attr "chart")
    toAttrFrTyp n Draw'text_box_presentation'class_table = Just (n, str2attr "table")
    toAttrFrTyp n Draw'text_box_presentation'class_orgchart = Just (n, str2attr "orgchart")
    toAttrFrTyp n Draw'text_box_presentation'class_page = Just (n, str2attr "page")
    toAttrFrTyp n Draw'text_box_presentation'class_notes = Just (n, str2attr "notes")
instance XmlAttrType Draw'text_box_presentation'placeholder where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Draw'text_box_presentation'placeholder_true
	    translate "false" = Just Draw'text_box_presentation'placeholder_false
	    translate _ = Nothing
    toAttrFrTyp n Draw'text_box_presentation'placeholder_true = Just (n, str2attr "true")
    toAttrFrTyp n Draw'text_box_presentation'placeholder_false = Just (n, str2attr "false")
instance XmlAttrType Draw'text_box_presentation'user_transformed where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Draw'text_box_presentation'user_transformed_true
	    translate "false" = Just Draw'text_box_presentation'user_transformed_false
	    translate _ = Nothing
    toAttrFrTyp n Draw'text_box_presentation'user_transformed_true = Just (n, str2attr "true")
    toAttrFrTyp n Draw'text_box_presentation'user_transformed_false = Just (n, str2attr "false")
instance XmlContent Draw'image where
    fromElem (CElem (Elem "draw:image" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (\(d,cd)->
		    (\(e,ce)->
		       (Just (Draw'image (fromAttrs as) a b c d e), rest))
		    (fromElem cd))
		 (fromElem cc))
	      (fromElem cb))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Draw'image as a b c d e) =
	[CElem (Elem "draw:image" (toAttrs as) (maybe [] toElem a ++
						maybe [] toElem b ++ maybe [] toElem c ++
						maybe [] toElem d ++ maybe [] toElem e))]
instance XmlAttributes Draw'image_Attrs where
    fromAttrs as =
	Draw'image_Attrs
	  { draw'imageDraw'transform = possibleA fromAttrToStr "draw:transform" as
	  , draw'imageDraw'style_name = possibleA fromAttrToStr "draw:style-name" as
	  , draw'imagePresentation'style_name = possibleA fromAttrToStr "presentation:style-name" as
	  , draw'imageDraw'text_style_name = possibleA fromAttrToStr "draw:text-style-name" as
	  , draw'imageDraw'name = possibleA fromAttrToStr "draw:name" as
	  , draw'imageXlink'href = possibleA fromAttrToStr "xlink:href" as
	  , draw'imageXlink'type = possibleA fromAttrToTyp "xlink:type" as
	  , draw'imageXlink'show = possibleA fromAttrToTyp "xlink:show" as
	  , draw'imageXlink'actuate = possibleA fromAttrToTyp "xlink:actuate" as
	  , draw'imageDraw'filter_name = possibleA fromAttrToStr "draw:filter-name" as
	  , draw'imageText'anchor_type = possibleA fromAttrToTyp "text:anchor-type" as
	  , draw'imageText'anchor_page_number = possibleA fromAttrToStr "text:anchor-page-number" as
	  , draw'imageSvg'x = possibleA fromAttrToStr "svg:x" as
	  , draw'imageSvg'y = possibleA fromAttrToStr "svg:y" as
	  , draw'imageTable'end_cell_address = possibleA fromAttrToStr "table:end-cell-address" as
	  , draw'imageTable'end_x = possibleA fromAttrToStr "table:end-x" as
	  , draw'imageTable'end_y = possibleA fromAttrToStr "table:end-y" as
	  , draw'imageTable'table_background = possibleA fromAttrToTyp "table:table-background" as
	  , draw'imageSvg'width = possibleA fromAttrToStr "svg:width" as
	  , draw'imageSvg'height = possibleA fromAttrToStr "svg:height" as
	  , draw'imagePresentation'class = possibleA fromAttrToTyp "presentation:class" as
	  , draw'imagePresentation'placeholder = possibleA fromAttrToTyp "presentation:placeholder" as
	  , draw'imagePresentation'user_transformed = possibleA fromAttrToTyp "presentation:user-transformed" as
	  , draw'imageDraw'z_index = possibleA fromAttrToStr "draw:z-index" as
	  , draw'imageDraw'id = possibleA fromAttrToStr "draw:id" as
	  , draw'imageDraw'layer = possibleA fromAttrToStr "draw:layer" as
	  , draw'imageStyle'rel_width = possibleA fromAttrToStr "style:rel-width" as
	  , draw'imageStyle'rel_height = possibleA fromAttrToStr "style:rel-height" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "draw:transform" (draw'imageDraw'transform v)
	, maybeToAttr toAttrFrStr "draw:style-name" (draw'imageDraw'style_name v)
	, maybeToAttr toAttrFrStr "presentation:style-name" (draw'imagePresentation'style_name v)
	, maybeToAttr toAttrFrStr "draw:text-style-name" (draw'imageDraw'text_style_name v)
	, maybeToAttr toAttrFrStr "draw:name" (draw'imageDraw'name v)
	, maybeToAttr toAttrFrStr "xlink:href" (draw'imageXlink'href v)
	, maybeToAttr toAttrFrTyp "xlink:type" (draw'imageXlink'type v)
	, maybeToAttr toAttrFrTyp "xlink:show" (draw'imageXlink'show v)
	, maybeToAttr toAttrFrTyp "xlink:actuate" (draw'imageXlink'actuate v)
	, maybeToAttr toAttrFrStr "draw:filter-name" (draw'imageDraw'filter_name v)
	, maybeToAttr toAttrFrTyp "text:anchor-type" (draw'imageText'anchor_type v)
	, maybeToAttr toAttrFrStr "text:anchor-page-number" (draw'imageText'anchor_page_number v)
	, maybeToAttr toAttrFrStr "svg:x" (draw'imageSvg'x v)
	, maybeToAttr toAttrFrStr "svg:y" (draw'imageSvg'y v)
	, maybeToAttr toAttrFrStr "table:end-cell-address" (draw'imageTable'end_cell_address v)
	, maybeToAttr toAttrFrStr "table:end-x" (draw'imageTable'end_x v)
	, maybeToAttr toAttrFrStr "table:end-y" (draw'imageTable'end_y v)
	, maybeToAttr toAttrFrTyp "table:table-background" (draw'imageTable'table_background v)
	, maybeToAttr toAttrFrStr "svg:width" (draw'imageSvg'width v)
	, maybeToAttr toAttrFrStr "svg:height" (draw'imageSvg'height v)
	, maybeToAttr toAttrFrTyp "presentation:class" (draw'imagePresentation'class v)
	, maybeToAttr toAttrFrTyp "presentation:placeholder" (draw'imagePresentation'placeholder v)
	, maybeToAttr toAttrFrTyp "presentation:user-transformed" (draw'imagePresentation'user_transformed v)
	, maybeToAttr toAttrFrStr "draw:z-index" (draw'imageDraw'z_index v)
	, maybeToAttr toAttrFrStr "draw:id" (draw'imageDraw'id v)
	, maybeToAttr toAttrFrStr "draw:layer" (draw'imageDraw'layer v)
	, maybeToAttr toAttrFrStr "style:rel-width" (draw'imageStyle'rel_width v)
	, maybeToAttr toAttrFrStr "style:rel-height" (draw'imageStyle'rel_height v)
	]
instance XmlAttrType Draw'image_xlink'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "simple" = Just Draw'image_xlink'type_simple
	    translate _ = Nothing
    toAttrFrTyp n Draw'image_xlink'type_simple = Just (n, str2attr "simple")
instance XmlAttrType Draw'image_xlink'show where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "embed" = Just Draw'image_xlink'show_embed
	    translate _ = Nothing
    toAttrFrTyp n Draw'image_xlink'show_embed = Just (n, str2attr "embed")
instance XmlAttrType Draw'image_xlink'actuate where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "onLoad" = Just Draw'image_xlink'actuate_onLoad
	    translate _ = Nothing
    toAttrFrTyp n Draw'image_xlink'actuate_onLoad = Just (n, str2attr "onLoad")
instance XmlAttrType Draw'image_text'anchor_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "page" = Just Draw'image_text'anchor_type_page
	    translate "frame" = Just Draw'image_text'anchor_type_frame
	    translate "paragraph" = Just Draw'image_text'anchor_type_paragraph
	    translate "char" = Just Draw'image_text'anchor_type_char
	    translate "as-char" = Just Draw'image_text'anchor_type_as_char
	    translate _ = Nothing
    toAttrFrTyp n Draw'image_text'anchor_type_page = Just (n, str2attr "page")
    toAttrFrTyp n Draw'image_text'anchor_type_frame = Just (n, str2attr "frame")
    toAttrFrTyp n Draw'image_text'anchor_type_paragraph = Just (n, str2attr "paragraph")
    toAttrFrTyp n Draw'image_text'anchor_type_char = Just (n, str2attr "char")
    toAttrFrTyp n Draw'image_text'anchor_type_as_char = Just (n, str2attr "as-char")
instance XmlAttrType Draw'image_table'table_background where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Draw'image_table'table_background_true
	    translate "false" = Just Draw'image_table'table_background_false
	    translate _ = Nothing
    toAttrFrTyp n Draw'image_table'table_background_true = Just (n, str2attr "true")
    toAttrFrTyp n Draw'image_table'table_background_false = Just (n, str2attr "false")
instance XmlAttrType Draw'image_presentation'class where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "title" = Just Draw'image_presentation'class_title
	    translate "outline" = Just Draw'image_presentation'class_outline
	    translate "subtitle" = Just Draw'image_presentation'class_subtitle
	    translate "text" = Just Draw'image_presentation'class_text
	    translate "graphic" = Just Draw'image_presentation'class_graphic
	    translate "object" = Just Draw'image_presentation'class_object
	    translate "chart" = Just Draw'image_presentation'class_chart
	    translate "table" = Just Draw'image_presentation'class_table
	    translate "orgchart" = Just Draw'image_presentation'class_orgchart
	    translate "page" = Just Draw'image_presentation'class_page
	    translate "notes" = Just Draw'image_presentation'class_notes
	    translate _ = Nothing
    toAttrFrTyp n Draw'image_presentation'class_title = Just (n, str2attr "title")
    toAttrFrTyp n Draw'image_presentation'class_outline = Just (n, str2attr "outline")
    toAttrFrTyp n Draw'image_presentation'class_subtitle = Just (n, str2attr "subtitle")
    toAttrFrTyp n Draw'image_presentation'class_text = Just (n, str2attr "text")
    toAttrFrTyp n Draw'image_presentation'class_graphic = Just (n, str2attr "graphic")
    toAttrFrTyp n Draw'image_presentation'class_object = Just (n, str2attr "object")
    toAttrFrTyp n Draw'image_presentation'class_chart = Just (n, str2attr "chart")
    toAttrFrTyp n Draw'image_presentation'class_table = Just (n, str2attr "table")
    toAttrFrTyp n Draw'image_presentation'class_orgchart = Just (n, str2attr "orgchart")
    toAttrFrTyp n Draw'image_presentation'class_page = Just (n, str2attr "page")
    toAttrFrTyp n Draw'image_presentation'class_notes = Just (n, str2attr "notes")
instance XmlAttrType Draw'image_presentation'placeholder where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Draw'image_presentation'placeholder_true
	    translate "false" = Just Draw'image_presentation'placeholder_false
	    translate _ = Nothing
    toAttrFrTyp n Draw'image_presentation'placeholder_true = Just (n, str2attr "true")
    toAttrFrTyp n Draw'image_presentation'placeholder_false = Just (n, str2attr "false")
instance XmlAttrType Draw'image_presentation'user_transformed where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Draw'image_presentation'user_transformed_true
	    translate "false" = Just Draw'image_presentation'user_transformed_false
	    translate _ = Nothing
    toAttrFrTyp n Draw'image_presentation'user_transformed_true = Just (n, str2attr "true")
    toAttrFrTyp n Draw'image_presentation'user_transformed_false = Just (n, str2attr "false")
instance XmlContent Draw'thumbnail where
    fromElem (CElem (Elem "draw:thumbnail" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "draw:thumbnail" (toAttrs as) [])]
instance XmlAttributes Draw'thumbnail where
    fromAttrs as =
	Draw'thumbnail
	  { draw'thumbnailXlink'href = definiteA fromAttrToStr "draw:thumbnail" "xlink:href" as
	  , draw'thumbnailXlink'type = possibleA fromAttrToTyp "xlink:type" as
	  , draw'thumbnailXlink'show = possibleA fromAttrToTyp "xlink:show" as
	  , draw'thumbnailXlink'actuate = possibleA fromAttrToTyp "xlink:actuate" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "xlink:href" (draw'thumbnailXlink'href v)
	, maybeToAttr toAttrFrTyp "xlink:type" (draw'thumbnailXlink'type v)
	, maybeToAttr toAttrFrTyp "xlink:show" (draw'thumbnailXlink'show v)
	, maybeToAttr toAttrFrTyp "xlink:actuate" (draw'thumbnailXlink'actuate v)
	]
instance XmlAttrType Draw'thumbnail_xlink'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "simple" = Just Draw'thumbnail_xlink'type_simple
	    translate _ = Nothing
    toAttrFrTyp n Draw'thumbnail_xlink'type_simple = Just (n, str2attr "simple")
instance XmlAttrType Draw'thumbnail_xlink'show where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "embed" = Just Draw'thumbnail_xlink'show_embed
	    translate _ = Nothing
    toAttrFrTyp n Draw'thumbnail_xlink'show_embed = Just (n, str2attr "embed")
instance XmlAttrType Draw'thumbnail_xlink'actuate where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "onLoad" = Just Draw'thumbnail_xlink'actuate_onLoad
	    translate _ = Nothing
    toAttrFrTyp n Draw'thumbnail_xlink'actuate_onLoad = Just (n, str2attr "onLoad")
instance XmlContent Math'math where
    fromElem (CElem (Elem "math:math" [] c0):rest) =
	(\(a,ca)->
	   (Just (Math'math a), rest))
	(definite fromElem "ANY" "math:math" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Math'math a) =
	[CElem (Elem "math:math" [] (toElem a))]
instance XmlContent Draw'object where
    fromElem (CElem (Elem "draw:object" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (\(d,cd)->
		    (\(e,ce)->
		       (\(f,cf)->
			  (Just (Draw'object (fromAttrs as) a b c d e f), rest))
		       (fromElem ce))
		    (fromElem cd))
		 (fromElem cc))
	      (fromElem cb))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Draw'object as a b c d e f) =
	[CElem (Elem "draw:object" (toAttrs as) (maybe [] toElem a ++
						 maybe [] toElem b ++ maybe [] toElem c ++
						 maybe [] toElem d ++ maybe [] toElem e ++
						 maybe [] toElem f))]
instance XmlAttributes Draw'object_Attrs where
    fromAttrs as =
	Draw'object_Attrs
	  { draw'objectDraw'style_name = possibleA fromAttrToStr "draw:style-name" as
	  , draw'objectPresentation'style_name = possibleA fromAttrToStr "presentation:style-name" as
	  , draw'objectDraw'text_style_name = possibleA fromAttrToStr "draw:text-style-name" as
	  , draw'objectDraw'name = possibleA fromAttrToStr "draw:name" as
	  , draw'objectXlink'href = possibleA fromAttrToStr "xlink:href" as
	  , draw'objectXlink'type = possibleA fromAttrToTyp "xlink:type" as
	  , draw'objectXlink'show = possibleA fromAttrToTyp "xlink:show" as
	  , draw'objectXlink'actuate = possibleA fromAttrToTyp "xlink:actuate" as
	  , draw'objectText'anchor_type = possibleA fromAttrToTyp "text:anchor-type" as
	  , draw'objectText'anchor_page_number = possibleA fromAttrToStr "text:anchor-page-number" as
	  , draw'objectSvg'x = possibleA fromAttrToStr "svg:x" as
	  , draw'objectSvg'y = possibleA fromAttrToStr "svg:y" as
	  , draw'objectTable'end_cell_address = possibleA fromAttrToStr "table:end-cell-address" as
	  , draw'objectTable'end_x = possibleA fromAttrToStr "table:end-x" as
	  , draw'objectTable'end_y = possibleA fromAttrToStr "table:end-y" as
	  , draw'objectTable'table_background = possibleA fromAttrToTyp "table:table-background" as
	  , draw'objectSvg'width = possibleA fromAttrToStr "svg:width" as
	  , draw'objectSvg'height = possibleA fromAttrToStr "svg:height" as
	  , draw'objectPresentation'class = possibleA fromAttrToTyp "presentation:class" as
	  , draw'objectPresentation'placeholder = possibleA fromAttrToTyp "presentation:placeholder" as
	  , draw'objectPresentation'user_transformed = possibleA fromAttrToTyp "presentation:user-transformed" as
	  , draw'objectDraw'z_index = possibleA fromAttrToStr "draw:z-index" as
	  , draw'objectDraw'id = possibleA fromAttrToStr "draw:id" as
	  , draw'objectDraw'layer = possibleA fromAttrToStr "draw:layer" as
	  , draw'objectDraw'notify_on_update_of_ranges = possibleA fromAttrToStr "draw:notify-on-update-of-ranges" as
	  , draw'objectStyle'rel_width = possibleA fromAttrToStr "style:rel-width" as
	  , draw'objectStyle'rel_height = possibleA fromAttrToStr "style:rel-height" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "draw:style-name" (draw'objectDraw'style_name v)
	, maybeToAttr toAttrFrStr "presentation:style-name" (draw'objectPresentation'style_name v)
	, maybeToAttr toAttrFrStr "draw:text-style-name" (draw'objectDraw'text_style_name v)
	, maybeToAttr toAttrFrStr "draw:name" (draw'objectDraw'name v)
	, maybeToAttr toAttrFrStr "xlink:href" (draw'objectXlink'href v)
	, maybeToAttr toAttrFrTyp "xlink:type" (draw'objectXlink'type v)
	, maybeToAttr toAttrFrTyp "xlink:show" (draw'objectXlink'show v)
	, maybeToAttr toAttrFrTyp "xlink:actuate" (draw'objectXlink'actuate v)
	, maybeToAttr toAttrFrTyp "text:anchor-type" (draw'objectText'anchor_type v)
	, maybeToAttr toAttrFrStr "text:anchor-page-number" (draw'objectText'anchor_page_number v)
	, maybeToAttr toAttrFrStr "svg:x" (draw'objectSvg'x v)
	, maybeToAttr toAttrFrStr "svg:y" (draw'objectSvg'y v)
	, maybeToAttr toAttrFrStr "table:end-cell-address" (draw'objectTable'end_cell_address v)
	, maybeToAttr toAttrFrStr "table:end-x" (draw'objectTable'end_x v)
	, maybeToAttr toAttrFrStr "table:end-y" (draw'objectTable'end_y v)
	, maybeToAttr toAttrFrTyp "table:table-background" (draw'objectTable'table_background v)
	, maybeToAttr toAttrFrStr "svg:width" (draw'objectSvg'width v)
	, maybeToAttr toAttrFrStr "svg:height" (draw'objectSvg'height v)
	, maybeToAttr toAttrFrTyp "presentation:class" (draw'objectPresentation'class v)
	, maybeToAttr toAttrFrTyp "presentation:placeholder" (draw'objectPresentation'placeholder v)
	, maybeToAttr toAttrFrTyp "presentation:user-transformed" (draw'objectPresentation'user_transformed v)
	, maybeToAttr toAttrFrStr "draw:z-index" (draw'objectDraw'z_index v)
	, maybeToAttr toAttrFrStr "draw:id" (draw'objectDraw'id v)
	, maybeToAttr toAttrFrStr "draw:layer" (draw'objectDraw'layer v)
	, maybeToAttr toAttrFrStr "draw:notify-on-update-of-ranges" (draw'objectDraw'notify_on_update_of_ranges v)
	, maybeToAttr toAttrFrStr "style:rel-width" (draw'objectStyle'rel_width v)
	, maybeToAttr toAttrFrStr "style:rel-height" (draw'objectStyle'rel_height v)
	]
instance XmlAttrType Draw'object_xlink'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "simple" = Just Draw'object_xlink'type_simple
	    translate _ = Nothing
    toAttrFrTyp n Draw'object_xlink'type_simple = Just (n, str2attr "simple")
instance XmlAttrType Draw'object_xlink'show where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "embed" = Just Draw'object_xlink'show_embed
	    translate _ = Nothing
    toAttrFrTyp n Draw'object_xlink'show_embed = Just (n, str2attr "embed")
instance XmlAttrType Draw'object_xlink'actuate where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "onLoad" = Just Draw'object_xlink'actuate_onLoad
	    translate _ = Nothing
    toAttrFrTyp n Draw'object_xlink'actuate_onLoad = Just (n, str2attr "onLoad")
instance XmlAttrType Draw'object_text'anchor_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "page" = Just Draw'object_text'anchor_type_page
	    translate "frame" = Just Draw'object_text'anchor_type_frame
	    translate "paragraph" = Just Draw'object_text'anchor_type_paragraph
	    translate "char" = Just Draw'object_text'anchor_type_char
	    translate "as-char" = Just Draw'object_text'anchor_type_as_char
	    translate _ = Nothing
    toAttrFrTyp n Draw'object_text'anchor_type_page = Just (n, str2attr "page")
    toAttrFrTyp n Draw'object_text'anchor_type_frame = Just (n, str2attr "frame")
    toAttrFrTyp n Draw'object_text'anchor_type_paragraph = Just (n, str2attr "paragraph")
    toAttrFrTyp n Draw'object_text'anchor_type_char = Just (n, str2attr "char")
    toAttrFrTyp n Draw'object_text'anchor_type_as_char = Just (n, str2attr "as-char")
instance XmlAttrType Draw'object_table'table_background where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Draw'object_table'table_background_true
	    translate "false" = Just Draw'object_table'table_background_false
	    translate _ = Nothing
    toAttrFrTyp n Draw'object_table'table_background_true = Just (n, str2attr "true")
    toAttrFrTyp n Draw'object_table'table_background_false = Just (n, str2attr "false")
instance XmlAttrType Draw'object_presentation'class where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "title" = Just Draw'object_presentation'class_title
	    translate "outline" = Just Draw'object_presentation'class_outline
	    translate "subtitle" = Just Draw'object_presentation'class_subtitle
	    translate "text" = Just Draw'object_presentation'class_text
	    translate "graphic" = Just Draw'object_presentation'class_graphic
	    translate "object" = Just Draw'object_presentation'class_object
	    translate "chart" = Just Draw'object_presentation'class_chart
	    translate "table" = Just Draw'object_presentation'class_table
	    translate "orgchart" = Just Draw'object_presentation'class_orgchart
	    translate "page" = Just Draw'object_presentation'class_page
	    translate "notes" = Just Draw'object_presentation'class_notes
	    translate _ = Nothing
    toAttrFrTyp n Draw'object_presentation'class_title = Just (n, str2attr "title")
    toAttrFrTyp n Draw'object_presentation'class_outline = Just (n, str2attr "outline")
    toAttrFrTyp n Draw'object_presentation'class_subtitle = Just (n, str2attr "subtitle")
    toAttrFrTyp n Draw'object_presentation'class_text = Just (n, str2attr "text")
    toAttrFrTyp n Draw'object_presentation'class_graphic = Just (n, str2attr "graphic")
    toAttrFrTyp n Draw'object_presentation'class_object = Just (n, str2attr "object")
    toAttrFrTyp n Draw'object_presentation'class_chart = Just (n, str2attr "chart")
    toAttrFrTyp n Draw'object_presentation'class_table = Just (n, str2attr "table")
    toAttrFrTyp n Draw'object_presentation'class_orgchart = Just (n, str2attr "orgchart")
    toAttrFrTyp n Draw'object_presentation'class_page = Just (n, str2attr "page")
    toAttrFrTyp n Draw'object_presentation'class_notes = Just (n, str2attr "notes")
instance XmlAttrType Draw'object_presentation'placeholder where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Draw'object_presentation'placeholder_true
	    translate "false" = Just Draw'object_presentation'placeholder_false
	    translate _ = Nothing
    toAttrFrTyp n Draw'object_presentation'placeholder_true = Just (n, str2attr "true")
    toAttrFrTyp n Draw'object_presentation'placeholder_false = Just (n, str2attr "false")
instance XmlAttrType Draw'object_presentation'user_transformed where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Draw'object_presentation'user_transformed_true
	    translate "false" = Just Draw'object_presentation'user_transformed_false
	    translate _ = Nothing
    toAttrFrTyp n Draw'object_presentation'user_transformed_true = Just (n, str2attr "true")
    toAttrFrTyp n Draw'object_presentation'user_transformed_false = Just (n, str2attr "false")
instance XmlContent Draw'object_ole where
    fromElem (CElem (Elem "draw:object-ole" as c0):rest) =
	case (fromElem c0) of
	(a,_) -> (Just (Draw'object_oleOffice'binary_data (fromAttrs as) a), rest)
	(Nothing,_) ->
		case (fromElem c0) of
		(a,_) -> (Just (Draw'object_oleOffice'events (fromAttrs as) a), rest)
		(Nothing,_) ->
			case (fromElem c0) of
			(a,_) -> (Just (Draw'object_oleDraw'image_map (fromAttrs as) a), rest)
			(Nothing,_) ->
				case (fromElem c0) of
				(a,_) -> (Just (Draw'object_oleSvg'desc (fromAttrs as) a), rest)
				(Nothing,_) ->
					case (fromElem c0) of
					(a,_) -> (Just (Draw'object_oleDraw'contour_polygon (fromAttrs as) a), rest)
					(Nothing,_) ->
						case (fromElem c0) of
						(a,_) -> (Just (Draw'object_oleDraw'contour_path (fromAttrs as) a), rest)
						(Nothing,_) ->
							case (fromElem c0) of
							(a,_) -> (Just (Draw'object_oleDraw'thumbnail (fromAttrs as) a), rest)
							(Nothing,_) ->
							    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Draw'object_oleOffice'binary_data as a) = [CElem (Elem "draw:object-ole" (toAttrs as) (maybe [] toElem a) )]
    toElem (Draw'object_oleOffice'events as a) = [CElem (Elem "draw:object-ole" (toAttrs as) (maybe [] toElem a) )]
    toElem (Draw'object_oleDraw'image_map as a) = [CElem (Elem "draw:object-ole" (toAttrs as) (maybe [] toElem a) )]
    toElem (Draw'object_oleSvg'desc as a) = [CElem (Elem "draw:object-ole" (toAttrs as) (maybe [] toElem a) )]
    toElem (Draw'object_oleDraw'contour_polygon as a) = [CElem (Elem "draw:object-ole" (toAttrs as) (maybe [] toElem a) )]
    toElem (Draw'object_oleDraw'contour_path as a) = [CElem (Elem "draw:object-ole" (toAttrs as) (maybe [] toElem a) )]
    toElem (Draw'object_oleDraw'thumbnail as a) = [CElem (Elem "draw:object-ole" (toAttrs as) (maybe [] toElem a) )]
instance XmlAttributes Draw'object_ole_Attrs where
    fromAttrs as =
	Draw'object_ole_Attrs
	  { draw'object_oleDraw'class_id = possibleA fromAttrToStr "draw:class-id" as
	  , draw'object_oleDraw'style_name = possibleA fromAttrToStr "draw:style-name" as
	  , draw'object_olePresentation'style_name = possibleA fromAttrToStr "presentation:style-name" as
	  , draw'object_oleDraw'text_style_name = possibleA fromAttrToStr "draw:text-style-name" as
	  , draw'object_oleDraw'name = possibleA fromAttrToStr "draw:name" as
	  , draw'object_oleXlink'href = possibleA fromAttrToStr "xlink:href" as
	  , draw'object_oleXlink'type = possibleA fromAttrToTyp "xlink:type" as
	  , draw'object_oleXlink'show = possibleA fromAttrToTyp "xlink:show" as
	  , draw'object_oleXlink'actuate = possibleA fromAttrToTyp "xlink:actuate" as
	  , draw'object_oleText'anchor_type = possibleA fromAttrToTyp "text:anchor-type" as
	  , draw'object_oleText'anchor_page_number = possibleA fromAttrToStr "text:anchor-page-number" as
	  , draw'object_oleSvg'x = possibleA fromAttrToStr "svg:x" as
	  , draw'object_oleSvg'y = possibleA fromAttrToStr "svg:y" as
	  , draw'object_oleTable'end_cell_address = possibleA fromAttrToStr "table:end-cell-address" as
	  , draw'object_oleTable'end_x = possibleA fromAttrToStr "table:end-x" as
	  , draw'object_oleTable'end_y = possibleA fromAttrToStr "table:end-y" as
	  , draw'object_oleTable'table_background = possibleA fromAttrToTyp "table:table-background" as
	  , draw'object_oleSvg'width = possibleA fromAttrToStr "svg:width" as
	  , draw'object_oleSvg'height = possibleA fromAttrToStr "svg:height" as
	  , draw'object_olePresentation'class = possibleA fromAttrToTyp "presentation:class" as
	  , draw'object_olePresentation'placeholder = possibleA fromAttrToTyp "presentation:placeholder" as
	  , draw'object_olePresentation'user_transformed = possibleA fromAttrToTyp "presentation:user-transformed" as
	  , draw'object_oleDraw'z_index = possibleA fromAttrToStr "draw:z-index" as
	  , draw'object_oleDraw'id = possibleA fromAttrToStr "draw:id" as
	  , draw'object_oleDraw'layer = possibleA fromAttrToStr "draw:layer" as
	  , draw'object_oleStyle'rel_width = possibleA fromAttrToStr "style:rel-width" as
	  , draw'object_oleStyle'rel_height = possibleA fromAttrToStr "style:rel-height" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "draw:class-id" (draw'object_oleDraw'class_id v)
	, maybeToAttr toAttrFrStr "draw:style-name" (draw'object_oleDraw'style_name v)
	, maybeToAttr toAttrFrStr "presentation:style-name" (draw'object_olePresentation'style_name v)
	, maybeToAttr toAttrFrStr "draw:text-style-name" (draw'object_oleDraw'text_style_name v)
	, maybeToAttr toAttrFrStr "draw:name" (draw'object_oleDraw'name v)
	, maybeToAttr toAttrFrStr "xlink:href" (draw'object_oleXlink'href v)
	, maybeToAttr toAttrFrTyp "xlink:type" (draw'object_oleXlink'type v)
	, maybeToAttr toAttrFrTyp "xlink:show" (draw'object_oleXlink'show v)
	, maybeToAttr toAttrFrTyp "xlink:actuate" (draw'object_oleXlink'actuate v)
	, maybeToAttr toAttrFrTyp "text:anchor-type" (draw'object_oleText'anchor_type v)
	, maybeToAttr toAttrFrStr "text:anchor-page-number" (draw'object_oleText'anchor_page_number v)
	, maybeToAttr toAttrFrStr "svg:x" (draw'object_oleSvg'x v)
	, maybeToAttr toAttrFrStr "svg:y" (draw'object_oleSvg'y v)
	, maybeToAttr toAttrFrStr "table:end-cell-address" (draw'object_oleTable'end_cell_address v)
	, maybeToAttr toAttrFrStr "table:end-x" (draw'object_oleTable'end_x v)
	, maybeToAttr toAttrFrStr "table:end-y" (draw'object_oleTable'end_y v)
	, maybeToAttr toAttrFrTyp "table:table-background" (draw'object_oleTable'table_background v)
	, maybeToAttr toAttrFrStr "svg:width" (draw'object_oleSvg'width v)
	, maybeToAttr toAttrFrStr "svg:height" (draw'object_oleSvg'height v)
	, maybeToAttr toAttrFrTyp "presentation:class" (draw'object_olePresentation'class v)
	, maybeToAttr toAttrFrTyp "presentation:placeholder" (draw'object_olePresentation'placeholder v)
	, maybeToAttr toAttrFrTyp "presentation:user-transformed" (draw'object_olePresentation'user_transformed v)
	, maybeToAttr toAttrFrStr "draw:z-index" (draw'object_oleDraw'z_index v)
	, maybeToAttr toAttrFrStr "draw:id" (draw'object_oleDraw'id v)
	, maybeToAttr toAttrFrStr "draw:layer" (draw'object_oleDraw'layer v)
	, maybeToAttr toAttrFrStr "style:rel-width" (draw'object_oleStyle'rel_width v)
	, maybeToAttr toAttrFrStr "style:rel-height" (draw'object_oleStyle'rel_height v)
	]
instance XmlAttrType Draw'object_ole_xlink'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "simple" = Just Draw'object_ole_xlink'type_simple
	    translate _ = Nothing
    toAttrFrTyp n Draw'object_ole_xlink'type_simple = Just (n, str2attr "simple")
instance XmlAttrType Draw'object_ole_xlink'show where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "embed" = Just Draw'object_ole_xlink'show_embed
	    translate _ = Nothing
    toAttrFrTyp n Draw'object_ole_xlink'show_embed = Just (n, str2attr "embed")
instance XmlAttrType Draw'object_ole_xlink'actuate where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "onLoad" = Just Draw'object_ole_xlink'actuate_onLoad
	    translate _ = Nothing
    toAttrFrTyp n Draw'object_ole_xlink'actuate_onLoad = Just (n, str2attr "onLoad")
instance XmlAttrType Draw'object_ole_text'anchor_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "page" = Just Draw'object_ole_text'anchor_type_page
	    translate "frame" = Just Draw'object_ole_text'anchor_type_frame
	    translate "paragraph" = Just Draw'object_ole_text'anchor_type_paragraph
	    translate "char" = Just Draw'object_ole_text'anchor_type_char
	    translate "as-char" = Just Draw'object_ole_text'anchor_type_as_char
	    translate _ = Nothing
    toAttrFrTyp n Draw'object_ole_text'anchor_type_page = Just (n, str2attr "page")
    toAttrFrTyp n Draw'object_ole_text'anchor_type_frame = Just (n, str2attr "frame")
    toAttrFrTyp n Draw'object_ole_text'anchor_type_paragraph = Just (n, str2attr "paragraph")
    toAttrFrTyp n Draw'object_ole_text'anchor_type_char = Just (n, str2attr "char")
    toAttrFrTyp n Draw'object_ole_text'anchor_type_as_char = Just (n, str2attr "as-char")
instance XmlAttrType Draw'object_ole_table'table_background where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Draw'object_ole_table'table_background_true
	    translate "false" = Just Draw'object_ole_table'table_background_false
	    translate _ = Nothing
    toAttrFrTyp n Draw'object_ole_table'table_background_true = Just (n, str2attr "true")
    toAttrFrTyp n Draw'object_ole_table'table_background_false = Just (n, str2attr "false")
instance XmlAttrType Draw'object_ole_presentation'class where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "title" = Just Draw'object_ole_presentation'class_title
	    translate "outline" = Just Draw'object_ole_presentation'class_outline
	    translate "subtitle" = Just Draw'object_ole_presentation'class_subtitle
	    translate "text" = Just Draw'object_ole_presentation'class_text
	    translate "graphic" = Just Draw'object_ole_presentation'class_graphic
	    translate "object" = Just Draw'object_ole_presentation'class_object
	    translate "chart" = Just Draw'object_ole_presentation'class_chart
	    translate "table" = Just Draw'object_ole_presentation'class_table
	    translate "orgchart" = Just Draw'object_ole_presentation'class_orgchart
	    translate "page" = Just Draw'object_ole_presentation'class_page
	    translate "notes" = Just Draw'object_ole_presentation'class_notes
	    translate _ = Nothing
    toAttrFrTyp n Draw'object_ole_presentation'class_title = Just (n, str2attr "title")
    toAttrFrTyp n Draw'object_ole_presentation'class_outline = Just (n, str2attr "outline")
    toAttrFrTyp n Draw'object_ole_presentation'class_subtitle = Just (n, str2attr "subtitle")
    toAttrFrTyp n Draw'object_ole_presentation'class_text = Just (n, str2attr "text")
    toAttrFrTyp n Draw'object_ole_presentation'class_graphic = Just (n, str2attr "graphic")
    toAttrFrTyp n Draw'object_ole_presentation'class_object = Just (n, str2attr "object")
    toAttrFrTyp n Draw'object_ole_presentation'class_chart = Just (n, str2attr "chart")
    toAttrFrTyp n Draw'object_ole_presentation'class_table = Just (n, str2attr "table")
    toAttrFrTyp n Draw'object_ole_presentation'class_orgchart = Just (n, str2attr "orgchart")
    toAttrFrTyp n Draw'object_ole_presentation'class_page = Just (n, str2attr "page")
    toAttrFrTyp n Draw'object_ole_presentation'class_notes = Just (n, str2attr "notes")
instance XmlAttrType Draw'object_ole_presentation'placeholder where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Draw'object_ole_presentation'placeholder_true
	    translate "false" = Just Draw'object_ole_presentation'placeholder_false
	    translate _ = Nothing
    toAttrFrTyp n Draw'object_ole_presentation'placeholder_true = Just (n, str2attr "true")
    toAttrFrTyp n Draw'object_ole_presentation'placeholder_false = Just (n, str2attr "false")
instance XmlAttrType Draw'object_ole_presentation'user_transformed where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Draw'object_ole_presentation'user_transformed_true
	    translate "false" = Just Draw'object_ole_presentation'user_transformed_false
	    translate _ = Nothing
    toAttrFrTyp n Draw'object_ole_presentation'user_transformed_true = Just (n, str2attr "true")
    toAttrFrTyp n Draw'object_ole_presentation'user_transformed_false = Just (n, str2attr "false")
instance XmlContent Svg'desc where
    fromElem (CElem (Elem "svg:desc" [] c0):rest) =
	(\(a,ca)->
	   (Just (Svg'desc a), rest))
	(definite fromText "text" "svg:desc" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Svg'desc a) =
	[CElem (Elem "svg:desc" [] (toText a))]
instance XmlContent Draw'contour_polygon where
    fromElem (CElem (Elem "draw:contour-polygon" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "draw:contour-polygon" (toAttrs as) [])]
instance XmlAttributes Draw'contour_polygon where
    fromAttrs as =
	Draw'contour_polygon
	  { draw'contour_polygonSvg'width = definiteA fromAttrToStr "draw:contour-polygon" "svg:width" as
	  , draw'contour_polygonSvg'height = definiteA fromAttrToStr "draw:contour-polygon" "svg:height" as
	  , draw'contour_polygonSvg'viewBox = definiteA fromAttrToStr "draw:contour-polygon" "svg:viewBox" as
	  , draw'contour_polygonDraw'points = definiteA fromAttrToStr "draw:contour-polygon" "draw:points" as
	  , draw'contour_polygonDraw'recreate_on_edit = possibleA fromAttrToStr "draw:recreate-on-edit" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "svg:width" (draw'contour_polygonSvg'width v)
	, toAttrFrStr "svg:height" (draw'contour_polygonSvg'height v)
	, toAttrFrStr "svg:viewBox" (draw'contour_polygonSvg'viewBox v)
	, toAttrFrStr "draw:points" (draw'contour_polygonDraw'points v)
	, maybeToAttr toAttrFrStr "draw:recreate-on-edit" (draw'contour_polygonDraw'recreate_on_edit v)
	]
instance XmlContent Draw'contour_path where
    fromElem (CElem (Elem "draw:contour-path" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "draw:contour-path" (toAttrs as) [])]
instance XmlAttributes Draw'contour_path where
    fromAttrs as =
	Draw'contour_path
	  { draw'contour_pathSvg'width = definiteA fromAttrToStr "draw:contour-path" "svg:width" as
	  , draw'contour_pathSvg'height = definiteA fromAttrToStr "draw:contour-path" "svg:height" as
	  , draw'contour_pathSvg'viewBox = definiteA fromAttrToStr "draw:contour-path" "svg:viewBox" as
	  , draw'contour_pathSvg'd = definiteA fromAttrToStr "draw:contour-path" "svg:d" as
	  , draw'contour_pathDraw'recreate_on_edit = possibleA fromAttrToStr "draw:recreate-on-edit" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "svg:width" (draw'contour_pathSvg'width v)
	, toAttrFrStr "svg:height" (draw'contour_pathSvg'height v)
	, toAttrFrStr "svg:viewBox" (draw'contour_pathSvg'viewBox v)
	, toAttrFrStr "svg:d" (draw'contour_pathSvg'd v)
	, maybeToAttr toAttrFrStr "draw:recreate-on-edit" (draw'contour_pathDraw'recreate_on_edit v)
	]
instance XmlContent Draw'a where
    fromElem (CElem (Elem "draw:a" as c0):rest) =
	case (fromElem c0) of
	(Just a,_) -> (Just (Draw'aDraw'image (fromAttrs as) a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,_) -> (Just (Draw'aDraw'text_box (fromAttrs as) a), rest)
		(_,_) ->
		    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Draw'aDraw'image as a) = [CElem (Elem "draw:a" (toAttrs as) (toElem a) )]
    toElem (Draw'aDraw'text_box as a) = [CElem (Elem "draw:a" (toAttrs as) (toElem a) )]
instance XmlAttributes Draw'a_Attrs where
    fromAttrs as =
	Draw'a_Attrs
	  { draw'aXlink'href = definiteA fromAttrToStr "draw:a" "xlink:href" as
	  , draw'aXlink'type = defaultA fromAttrToTyp Draw'a_xlink'type_simple "xlink:type" as
	  , draw'aXlink'show = possibleA fromAttrToTyp "xlink:show" as
	  , draw'aXlink'actuate = defaultA fromAttrToTyp Draw'a_xlink'actuate_onRequest "xlink:actuate" as
	  , draw'aOffice'name = possibleA fromAttrToStr "office:name" as
	  , draw'aOffice'target_frame_name = possibleA fromAttrToStr "office:target-frame-name" as
	  , draw'aOffice'server_map = defaultA fromAttrToStr "false" "office:server-map" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "xlink:href" (draw'aXlink'href v)
	, defaultToAttr toAttrFrTyp "xlink:type" (draw'aXlink'type v)
	, maybeToAttr toAttrFrTyp "xlink:show" (draw'aXlink'show v)
	, defaultToAttr toAttrFrTyp "xlink:actuate" (draw'aXlink'actuate v)
	, maybeToAttr toAttrFrStr "office:name" (draw'aOffice'name v)
	, maybeToAttr toAttrFrStr "office:target-frame-name" (draw'aOffice'target_frame_name v)
	, defaultToAttr toAttrFrStr "office:server-map" (draw'aOffice'server_map v)
	]
instance XmlAttrType Draw'a_xlink'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "simple" = Just Draw'a_xlink'type_simple
	    translate _ = Nothing
    toAttrFrTyp n Draw'a_xlink'type_simple = Just (n, str2attr "simple")
instance XmlAttrType Draw'a_xlink'show where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "new" = Just Draw'a_xlink'show_new
	    translate "replace" = Just Draw'a_xlink'show_replace
	    translate _ = Nothing
    toAttrFrTyp n Draw'a_xlink'show_new = Just (n, str2attr "new")
    toAttrFrTyp n Draw'a_xlink'show_replace = Just (n, str2attr "replace")
instance XmlAttrType Draw'a_xlink'actuate where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "onRequest" = Just Draw'a_xlink'actuate_onRequest
	    translate _ = Nothing
    toAttrFrTyp n Draw'a_xlink'actuate_onRequest = Just (n, str2attr "onRequest")
instance XmlContent Dr3d'light where
    fromElem (CElem (Elem "dr3d:light" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "dr3d:light" (toAttrs as) [])]
instance XmlAttributes Dr3d'light where
    fromAttrs as =
	Dr3d'light
	  { dr3d'lightDr3d'diffuse_color = possibleA fromAttrToStr "dr3d:diffuse-color" as
	  , dr3d'lightDr3d'direction = definiteA fromAttrToStr "dr3d:light" "dr3d:direction" as
	  , dr3d'lightDr3d'enabled = possibleA fromAttrToStr "dr3d:enabled" as
	  , dr3d'lightDr3d'specular = possibleA fromAttrToStr "dr3d:specular" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "dr3d:diffuse-color" (dr3d'lightDr3d'diffuse_color v)
	, toAttrFrStr "dr3d:direction" (dr3d'lightDr3d'direction v)
	, maybeToAttr toAttrFrStr "dr3d:enabled" (dr3d'lightDr3d'enabled v)
	, maybeToAttr toAttrFrStr "dr3d:specular" (dr3d'lightDr3d'specular v)
	]
instance XmlContent Dr3d'cube where
    fromElem (CElem (Elem "dr3d:cube" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "dr3d:cube" (toAttrs as) [])]
instance XmlAttributes Dr3d'cube where
    fromAttrs as =
	Dr3d'cube
	  { dr3d'cubeDr3d'transform = possibleA fromAttrToStr "dr3d:transform" as
	  , dr3d'cubeDr3d'min_edge = possibleA fromAttrToStr "dr3d:min-edge" as
	  , dr3d'cubeDr3d'max_edge = possibleA fromAttrToStr "dr3d:max-edge" as
	  , dr3d'cubeDraw'z_index = possibleA fromAttrToStr "draw:z-index" as
	  , dr3d'cubeDraw'id = possibleA fromAttrToStr "draw:id" as
	  , dr3d'cubeTable'end_cell_address = possibleA fromAttrToStr "table:end-cell-address" as
	  , dr3d'cubeTable'end_x = possibleA fromAttrToStr "table:end-x" as
	  , dr3d'cubeTable'end_y = possibleA fromAttrToStr "table:end-y" as
	  , dr3d'cubeTable'table_background = possibleA fromAttrToTyp "table:table-background" as
	  , dr3d'cubeDraw'style_name = possibleA fromAttrToStr "draw:style-name" as
	  , dr3d'cubePresentation'style_name = possibleA fromAttrToStr "presentation:style-name" as
	  , dr3d'cubeDraw'text_style_name = possibleA fromAttrToStr "draw:text-style-name" as
	  , dr3d'cubeDraw'layer = possibleA fromAttrToStr "draw:layer" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "dr3d:transform" (dr3d'cubeDr3d'transform v)
	, maybeToAttr toAttrFrStr "dr3d:min-edge" (dr3d'cubeDr3d'min_edge v)
	, maybeToAttr toAttrFrStr "dr3d:max-edge" (dr3d'cubeDr3d'max_edge v)
	, maybeToAttr toAttrFrStr "draw:z-index" (dr3d'cubeDraw'z_index v)
	, maybeToAttr toAttrFrStr "draw:id" (dr3d'cubeDraw'id v)
	, maybeToAttr toAttrFrStr "table:end-cell-address" (dr3d'cubeTable'end_cell_address v)
	, maybeToAttr toAttrFrStr "table:end-x" (dr3d'cubeTable'end_x v)
	, maybeToAttr toAttrFrStr "table:end-y" (dr3d'cubeTable'end_y v)
	, maybeToAttr toAttrFrTyp "table:table-background" (dr3d'cubeTable'table_background v)
	, maybeToAttr toAttrFrStr "draw:style-name" (dr3d'cubeDraw'style_name v)
	, maybeToAttr toAttrFrStr "presentation:style-name" (dr3d'cubePresentation'style_name v)
	, maybeToAttr toAttrFrStr "draw:text-style-name" (dr3d'cubeDraw'text_style_name v)
	, maybeToAttr toAttrFrStr "draw:layer" (dr3d'cubeDraw'layer v)
	]
instance XmlAttrType Dr3d'cube_table'table_background where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Dr3d'cube_table'table_background_true
	    translate "false" = Just Dr3d'cube_table'table_background_false
	    translate _ = Nothing
    toAttrFrTyp n Dr3d'cube_table'table_background_true = Just (n, str2attr "true")
    toAttrFrTyp n Dr3d'cube_table'table_background_false = Just (n, str2attr "false")
instance XmlContent Dr3d'sphere where
    fromElem (CElem (Elem "dr3d:sphere" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "dr3d:sphere" (toAttrs as) [])]
instance XmlAttributes Dr3d'sphere where
    fromAttrs as =
	Dr3d'sphere
	  { dr3d'sphereDr3d'transform = possibleA fromAttrToStr "dr3d:transform" as
	  , dr3d'sphereDr3d'center = possibleA fromAttrToStr "dr3d:center" as
	  , dr3d'sphereDr3d'size = possibleA fromAttrToStr "dr3d:size" as
	  , dr3d'sphereDraw'z_index = possibleA fromAttrToStr "draw:z-index" as
	  , dr3d'sphereDraw'id = possibleA fromAttrToStr "draw:id" as
	  , dr3d'sphereTable'end_cell_address = possibleA fromAttrToStr "table:end-cell-address" as
	  , dr3d'sphereTable'end_x = possibleA fromAttrToStr "table:end-x" as
	  , dr3d'sphereTable'end_y = possibleA fromAttrToStr "table:end-y" as
	  , dr3d'sphereTable'table_background = possibleA fromAttrToTyp "table:table-background" as
	  , dr3d'sphereDraw'style_name = possibleA fromAttrToStr "draw:style-name" as
	  , dr3d'spherePresentation'style_name = possibleA fromAttrToStr "presentation:style-name" as
	  , dr3d'sphereDraw'text_style_name = possibleA fromAttrToStr "draw:text-style-name" as
	  , dr3d'sphereDraw'layer = possibleA fromAttrToStr "draw:layer" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "dr3d:transform" (dr3d'sphereDr3d'transform v)
	, maybeToAttr toAttrFrStr "dr3d:center" (dr3d'sphereDr3d'center v)
	, maybeToAttr toAttrFrStr "dr3d:size" (dr3d'sphereDr3d'size v)
	, maybeToAttr toAttrFrStr "draw:z-index" (dr3d'sphereDraw'z_index v)
	, maybeToAttr toAttrFrStr "draw:id" (dr3d'sphereDraw'id v)
	, maybeToAttr toAttrFrStr "table:end-cell-address" (dr3d'sphereTable'end_cell_address v)
	, maybeToAttr toAttrFrStr "table:end-x" (dr3d'sphereTable'end_x v)
	, maybeToAttr toAttrFrStr "table:end-y" (dr3d'sphereTable'end_y v)
	, maybeToAttr toAttrFrTyp "table:table-background" (dr3d'sphereTable'table_background v)
	, maybeToAttr toAttrFrStr "draw:style-name" (dr3d'sphereDraw'style_name v)
	, maybeToAttr toAttrFrStr "presentation:style-name" (dr3d'spherePresentation'style_name v)
	, maybeToAttr toAttrFrStr "draw:text-style-name" (dr3d'sphereDraw'text_style_name v)
	, maybeToAttr toAttrFrStr "draw:layer" (dr3d'sphereDraw'layer v)
	]
instance XmlAttrType Dr3d'sphere_table'table_background where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Dr3d'sphere_table'table_background_true
	    translate "false" = Just Dr3d'sphere_table'table_background_false
	    translate _ = Nothing
    toAttrFrTyp n Dr3d'sphere_table'table_background_true = Just (n, str2attr "true")
    toAttrFrTyp n Dr3d'sphere_table'table_background_false = Just (n, str2attr "false")
instance XmlContent Dr3d'extrude where
    fromElem (CElem (Elem "dr3d:extrude" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "dr3d:extrude" (toAttrs as) [])]
instance XmlAttributes Dr3d'extrude where
    fromAttrs as =
	Dr3d'extrude
	  { dr3d'extrudeDr3d'transform = possibleA fromAttrToStr "dr3d:transform" as
	  , dr3d'extrudeSvg'viewBox = definiteA fromAttrToStr "dr3d:extrude" "svg:viewBox" as
	  , dr3d'extrudeSvg'd = definiteA fromAttrToStr "dr3d:extrude" "svg:d" as
	  , dr3d'extrudeDraw'z_index = possibleA fromAttrToStr "draw:z-index" as
	  , dr3d'extrudeDraw'id = possibleA fromAttrToStr "draw:id" as
	  , dr3d'extrudeTable'end_cell_address = possibleA fromAttrToStr "table:end-cell-address" as
	  , dr3d'extrudeTable'end_x = possibleA fromAttrToStr "table:end-x" as
	  , dr3d'extrudeTable'end_y = possibleA fromAttrToStr "table:end-y" as
	  , dr3d'extrudeTable'table_background = possibleA fromAttrToTyp "table:table-background" as
	  , dr3d'extrudeDraw'style_name = possibleA fromAttrToStr "draw:style-name" as
	  , dr3d'extrudePresentation'style_name = possibleA fromAttrToStr "presentation:style-name" as
	  , dr3d'extrudeDraw'text_style_name = possibleA fromAttrToStr "draw:text-style-name" as
	  , dr3d'extrudeDraw'layer = possibleA fromAttrToStr "draw:layer" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "dr3d:transform" (dr3d'extrudeDr3d'transform v)
	, toAttrFrStr "svg:viewBox" (dr3d'extrudeSvg'viewBox v)
	, toAttrFrStr "svg:d" (dr3d'extrudeSvg'd v)
	, maybeToAttr toAttrFrStr "draw:z-index" (dr3d'extrudeDraw'z_index v)
	, maybeToAttr toAttrFrStr "draw:id" (dr3d'extrudeDraw'id v)
	, maybeToAttr toAttrFrStr "table:end-cell-address" (dr3d'extrudeTable'end_cell_address v)
	, maybeToAttr toAttrFrStr "table:end-x" (dr3d'extrudeTable'end_x v)
	, maybeToAttr toAttrFrStr "table:end-y" (dr3d'extrudeTable'end_y v)
	, maybeToAttr toAttrFrTyp "table:table-background" (dr3d'extrudeTable'table_background v)
	, maybeToAttr toAttrFrStr "draw:style-name" (dr3d'extrudeDraw'style_name v)
	, maybeToAttr toAttrFrStr "presentation:style-name" (dr3d'extrudePresentation'style_name v)
	, maybeToAttr toAttrFrStr "draw:text-style-name" (dr3d'extrudeDraw'text_style_name v)
	, maybeToAttr toAttrFrStr "draw:layer" (dr3d'extrudeDraw'layer v)
	]
instance XmlAttrType Dr3d'extrude_table'table_background where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Dr3d'extrude_table'table_background_true
	    translate "false" = Just Dr3d'extrude_table'table_background_false
	    translate _ = Nothing
    toAttrFrTyp n Dr3d'extrude_table'table_background_true = Just (n, str2attr "true")
    toAttrFrTyp n Dr3d'extrude_table'table_background_false = Just (n, str2attr "false")
instance XmlContent Dr3d'rotate where
    fromElem (CElem (Elem "dr3d:rotate" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "dr3d:rotate" (toAttrs as) [])]
instance XmlAttributes Dr3d'rotate where
    fromAttrs as =
	Dr3d'rotate
	  { dr3d'rotateDr3d'transform = possibleA fromAttrToStr "dr3d:transform" as
	  , dr3d'rotateSvg'viewBox = definiteA fromAttrToStr "dr3d:rotate" "svg:viewBox" as
	  , dr3d'rotateSvg'd = definiteA fromAttrToStr "dr3d:rotate" "svg:d" as
	  , dr3d'rotateDraw'z_index = possibleA fromAttrToStr "draw:z-index" as
	  , dr3d'rotateDraw'id = possibleA fromAttrToStr "draw:id" as
	  , dr3d'rotateTable'end_cell_address = possibleA fromAttrToStr "table:end-cell-address" as
	  , dr3d'rotateTable'end_x = possibleA fromAttrToStr "table:end-x" as
	  , dr3d'rotateTable'end_y = possibleA fromAttrToStr "table:end-y" as
	  , dr3d'rotateTable'table_background = possibleA fromAttrToTyp "table:table-background" as
	  , dr3d'rotateDraw'style_name = possibleA fromAttrToStr "draw:style-name" as
	  , dr3d'rotatePresentation'style_name = possibleA fromAttrToStr "presentation:style-name" as
	  , dr3d'rotateDraw'text_style_name = possibleA fromAttrToStr "draw:text-style-name" as
	  , dr3d'rotateDraw'layer = possibleA fromAttrToStr "draw:layer" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "dr3d:transform" (dr3d'rotateDr3d'transform v)
	, toAttrFrStr "svg:viewBox" (dr3d'rotateSvg'viewBox v)
	, toAttrFrStr "svg:d" (dr3d'rotateSvg'd v)
	, maybeToAttr toAttrFrStr "draw:z-index" (dr3d'rotateDraw'z_index v)
	, maybeToAttr toAttrFrStr "draw:id" (dr3d'rotateDraw'id v)
	, maybeToAttr toAttrFrStr "table:end-cell-address" (dr3d'rotateTable'end_cell_address v)
	, maybeToAttr toAttrFrStr "table:end-x" (dr3d'rotateTable'end_x v)
	, maybeToAttr toAttrFrStr "table:end-y" (dr3d'rotateTable'end_y v)
	, maybeToAttr toAttrFrTyp "table:table-background" (dr3d'rotateTable'table_background v)
	, maybeToAttr toAttrFrStr "draw:style-name" (dr3d'rotateDraw'style_name v)
	, maybeToAttr toAttrFrStr "presentation:style-name" (dr3d'rotatePresentation'style_name v)
	, maybeToAttr toAttrFrStr "draw:text-style-name" (dr3d'rotateDraw'text_style_name v)
	, maybeToAttr toAttrFrStr "draw:layer" (dr3d'rotateDraw'layer v)
	]
instance XmlAttrType Dr3d'rotate_table'table_background where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Dr3d'rotate_table'table_background_true
	    translate "false" = Just Dr3d'rotate_table'table_background_false
	    translate _ = Nothing
    toAttrFrTyp n Dr3d'rotate_table'table_background_true = Just (n, str2attr "true")
    toAttrFrTyp n Dr3d'rotate_table'table_background_false = Just (n, str2attr "false")
instance XmlContent Dr3d'scene where
    fromElem (CElem (Elem "dr3d:scene" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Dr3d'scene (fromAttrs as) a b), rest))
	   (many fromElem ca))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Dr3d'scene as a b) =
	[CElem (Elem "dr3d:scene" (toAttrs as) (concatMap toElem a ++
						concatMap toElem b))]
instance XmlAttributes Dr3d'scene_Attrs where
    fromAttrs as =
	Dr3d'scene_Attrs
	  { dr3d'sceneDraw'style_name = possibleA fromAttrToStr "draw:style-name" as
	  , dr3d'scenePresentation'style_name = possibleA fromAttrToStr "presentation:style-name" as
	  , dr3d'sceneDraw'text_style_name = possibleA fromAttrToStr "draw:text-style-name" as
	  , dr3d'sceneSvg'x = possibleA fromAttrToStr "svg:x" as
	  , dr3d'sceneSvg'y = possibleA fromAttrToStr "svg:y" as
	  , dr3d'sceneSvg'width = possibleA fromAttrToStr "svg:width" as
	  , dr3d'sceneSvg'height = possibleA fromAttrToStr "svg:height" as
	  , dr3d'sceneDr3d'vrp = possibleA fromAttrToStr "dr3d:vrp" as
	  , dr3d'sceneDr3d'vpn = possibleA fromAttrToStr "dr3d:vpn" as
	  , dr3d'sceneDr3d'vup = possibleA fromAttrToStr "dr3d:vup" as
	  , dr3d'sceneDr3d'projection = possibleA fromAttrToTyp "dr3d:projection" as
	  , dr3d'sceneDr3d'transform = possibleA fromAttrToStr "dr3d:transform" as
	  , dr3d'sceneDr3d'distance = possibleA fromAttrToStr "dr3d:distance" as
	  , dr3d'sceneDr3d'focal_length = possibleA fromAttrToStr "dr3d:focal-length" as
	  , dr3d'sceneDr3d'shadow_slant = possibleA fromAttrToStr "dr3d:shadow-slant" as
	  , dr3d'sceneDr3d'shade_mode = possibleA fromAttrToTyp "dr3d:shade-mode" as
	  , dr3d'sceneDr3d'ambient_color = possibleA fromAttrToStr "dr3d:ambient-color" as
	  , dr3d'sceneDr3d'lighting_mode = possibleA fromAttrToStr "dr3d:lighting-mode" as
	  , dr3d'sceneDraw'z_index = possibleA fromAttrToStr "draw:z-index" as
	  , dr3d'sceneDraw'id = possibleA fromAttrToStr "draw:id" as
	  , dr3d'sceneTable'end_cell_address = possibleA fromAttrToStr "table:end-cell-address" as
	  , dr3d'sceneTable'end_x = possibleA fromAttrToStr "table:end-x" as
	  , dr3d'sceneTable'end_y = possibleA fromAttrToStr "table:end-y" as
	  , dr3d'sceneTable'table_background = possibleA fromAttrToTyp "table:table-background" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "draw:style-name" (dr3d'sceneDraw'style_name v)
	, maybeToAttr toAttrFrStr "presentation:style-name" (dr3d'scenePresentation'style_name v)
	, maybeToAttr toAttrFrStr "draw:text-style-name" (dr3d'sceneDraw'text_style_name v)
	, maybeToAttr toAttrFrStr "svg:x" (dr3d'sceneSvg'x v)
	, maybeToAttr toAttrFrStr "svg:y" (dr3d'sceneSvg'y v)
	, maybeToAttr toAttrFrStr "svg:width" (dr3d'sceneSvg'width v)
	, maybeToAttr toAttrFrStr "svg:height" (dr3d'sceneSvg'height v)
	, maybeToAttr toAttrFrStr "dr3d:vrp" (dr3d'sceneDr3d'vrp v)
	, maybeToAttr toAttrFrStr "dr3d:vpn" (dr3d'sceneDr3d'vpn v)
	, maybeToAttr toAttrFrStr "dr3d:vup" (dr3d'sceneDr3d'vup v)
	, maybeToAttr toAttrFrTyp "dr3d:projection" (dr3d'sceneDr3d'projection v)
	, maybeToAttr toAttrFrStr "dr3d:transform" (dr3d'sceneDr3d'transform v)
	, maybeToAttr toAttrFrStr "dr3d:distance" (dr3d'sceneDr3d'distance v)
	, maybeToAttr toAttrFrStr "dr3d:focal-length" (dr3d'sceneDr3d'focal_length v)
	, maybeToAttr toAttrFrStr "dr3d:shadow-slant" (dr3d'sceneDr3d'shadow_slant v)
	, maybeToAttr toAttrFrTyp "dr3d:shade-mode" (dr3d'sceneDr3d'shade_mode v)
	, maybeToAttr toAttrFrStr "dr3d:ambient-color" (dr3d'sceneDr3d'ambient_color v)
	, maybeToAttr toAttrFrStr "dr3d:lighting-mode" (dr3d'sceneDr3d'lighting_mode v)
	, maybeToAttr toAttrFrStr "draw:z-index" (dr3d'sceneDraw'z_index v)
	, maybeToAttr toAttrFrStr "draw:id" (dr3d'sceneDraw'id v)
	, maybeToAttr toAttrFrStr "table:end-cell-address" (dr3d'sceneTable'end_cell_address v)
	, maybeToAttr toAttrFrStr "table:end-x" (dr3d'sceneTable'end_x v)
	, maybeToAttr toAttrFrStr "table:end-y" (dr3d'sceneTable'end_y v)
	, maybeToAttr toAttrFrTyp "table:table-background" (dr3d'sceneTable'table_background v)
	]
instance XmlAttrType Dr3d'scene_dr3d'projection where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "parallel" = Just Dr3d'scene_dr3d'projection_parallel
	    translate "perspective" = Just Dr3d'scene_dr3d'projection_perspective
	    translate _ = Nothing
    toAttrFrTyp n Dr3d'scene_dr3d'projection_parallel = Just (n, str2attr "parallel")
    toAttrFrTyp n Dr3d'scene_dr3d'projection_perspective = Just (n, str2attr "perspective")
instance XmlAttrType Dr3d'scene_dr3d'shade_mode where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "flat" = Just Dr3d'scene_dr3d'shade_mode_flat
	    translate "phong" = Just Dr3d'scene_dr3d'shade_mode_phong
	    translate "gouraud" = Just Dr3d'scene_dr3d'shade_mode_gouraud
	    translate "draft" = Just Dr3d'scene_dr3d'shade_mode_draft
	    translate _ = Nothing
    toAttrFrTyp n Dr3d'scene_dr3d'shade_mode_flat = Just (n, str2attr "flat")
    toAttrFrTyp n Dr3d'scene_dr3d'shade_mode_phong = Just (n, str2attr "phong")
    toAttrFrTyp n Dr3d'scene_dr3d'shade_mode_gouraud = Just (n, str2attr "gouraud")
    toAttrFrTyp n Dr3d'scene_dr3d'shade_mode_draft = Just (n, str2attr "draft")
instance XmlAttrType Dr3d'scene_table'table_background where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Dr3d'scene_table'table_background_true
	    translate "false" = Just Dr3d'scene_table'table_background_false
	    translate _ = Nothing
    toAttrFrTyp n Dr3d'scene_table'table_background_true = Just (n, str2attr "true")
    toAttrFrTyp n Dr3d'scene_table'table_background_false = Just (n, str2attr "false")
instance XmlContent Draw'layer_set where
    fromElem (CElem (Elem "draw:layer-set" [] c0):rest) =
	(\(a,ca)->
	   (Just (Draw'layer_set a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Draw'layer_set a) =
	[CElem (Elem "draw:layer-set" [] (concatMap toElem a))]
instance XmlContent Draw'layer where
    fromElem (CElem (Elem "draw:layer" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "draw:layer" (toAttrs as) [])]
instance XmlAttributes Draw'layer where
    fromAttrs as =
	Draw'layer
	  { draw'layerDraw'name = definiteA fromAttrToStr "draw:layer" "draw:name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "draw:name" (draw'layerDraw'name v)
	]
instance XmlContent Presentation'event where
    fromElem (CElem (Elem "presentation:event" as c0):rest) =
	(\(a,ca)->
	   (Just (Presentation'event (fromAttrs as) a), rest))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Presentation'event as a) =
	[CElem (Elem "presentation:event" (toAttrs as) (maybe [] toElem a))]
instance XmlAttributes Presentation'event_Attrs where
    fromAttrs as =
	Presentation'event_Attrs
	  { presentation'eventScript'event_name = definiteA fromAttrToStr "presentation:event" "script:event-name" as
	  , presentation'eventPresentation'action = definiteA fromAttrToTyp "presentation:event" "presentation:action" as
	  , presentation'eventPresentation'effect = defaultA fromAttrToTyp Presentation'event_presentation'effect_none "presentation:effect" as
	  , presentation'eventPresentation'direction = defaultA fromAttrToTyp Presentation'event_presentation'direction_none "presentation:direction" as
	  , presentation'eventPresentation'speed = defaultA fromAttrToTyp Presentation'event_presentation'speed_medium "presentation:speed" as
	  , presentation'eventPresentation'start_scale = defaultA fromAttrToStr "100%" "presentation:start-scale" as
	  , presentation'eventXlink'href = possibleA fromAttrToStr "xlink:href" as
	  , presentation'eventXlink'type = possibleA fromAttrToTyp "xlink:type" as
	  , presentation'eventXlink'show = possibleA fromAttrToTyp "xlink:show" as
	  , presentation'eventXlink'actuate = possibleA fromAttrToTyp "xlink:actuate" as
	  , presentation'eventPresentation'verb = possibleA fromAttrToStr "presentation:verb" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "script:event-name" (presentation'eventScript'event_name v)
	, toAttrFrTyp "presentation:action" (presentation'eventPresentation'action v)
	, defaultToAttr toAttrFrTyp "presentation:effect" (presentation'eventPresentation'effect v)
	, defaultToAttr toAttrFrTyp "presentation:direction" (presentation'eventPresentation'direction v)
	, defaultToAttr toAttrFrTyp "presentation:speed" (presentation'eventPresentation'speed v)
	, defaultToAttr toAttrFrStr "presentation:start-scale" (presentation'eventPresentation'start_scale v)
	, maybeToAttr toAttrFrStr "xlink:href" (presentation'eventXlink'href v)
	, maybeToAttr toAttrFrTyp "xlink:type" (presentation'eventXlink'type v)
	, maybeToAttr toAttrFrTyp "xlink:show" (presentation'eventXlink'show v)
	, maybeToAttr toAttrFrTyp "xlink:actuate" (presentation'eventXlink'actuate v)
	, maybeToAttr toAttrFrStr "presentation:verb" (presentation'eventPresentation'verb v)
	]
instance XmlAttrType Presentation'event_presentation'action where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Presentation'event_presentation'action_none
	    translate "previous-page" = Just Presentation'event_presentation'action_previous_page
	    translate "next-page" = Just Presentation'event_presentation'action_next_page
	    translate "first-page" = Just Presentation'event_presentation'action_first_page
	    translate "last-page" = Just Presentation'event_presentation'action_last_page
	    translate "hide" = Just Presentation'event_presentation'action_hide
	    translate "stop" = Just Presentation'event_presentation'action_stop
	    translate "execute" = Just Presentation'event_presentation'action_execute
	    translate "show" = Just Presentation'event_presentation'action_show
	    translate "verb" = Just Presentation'event_presentation'action_verb
	    translate "fade-out" = Just Presentation'event_presentation'action_fade_out
	    translate "sound" = Just Presentation'event_presentation'action_sound
	    translate _ = Nothing
    toAttrFrTyp n Presentation'event_presentation'action_none = Just (n, str2attr "none")
    toAttrFrTyp n Presentation'event_presentation'action_previous_page = Just (n, str2attr "previous-page")
    toAttrFrTyp n Presentation'event_presentation'action_next_page = Just (n, str2attr "next-page")
    toAttrFrTyp n Presentation'event_presentation'action_first_page = Just (n, str2attr "first-page")
    toAttrFrTyp n Presentation'event_presentation'action_last_page = Just (n, str2attr "last-page")
    toAttrFrTyp n Presentation'event_presentation'action_hide = Just (n, str2attr "hide")
    toAttrFrTyp n Presentation'event_presentation'action_stop = Just (n, str2attr "stop")
    toAttrFrTyp n Presentation'event_presentation'action_execute = Just (n, str2attr "execute")
    toAttrFrTyp n Presentation'event_presentation'action_show = Just (n, str2attr "show")
    toAttrFrTyp n Presentation'event_presentation'action_verb = Just (n, str2attr "verb")
    toAttrFrTyp n Presentation'event_presentation'action_fade_out = Just (n, str2attr "fade-out")
    toAttrFrTyp n Presentation'event_presentation'action_sound = Just (n, str2attr "sound")
instance XmlAttrType Presentation'event_presentation'effect where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Presentation'event_presentation'effect_none
	    translate "fade" = Just Presentation'event_presentation'effect_fade
	    translate "move" = Just Presentation'event_presentation'effect_move
	    translate "stripes" = Just Presentation'event_presentation'effect_stripes
	    translate "open" = Just Presentation'event_presentation'effect_open
	    translate "close" = Just Presentation'event_presentation'effect_close
	    translate "dissolve" = Just Presentation'event_presentation'effect_dissolve
	    translate "wavyline" = Just Presentation'event_presentation'effect_wavyline
	    translate "random" = Just Presentation'event_presentation'effect_random
	    translate "lines" = Just Presentation'event_presentation'effect_lines
	    translate "laser" = Just Presentation'event_presentation'effect_laser
	    translate "appear" = Just Presentation'event_presentation'effect_appear
	    translate "hide" = Just Presentation'event_presentation'effect_hide
	    translate "move-short" = Just Presentation'event_presentation'effect_move_short
	    translate "checkerboard" = Just Presentation'event_presentation'effect_checkerboard
	    translate "rotate" = Just Presentation'event_presentation'effect_rotate
	    translate "stretch" = Just Presentation'event_presentation'effect_stretch
	    translate _ = Nothing
    toAttrFrTyp n Presentation'event_presentation'effect_none = Just (n, str2attr "none")
    toAttrFrTyp n Presentation'event_presentation'effect_fade = Just (n, str2attr "fade")
    toAttrFrTyp n Presentation'event_presentation'effect_move = Just (n, str2attr "move")
    toAttrFrTyp n Presentation'event_presentation'effect_stripes = Just (n, str2attr "stripes")
    toAttrFrTyp n Presentation'event_presentation'effect_open = Just (n, str2attr "open")
    toAttrFrTyp n Presentation'event_presentation'effect_close = Just (n, str2attr "close")
    toAttrFrTyp n Presentation'event_presentation'effect_dissolve = Just (n, str2attr "dissolve")
    toAttrFrTyp n Presentation'event_presentation'effect_wavyline = Just (n, str2attr "wavyline")
    toAttrFrTyp n Presentation'event_presentation'effect_random = Just (n, str2attr "random")
    toAttrFrTyp n Presentation'event_presentation'effect_lines = Just (n, str2attr "lines")
    toAttrFrTyp n Presentation'event_presentation'effect_laser = Just (n, str2attr "laser")
    toAttrFrTyp n Presentation'event_presentation'effect_appear = Just (n, str2attr "appear")
    toAttrFrTyp n Presentation'event_presentation'effect_hide = Just (n, str2attr "hide")
    toAttrFrTyp n Presentation'event_presentation'effect_move_short = Just (n, str2attr "move-short")
    toAttrFrTyp n Presentation'event_presentation'effect_checkerboard = Just (n, str2attr "checkerboard")
    toAttrFrTyp n Presentation'event_presentation'effect_rotate = Just (n, str2attr "rotate")
    toAttrFrTyp n Presentation'event_presentation'effect_stretch = Just (n, str2attr "stretch")
instance XmlAttrType Presentation'event_presentation'direction where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Presentation'event_presentation'direction_none
	    translate "from-left" = Just Presentation'event_presentation'direction_from_left
	    translate "from-top" = Just Presentation'event_presentation'direction_from_top
	    translate "from-right" = Just Presentation'event_presentation'direction_from_right
	    translate "from-bottom" = Just Presentation'event_presentation'direction_from_bottom
	    translate "from-center" = Just Presentation'event_presentation'direction_from_center
	    translate "from-upper-left" = Just Presentation'event_presentation'direction_from_upper_left
	    translate "from-upper-right" = Just Presentation'event_presentation'direction_from_upper_right
	    translate "from-lower-left" = Just Presentation'event_presentation'direction_from_lower_left
	    translate "from-lower-right" = Just Presentation'event_presentation'direction_from_lower_right
	    translate "to-left" = Just Presentation'event_presentation'direction_to_left
	    translate "to-top" = Just Presentation'event_presentation'direction_to_top
	    translate "to-right" = Just Presentation'event_presentation'direction_to_right
	    translate "to-bottom" = Just Presentation'event_presentation'direction_to_bottom
	    translate "to-upper-left" = Just Presentation'event_presentation'direction_to_upper_left
	    translate "to-upper-right" = Just Presentation'event_presentation'direction_to_upper_right
	    translate "to-lower-right" = Just Presentation'event_presentation'direction_to_lower_right
	    translate "to-lower-left" = Just Presentation'event_presentation'direction_to_lower_left
	    translate "path" = Just Presentation'event_presentation'direction_path
	    translate "spiral-inward-left" = Just Presentation'event_presentation'direction_spiral_inward_left
	    translate "spiral-inward-right" = Just Presentation'event_presentation'direction_spiral_inward_right
	    translate "spiral-outward-left" = Just Presentation'event_presentation'direction_spiral_outward_left
	    translate "spiral-outward-right" = Just Presentation'event_presentation'direction_spiral_outward_right
	    translate "vertical" = Just Presentation'event_presentation'direction_vertical
	    translate "horizontal" = Just Presentation'event_presentation'direction_horizontal
	    translate "to-center" = Just Presentation'event_presentation'direction_to_center
	    translate "clockwise" = Just Presentation'event_presentation'direction_clockwise
	    translate "counter-clockwise" = Just Presentation'event_presentation'direction_counter_clockwise
	    translate _ = Nothing
    toAttrFrTyp n Presentation'event_presentation'direction_none = Just (n, str2attr "none")
    toAttrFrTyp n Presentation'event_presentation'direction_from_left = Just (n, str2attr "from-left")
    toAttrFrTyp n Presentation'event_presentation'direction_from_top = Just (n, str2attr "from-top")
    toAttrFrTyp n Presentation'event_presentation'direction_from_right = Just (n, str2attr "from-right")
    toAttrFrTyp n Presentation'event_presentation'direction_from_bottom = Just (n, str2attr "from-bottom")
    toAttrFrTyp n Presentation'event_presentation'direction_from_center = Just (n, str2attr "from-center")
    toAttrFrTyp n Presentation'event_presentation'direction_from_upper_left = Just (n, str2attr "from-upper-left")
    toAttrFrTyp n Presentation'event_presentation'direction_from_upper_right = Just (n, str2attr "from-upper-right")
    toAttrFrTyp n Presentation'event_presentation'direction_from_lower_left = Just (n, str2attr "from-lower-left")
    toAttrFrTyp n Presentation'event_presentation'direction_from_lower_right = Just (n, str2attr "from-lower-right")
    toAttrFrTyp n Presentation'event_presentation'direction_to_left = Just (n, str2attr "to-left")
    toAttrFrTyp n Presentation'event_presentation'direction_to_top = Just (n, str2attr "to-top")
    toAttrFrTyp n Presentation'event_presentation'direction_to_right = Just (n, str2attr "to-right")
    toAttrFrTyp n Presentation'event_presentation'direction_to_bottom = Just (n, str2attr "to-bottom")
    toAttrFrTyp n Presentation'event_presentation'direction_to_upper_left = Just (n, str2attr "to-upper-left")
    toAttrFrTyp n Presentation'event_presentation'direction_to_upper_right = Just (n, str2attr "to-upper-right")
    toAttrFrTyp n Presentation'event_presentation'direction_to_lower_right = Just (n, str2attr "to-lower-right")
    toAttrFrTyp n Presentation'event_presentation'direction_to_lower_left = Just (n, str2attr "to-lower-left")
    toAttrFrTyp n Presentation'event_presentation'direction_path = Just (n, str2attr "path")
    toAttrFrTyp n Presentation'event_presentation'direction_spiral_inward_left = Just (n, str2attr "spiral-inward-left")
    toAttrFrTyp n Presentation'event_presentation'direction_spiral_inward_right = Just (n, str2attr "spiral-inward-right")
    toAttrFrTyp n Presentation'event_presentation'direction_spiral_outward_left = Just (n, str2attr "spiral-outward-left")
    toAttrFrTyp n Presentation'event_presentation'direction_spiral_outward_right = Just (n, str2attr "spiral-outward-right")
    toAttrFrTyp n Presentation'event_presentation'direction_vertical = Just (n, str2attr "vertical")
    toAttrFrTyp n Presentation'event_presentation'direction_horizontal = Just (n, str2attr "horizontal")
    toAttrFrTyp n Presentation'event_presentation'direction_to_center = Just (n, str2attr "to-center")
    toAttrFrTyp n Presentation'event_presentation'direction_clockwise = Just (n, str2attr "clockwise")
    toAttrFrTyp n Presentation'event_presentation'direction_counter_clockwise = Just (n, str2attr "counter-clockwise")
instance XmlAttrType Presentation'event_presentation'speed where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "slow" = Just Presentation'event_presentation'speed_slow
	    translate "medium" = Just Presentation'event_presentation'speed_medium
	    translate "fast" = Just Presentation'event_presentation'speed_fast
	    translate _ = Nothing
    toAttrFrTyp n Presentation'event_presentation'speed_slow = Just (n, str2attr "slow")
    toAttrFrTyp n Presentation'event_presentation'speed_medium = Just (n, str2attr "medium")
    toAttrFrTyp n Presentation'event_presentation'speed_fast = Just (n, str2attr "fast")
instance XmlAttrType Presentation'event_xlink'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "simple" = Just Presentation'event_xlink'type_simple
	    translate _ = Nothing
    toAttrFrTyp n Presentation'event_xlink'type_simple = Just (n, str2attr "simple")
instance XmlAttrType Presentation'event_xlink'show where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "embed" = Just Presentation'event_xlink'show_embed
	    translate _ = Nothing
    toAttrFrTyp n Presentation'event_xlink'show_embed = Just (n, str2attr "embed")
instance XmlAttrType Presentation'event_xlink'actuate where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "onRequest" = Just Presentation'event_xlink'actuate_onRequest
	    translate _ = Nothing
    toAttrFrTyp n Presentation'event_xlink'actuate_onRequest = Just (n, str2attr "onRequest")
instance XmlContent Draw'applet where
    fromElem (CElem (Elem "draw:applet" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (Just (Draw'applet (fromAttrs as) a b c), rest))
	      (fromElem cb))
	   (many fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Draw'applet as a b c) =
	[CElem (Elem "draw:applet" (toAttrs as) (maybe [] toElem a ++
						 concatMap toElem b ++ maybe [] toElem c))]
instance XmlAttributes Draw'applet_Attrs where
    fromAttrs as =
	Draw'applet_Attrs
	  { draw'appletXlink'href = possibleA fromAttrToStr "xlink:href" as
	  , draw'appletXlink'type = possibleA fromAttrToTyp "xlink:type" as
	  , draw'appletXlink'show = possibleA fromAttrToTyp "xlink:show" as
	  , draw'appletXlink'actuate = possibleA fromAttrToTyp "xlink:actuate" as
	  , draw'appletDraw'code = definiteA fromAttrToStr "draw:applet" "draw:code" as
	  , draw'appletDraw'object = possibleA fromAttrToStr "draw:object" as
	  , draw'appletDraw'archive = possibleA fromAttrToStr "draw:archive" as
	  , draw'appletDraw'may_script = defaultA fromAttrToStr "false" "draw:may-script" as
	  , draw'appletDraw'name = possibleA fromAttrToStr "draw:name" as
	  , draw'appletDraw'style_name = possibleA fromAttrToStr "draw:style-name" as
	  , draw'appletPresentation'style_name = possibleA fromAttrToStr "presentation:style-name" as
	  , draw'appletDraw'text_style_name = possibleA fromAttrToStr "draw:text-style-name" as
	  , draw'appletSvg'width = possibleA fromAttrToStr "svg:width" as
	  , draw'appletSvg'height = possibleA fromAttrToStr "svg:height" as
	  , draw'appletDraw'z_index = possibleA fromAttrToStr "draw:z-index" as
	  , draw'appletDraw'layer = possibleA fromAttrToStr "draw:layer" as
	  , draw'appletSvg'x = possibleA fromAttrToStr "svg:x" as
	  , draw'appletSvg'y = possibleA fromAttrToStr "svg:y" as
	  , draw'appletTable'end_cell_address = possibleA fromAttrToStr "table:end-cell-address" as
	  , draw'appletTable'end_x = possibleA fromAttrToStr "table:end-x" as
	  , draw'appletTable'end_y = possibleA fromAttrToStr "table:end-y" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "xlink:href" (draw'appletXlink'href v)
	, maybeToAttr toAttrFrTyp "xlink:type" (draw'appletXlink'type v)
	, maybeToAttr toAttrFrTyp "xlink:show" (draw'appletXlink'show v)
	, maybeToAttr toAttrFrTyp "xlink:actuate" (draw'appletXlink'actuate v)
	, toAttrFrStr "draw:code" (draw'appletDraw'code v)
	, maybeToAttr toAttrFrStr "draw:object" (draw'appletDraw'object v)
	, maybeToAttr toAttrFrStr "draw:archive" (draw'appletDraw'archive v)
	, defaultToAttr toAttrFrStr "draw:may-script" (draw'appletDraw'may_script v)
	, maybeToAttr toAttrFrStr "draw:name" (draw'appletDraw'name v)
	, maybeToAttr toAttrFrStr "draw:style-name" (draw'appletDraw'style_name v)
	, maybeToAttr toAttrFrStr "presentation:style-name" (draw'appletPresentation'style_name v)
	, maybeToAttr toAttrFrStr "draw:text-style-name" (draw'appletDraw'text_style_name v)
	, maybeToAttr toAttrFrStr "svg:width" (draw'appletSvg'width v)
	, maybeToAttr toAttrFrStr "svg:height" (draw'appletSvg'height v)
	, maybeToAttr toAttrFrStr "draw:z-index" (draw'appletDraw'z_index v)
	, maybeToAttr toAttrFrStr "draw:layer" (draw'appletDraw'layer v)
	, maybeToAttr toAttrFrStr "svg:x" (draw'appletSvg'x v)
	, maybeToAttr toAttrFrStr "svg:y" (draw'appletSvg'y v)
	, maybeToAttr toAttrFrStr "table:end-cell-address" (draw'appletTable'end_cell_address v)
	, maybeToAttr toAttrFrStr "table:end-x" (draw'appletTable'end_x v)
	, maybeToAttr toAttrFrStr "table:end-y" (draw'appletTable'end_y v)
	]
instance XmlAttrType Draw'applet_xlink'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "simple" = Just Draw'applet_xlink'type_simple
	    translate _ = Nothing
    toAttrFrTyp n Draw'applet_xlink'type_simple = Just (n, str2attr "simple")
instance XmlAttrType Draw'applet_xlink'show where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "embed" = Just Draw'applet_xlink'show_embed
	    translate _ = Nothing
    toAttrFrTyp n Draw'applet_xlink'show_embed = Just (n, str2attr "embed")
instance XmlAttrType Draw'applet_xlink'actuate where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "onLoad" = Just Draw'applet_xlink'actuate_onLoad
	    translate _ = Nothing
    toAttrFrTyp n Draw'applet_xlink'actuate_onLoad = Just (n, str2attr "onLoad")
instance XmlContent Draw'plugin where
    fromElem (CElem (Elem "draw:plugin" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (Just (Draw'plugin (fromAttrs as) a b c), rest))
	      (fromElem cb))
	   (many fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Draw'plugin as a b c) =
	[CElem (Elem "draw:plugin" (toAttrs as) (maybe [] toElem a ++
						 concatMap toElem b ++ maybe [] toElem c))]
instance XmlAttributes Draw'plugin_Attrs where
    fromAttrs as =
	Draw'plugin_Attrs
	  { draw'pluginXlink'href = possibleA fromAttrToStr "xlink:href" as
	  , draw'pluginXlink'type = possibleA fromAttrToTyp "xlink:type" as
	  , draw'pluginXlink'show = possibleA fromAttrToTyp "xlink:show" as
	  , draw'pluginXlink'actuate = possibleA fromAttrToTyp "xlink:actuate" as
	  , draw'pluginDraw'mime_type = possibleA fromAttrToStr "draw:mime-type" as
	  , draw'pluginDraw'name = possibleA fromAttrToStr "draw:name" as
	  , draw'pluginDraw'style_name = possibleA fromAttrToStr "draw:style-name" as
	  , draw'pluginPresentation'style_name = possibleA fromAttrToStr "presentation:style-name" as
	  , draw'pluginDraw'text_style_name = possibleA fromAttrToStr "draw:text-style-name" as
	  , draw'pluginSvg'width = possibleA fromAttrToStr "svg:width" as
	  , draw'pluginSvg'height = possibleA fromAttrToStr "svg:height" as
	  , draw'pluginDraw'z_index = possibleA fromAttrToStr "draw:z-index" as
	  , draw'pluginDraw'layer = possibleA fromAttrToStr "draw:layer" as
	  , draw'pluginSvg'x = possibleA fromAttrToStr "svg:x" as
	  , draw'pluginSvg'y = possibleA fromAttrToStr "svg:y" as
	  , draw'pluginTable'end_cell_address = possibleA fromAttrToStr "table:end-cell-address" as
	  , draw'pluginTable'end_x = possibleA fromAttrToStr "table:end-x" as
	  , draw'pluginTable'end_y = possibleA fromAttrToStr "table:end-y" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "xlink:href" (draw'pluginXlink'href v)
	, maybeToAttr toAttrFrTyp "xlink:type" (draw'pluginXlink'type v)
	, maybeToAttr toAttrFrTyp "xlink:show" (draw'pluginXlink'show v)
	, maybeToAttr toAttrFrTyp "xlink:actuate" (draw'pluginXlink'actuate v)
	, maybeToAttr toAttrFrStr "draw:mime-type" (draw'pluginDraw'mime_type v)
	, maybeToAttr toAttrFrStr "draw:name" (draw'pluginDraw'name v)
	, maybeToAttr toAttrFrStr "draw:style-name" (draw'pluginDraw'style_name v)
	, maybeToAttr toAttrFrStr "presentation:style-name" (draw'pluginPresentation'style_name v)
	, maybeToAttr toAttrFrStr "draw:text-style-name" (draw'pluginDraw'text_style_name v)
	, maybeToAttr toAttrFrStr "svg:width" (draw'pluginSvg'width v)
	, maybeToAttr toAttrFrStr "svg:height" (draw'pluginSvg'height v)
	, maybeToAttr toAttrFrStr "draw:z-index" (draw'pluginDraw'z_index v)
	, maybeToAttr toAttrFrStr "draw:layer" (draw'pluginDraw'layer v)
	, maybeToAttr toAttrFrStr "svg:x" (draw'pluginSvg'x v)
	, maybeToAttr toAttrFrStr "svg:y" (draw'pluginSvg'y v)
	, maybeToAttr toAttrFrStr "table:end-cell-address" (draw'pluginTable'end_cell_address v)
	, maybeToAttr toAttrFrStr "table:end-x" (draw'pluginTable'end_x v)
	, maybeToAttr toAttrFrStr "table:end-y" (draw'pluginTable'end_y v)
	]
instance XmlAttrType Draw'plugin_xlink'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "simple" = Just Draw'plugin_xlink'type_simple
	    translate _ = Nothing
    toAttrFrTyp n Draw'plugin_xlink'type_simple = Just (n, str2attr "simple")
instance XmlAttrType Draw'plugin_xlink'show where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "embed" = Just Draw'plugin_xlink'show_embed
	    translate _ = Nothing
    toAttrFrTyp n Draw'plugin_xlink'show_embed = Just (n, str2attr "embed")
instance XmlAttrType Draw'plugin_xlink'actuate where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "onLoad" = Just Draw'plugin_xlink'actuate_onLoad
	    translate _ = Nothing
    toAttrFrTyp n Draw'plugin_xlink'actuate_onLoad = Just (n, str2attr "onLoad")
instance XmlContent Draw'param where
    fromElem (CElem (Elem "draw:param" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "draw:param" (toAttrs as) [])]
instance XmlAttributes Draw'param where
    fromAttrs as =
	Draw'param
	  { draw'paramDraw'name = possibleA fromAttrToStr "draw:name" as
	  , draw'paramDraw'value = possibleA fromAttrToStr "draw:value" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "draw:name" (draw'paramDraw'name v)
	, maybeToAttr toAttrFrStr "draw:value" (draw'paramDraw'value v)
	]
instance XmlContent Draw'floating_frame where
    fromElem (CElem (Elem "draw:floating-frame" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Draw'floating_frame (fromAttrs as) a b), rest))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Draw'floating_frame as a b) =
	[CElem (Elem "draw:floating-frame" (toAttrs as) (maybe [] toElem a
							 ++ maybe [] toElem b))]
instance XmlAttributes Draw'floating_frame_Attrs where
    fromAttrs as =
	Draw'floating_frame_Attrs
	  { draw'floating_frameXlink'href = possibleA fromAttrToStr "xlink:href" as
	  , draw'floating_frameXlink'type = possibleA fromAttrToTyp "xlink:type" as
	  , draw'floating_frameXlink'show = possibleA fromAttrToTyp "xlink:show" as
	  , draw'floating_frameXlink'actuate = possibleA fromAttrToTyp "xlink:actuate" as
	  , draw'floating_frameDraw'name = possibleA fromAttrToStr "draw:name" as
	  , draw'floating_frameDraw'frame_name = possibleA fromAttrToStr "draw:frame-name" as
	  , draw'floating_frameDraw'style_name = possibleA fromAttrToStr "draw:style-name" as
	  , draw'floating_framePresentation'style_name = possibleA fromAttrToStr "presentation:style-name" as
	  , draw'floating_frameDraw'text_style_name = possibleA fromAttrToStr "draw:text-style-name" as
	  , draw'floating_frameSvg'width = possibleA fromAttrToStr "svg:width" as
	  , draw'floating_frameSvg'height = possibleA fromAttrToStr "svg:height" as
	  , draw'floating_frameDraw'z_index = possibleA fromAttrToStr "draw:z-index" as
	  , draw'floating_frameDraw'layer = possibleA fromAttrToStr "draw:layer" as
	  , draw'floating_frameSvg'x = possibleA fromAttrToStr "svg:x" as
	  , draw'floating_frameSvg'y = possibleA fromAttrToStr "svg:y" as
	  , draw'floating_frameTable'end_cell_address = possibleA fromAttrToStr "table:end-cell-address" as
	  , draw'floating_frameTable'end_x = possibleA fromAttrToStr "table:end-x" as
	  , draw'floating_frameTable'end_y = possibleA fromAttrToStr "table:end-y" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "xlink:href" (draw'floating_frameXlink'href v)
	, maybeToAttr toAttrFrTyp "xlink:type" (draw'floating_frameXlink'type v)
	, maybeToAttr toAttrFrTyp "xlink:show" (draw'floating_frameXlink'show v)
	, maybeToAttr toAttrFrTyp "xlink:actuate" (draw'floating_frameXlink'actuate v)
	, maybeToAttr toAttrFrStr "draw:name" (draw'floating_frameDraw'name v)
	, maybeToAttr toAttrFrStr "draw:frame-name" (draw'floating_frameDraw'frame_name v)
	, maybeToAttr toAttrFrStr "draw:style-name" (draw'floating_frameDraw'style_name v)
	, maybeToAttr toAttrFrStr "presentation:style-name" (draw'floating_framePresentation'style_name v)
	, maybeToAttr toAttrFrStr "draw:text-style-name" (draw'floating_frameDraw'text_style_name v)
	, maybeToAttr toAttrFrStr "svg:width" (draw'floating_frameSvg'width v)
	, maybeToAttr toAttrFrStr "svg:height" (draw'floating_frameSvg'height v)
	, maybeToAttr toAttrFrStr "draw:z-index" (draw'floating_frameDraw'z_index v)
	, maybeToAttr toAttrFrStr "draw:layer" (draw'floating_frameDraw'layer v)
	, maybeToAttr toAttrFrStr "svg:x" (draw'floating_frameSvg'x v)
	, maybeToAttr toAttrFrStr "svg:y" (draw'floating_frameSvg'y v)
	, maybeToAttr toAttrFrStr "table:end-cell-address" (draw'floating_frameTable'end_cell_address v)
	, maybeToAttr toAttrFrStr "table:end-x" (draw'floating_frameTable'end_x v)
	, maybeToAttr toAttrFrStr "table:end-y" (draw'floating_frameTable'end_y v)
	]
instance XmlAttrType Draw'floating_frame_xlink'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "simple" = Just Draw'floating_frame_xlink'type_simple
	    translate _ = Nothing
    toAttrFrTyp n Draw'floating_frame_xlink'type_simple = Just (n, str2attr "simple")
instance XmlAttrType Draw'floating_frame_xlink'show where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "embed" = Just Draw'floating_frame_xlink'show_embed
	    translate _ = Nothing
    toAttrFrTyp n Draw'floating_frame_xlink'show_embed = Just (n, str2attr "embed")
instance XmlAttrType Draw'floating_frame_xlink'actuate where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "onLoad" = Just Draw'floating_frame_xlink'actuate_onLoad
	    translate _ = Nothing
    toAttrFrTyp n Draw'floating_frame_xlink'actuate_onLoad = Just (n, str2attr "onLoad")
instance XmlContent Draw'image_map where
    fromElem (CElem (Elem "draw:image-map" [] c0):rest) =
	(\(a,ca)->
	   (Just (Draw'image_map a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Draw'image_map a) =
	[CElem (Elem "draw:image-map" [] (concatMap toElem a))]
instance XmlContent Draw'image_map_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Draw'image_map_Draw'area_rectangle a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Draw'image_map_Draw'area_circle a), rest)
		(_,_) ->
			case (fromElem c0) of
			(Just a,rest) -> (Just (Draw'image_map_Draw'area_polygon a), rest)
			(_,_) ->
			    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Draw'image_map_Draw'area_rectangle a) = toElem a
    toElem (Draw'image_map_Draw'area_circle a) = toElem a
    toElem (Draw'image_map_Draw'area_polygon a) = toElem a
instance XmlContent Draw'area_rectangle where
    fromElem (CElem (Elem "draw:area-rectangle" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Draw'area_rectangle (fromAttrs as) a b), rest))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Draw'area_rectangle as a b) =
	[CElem (Elem "draw:area-rectangle" (toAttrs as) (maybe [] toElem a
							 ++ maybe [] toElem b))]
instance XmlAttributes Draw'area_rectangle_Attrs where
    fromAttrs as =
	Draw'area_rectangle_Attrs
	  { draw'area_rectangleXlink'href = possibleA fromAttrToStr "xlink:href" as
	  , draw'area_rectangleXlink'type = possibleA fromAttrToTyp "xlink:type" as
	  , draw'area_rectangleOffice'target_frame_name = possibleA fromAttrToStr "office:target-frame-name" as
	  , draw'area_rectangleXlink'show = possibleA fromAttrToTyp "xlink:show" as
	  , draw'area_rectangleOffice'name = possibleA fromAttrToStr "office:name" as
	  , draw'area_rectangleDraw'nohref = possibleA fromAttrToTyp "draw:nohref" as
	  , draw'area_rectangleSvg'x = definiteA fromAttrToStr "draw:area-rectangle" "svg:x" as
	  , draw'area_rectangleSvg'y = definiteA fromAttrToStr "draw:area-rectangle" "svg:y" as
	  , draw'area_rectangleSvg'width = definiteA fromAttrToStr "draw:area-rectangle" "svg:width" as
	  , draw'area_rectangleSvg'height = definiteA fromAttrToStr "draw:area-rectangle" "svg:height" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "xlink:href" (draw'area_rectangleXlink'href v)
	, maybeToAttr toAttrFrTyp "xlink:type" (draw'area_rectangleXlink'type v)
	, maybeToAttr toAttrFrStr "office:target-frame-name" (draw'area_rectangleOffice'target_frame_name v)
	, maybeToAttr toAttrFrTyp "xlink:show" (draw'area_rectangleXlink'show v)
	, maybeToAttr toAttrFrStr "office:name" (draw'area_rectangleOffice'name v)
	, maybeToAttr toAttrFrTyp "draw:nohref" (draw'area_rectangleDraw'nohref v)
	, toAttrFrStr "svg:x" (draw'area_rectangleSvg'x v)
	, toAttrFrStr "svg:y" (draw'area_rectangleSvg'y v)
	, toAttrFrStr "svg:width" (draw'area_rectangleSvg'width v)
	, toAttrFrStr "svg:height" (draw'area_rectangleSvg'height v)
	]
instance XmlAttrType Draw'area_rectangle_xlink'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "simple" = Just Draw'area_rectangle_xlink'type_simple
	    translate _ = Nothing
    toAttrFrTyp n Draw'area_rectangle_xlink'type_simple = Just (n, str2attr "simple")
instance XmlAttrType Draw'area_rectangle_xlink'show where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "new" = Just Draw'area_rectangle_xlink'show_new
	    translate "replace" = Just Draw'area_rectangle_xlink'show_replace
	    translate _ = Nothing
    toAttrFrTyp n Draw'area_rectangle_xlink'show_new = Just (n, str2attr "new")
    toAttrFrTyp n Draw'area_rectangle_xlink'show_replace = Just (n, str2attr "replace")
instance XmlAttrType Draw'area_rectangle_draw'nohref where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "nohref" = Just Draw'area_rectangle_draw'nohref_nohref
	    translate _ = Nothing
    toAttrFrTyp n Draw'area_rectangle_draw'nohref_nohref = Just (n, str2attr "nohref")
instance XmlContent Draw'area_circle where
    fromElem (CElem (Elem "draw:area-circle" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Draw'area_circle (fromAttrs as) a b), rest))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Draw'area_circle as a b) =
	[CElem (Elem "draw:area-circle" (toAttrs as) (maybe [] toElem a ++
						      maybe [] toElem b))]
instance XmlAttributes Draw'area_circle_Attrs where
    fromAttrs as =
	Draw'area_circle_Attrs
	  { draw'area_circleXlink'href = possibleA fromAttrToStr "xlink:href" as
	  , draw'area_circleXlink'type = possibleA fromAttrToTyp "xlink:type" as
	  , draw'area_circleOffice'target_frame_name = possibleA fromAttrToStr "office:target-frame-name" as
	  , draw'area_circleXlink'show = possibleA fromAttrToTyp "xlink:show" as
	  , draw'area_circleOffice'name = possibleA fromAttrToStr "office:name" as
	  , draw'area_circleDraw'nohref = possibleA fromAttrToTyp "draw:nohref" as
	  , draw'area_circleSvg'cx = definiteA fromAttrToStr "draw:area-circle" "svg:cx" as
	  , draw'area_circleSvg'cy = definiteA fromAttrToStr "draw:area-circle" "svg:cy" as
	  , draw'area_circleSvg'r = definiteA fromAttrToStr "draw:area-circle" "svg:r" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "xlink:href" (draw'area_circleXlink'href v)
	, maybeToAttr toAttrFrTyp "xlink:type" (draw'area_circleXlink'type v)
	, maybeToAttr toAttrFrStr "office:target-frame-name" (draw'area_circleOffice'target_frame_name v)
	, maybeToAttr toAttrFrTyp "xlink:show" (draw'area_circleXlink'show v)
	, maybeToAttr toAttrFrStr "office:name" (draw'area_circleOffice'name v)
	, maybeToAttr toAttrFrTyp "draw:nohref" (draw'area_circleDraw'nohref v)
	, toAttrFrStr "svg:cx" (draw'area_circleSvg'cx v)
	, toAttrFrStr "svg:cy" (draw'area_circleSvg'cy v)
	, toAttrFrStr "svg:r" (draw'area_circleSvg'r v)
	]
instance XmlAttrType Draw'area_circle_xlink'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "simple" = Just Draw'area_circle_xlink'type_simple
	    translate _ = Nothing
    toAttrFrTyp n Draw'area_circle_xlink'type_simple = Just (n, str2attr "simple")
instance XmlAttrType Draw'area_circle_xlink'show where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "new" = Just Draw'area_circle_xlink'show_new
	    translate "replace" = Just Draw'area_circle_xlink'show_replace
	    translate _ = Nothing
    toAttrFrTyp n Draw'area_circle_xlink'show_new = Just (n, str2attr "new")
    toAttrFrTyp n Draw'area_circle_xlink'show_replace = Just (n, str2attr "replace")
instance XmlAttrType Draw'area_circle_draw'nohref where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "nohref" = Just Draw'area_circle_draw'nohref_nohref
	    translate _ = Nothing
    toAttrFrTyp n Draw'area_circle_draw'nohref_nohref = Just (n, str2attr "nohref")
instance XmlContent Draw'area_polygon where
    fromElem (CElem (Elem "draw:area-polygon" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Draw'area_polygon (fromAttrs as) a b), rest))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Draw'area_polygon as a b) =
	[CElem (Elem "draw:area-polygon" (toAttrs as) (maybe [] toElem a ++
						       maybe [] toElem b))]
instance XmlAttributes Draw'area_polygon_Attrs where
    fromAttrs as =
	Draw'area_polygon_Attrs
	  { draw'area_polygonXlink'href = possibleA fromAttrToStr "xlink:href" as
	  , draw'area_polygonXlink'type = possibleA fromAttrToTyp "xlink:type" as
	  , draw'area_polygonOffice'target_frame_name = possibleA fromAttrToStr "office:target-frame-name" as
	  , draw'area_polygonXlink'show = possibleA fromAttrToTyp "xlink:show" as
	  , draw'area_polygonOffice'name = possibleA fromAttrToStr "office:name" as
	  , draw'area_polygonDraw'nohref = possibleA fromAttrToTyp "draw:nohref" as
	  , draw'area_polygonSvg'x = definiteA fromAttrToStr "draw:area-polygon" "svg:x" as
	  , draw'area_polygonSvg'y = definiteA fromAttrToStr "draw:area-polygon" "svg:y" as
	  , draw'area_polygonSvg'width = definiteA fromAttrToStr "draw:area-polygon" "svg:width" as
	  , draw'area_polygonSvg'height = definiteA fromAttrToStr "draw:area-polygon" "svg:height" as
	  , draw'area_polygonSvg'points = definiteA fromAttrToStr "draw:area-polygon" "svg:points" as
	  , draw'area_polygonSvg'viewBox = definiteA fromAttrToStr "draw:area-polygon" "svg:viewBox" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "xlink:href" (draw'area_polygonXlink'href v)
	, maybeToAttr toAttrFrTyp "xlink:type" (draw'area_polygonXlink'type v)
	, maybeToAttr toAttrFrStr "office:target-frame-name" (draw'area_polygonOffice'target_frame_name v)
	, maybeToAttr toAttrFrTyp "xlink:show" (draw'area_polygonXlink'show v)
	, maybeToAttr toAttrFrStr "office:name" (draw'area_polygonOffice'name v)
	, maybeToAttr toAttrFrTyp "draw:nohref" (draw'area_polygonDraw'nohref v)
	, toAttrFrStr "svg:x" (draw'area_polygonSvg'x v)
	, toAttrFrStr "svg:y" (draw'area_polygonSvg'y v)
	, toAttrFrStr "svg:width" (draw'area_polygonSvg'width v)
	, toAttrFrStr "svg:height" (draw'area_polygonSvg'height v)
	, toAttrFrStr "svg:points" (draw'area_polygonSvg'points v)
	, toAttrFrStr "svg:viewBox" (draw'area_polygonSvg'viewBox v)
	]
instance XmlAttrType Draw'area_polygon_xlink'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "simple" = Just Draw'area_polygon_xlink'type_simple
	    translate _ = Nothing
    toAttrFrTyp n Draw'area_polygon_xlink'type_simple = Just (n, str2attr "simple")
instance XmlAttrType Draw'area_polygon_xlink'show where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "new" = Just Draw'area_polygon_xlink'show_new
	    translate "replace" = Just Draw'area_polygon_xlink'show_replace
	    translate _ = Nothing
    toAttrFrTyp n Draw'area_polygon_xlink'show_new = Just (n, str2attr "new")
    toAttrFrTyp n Draw'area_polygon_xlink'show_replace = Just (n, str2attr "replace")
instance XmlAttrType Draw'area_polygon_draw'nohref where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "nohref" = Just Draw'area_polygon_draw'nohref_nohref
	    translate _ = Nothing
    toAttrFrTyp n Draw'area_polygon_draw'nohref_nohref = Just (n, str2attr "nohref")
instance XmlContent Text'p where
    fromElem (CElem (Elem "text:p" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'p (fromAttrs as) a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'p as a) =
	[CElem (Elem "text:p" (toAttrs as) (concatMap toElem a))]
instance XmlAttributes Text'p_Attrs where
    fromAttrs as =
	Text'p_Attrs
	  { text'pText'style_name = possibleA fromAttrToStr "text:style-name" as
	  , text'pText'cond_style_name = possibleA fromAttrToStr "text:cond-style-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "text:style-name" (text'pText'style_name v)
	, maybeToAttr toAttrFrStr "text:cond-style-name" (text'pText'cond_style_name v)
	]
instance XmlContent Text'p_ where
    fromElem c0 =
	case (fromText c0) of
	(Just a,rest) -> (Just (Text'p_Str a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Text'p_Text'span a), rest)
		(_,_) ->
			case (fromElem c0) of
			(Just a,rest) -> (Just (Text'p_Text'tab_stop a), rest)
			(_,_) ->
				case (fromElem c0) of
				(Just a,rest) -> (Just (Text'p_Text's a), rest)
				(_,_) ->
					case (fromElem c0) of
					(Just a,rest) -> (Just (Text'p_Text'line_break a), rest)
					(_,_) ->
						case (fromElem c0) of
						(Just a,rest) -> (Just (Text'p_Text'footnote a), rest)
						(_,_) ->
							case (fromElem c0) of
							(Just a,rest) -> (Just (Text'p_Text'endnote a), rest)
							(_,_) ->
								case (fromElem c0) of
								(Just a,rest) -> (Just (Text'p_Text'a a), rest)
								(_,_) ->
									case (fromElem c0) of
									(Just a,rest) -> (Just (Text'p_Text'bookmark a), rest)
									(_,_) ->
										case (fromElem c0) of
										(Just a,rest) -> (Just (Text'p_Text'bookmark_start a), rest)
										(_,_) ->
											case (fromElem c0) of
											(Just a,rest) -> (Just (Text'p_Text'bookmark_end a), rest)
											(_,_) ->
												case (fromElem c0) of
												(Just a,rest) -> (Just (Text'p_Text'reference_mark a), rest)
												(_,_) ->
													case (fromElem c0) of
													(Just a,rest) -> (Just (Text'p_Text'reference_mark_start a), rest)
													(_,_) ->
														case (fromElem c0) of
														(Just a,rest) -> (Just (Text'p_Text'reference_mark_end a), rest)
														(_,_) ->
															case (fromElem c0) of
															(Just a,rest) -> (Just (Text'p_Text'date a), rest)
															(_,_) ->
																case (fromElem c0) of
																(Just a,rest) -> (Just (Text'p_Text'time a), rest)
																(_,_) ->
																	case (fromElem c0) of
																	(Just a,rest) -> (Just (Text'p_Text'page_number a), rest)
																	(_,_) ->
																		case (fromElem c0) of
																		(Just a,rest) -> (Just (Text'p_Text'page_continuation a), rest)
																		(_,_) ->
																			case (fromElem c0) of
																			(Just a,rest) -> (Just (Text'p_Text'sender_firstname a), rest)
																			(_,_) ->
																				case (fromElem c0) of
																				(Just a,rest) -> (Just (Text'p_Text'sender_lastname a), rest)
																				(_,_) ->
																					case (fromElem c0) of
																					(Just a,rest) -> (Just (Text'p_Text'sender_initials a), rest)
																					(_,_) ->
																						case (fromElem c0) of
																						(Just a,rest) -> (Just (Text'p_Text'sender_title a), rest)
																						(_,_) ->
																							case (fromElem c0) of
																							(Just a,rest) -> (Just (Text'p_Text'sender_position a), rest)
																							(_,_) ->
																								case (fromElem c0) of
																								(Just a,rest) -> (Just (Text'p_Text'sender_email a), rest)
																								(_,_) ->
																									case (fromElem c0) of
																									(Just a,rest) -> (Just (Text'p_Text'sender_phone_private a), rest)
																									(_,_) ->
																										case (fromElem c0) of
																										(Just a,rest) -> (Just (Text'p_Text'sender_fax a), rest)
																										(_,_) ->
																											case (fromElem c0) of
																											(Just a,rest) -> (Just (Text'p_Text'sender_company a), rest)
																											(_,_) ->
																												case (fromElem c0) of
																												(Just a,rest) -> (Just (Text'p_Text'sender_phone_work a), rest)
																												(_,_) ->
																													case (fromElem c0) of
																													(Just a,rest) -> (Just (Text'p_Text'sender_street a), rest)
																													(_,_) ->
																														case (fromElem c0) of
																														(Just a,rest) -> (Just (Text'p_Text'sender_city a), rest)
																														(_,_) ->
																															case (fromElem c0) of
																															(Just a,rest) -> (Just (Text'p_Text'sender_postal_code a), rest)
																															(_,_) ->
																																case (fromElem c0) of
																																(Just a,rest) -> (Just (Text'p_Text'sender_country a), rest)
																																(_,_) ->
																																	case (fromElem c0) of
																																	(Just a,rest) -> (Just (Text'p_Text'sender_state_or_province a), rest)
																																	(_,_) ->
																																		case (fromElem c0) of
																																		(Just a,rest) -> (Just (Text'p_Text'author_name a), rest)
																																		(_,_) ->
																																			case (fromElem c0) of
																																			(Just a,rest) -> (Just (Text'p_Text'author_initials a), rest)
																																			(_,_) ->
																																				case (fromElem c0) of
																																				(Just a,rest) -> (Just (Text'p_Text'placeholder a), rest)
																																				(_,_) ->
																																					case (fromElem c0) of
																																					(Just a,rest) -> (Just (Text'p_Text'variable_set a), rest)
																																					(_,_) ->
																																						case (fromElem c0) of
																																						(Just a,rest) -> (Just (Text'p_Text'variable_get a), rest)
																																						(_,_) ->
																																							case (fromElem c0) of
																																							(Just a,rest) -> (Just (Text'p_Text'variable_input a), rest)
																																							(_,_) ->
																																								case (fromElem c0) of
																																								(Just a,rest) -> (Just (Text'p_Text'user_field_get a), rest)
																																								(_,_) ->
																																									case (fromElem c0) of
																																									(Just a,rest) -> (Just (Text'p_Text'user_field_input a), rest)
																																									(_,_) ->
																																										case (fromElem c0) of
																																										(Just a,rest) -> (Just (Text'p_Text'sequence a), rest)
																																										(_,_) ->
																																											case (fromElem c0) of
																																											(Just a,rest) -> (Just (Text'p_Text'expression a), rest)
																																											(_,_) ->
																																												case (fromElem c0) of
																																												(Just a,rest) -> (Just (Text'p_Text'text_input a), rest)
																																												(_,_) ->
																																													case (fromElem c0) of
																																													(Just a,rest) -> (Just (Text'p_Text'database_display a), rest)
																																													(_,_) ->
																																														case (fromElem c0) of
																																														(Just a,rest) -> (Just (Text'p_Text'database_next a), rest)
																																														(_,_) ->
																																															case (fromElem c0) of
																																															(Just a,rest) -> (Just (Text'p_Text'database_select a), rest)
																																															(_,_) ->
																																																case (fromElem c0) of
																																																(Just a,rest) -> (Just (Text'p_Text'database_row_number a), rest)
																																																(_,_) ->
																																																	case (fromElem c0) of
																																																	(Just a,rest) -> (Just (Text'p_Text'database_name a), rest)
																																																	(_,_) ->
																																																		case (fromElem c0) of
																																																		(Just a,rest) -> (Just (Text'p_Text'initial_creator a), rest)
																																																		(_,_) ->
																																																			case (fromElem c0) of
																																																			(Just a,rest) -> (Just (Text'p_Text'creation_date a), rest)
																																																			(_,_) ->
																																																				case (fromElem c0) of
																																																				(Just a,rest) -> (Just (Text'p_Text'creation_time a), rest)
																																																				(_,_) ->
																																																					case (fromElem c0) of
																																																					(Just a,rest) -> (Just (Text'p_Text'description a), rest)
																																																					(_,_) ->
																																																						case (fromElem c0) of
																																																						(Just a,rest) -> (Just (Text'p_Text'user_defined a), rest)
																																																						(_,_) ->
																																																							case (fromElem c0) of
																																																							(Just a,rest) -> (Just (Text'p_Text'print_time a), rest)
																																																							(_,_) ->
																																																								case (fromElem c0) of
																																																								(Just a,rest) -> (Just (Text'p_Text'print_date a), rest)
																																																								(_,_) ->
																																																									case (fromElem c0) of
																																																									(Just a,rest) -> (Just (Text'p_Text'printed_by a), rest)
																																																									(_,_) ->
																																																										case (fromElem c0) of
																																																										(Just a,rest) -> (Just (Text'p_Text'title a), rest)
																																																										(_,_) ->
																																																											case (fromElem c0) of
																																																											(Just a,rest) -> (Just (Text'p_Text'subject a), rest)
																																																											(_,_) ->
																																																												case (fromElem c0) of
																																																												(Just a,rest) -> (Just (Text'p_Text'keywords a), rest)
																																																												(_,_) ->
																																																													case (fromElem c0) of
																																																													(Just a,rest) -> (Just (Text'p_Text'editing_cycles a), rest)
																																																													(_,_) ->
																																																														case (fromElem c0) of
																																																														(Just a,rest) -> (Just (Text'p_Text'editing_duration a), rest)
																																																														(_,_) ->
																																																															case (fromElem c0) of
																																																															(Just a,rest) -> (Just (Text'p_Text'modification_time a), rest)
																																																															(_,_) ->
																																																																case (fromElem c0) of
																																																																(Just a,rest) -> (Just (Text'p_Text'modification_date a), rest)
																																																																(_,_) ->
																																																																	case (fromElem c0) of
																																																																	(Just a,rest) -> (Just (Text'p_Text'creator a), rest)
																																																																	(_,_) ->
																																																																		case (fromElem c0) of
																																																																		(Just a,rest) -> (Just (Text'p_Text'conditional_text a), rest)
																																																																		(_,_) ->
																																																																			case (fromElem c0) of
																																																																			(Just a,rest) -> (Just (Text'p_Text'hidden_text a), rest)
																																																																			(_,_) ->
																																																																				case (fromElem c0) of
																																																																				(Just a,rest) -> (Just (Text'p_Text'hidden_paragraph a), rest)
																																																																				(_,_) ->
																																																																					case (fromElem c0) of
																																																																					(Just a,rest) -> (Just (Text'p_Text'chapter a), rest)
																																																																					(_,_) ->
																																																																						case (fromElem c0) of
																																																																						(Just a,rest) -> (Just (Text'p_Text'file_name a), rest)
																																																																						(_,_) ->
																																																																							case (fromElem c0) of
																																																																							(Just a,rest) -> (Just (Text'p_Text'template_name a), rest)
																																																																							(_,_) ->
																																																																								case (fromElem c0) of
																																																																								(Just a,rest) -> (Just (Text'p_Text'page_variable_set a), rest)
																																																																								(_,_) ->
																																																																									case (fromElem c0) of
																																																																									(Just a,rest) -> (Just (Text'p_Text'page_variable_get a), rest)
																																																																									(_,_) ->
																																																																										case (fromElem c0) of
																																																																										(Just a,rest) -> (Just (Text'p_Text'execute_macro a), rest)
																																																																										(_,_) ->
																																																																											case (fromElem c0) of
																																																																											(Just a,rest) -> (Just (Text'p_Text'dde_connection a), rest)
																																																																											(_,_) ->
																																																																												case (fromElem c0) of
																																																																												(Just a,rest) -> (Just (Text'p_Text'reference_ref a), rest)
																																																																												(_,_) ->
																																																																													case (fromElem c0) of
																																																																													(Just a,rest) -> (Just (Text'p_Text'sequence_ref a), rest)
																																																																													(_,_) ->
																																																																														case (fromElem c0) of
																																																																														(Just a,rest) -> (Just (Text'p_Text'bookmark_ref a), rest)
																																																																														(_,_) ->
																																																																															case (fromElem c0) of
																																																																															(Just a,rest) -> (Just (Text'p_Text'footnote_ref a), rest)
																																																																															(_,_) ->
																																																																																case (fromElem c0) of
																																																																																(Just a,rest) -> (Just (Text'p_Text'endnote_ref a), rest)
																																																																																(_,_) ->
																																																																																	case (fromElem c0) of
																																																																																	(Just a,rest) -> (Just (Text'p_Text'sheet_name a), rest)
																																																																																	(_,_) ->
																																																																																		case (fromElem c0) of
																																																																																		(Just a,rest) -> (Just (Text'p_Text'bibliography_mark a), rest)
																																																																																		(_,_) ->
																																																																																			case (fromElem c0) of
																																																																																			(Just a,rest) -> (Just (Text'p_Text'page_count a), rest)
																																																																																			(_,_) ->
																																																																																				case (fromElem c0) of
																																																																																				(Just a,rest) -> (Just (Text'p_Text'paragraph_count a), rest)
																																																																																				(_,_) ->
																																																																																					case (fromElem c0) of
																																																																																					(Just a,rest) -> (Just (Text'p_Text'word_count a), rest)
																																																																																					(_,_) ->
																																																																																						case (fromElem c0) of
																																																																																						(Just a,rest) -> (Just (Text'p_Text'character_count a), rest)
																																																																																						(_,_) ->
																																																																																							case (fromElem c0) of
																																																																																							(Just a,rest) -> (Just (Text'p_Text'table_count a), rest)
																																																																																							(_,_) ->
																																																																																								case (fromElem c0) of
																																																																																								(Just a,rest) -> (Just (Text'p_Text'image_count a), rest)
																																																																																								(_,_) ->
																																																																																									case (fromElem c0) of
																																																																																									(Just a,rest) -> (Just (Text'p_Text'object_count a), rest)
																																																																																									(_,_) ->
																																																																																										case (fromElem c0) of
																																																																																										(Just a,rest) -> (Just (Text'p_Office'annotation a), rest)
																																																																																										(_,_) ->
																																																																																											case (fromElem c0) of
																																																																																											(Just a,rest) -> (Just (Text'p_Text'script a), rest)
																																																																																											(_,_) ->
																																																																																												case (fromElem c0) of
																																																																																												(Just a,rest) -> (Just (Text'p_Text'measure a), rest)
																																																																																												(_,_) ->
																																																																																													case (fromElem c0) of
																																																																																													(Just a,rest) -> (Just (Text'p_Draw'rect a), rest)
																																																																																													(_,_) ->
																																																																																														case (fromElem c0) of
																																																																																														(Just a,rest) -> (Just (Text'p_Draw'line a), rest)
																																																																																														(_,_) ->
																																																																																															case (fromElem c0) of
																																																																																															(Just a,rest) -> (Just (Text'p_Draw'polyline a), rest)
																																																																																															(_,_) ->
																																																																																																case (fromElem c0) of
																																																																																																(Just a,rest) -> (Just (Text'p_Draw'polygon a), rest)
																																																																																																(_,_) ->
																																																																																																	case (fromElem c0) of
																																																																																																	(Just a,rest) -> (Just (Text'p_Draw'path a), rest)
																																																																																																	(_,_) ->
																																																																																																		case (fromElem c0) of
																																																																																																		(Just a,rest) -> (Just (Text'p_Draw'circle a), rest)
																																																																																																		(_,_) ->
																																																																																																			case (fromElem c0) of
																																																																																																			(Just a,rest) -> (Just (Text'p_Draw'ellipse a), rest)
																																																																																																			(_,_) ->
																																																																																																				case (fromElem c0) of
																																																																																																				(Just a,rest) -> (Just (Text'p_Draw'g a), rest)
																																																																																																				(_,_) ->
																																																																																																					case (fromElem c0) of
																																																																																																					(Just a,rest) -> (Just (Text'p_Draw'page_thumbnail a), rest)
																																																																																																					(_,_) ->
																																																																																																						case (fromElem c0) of
																																																																																																						(Just a,rest) -> (Just (Text'p_Draw'text_box a), rest)
																																																																																																						(_,_) ->
																																																																																																							case (fromElem c0) of
																																																																																																							(Just a,rest) -> (Just (Text'p_Draw'image a), rest)
																																																																																																							(_,_) ->
																																																																																																								case (fromElem c0) of
																																																																																																								(Just a,rest) -> (Just (Text'p_Draw'object a), rest)
																																																																																																								(_,_) ->
																																																																																																									case (fromElem c0) of
																																																																																																									(Just a,rest) -> (Just (Text'p_Draw'object_ole a), rest)
																																																																																																									(_,_) ->
																																																																																																										case (fromElem c0) of
																																																																																																										(Just a,rest) -> (Just (Text'p_Draw'applet a), rest)
																																																																																																										(_,_) ->
																																																																																																											case (fromElem c0) of
																																																																																																											(Just a,rest) -> (Just (Text'p_Draw'floating_frame a), rest)
																																																																																																											(_,_) ->
																																																																																																												case (fromElem c0) of
																																																																																																												(Just a,rest) -> (Just (Text'p_Draw'plugin a), rest)
																																																																																																												(_,_) ->
																																																																																																													case (fromElem c0) of
																																																																																																													(Just a,rest) -> (Just (Text'p_Draw'measure a), rest)
																																																																																																													(_,_) ->
																																																																																																														case (fromElem c0) of
																																																																																																														(Just a,rest) -> (Just (Text'p_Draw'caption a), rest)
																																																																																																														(_,_) ->
																																																																																																															case (fromElem c0) of
																																																																																																															(Just a,rest) -> (Just (Text'p_Draw'connector a), rest)
																																																																																																															(_,_) ->
																																																																																																																case (fromElem c0) of
																																																																																																																(Just a,rest) -> (Just (Text'p_Chart'chart a), rest)
																																																																																																																(_,_) ->
																																																																																																																	case (fromElem c0) of
																																																																																																																	(Just a,rest) -> (Just (Text'p_Dr3d'scene a), rest)
																																																																																																																	(_,_) ->
																																																																																																																		case (fromElem c0) of
																																																																																																																		(Just a,rest) -> (Just (Text'p_Draw'control a), rest)
																																																																																																																		(_,_) ->
																																																																																																																			case (fromElem c0) of
																																																																																																																			(Just a,rest) -> (Just (Text'p_Text'toc_mark_start a), rest)
																																																																																																																			(_,_) ->
																																																																																																																				case (fromElem c0) of
																																																																																																																				(Just a,rest) -> (Just (Text'p_Text'toc_mark_end a), rest)
																																																																																																																				(_,_) ->
																																																																																																																					case (fromElem c0) of
																																																																																																																					(Just a,rest) -> (Just (Text'p_Text'toc_mark a), rest)
																																																																																																																					(_,_) ->
																																																																																																																						case (fromElem c0) of
																																																																																																																						(Just a,rest) -> (Just (Text'p_Text'user_index_mark_start a), rest)
																																																																																																																						(_,_) ->
																																																																																																																							case (fromElem c0) of
																																																																																																																							(Just a,rest) -> (Just (Text'p_Text'user_index_mark_end a), rest)
																																																																																																																							(_,_) ->
																																																																																																																								case (fromElem c0) of
																																																																																																																								(Just a,rest) -> (Just (Text'p_Text'user_index_mark a), rest)
																																																																																																																								(_,_) ->
																																																																																																																									case (fromElem c0) of
																																																																																																																									(Just a,rest) -> (Just (Text'p_Text'alphabetical_index_mark_start a), rest)
																																																																																																																									(_,_) ->
																																																																																																																										case (fromElem c0) of
																																																																																																																										(Just a,rest) -> (Just (Text'p_Text'alphabetical_index_mark_end a), rest)
																																																																																																																										(_,_) ->
																																																																																																																											case (fromElem c0) of
																																																																																																																											(Just a,rest) -> (Just (Text'p_Text'alphabetical_index_mark a), rest)
																																																																																																																											(_,_) ->
																																																																																																																												case (fromElem c0) of
																																																																																																																												(Just a,rest) -> (Just (Text'p_Text'change a), rest)
																																																																																																																												(_,_) ->
																																																																																																																													case (fromElem c0) of
																																																																																																																													(Just a,rest) -> (Just (Text'p_Text'change_start a), rest)
																																																																																																																													(_,_) ->
																																																																																																																														case (fromElem c0) of
																																																																																																																														(Just a,rest) -> (Just (Text'p_Text'change_end a), rest)
																																																																																																																														(_,_) ->
																																																																																																																															case (fromElem c0) of
																																																																																																																															(Just a,rest) -> (Just (Text'p_Draw'a a), rest)
																																																																																																																															(_,_) ->
																																																																																																																																case (fromElem c0) of
																																																																																																																																(Just a,rest) -> (Just (Text'p_Text'ruby a), rest)
																																																																																																																																(_,_) ->
																																																																																																																																    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'p_Str a) = toText a
    toElem (Text'p_Text'span a) = toElem a
    toElem (Text'p_Text'tab_stop a) = toElem a
    toElem (Text'p_Text's a) = toElem a
    toElem (Text'p_Text'line_break a) = toElem a
    toElem (Text'p_Text'footnote a) = toElem a
    toElem (Text'p_Text'endnote a) = toElem a
    toElem (Text'p_Text'a a) = toElem a
    toElem (Text'p_Text'bookmark a) = toElem a
    toElem (Text'p_Text'bookmark_start a) = toElem a
    toElem (Text'p_Text'bookmark_end a) = toElem a
    toElem (Text'p_Text'reference_mark a) = toElem a
    toElem (Text'p_Text'reference_mark_start a) = toElem a
    toElem (Text'p_Text'reference_mark_end a) = toElem a
    toElem (Text'p_Text'date a) = toElem a
    toElem (Text'p_Text'time a) = toElem a
    toElem (Text'p_Text'page_number a) = toElem a
    toElem (Text'p_Text'page_continuation a) = toElem a
    toElem (Text'p_Text'sender_firstname a) = toElem a
    toElem (Text'p_Text'sender_lastname a) = toElem a
    toElem (Text'p_Text'sender_initials a) = toElem a
    toElem (Text'p_Text'sender_title a) = toElem a
    toElem (Text'p_Text'sender_position a) = toElem a
    toElem (Text'p_Text'sender_email a) = toElem a
    toElem (Text'p_Text'sender_phone_private a) = toElem a
    toElem (Text'p_Text'sender_fax a) = toElem a
    toElem (Text'p_Text'sender_company a) = toElem a
    toElem (Text'p_Text'sender_phone_work a) = toElem a
    toElem (Text'p_Text'sender_street a) = toElem a
    toElem (Text'p_Text'sender_city a) = toElem a
    toElem (Text'p_Text'sender_postal_code a) = toElem a
    toElem (Text'p_Text'sender_country a) = toElem a
    toElem (Text'p_Text'sender_state_or_province a) = toElem a
    toElem (Text'p_Text'author_name a) = toElem a
    toElem (Text'p_Text'author_initials a) = toElem a
    toElem (Text'p_Text'placeholder a) = toElem a
    toElem (Text'p_Text'variable_set a) = toElem a
    toElem (Text'p_Text'variable_get a) = toElem a
    toElem (Text'p_Text'variable_input a) = toElem a
    toElem (Text'p_Text'user_field_get a) = toElem a
    toElem (Text'p_Text'user_field_input a) = toElem a
    toElem (Text'p_Text'sequence a) = toElem a
    toElem (Text'p_Text'expression a) = toElem a
    toElem (Text'p_Text'text_input a) = toElem a
    toElem (Text'p_Text'database_display a) = toElem a
    toElem (Text'p_Text'database_next a) = toElem a
    toElem (Text'p_Text'database_select a) = toElem a
    toElem (Text'p_Text'database_row_number a) = toElem a
    toElem (Text'p_Text'database_name a) = toElem a
    toElem (Text'p_Text'initial_creator a) = toElem a
    toElem (Text'p_Text'creation_date a) = toElem a
    toElem (Text'p_Text'creation_time a) = toElem a
    toElem (Text'p_Text'description a) = toElem a
    toElem (Text'p_Text'user_defined a) = toElem a
    toElem (Text'p_Text'print_time a) = toElem a
    toElem (Text'p_Text'print_date a) = toElem a
    toElem (Text'p_Text'printed_by a) = toElem a
    toElem (Text'p_Text'title a) = toElem a
    toElem (Text'p_Text'subject a) = toElem a
    toElem (Text'p_Text'keywords a) = toElem a
    toElem (Text'p_Text'editing_cycles a) = toElem a
    toElem (Text'p_Text'editing_duration a) = toElem a
    toElem (Text'p_Text'modification_time a) = toElem a
    toElem (Text'p_Text'modification_date a) = toElem a
    toElem (Text'p_Text'creator a) = toElem a
    toElem (Text'p_Text'conditional_text a) = toElem a
    toElem (Text'p_Text'hidden_text a) = toElem a
    toElem (Text'p_Text'hidden_paragraph a) = toElem a
    toElem (Text'p_Text'chapter a) = toElem a
    toElem (Text'p_Text'file_name a) = toElem a
    toElem (Text'p_Text'template_name a) = toElem a
    toElem (Text'p_Text'page_variable_set a) = toElem a
    toElem (Text'p_Text'page_variable_get a) = toElem a
    toElem (Text'p_Text'execute_macro a) = toElem a
    toElem (Text'p_Text'dde_connection a) = toElem a
    toElem (Text'p_Text'reference_ref a) = toElem a
    toElem (Text'p_Text'sequence_ref a) = toElem a
    toElem (Text'p_Text'bookmark_ref a) = toElem a
    toElem (Text'p_Text'footnote_ref a) = toElem a
    toElem (Text'p_Text'endnote_ref a) = toElem a
    toElem (Text'p_Text'sheet_name a) = toElem a
    toElem (Text'p_Text'bibliography_mark a) = toElem a
    toElem (Text'p_Text'page_count a) = toElem a
    toElem (Text'p_Text'paragraph_count a) = toElem a
    toElem (Text'p_Text'word_count a) = toElem a
    toElem (Text'p_Text'character_count a) = toElem a
    toElem (Text'p_Text'table_count a) = toElem a
    toElem (Text'p_Text'image_count a) = toElem a
    toElem (Text'p_Text'object_count a) = toElem a
    toElem (Text'p_Office'annotation a) = toElem a
    toElem (Text'p_Text'script a) = toElem a
    toElem (Text'p_Text'measure a) = toElem a
    toElem (Text'p_Draw'rect a) = toElem a
    toElem (Text'p_Draw'line a) = toElem a
    toElem (Text'p_Draw'polyline a) = toElem a
    toElem (Text'p_Draw'polygon a) = toElem a
    toElem (Text'p_Draw'path a) = toElem a
    toElem (Text'p_Draw'circle a) = toElem a
    toElem (Text'p_Draw'ellipse a) = toElem a
    toElem (Text'p_Draw'g a) = toElem a
    toElem (Text'p_Draw'page_thumbnail a) = toElem a
    toElem (Text'p_Draw'text_box a) = toElem a
    toElem (Text'p_Draw'image a) = toElem a
    toElem (Text'p_Draw'object a) = toElem a
    toElem (Text'p_Draw'object_ole a) = toElem a
    toElem (Text'p_Draw'applet a) = toElem a
    toElem (Text'p_Draw'floating_frame a) = toElem a
    toElem (Text'p_Draw'plugin a) = toElem a
    toElem (Text'p_Draw'measure a) = toElem a
    toElem (Text'p_Draw'caption a) = toElem a
    toElem (Text'p_Draw'connector a) = toElem a
    toElem (Text'p_Chart'chart a) = toElem a
    toElem (Text'p_Dr3d'scene a) = toElem a
    toElem (Text'p_Draw'control a) = toElem a
    toElem (Text'p_Text'toc_mark_start a) = toElem a
    toElem (Text'p_Text'toc_mark_end a) = toElem a
    toElem (Text'p_Text'toc_mark a) = toElem a
    toElem (Text'p_Text'user_index_mark_start a) = toElem a
    toElem (Text'p_Text'user_index_mark_end a) = toElem a
    toElem (Text'p_Text'user_index_mark a) = toElem a
    toElem (Text'p_Text'alphabetical_index_mark_start a) = toElem a
    toElem (Text'p_Text'alphabetical_index_mark_end a) = toElem a
    toElem (Text'p_Text'alphabetical_index_mark a) = toElem a
    toElem (Text'p_Text'change a) = toElem a
    toElem (Text'p_Text'change_start a) = toElem a
    toElem (Text'p_Text'change_end a) = toElem a
    toElem (Text'p_Draw'a a) = toElem a
    toElem (Text'p_Text'ruby a) = toElem a
instance XmlContent Text'h where
    fromElem (CElem (Elem "text:h" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'h (fromAttrs as) a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'h as a) =
	[CElem (Elem "text:h" (toAttrs as) (concatMap toElem a))]
instance XmlAttributes Text'h_Attrs where
    fromAttrs as =
	Text'h_Attrs
	  { text'hText'style_name = possibleA fromAttrToStr "text:style-name" as
	  , text'hText'cond_style_name = possibleA fromAttrToStr "text:cond-style-name" as
	  , text'hText'level = defaultA fromAttrToStr "1" "text:level" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "text:style-name" (text'hText'style_name v)
	, maybeToAttr toAttrFrStr "text:cond-style-name" (text'hText'cond_style_name v)
	, defaultToAttr toAttrFrStr "text:level" (text'hText'level v)
	]
instance XmlContent Text'h_ where
    fromElem c0 =
	case (fromText c0) of
	(Just a,rest) -> (Just (Text'h_Str a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Text'h_Text'span a), rest)
		(_,_) ->
			case (fromElem c0) of
			(Just a,rest) -> (Just (Text'h_Text'tab_stop a), rest)
			(_,_) ->
				case (fromElem c0) of
				(Just a,rest) -> (Just (Text'h_Text's a), rest)
				(_,_) ->
					case (fromElem c0) of
					(Just a,rest) -> (Just (Text'h_Text'line_break a), rest)
					(_,_) ->
						case (fromElem c0) of
						(Just a,rest) -> (Just (Text'h_Text'footnote a), rest)
						(_,_) ->
							case (fromElem c0) of
							(Just a,rest) -> (Just (Text'h_Text'endnote a), rest)
							(_,_) ->
								case (fromElem c0) of
								(Just a,rest) -> (Just (Text'h_Text'a a), rest)
								(_,_) ->
									case (fromElem c0) of
									(Just a,rest) -> (Just (Text'h_Text'bookmark a), rest)
									(_,_) ->
										case (fromElem c0) of
										(Just a,rest) -> (Just (Text'h_Text'bookmark_start a), rest)
										(_,_) ->
											case (fromElem c0) of
											(Just a,rest) -> (Just (Text'h_Text'bookmark_end a), rest)
											(_,_) ->
												case (fromElem c0) of
												(Just a,rest) -> (Just (Text'h_Text'reference_mark a), rest)
												(_,_) ->
													case (fromElem c0) of
													(Just a,rest) -> (Just (Text'h_Text'reference_mark_start a), rest)
													(_,_) ->
														case (fromElem c0) of
														(Just a,rest) -> (Just (Text'h_Text'reference_mark_end a), rest)
														(_,_) ->
															case (fromElem c0) of
															(Just a,rest) -> (Just (Text'h_Text'date a), rest)
															(_,_) ->
																case (fromElem c0) of
																(Just a,rest) -> (Just (Text'h_Text'time a), rest)
																(_,_) ->
																	case (fromElem c0) of
																	(Just a,rest) -> (Just (Text'h_Text'page_number a), rest)
																	(_,_) ->
																		case (fromElem c0) of
																		(Just a,rest) -> (Just (Text'h_Text'page_continuation a), rest)
																		(_,_) ->
																			case (fromElem c0) of
																			(Just a,rest) -> (Just (Text'h_Text'sender_firstname a), rest)
																			(_,_) ->
																				case (fromElem c0) of
																				(Just a,rest) -> (Just (Text'h_Text'sender_lastname a), rest)
																				(_,_) ->
																					case (fromElem c0) of
																					(Just a,rest) -> (Just (Text'h_Text'sender_initials a), rest)
																					(_,_) ->
																						case (fromElem c0) of
																						(Just a,rest) -> (Just (Text'h_Text'sender_title a), rest)
																						(_,_) ->
																							case (fromElem c0) of
																							(Just a,rest) -> (Just (Text'h_Text'sender_position a), rest)
																							(_,_) ->
																								case (fromElem c0) of
																								(Just a,rest) -> (Just (Text'h_Text'sender_email a), rest)
																								(_,_) ->
																									case (fromElem c0) of
																									(Just a,rest) -> (Just (Text'h_Text'sender_phone_private a), rest)
																									(_,_) ->
																										case (fromElem c0) of
																										(Just a,rest) -> (Just (Text'h_Text'sender_fax a), rest)
																										(_,_) ->
																											case (fromElem c0) of
																											(Just a,rest) -> (Just (Text'h_Text'sender_company a), rest)
																											(_,_) ->
																												case (fromElem c0) of
																												(Just a,rest) -> (Just (Text'h_Text'sender_phone_work a), rest)
																												(_,_) ->
																													case (fromElem c0) of
																													(Just a,rest) -> (Just (Text'h_Text'sender_street a), rest)
																													(_,_) ->
																														case (fromElem c0) of
																														(Just a,rest) -> (Just (Text'h_Text'sender_city a), rest)
																														(_,_) ->
																															case (fromElem c0) of
																															(Just a,rest) -> (Just (Text'h_Text'sender_postal_code a), rest)
																															(_,_) ->
																																case (fromElem c0) of
																																(Just a,rest) -> (Just (Text'h_Text'sender_country a), rest)
																																(_,_) ->
																																	case (fromElem c0) of
																																	(Just a,rest) -> (Just (Text'h_Text'sender_state_or_province a), rest)
																																	(_,_) ->
																																		case (fromElem c0) of
																																		(Just a,rest) -> (Just (Text'h_Text'author_name a), rest)
																																		(_,_) ->
																																			case (fromElem c0) of
																																			(Just a,rest) -> (Just (Text'h_Text'author_initials a), rest)
																																			(_,_) ->
																																				case (fromElem c0) of
																																				(Just a,rest) -> (Just (Text'h_Text'placeholder a), rest)
																																				(_,_) ->
																																					case (fromElem c0) of
																																					(Just a,rest) -> (Just (Text'h_Text'variable_set a), rest)
																																					(_,_) ->
																																						case (fromElem c0) of
																																						(Just a,rest) -> (Just (Text'h_Text'variable_get a), rest)
																																						(_,_) ->
																																							case (fromElem c0) of
																																							(Just a,rest) -> (Just (Text'h_Text'variable_input a), rest)
																																							(_,_) ->
																																								case (fromElem c0) of
																																								(Just a,rest) -> (Just (Text'h_Text'user_field_get a), rest)
																																								(_,_) ->
																																									case (fromElem c0) of
																																									(Just a,rest) -> (Just (Text'h_Text'user_field_input a), rest)
																																									(_,_) ->
																																										case (fromElem c0) of
																																										(Just a,rest) -> (Just (Text'h_Text'sequence a), rest)
																																										(_,_) ->
																																											case (fromElem c0) of
																																											(Just a,rest) -> (Just (Text'h_Text'expression a), rest)
																																											(_,_) ->
																																												case (fromElem c0) of
																																												(Just a,rest) -> (Just (Text'h_Text'text_input a), rest)
																																												(_,_) ->
																																													case (fromElem c0) of
																																													(Just a,rest) -> (Just (Text'h_Text'database_display a), rest)
																																													(_,_) ->
																																														case (fromElem c0) of
																																														(Just a,rest) -> (Just (Text'h_Text'database_next a), rest)
																																														(_,_) ->
																																															case (fromElem c0) of
																																															(Just a,rest) -> (Just (Text'h_Text'database_select a), rest)
																																															(_,_) ->
																																																case (fromElem c0) of
																																																(Just a,rest) -> (Just (Text'h_Text'database_row_number a), rest)
																																																(_,_) ->
																																																	case (fromElem c0) of
																																																	(Just a,rest) -> (Just (Text'h_Text'database_name a), rest)
																																																	(_,_) ->
																																																		case (fromElem c0) of
																																																		(Just a,rest) -> (Just (Text'h_Text'initial_creator a), rest)
																																																		(_,_) ->
																																																			case (fromElem c0) of
																																																			(Just a,rest) -> (Just (Text'h_Text'creation_date a), rest)
																																																			(_,_) ->
																																																				case (fromElem c0) of
																																																				(Just a,rest) -> (Just (Text'h_Text'creation_time a), rest)
																																																				(_,_) ->
																																																					case (fromElem c0) of
																																																					(Just a,rest) -> (Just (Text'h_Text'description a), rest)
																																																					(_,_) ->
																																																						case (fromElem c0) of
																																																						(Just a,rest) -> (Just (Text'h_Text'user_defined a), rest)
																																																						(_,_) ->
																																																							case (fromElem c0) of
																																																							(Just a,rest) -> (Just (Text'h_Text'print_time a), rest)
																																																							(_,_) ->
																																																								case (fromElem c0) of
																																																								(Just a,rest) -> (Just (Text'h_Text'print_date a), rest)
																																																								(_,_) ->
																																																									case (fromElem c0) of
																																																									(Just a,rest) -> (Just (Text'h_Text'printed_by a), rest)
																																																									(_,_) ->
																																																										case (fromElem c0) of
																																																										(Just a,rest) -> (Just (Text'h_Text'title a), rest)
																																																										(_,_) ->
																																																											case (fromElem c0) of
																																																											(Just a,rest) -> (Just (Text'h_Text'subject a), rest)
																																																											(_,_) ->
																																																												case (fromElem c0) of
																																																												(Just a,rest) -> (Just (Text'h_Text'keywords a), rest)
																																																												(_,_) ->
																																																													case (fromElem c0) of
																																																													(Just a,rest) -> (Just (Text'h_Text'editing_cycles a), rest)
																																																													(_,_) ->
																																																														case (fromElem c0) of
																																																														(Just a,rest) -> (Just (Text'h_Text'editing_duration a), rest)
																																																														(_,_) ->
																																																															case (fromElem c0) of
																																																															(Just a,rest) -> (Just (Text'h_Text'modification_time a), rest)
																																																															(_,_) ->
																																																																case (fromElem c0) of
																																																																(Just a,rest) -> (Just (Text'h_Text'modification_date a), rest)
																																																																(_,_) ->
																																																																	case (fromElem c0) of
																																																																	(Just a,rest) -> (Just (Text'h_Text'creator a), rest)
																																																																	(_,_) ->
																																																																		case (fromElem c0) of
																																																																		(Just a,rest) -> (Just (Text'h_Text'conditional_text a), rest)
																																																																		(_,_) ->
																																																																			case (fromElem c0) of
																																																																			(Just a,rest) -> (Just (Text'h_Text'hidden_text a), rest)
																																																																			(_,_) ->
																																																																				case (fromElem c0) of
																																																																				(Just a,rest) -> (Just (Text'h_Text'hidden_paragraph a), rest)
																																																																				(_,_) ->
																																																																					case (fromElem c0) of
																																																																					(Just a,rest) -> (Just (Text'h_Text'chapter a), rest)
																																																																					(_,_) ->
																																																																						case (fromElem c0) of
																																																																						(Just a,rest) -> (Just (Text'h_Text'file_name a), rest)
																																																																						(_,_) ->
																																																																							case (fromElem c0) of
																																																																							(Just a,rest) -> (Just (Text'h_Text'template_name a), rest)
																																																																							(_,_) ->
																																																																								case (fromElem c0) of
																																																																								(Just a,rest) -> (Just (Text'h_Text'page_variable_set a), rest)
																																																																								(_,_) ->
																																																																									case (fromElem c0) of
																																																																									(Just a,rest) -> (Just (Text'h_Text'page_variable_get a), rest)
																																																																									(_,_) ->
																																																																										case (fromElem c0) of
																																																																										(Just a,rest) -> (Just (Text'h_Text'execute_macro a), rest)
																																																																										(_,_) ->
																																																																											case (fromElem c0) of
																																																																											(Just a,rest) -> (Just (Text'h_Text'dde_connection a), rest)
																																																																											(_,_) ->
																																																																												case (fromElem c0) of
																																																																												(Just a,rest) -> (Just (Text'h_Text'reference_ref a), rest)
																																																																												(_,_) ->
																																																																													case (fromElem c0) of
																																																																													(Just a,rest) -> (Just (Text'h_Text'sequence_ref a), rest)
																																																																													(_,_) ->
																																																																														case (fromElem c0) of
																																																																														(Just a,rest) -> (Just (Text'h_Text'bookmark_ref a), rest)
																																																																														(_,_) ->
																																																																															case (fromElem c0) of
																																																																															(Just a,rest) -> (Just (Text'h_Text'footnote_ref a), rest)
																																																																															(_,_) ->
																																																																																case (fromElem c0) of
																																																																																(Just a,rest) -> (Just (Text'h_Text'endnote_ref a), rest)
																																																																																(_,_) ->
																																																																																	case (fromElem c0) of
																																																																																	(Just a,rest) -> (Just (Text'h_Text'sheet_name a), rest)
																																																																																	(_,_) ->
																																																																																		case (fromElem c0) of
																																																																																		(Just a,rest) -> (Just (Text'h_Text'bibliography_mark a), rest)
																																																																																		(_,_) ->
																																																																																			case (fromElem c0) of
																																																																																			(Just a,rest) -> (Just (Text'h_Text'page_count a), rest)
																																																																																			(_,_) ->
																																																																																				case (fromElem c0) of
																																																																																				(Just a,rest) -> (Just (Text'h_Text'paragraph_count a), rest)
																																																																																				(_,_) ->
																																																																																					case (fromElem c0) of
																																																																																					(Just a,rest) -> (Just (Text'h_Text'word_count a), rest)
																																																																																					(_,_) ->
																																																																																						case (fromElem c0) of
																																																																																						(Just a,rest) -> (Just (Text'h_Text'character_count a), rest)
																																																																																						(_,_) ->
																																																																																							case (fromElem c0) of
																																																																																							(Just a,rest) -> (Just (Text'h_Text'table_count a), rest)
																																																																																							(_,_) ->
																																																																																								case (fromElem c0) of
																																																																																								(Just a,rest) -> (Just (Text'h_Text'image_count a), rest)
																																																																																								(_,_) ->
																																																																																									case (fromElem c0) of
																																																																																									(Just a,rest) -> (Just (Text'h_Text'object_count a), rest)
																																																																																									(_,_) ->
																																																																																										case (fromElem c0) of
																																																																																										(Just a,rest) -> (Just (Text'h_Office'annotation a), rest)
																																																																																										(_,_) ->
																																																																																											case (fromElem c0) of
																																																																																											(Just a,rest) -> (Just (Text'h_Text'script a), rest)
																																																																																											(_,_) ->
																																																																																												case (fromElem c0) of
																																																																																												(Just a,rest) -> (Just (Text'h_Text'measure a), rest)
																																																																																												(_,_) ->
																																																																																													case (fromElem c0) of
																																																																																													(Just a,rest) -> (Just (Text'h_Draw'rect a), rest)
																																																																																													(_,_) ->
																																																																																														case (fromElem c0) of
																																																																																														(Just a,rest) -> (Just (Text'h_Draw'line a), rest)
																																																																																														(_,_) ->
																																																																																															case (fromElem c0) of
																																																																																															(Just a,rest) -> (Just (Text'h_Draw'polyline a), rest)
																																																																																															(_,_) ->
																																																																																																case (fromElem c0) of
																																																																																																(Just a,rest) -> (Just (Text'h_Draw'polygon a), rest)
																																																																																																(_,_) ->
																																																																																																	case (fromElem c0) of
																																																																																																	(Just a,rest) -> (Just (Text'h_Draw'path a), rest)
																																																																																																	(_,_) ->
																																																																																																		case (fromElem c0) of
																																																																																																		(Just a,rest) -> (Just (Text'h_Draw'circle a), rest)
																																																																																																		(_,_) ->
																																																																																																			case (fromElem c0) of
																																																																																																			(Just a,rest) -> (Just (Text'h_Draw'ellipse a), rest)
																																																																																																			(_,_) ->
																																																																																																				case (fromElem c0) of
																																																																																																				(Just a,rest) -> (Just (Text'h_Draw'g a), rest)
																																																																																																				(_,_) ->
																																																																																																					case (fromElem c0) of
																																																																																																					(Just a,rest) -> (Just (Text'h_Draw'page_thumbnail a), rest)
																																																																																																					(_,_) ->
																																																																																																						case (fromElem c0) of
																																																																																																						(Just a,rest) -> (Just (Text'h_Draw'text_box a), rest)
																																																																																																						(_,_) ->
																																																																																																							case (fromElem c0) of
																																																																																																							(Just a,rest) -> (Just (Text'h_Draw'image a), rest)
																																																																																																							(_,_) ->
																																																																																																								case (fromElem c0) of
																																																																																																								(Just a,rest) -> (Just (Text'h_Draw'object a), rest)
																																																																																																								(_,_) ->
																																																																																																									case (fromElem c0) of
																																																																																																									(Just a,rest) -> (Just (Text'h_Draw'object_ole a), rest)
																																																																																																									(_,_) ->
																																																																																																										case (fromElem c0) of
																																																																																																										(Just a,rest) -> (Just (Text'h_Draw'applet a), rest)
																																																																																																										(_,_) ->
																																																																																																											case (fromElem c0) of
																																																																																																											(Just a,rest) -> (Just (Text'h_Draw'floating_frame a), rest)
																																																																																																											(_,_) ->
																																																																																																												case (fromElem c0) of
																																																																																																												(Just a,rest) -> (Just (Text'h_Draw'plugin a), rest)
																																																																																																												(_,_) ->
																																																																																																													case (fromElem c0) of
																																																																																																													(Just a,rest) -> (Just (Text'h_Draw'measure a), rest)
																																																																																																													(_,_) ->
																																																																																																														case (fromElem c0) of
																																																																																																														(Just a,rest) -> (Just (Text'h_Draw'caption a), rest)
																																																																																																														(_,_) ->
																																																																																																															case (fromElem c0) of
																																																																																																															(Just a,rest) -> (Just (Text'h_Draw'connector a), rest)
																																																																																																															(_,_) ->
																																																																																																																case (fromElem c0) of
																																																																																																																(Just a,rest) -> (Just (Text'h_Chart'chart a), rest)
																																																																																																																(_,_) ->
																																																																																																																	case (fromElem c0) of
																																																																																																																	(Just a,rest) -> (Just (Text'h_Dr3d'scene a), rest)
																																																																																																																	(_,_) ->
																																																																																																																		case (fromElem c0) of
																																																																																																																		(Just a,rest) -> (Just (Text'h_Draw'control a), rest)
																																																																																																																		(_,_) ->
																																																																																																																			case (fromElem c0) of
																																																																																																																			(Just a,rest) -> (Just (Text'h_Text'toc_mark_start a), rest)
																																																																																																																			(_,_) ->
																																																																																																																				case (fromElem c0) of
																																																																																																																				(Just a,rest) -> (Just (Text'h_Text'toc_mark_end a), rest)
																																																																																																																				(_,_) ->
																																																																																																																					case (fromElem c0) of
																																																																																																																					(Just a,rest) -> (Just (Text'h_Text'toc_mark a), rest)
																																																																																																																					(_,_) ->
																																																																																																																						case (fromElem c0) of
																																																																																																																						(Just a,rest) -> (Just (Text'h_Text'user_index_mark_start a), rest)
																																																																																																																						(_,_) ->
																																																																																																																							case (fromElem c0) of
																																																																																																																							(Just a,rest) -> (Just (Text'h_Text'user_index_mark_end a), rest)
																																																																																																																							(_,_) ->
																																																																																																																								case (fromElem c0) of
																																																																																																																								(Just a,rest) -> (Just (Text'h_Text'user_index_mark a), rest)
																																																																																																																								(_,_) ->
																																																																																																																									case (fromElem c0) of
																																																																																																																									(Just a,rest) -> (Just (Text'h_Text'alphabetical_index_mark_start a), rest)
																																																																																																																									(_,_) ->
																																																																																																																										case (fromElem c0) of
																																																																																																																										(Just a,rest) -> (Just (Text'h_Text'alphabetical_index_mark_end a), rest)
																																																																																																																										(_,_) ->
																																																																																																																											case (fromElem c0) of
																																																																																																																											(Just a,rest) -> (Just (Text'h_Text'alphabetical_index_mark a), rest)
																																																																																																																											(_,_) ->
																																																																																																																												case (fromElem c0) of
																																																																																																																												(Just a,rest) -> (Just (Text'h_Text'change a), rest)
																																																																																																																												(_,_) ->
																																																																																																																													case (fromElem c0) of
																																																																																																																													(Just a,rest) -> (Just (Text'h_Text'change_start a), rest)
																																																																																																																													(_,_) ->
																																																																																																																														case (fromElem c0) of
																																																																																																																														(Just a,rest) -> (Just (Text'h_Text'change_end a), rest)
																																																																																																																														(_,_) ->
																																																																																																																															case (fromElem c0) of
																																																																																																																															(Just a,rest) -> (Just (Text'h_Draw'a a), rest)
																																																																																																																															(_,_) ->
																																																																																																																																case (fromElem c0) of
																																																																																																																																(Just a,rest) -> (Just (Text'h_Text'ruby a), rest)
																																																																																																																																(_,_) ->
																																																																																																																																    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'h_Str a) = toText a
    toElem (Text'h_Text'span a) = toElem a
    toElem (Text'h_Text'tab_stop a) = toElem a
    toElem (Text'h_Text's a) = toElem a
    toElem (Text'h_Text'line_break a) = toElem a
    toElem (Text'h_Text'footnote a) = toElem a
    toElem (Text'h_Text'endnote a) = toElem a
    toElem (Text'h_Text'a a) = toElem a
    toElem (Text'h_Text'bookmark a) = toElem a
    toElem (Text'h_Text'bookmark_start a) = toElem a
    toElem (Text'h_Text'bookmark_end a) = toElem a
    toElem (Text'h_Text'reference_mark a) = toElem a
    toElem (Text'h_Text'reference_mark_start a) = toElem a
    toElem (Text'h_Text'reference_mark_end a) = toElem a
    toElem (Text'h_Text'date a) = toElem a
    toElem (Text'h_Text'time a) = toElem a
    toElem (Text'h_Text'page_number a) = toElem a
    toElem (Text'h_Text'page_continuation a) = toElem a
    toElem (Text'h_Text'sender_firstname a) = toElem a
    toElem (Text'h_Text'sender_lastname a) = toElem a
    toElem (Text'h_Text'sender_initials a) = toElem a
    toElem (Text'h_Text'sender_title a) = toElem a
    toElem (Text'h_Text'sender_position a) = toElem a
    toElem (Text'h_Text'sender_email a) = toElem a
    toElem (Text'h_Text'sender_phone_private a) = toElem a
    toElem (Text'h_Text'sender_fax a) = toElem a
    toElem (Text'h_Text'sender_company a) = toElem a
    toElem (Text'h_Text'sender_phone_work a) = toElem a
    toElem (Text'h_Text'sender_street a) = toElem a
    toElem (Text'h_Text'sender_city a) = toElem a
    toElem (Text'h_Text'sender_postal_code a) = toElem a
    toElem (Text'h_Text'sender_country a) = toElem a
    toElem (Text'h_Text'sender_state_or_province a) = toElem a
    toElem (Text'h_Text'author_name a) = toElem a
    toElem (Text'h_Text'author_initials a) = toElem a
    toElem (Text'h_Text'placeholder a) = toElem a
    toElem (Text'h_Text'variable_set a) = toElem a
    toElem (Text'h_Text'variable_get a) = toElem a
    toElem (Text'h_Text'variable_input a) = toElem a
    toElem (Text'h_Text'user_field_get a) = toElem a
    toElem (Text'h_Text'user_field_input a) = toElem a
    toElem (Text'h_Text'sequence a) = toElem a
    toElem (Text'h_Text'expression a) = toElem a
    toElem (Text'h_Text'text_input a) = toElem a
    toElem (Text'h_Text'database_display a) = toElem a
    toElem (Text'h_Text'database_next a) = toElem a
    toElem (Text'h_Text'database_select a) = toElem a
    toElem (Text'h_Text'database_row_number a) = toElem a
    toElem (Text'h_Text'database_name a) = toElem a
    toElem (Text'h_Text'initial_creator a) = toElem a
    toElem (Text'h_Text'creation_date a) = toElem a
    toElem (Text'h_Text'creation_time a) = toElem a
    toElem (Text'h_Text'description a) = toElem a
    toElem (Text'h_Text'user_defined a) = toElem a
    toElem (Text'h_Text'print_time a) = toElem a
    toElem (Text'h_Text'print_date a) = toElem a
    toElem (Text'h_Text'printed_by a) = toElem a
    toElem (Text'h_Text'title a) = toElem a
    toElem (Text'h_Text'subject a) = toElem a
    toElem (Text'h_Text'keywords a) = toElem a
    toElem (Text'h_Text'editing_cycles a) = toElem a
    toElem (Text'h_Text'editing_duration a) = toElem a
    toElem (Text'h_Text'modification_time a) = toElem a
    toElem (Text'h_Text'modification_date a) = toElem a
    toElem (Text'h_Text'creator a) = toElem a
    toElem (Text'h_Text'conditional_text a) = toElem a
    toElem (Text'h_Text'hidden_text a) = toElem a
    toElem (Text'h_Text'hidden_paragraph a) = toElem a
    toElem (Text'h_Text'chapter a) = toElem a
    toElem (Text'h_Text'file_name a) = toElem a
    toElem (Text'h_Text'template_name a) = toElem a
    toElem (Text'h_Text'page_variable_set a) = toElem a
    toElem (Text'h_Text'page_variable_get a) = toElem a
    toElem (Text'h_Text'execute_macro a) = toElem a
    toElem (Text'h_Text'dde_connection a) = toElem a
    toElem (Text'h_Text'reference_ref a) = toElem a
    toElem (Text'h_Text'sequence_ref a) = toElem a
    toElem (Text'h_Text'bookmark_ref a) = toElem a
    toElem (Text'h_Text'footnote_ref a) = toElem a
    toElem (Text'h_Text'endnote_ref a) = toElem a
    toElem (Text'h_Text'sheet_name a) = toElem a
    toElem (Text'h_Text'bibliography_mark a) = toElem a
    toElem (Text'h_Text'page_count a) = toElem a
    toElem (Text'h_Text'paragraph_count a) = toElem a
    toElem (Text'h_Text'word_count a) = toElem a
    toElem (Text'h_Text'character_count a) = toElem a
    toElem (Text'h_Text'table_count a) = toElem a
    toElem (Text'h_Text'image_count a) = toElem a
    toElem (Text'h_Text'object_count a) = toElem a
    toElem (Text'h_Office'annotation a) = toElem a
    toElem (Text'h_Text'script a) = toElem a
    toElem (Text'h_Text'measure a) = toElem a
    toElem (Text'h_Draw'rect a) = toElem a
    toElem (Text'h_Draw'line a) = toElem a
    toElem (Text'h_Draw'polyline a) = toElem a
    toElem (Text'h_Draw'polygon a) = toElem a
    toElem (Text'h_Draw'path a) = toElem a
    toElem (Text'h_Draw'circle a) = toElem a
    toElem (Text'h_Draw'ellipse a) = toElem a
    toElem (Text'h_Draw'g a) = toElem a
    toElem (Text'h_Draw'page_thumbnail a) = toElem a
    toElem (Text'h_Draw'text_box a) = toElem a
    toElem (Text'h_Draw'image a) = toElem a
    toElem (Text'h_Draw'object a) = toElem a
    toElem (Text'h_Draw'object_ole a) = toElem a
    toElem (Text'h_Draw'applet a) = toElem a
    toElem (Text'h_Draw'floating_frame a) = toElem a
    toElem (Text'h_Draw'plugin a) = toElem a
    toElem (Text'h_Draw'measure a) = toElem a
    toElem (Text'h_Draw'caption a) = toElem a
    toElem (Text'h_Draw'connector a) = toElem a
    toElem (Text'h_Chart'chart a) = toElem a
    toElem (Text'h_Dr3d'scene a) = toElem a
    toElem (Text'h_Draw'control a) = toElem a
    toElem (Text'h_Text'toc_mark_start a) = toElem a
    toElem (Text'h_Text'toc_mark_end a) = toElem a
    toElem (Text'h_Text'toc_mark a) = toElem a
    toElem (Text'h_Text'user_index_mark_start a) = toElem a
    toElem (Text'h_Text'user_index_mark_end a) = toElem a
    toElem (Text'h_Text'user_index_mark a) = toElem a
    toElem (Text'h_Text'alphabetical_index_mark_start a) = toElem a
    toElem (Text'h_Text'alphabetical_index_mark_end a) = toElem a
    toElem (Text'h_Text'alphabetical_index_mark a) = toElem a
    toElem (Text'h_Text'change a) = toElem a
    toElem (Text'h_Text'change_start a) = toElem a
    toElem (Text'h_Text'change_end a) = toElem a
    toElem (Text'h_Draw'a a) = toElem a
    toElem (Text'h_Text'ruby a) = toElem a
instance XmlContent Text'span where
    fromElem (CElem (Elem "text:span" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'span (fromAttrs as) a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'span as a) =
	[CElem (Elem "text:span" (toAttrs as) (concatMap toElem a))]
instance XmlAttributes Text'span_Attrs where
    fromAttrs as =
	Text'span_Attrs
	  { text'spanText'style_name = definiteA fromAttrToStr "text:span" "text:style-name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:style-name" (text'spanText'style_name v)
	]
instance XmlContent Text'span_ where
    fromElem c0 =
	case (fromText c0) of
	(Just a,rest) -> (Just (Text'span_Str a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Text'span_Text'span a), rest)
		(_,_) ->
			case (fromElem c0) of
			(Just a,rest) -> (Just (Text'span_Text'tab_stop a), rest)
			(_,_) ->
				case (fromElem c0) of
				(Just a,rest) -> (Just (Text'span_Text's a), rest)
				(_,_) ->
					case (fromElem c0) of
					(Just a,rest) -> (Just (Text'span_Text'line_break a), rest)
					(_,_) ->
						case (fromElem c0) of
						(Just a,rest) -> (Just (Text'span_Text'footnote a), rest)
						(_,_) ->
							case (fromElem c0) of
							(Just a,rest) -> (Just (Text'span_Text'endnote a), rest)
							(_,_) ->
								case (fromElem c0) of
								(Just a,rest) -> (Just (Text'span_Text'a a), rest)
								(_,_) ->
									case (fromElem c0) of
									(Just a,rest) -> (Just (Text'span_Text'bookmark a), rest)
									(_,_) ->
										case (fromElem c0) of
										(Just a,rest) -> (Just (Text'span_Text'bookmark_start a), rest)
										(_,_) ->
											case (fromElem c0) of
											(Just a,rest) -> (Just (Text'span_Text'bookmark_end a), rest)
											(_,_) ->
												case (fromElem c0) of
												(Just a,rest) -> (Just (Text'span_Text'reference_mark a), rest)
												(_,_) ->
													case (fromElem c0) of
													(Just a,rest) -> (Just (Text'span_Text'reference_mark_start a), rest)
													(_,_) ->
														case (fromElem c0) of
														(Just a,rest) -> (Just (Text'span_Text'reference_mark_end a), rest)
														(_,_) ->
															case (fromElem c0) of
															(Just a,rest) -> (Just (Text'span_Text'date a), rest)
															(_,_) ->
																case (fromElem c0) of
																(Just a,rest) -> (Just (Text'span_Text'time a), rest)
																(_,_) ->
																	case (fromElem c0) of
																	(Just a,rest) -> (Just (Text'span_Text'page_number a), rest)
																	(_,_) ->
																		case (fromElem c0) of
																		(Just a,rest) -> (Just (Text'span_Text'page_continuation a), rest)
																		(_,_) ->
																			case (fromElem c0) of
																			(Just a,rest) -> (Just (Text'span_Text'sender_firstname a), rest)
																			(_,_) ->
																				case (fromElem c0) of
																				(Just a,rest) -> (Just (Text'span_Text'sender_lastname a), rest)
																				(_,_) ->
																					case (fromElem c0) of
																					(Just a,rest) -> (Just (Text'span_Text'sender_initials a), rest)
																					(_,_) ->
																						case (fromElem c0) of
																						(Just a,rest) -> (Just (Text'span_Text'sender_title a), rest)
																						(_,_) ->
																							case (fromElem c0) of
																							(Just a,rest) -> (Just (Text'span_Text'sender_position a), rest)
																							(_,_) ->
																								case (fromElem c0) of
																								(Just a,rest) -> (Just (Text'span_Text'sender_email a), rest)
																								(_,_) ->
																									case (fromElem c0) of
																									(Just a,rest) -> (Just (Text'span_Text'sender_phone_private a), rest)
																									(_,_) ->
																										case (fromElem c0) of
																										(Just a,rest) -> (Just (Text'span_Text'sender_fax a), rest)
																										(_,_) ->
																											case (fromElem c0) of
																											(Just a,rest) -> (Just (Text'span_Text'sender_company a), rest)
																											(_,_) ->
																												case (fromElem c0) of
																												(Just a,rest) -> (Just (Text'span_Text'sender_phone_work a), rest)
																												(_,_) ->
																													case (fromElem c0) of
																													(Just a,rest) -> (Just (Text'span_Text'sender_street a), rest)
																													(_,_) ->
																														case (fromElem c0) of
																														(Just a,rest) -> (Just (Text'span_Text'sender_city a), rest)
																														(_,_) ->
																															case (fromElem c0) of
																															(Just a,rest) -> (Just (Text'span_Text'sender_postal_code a), rest)
																															(_,_) ->
																																case (fromElem c0) of
																																(Just a,rest) -> (Just (Text'span_Text'sender_country a), rest)
																																(_,_) ->
																																	case (fromElem c0) of
																																	(Just a,rest) -> (Just (Text'span_Text'sender_state_or_province a), rest)
																																	(_,_) ->
																																		case (fromElem c0) of
																																		(Just a,rest) -> (Just (Text'span_Text'author_name a), rest)
																																		(_,_) ->
																																			case (fromElem c0) of
																																			(Just a,rest) -> (Just (Text'span_Text'author_initials a), rest)
																																			(_,_) ->
																																				case (fromElem c0) of
																																				(Just a,rest) -> (Just (Text'span_Text'placeholder a), rest)
																																				(_,_) ->
																																					case (fromElem c0) of
																																					(Just a,rest) -> (Just (Text'span_Text'variable_set a), rest)
																																					(_,_) ->
																																						case (fromElem c0) of
																																						(Just a,rest) -> (Just (Text'span_Text'variable_get a), rest)
																																						(_,_) ->
																																							case (fromElem c0) of
																																							(Just a,rest) -> (Just (Text'span_Text'variable_input a), rest)
																																							(_,_) ->
																																								case (fromElem c0) of
																																								(Just a,rest) -> (Just (Text'span_Text'user_field_get a), rest)
																																								(_,_) ->
																																									case (fromElem c0) of
																																									(Just a,rest) -> (Just (Text'span_Text'user_field_input a), rest)
																																									(_,_) ->
																																										case (fromElem c0) of
																																										(Just a,rest) -> (Just (Text'span_Text'sequence a), rest)
																																										(_,_) ->
																																											case (fromElem c0) of
																																											(Just a,rest) -> (Just (Text'span_Text'expression a), rest)
																																											(_,_) ->
																																												case (fromElem c0) of
																																												(Just a,rest) -> (Just (Text'span_Text'text_input a), rest)
																																												(_,_) ->
																																													case (fromElem c0) of
																																													(Just a,rest) -> (Just (Text'span_Text'database_display a), rest)
																																													(_,_) ->
																																														case (fromElem c0) of
																																														(Just a,rest) -> (Just (Text'span_Text'database_next a), rest)
																																														(_,_) ->
																																															case (fromElem c0) of
																																															(Just a,rest) -> (Just (Text'span_Text'database_select a), rest)
																																															(_,_) ->
																																																case (fromElem c0) of
																																																(Just a,rest) -> (Just (Text'span_Text'database_row_number a), rest)
																																																(_,_) ->
																																																	case (fromElem c0) of
																																																	(Just a,rest) -> (Just (Text'span_Text'database_name a), rest)
																																																	(_,_) ->
																																																		case (fromElem c0) of
																																																		(Just a,rest) -> (Just (Text'span_Text'initial_creator a), rest)
																																																		(_,_) ->
																																																			case (fromElem c0) of
																																																			(Just a,rest) -> (Just (Text'span_Text'creation_date a), rest)
																																																			(_,_) ->
																																																				case (fromElem c0) of
																																																				(Just a,rest) -> (Just (Text'span_Text'creation_time a), rest)
																																																				(_,_) ->
																																																					case (fromElem c0) of
																																																					(Just a,rest) -> (Just (Text'span_Text'description a), rest)
																																																					(_,_) ->
																																																						case (fromElem c0) of
																																																						(Just a,rest) -> (Just (Text'span_Text'user_defined a), rest)
																																																						(_,_) ->
																																																							case (fromElem c0) of
																																																							(Just a,rest) -> (Just (Text'span_Text'print_time a), rest)
																																																							(_,_) ->
																																																								case (fromElem c0) of
																																																								(Just a,rest) -> (Just (Text'span_Text'print_date a), rest)
																																																								(_,_) ->
																																																									case (fromElem c0) of
																																																									(Just a,rest) -> (Just (Text'span_Text'printed_by a), rest)
																																																									(_,_) ->
																																																										case (fromElem c0) of
																																																										(Just a,rest) -> (Just (Text'span_Text'title a), rest)
																																																										(_,_) ->
																																																											case (fromElem c0) of
																																																											(Just a,rest) -> (Just (Text'span_Text'subject a), rest)
																																																											(_,_) ->
																																																												case (fromElem c0) of
																																																												(Just a,rest) -> (Just (Text'span_Text'keywords a), rest)
																																																												(_,_) ->
																																																													case (fromElem c0) of
																																																													(Just a,rest) -> (Just (Text'span_Text'editing_cycles a), rest)
																																																													(_,_) ->
																																																														case (fromElem c0) of
																																																														(Just a,rest) -> (Just (Text'span_Text'editing_duration a), rest)
																																																														(_,_) ->
																																																															case (fromElem c0) of
																																																															(Just a,rest) -> (Just (Text'span_Text'modification_time a), rest)
																																																															(_,_) ->
																																																																case (fromElem c0) of
																																																																(Just a,rest) -> (Just (Text'span_Text'modification_date a), rest)
																																																																(_,_) ->
																																																																	case (fromElem c0) of
																																																																	(Just a,rest) -> (Just (Text'span_Text'creator a), rest)
																																																																	(_,_) ->
																																																																		case (fromElem c0) of
																																																																		(Just a,rest) -> (Just (Text'span_Text'conditional_text a), rest)
																																																																		(_,_) ->
																																																																			case (fromElem c0) of
																																																																			(Just a,rest) -> (Just (Text'span_Text'hidden_text a), rest)
																																																																			(_,_) ->
																																																																				case (fromElem c0) of
																																																																				(Just a,rest) -> (Just (Text'span_Text'hidden_paragraph a), rest)
																																																																				(_,_) ->
																																																																					case (fromElem c0) of
																																																																					(Just a,rest) -> (Just (Text'span_Text'chapter a), rest)
																																																																					(_,_) ->
																																																																						case (fromElem c0) of
																																																																						(Just a,rest) -> (Just (Text'span_Text'file_name a), rest)
																																																																						(_,_) ->
																																																																							case (fromElem c0) of
																																																																							(Just a,rest) -> (Just (Text'span_Text'template_name a), rest)
																																																																							(_,_) ->
																																																																								case (fromElem c0) of
																																																																								(Just a,rest) -> (Just (Text'span_Text'page_variable_set a), rest)
																																																																								(_,_) ->
																																																																									case (fromElem c0) of
																																																																									(Just a,rest) -> (Just (Text'span_Text'page_variable_get a), rest)
																																																																									(_,_) ->
																																																																										case (fromElem c0) of
																																																																										(Just a,rest) -> (Just (Text'span_Text'execute_macro a), rest)
																																																																										(_,_) ->
																																																																											case (fromElem c0) of
																																																																											(Just a,rest) -> (Just (Text'span_Text'dde_connection a), rest)
																																																																											(_,_) ->
																																																																												case (fromElem c0) of
																																																																												(Just a,rest) -> (Just (Text'span_Text'reference_ref a), rest)
																																																																												(_,_) ->
																																																																													case (fromElem c0) of
																																																																													(Just a,rest) -> (Just (Text'span_Text'sequence_ref a), rest)
																																																																													(_,_) ->
																																																																														case (fromElem c0) of
																																																																														(Just a,rest) -> (Just (Text'span_Text'bookmark_ref a), rest)
																																																																														(_,_) ->
																																																																															case (fromElem c0) of
																																																																															(Just a,rest) -> (Just (Text'span_Text'footnote_ref a), rest)
																																																																															(_,_) ->
																																																																																case (fromElem c0) of
																																																																																(Just a,rest) -> (Just (Text'span_Text'endnote_ref a), rest)
																																																																																(_,_) ->
																																																																																	case (fromElem c0) of
																																																																																	(Just a,rest) -> (Just (Text'span_Text'sheet_name a), rest)
																																																																																	(_,_) ->
																																																																																		case (fromElem c0) of
																																																																																		(Just a,rest) -> (Just (Text'span_Text'bibliography_mark a), rest)
																																																																																		(_,_) ->
																																																																																			case (fromElem c0) of
																																																																																			(Just a,rest) -> (Just (Text'span_Text'page_count a), rest)
																																																																																			(_,_) ->
																																																																																				case (fromElem c0) of
																																																																																				(Just a,rest) -> (Just (Text'span_Text'paragraph_count a), rest)
																																																																																				(_,_) ->
																																																																																					case (fromElem c0) of
																																																																																					(Just a,rest) -> (Just (Text'span_Text'word_count a), rest)
																																																																																					(_,_) ->
																																																																																						case (fromElem c0) of
																																																																																						(Just a,rest) -> (Just (Text'span_Text'character_count a), rest)
																																																																																						(_,_) ->
																																																																																							case (fromElem c0) of
																																																																																							(Just a,rest) -> (Just (Text'span_Text'table_count a), rest)
																																																																																							(_,_) ->
																																																																																								case (fromElem c0) of
																																																																																								(Just a,rest) -> (Just (Text'span_Text'image_count a), rest)
																																																																																								(_,_) ->
																																																																																									case (fromElem c0) of
																																																																																									(Just a,rest) -> (Just (Text'span_Text'object_count a), rest)
																																																																																									(_,_) ->
																																																																																										case (fromElem c0) of
																																																																																										(Just a,rest) -> (Just (Text'span_Office'annotation a), rest)
																																																																																										(_,_) ->
																																																																																											case (fromElem c0) of
																																																																																											(Just a,rest) -> (Just (Text'span_Text'script a), rest)
																																																																																											(_,_) ->
																																																																																												case (fromElem c0) of
																																																																																												(Just a,rest) -> (Just (Text'span_Text'measure a), rest)
																																																																																												(_,_) ->
																																																																																													case (fromElem c0) of
																																																																																													(Just a,rest) -> (Just (Text'span_Draw'rect a), rest)
																																																																																													(_,_) ->
																																																																																														case (fromElem c0) of
																																																																																														(Just a,rest) -> (Just (Text'span_Draw'line a), rest)
																																																																																														(_,_) ->
																																																																																															case (fromElem c0) of
																																																																																															(Just a,rest) -> (Just (Text'span_Draw'polyline a), rest)
																																																																																															(_,_) ->
																																																																																																case (fromElem c0) of
																																																																																																(Just a,rest) -> (Just (Text'span_Draw'polygon a), rest)
																																																																																																(_,_) ->
																																																																																																	case (fromElem c0) of
																																																																																																	(Just a,rest) -> (Just (Text'span_Draw'path a), rest)
																																																																																																	(_,_) ->
																																																																																																		case (fromElem c0) of
																																																																																																		(Just a,rest) -> (Just (Text'span_Draw'circle a), rest)
																																																																																																		(_,_) ->
																																																																																																			case (fromElem c0) of
																																																																																																			(Just a,rest) -> (Just (Text'span_Draw'ellipse a), rest)
																																																																																																			(_,_) ->
																																																																																																				case (fromElem c0) of
																																																																																																				(Just a,rest) -> (Just (Text'span_Draw'g a), rest)
																																																																																																				(_,_) ->
																																																																																																					case (fromElem c0) of
																																																																																																					(Just a,rest) -> (Just (Text'span_Draw'page_thumbnail a), rest)
																																																																																																					(_,_) ->
																																																																																																						case (fromElem c0) of
																																																																																																						(Just a,rest) -> (Just (Text'span_Draw'text_box a), rest)
																																																																																																						(_,_) ->
																																																																																																							case (fromElem c0) of
																																																																																																							(Just a,rest) -> (Just (Text'span_Draw'image a), rest)
																																																																																																							(_,_) ->
																																																																																																								case (fromElem c0) of
																																																																																																								(Just a,rest) -> (Just (Text'span_Draw'object a), rest)
																																																																																																								(_,_) ->
																																																																																																									case (fromElem c0) of
																																																																																																									(Just a,rest) -> (Just (Text'span_Draw'object_ole a), rest)
																																																																																																									(_,_) ->
																																																																																																										case (fromElem c0) of
																																																																																																										(Just a,rest) -> (Just (Text'span_Draw'applet a), rest)
																																																																																																										(_,_) ->
																																																																																																											case (fromElem c0) of
																																																																																																											(Just a,rest) -> (Just (Text'span_Draw'floating_frame a), rest)
																																																																																																											(_,_) ->
																																																																																																												case (fromElem c0) of
																																																																																																												(Just a,rest) -> (Just (Text'span_Draw'plugin a), rest)
																																																																																																												(_,_) ->
																																																																																																													case (fromElem c0) of
																																																																																																													(Just a,rest) -> (Just (Text'span_Draw'measure a), rest)
																																																																																																													(_,_) ->
																																																																																																														case (fromElem c0) of
																																																																																																														(Just a,rest) -> (Just (Text'span_Draw'caption a), rest)
																																																																																																														(_,_) ->
																																																																																																															case (fromElem c0) of
																																																																																																															(Just a,rest) -> (Just (Text'span_Draw'connector a), rest)
																																																																																																															(_,_) ->
																																																																																																																case (fromElem c0) of
																																																																																																																(Just a,rest) -> (Just (Text'span_Chart'chart a), rest)
																																																																																																																(_,_) ->
																																																																																																																	case (fromElem c0) of
																																																																																																																	(Just a,rest) -> (Just (Text'span_Dr3d'scene a), rest)
																																																																																																																	(_,_) ->
																																																																																																																		case (fromElem c0) of
																																																																																																																		(Just a,rest) -> (Just (Text'span_Draw'control a), rest)
																																																																																																																		(_,_) ->
																																																																																																																			case (fromElem c0) of
																																																																																																																			(Just a,rest) -> (Just (Text'span_Text'toc_mark_start a), rest)
																																																																																																																			(_,_) ->
																																																																																																																				case (fromElem c0) of
																																																																																																																				(Just a,rest) -> (Just (Text'span_Text'toc_mark_end a), rest)
																																																																																																																				(_,_) ->
																																																																																																																					case (fromElem c0) of
																																																																																																																					(Just a,rest) -> (Just (Text'span_Text'toc_mark a), rest)
																																																																																																																					(_,_) ->
																																																																																																																						case (fromElem c0) of
																																																																																																																						(Just a,rest) -> (Just (Text'span_Text'user_index_mark_start a), rest)
																																																																																																																						(_,_) ->
																																																																																																																							case (fromElem c0) of
																																																																																																																							(Just a,rest) -> (Just (Text'span_Text'user_index_mark_end a), rest)
																																																																																																																							(_,_) ->
																																																																																																																								case (fromElem c0) of
																																																																																																																								(Just a,rest) -> (Just (Text'span_Text'user_index_mark a), rest)
																																																																																																																								(_,_) ->
																																																																																																																									case (fromElem c0) of
																																																																																																																									(Just a,rest) -> (Just (Text'span_Text'alphabetical_index_mark_start a), rest)
																																																																																																																									(_,_) ->
																																																																																																																										case (fromElem c0) of
																																																																																																																										(Just a,rest) -> (Just (Text'span_Text'alphabetical_index_mark_end a), rest)
																																																																																																																										(_,_) ->
																																																																																																																											case (fromElem c0) of
																																																																																																																											(Just a,rest) -> (Just (Text'span_Text'alphabetical_index_mark a), rest)
																																																																																																																											(_,_) ->
																																																																																																																												case (fromElem c0) of
																																																																																																																												(Just a,rest) -> (Just (Text'span_Text'change a), rest)
																																																																																																																												(_,_) ->
																																																																																																																													case (fromElem c0) of
																																																																																																																													(Just a,rest) -> (Just (Text'span_Text'change_start a), rest)
																																																																																																																													(_,_) ->
																																																																																																																														case (fromElem c0) of
																																																																																																																														(Just a,rest) -> (Just (Text'span_Text'change_end a), rest)
																																																																																																																														(_,_) ->
																																																																																																																															case (fromElem c0) of
																																																																																																																															(Just a,rest) -> (Just (Text'span_Draw'a a), rest)
																																																																																																																															(_,_) ->
																																																																																																																																case (fromElem c0) of
																																																																																																																																(Just a,rest) -> (Just (Text'span_Text'ruby a), rest)
																																																																																																																																(_,_) ->
																																																																																																																																    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'span_Str a) = toText a
    toElem (Text'span_Text'span a) = toElem a
    toElem (Text'span_Text'tab_stop a) = toElem a
    toElem (Text'span_Text's a) = toElem a
    toElem (Text'span_Text'line_break a) = toElem a
    toElem (Text'span_Text'footnote a) = toElem a
    toElem (Text'span_Text'endnote a) = toElem a
    toElem (Text'span_Text'a a) = toElem a
    toElem (Text'span_Text'bookmark a) = toElem a
    toElem (Text'span_Text'bookmark_start a) = toElem a
    toElem (Text'span_Text'bookmark_end a) = toElem a
    toElem (Text'span_Text'reference_mark a) = toElem a
    toElem (Text'span_Text'reference_mark_start a) = toElem a
    toElem (Text'span_Text'reference_mark_end a) = toElem a
    toElem (Text'span_Text'date a) = toElem a
    toElem (Text'span_Text'time a) = toElem a
    toElem (Text'span_Text'page_number a) = toElem a
    toElem (Text'span_Text'page_continuation a) = toElem a
    toElem (Text'span_Text'sender_firstname a) = toElem a
    toElem (Text'span_Text'sender_lastname a) = toElem a
    toElem (Text'span_Text'sender_initials a) = toElem a
    toElem (Text'span_Text'sender_title a) = toElem a
    toElem (Text'span_Text'sender_position a) = toElem a
    toElem (Text'span_Text'sender_email a) = toElem a
    toElem (Text'span_Text'sender_phone_private a) = toElem a
    toElem (Text'span_Text'sender_fax a) = toElem a
    toElem (Text'span_Text'sender_company a) = toElem a
    toElem (Text'span_Text'sender_phone_work a) = toElem a
    toElem (Text'span_Text'sender_street a) = toElem a
    toElem (Text'span_Text'sender_city a) = toElem a
    toElem (Text'span_Text'sender_postal_code a) = toElem a
    toElem (Text'span_Text'sender_country a) = toElem a
    toElem (Text'span_Text'sender_state_or_province a) = toElem a
    toElem (Text'span_Text'author_name a) = toElem a
    toElem (Text'span_Text'author_initials a) = toElem a
    toElem (Text'span_Text'placeholder a) = toElem a
    toElem (Text'span_Text'variable_set a) = toElem a
    toElem (Text'span_Text'variable_get a) = toElem a
    toElem (Text'span_Text'variable_input a) = toElem a
    toElem (Text'span_Text'user_field_get a) = toElem a
    toElem (Text'span_Text'user_field_input a) = toElem a
    toElem (Text'span_Text'sequence a) = toElem a
    toElem (Text'span_Text'expression a) = toElem a
    toElem (Text'span_Text'text_input a) = toElem a
    toElem (Text'span_Text'database_display a) = toElem a
    toElem (Text'span_Text'database_next a) = toElem a
    toElem (Text'span_Text'database_select a) = toElem a
    toElem (Text'span_Text'database_row_number a) = toElem a
    toElem (Text'span_Text'database_name a) = toElem a
    toElem (Text'span_Text'initial_creator a) = toElem a
    toElem (Text'span_Text'creation_date a) = toElem a
    toElem (Text'span_Text'creation_time a) = toElem a
    toElem (Text'span_Text'description a) = toElem a
    toElem (Text'span_Text'user_defined a) = toElem a
    toElem (Text'span_Text'print_time a) = toElem a
    toElem (Text'span_Text'print_date a) = toElem a
    toElem (Text'span_Text'printed_by a) = toElem a
    toElem (Text'span_Text'title a) = toElem a
    toElem (Text'span_Text'subject a) = toElem a
    toElem (Text'span_Text'keywords a) = toElem a
    toElem (Text'span_Text'editing_cycles a) = toElem a
    toElem (Text'span_Text'editing_duration a) = toElem a
    toElem (Text'span_Text'modification_time a) = toElem a
    toElem (Text'span_Text'modification_date a) = toElem a
    toElem (Text'span_Text'creator a) = toElem a
    toElem (Text'span_Text'conditional_text a) = toElem a
    toElem (Text'span_Text'hidden_text a) = toElem a
    toElem (Text'span_Text'hidden_paragraph a) = toElem a
    toElem (Text'span_Text'chapter a) = toElem a
    toElem (Text'span_Text'file_name a) = toElem a
    toElem (Text'span_Text'template_name a) = toElem a
    toElem (Text'span_Text'page_variable_set a) = toElem a
    toElem (Text'span_Text'page_variable_get a) = toElem a
    toElem (Text'span_Text'execute_macro a) = toElem a
    toElem (Text'span_Text'dde_connection a) = toElem a
    toElem (Text'span_Text'reference_ref a) = toElem a
    toElem (Text'span_Text'sequence_ref a) = toElem a
    toElem (Text'span_Text'bookmark_ref a) = toElem a
    toElem (Text'span_Text'footnote_ref a) = toElem a
    toElem (Text'span_Text'endnote_ref a) = toElem a
    toElem (Text'span_Text'sheet_name a) = toElem a
    toElem (Text'span_Text'bibliography_mark a) = toElem a
    toElem (Text'span_Text'page_count a) = toElem a
    toElem (Text'span_Text'paragraph_count a) = toElem a
    toElem (Text'span_Text'word_count a) = toElem a
    toElem (Text'span_Text'character_count a) = toElem a
    toElem (Text'span_Text'table_count a) = toElem a
    toElem (Text'span_Text'image_count a) = toElem a
    toElem (Text'span_Text'object_count a) = toElem a
    toElem (Text'span_Office'annotation a) = toElem a
    toElem (Text'span_Text'script a) = toElem a
    toElem (Text'span_Text'measure a) = toElem a
    toElem (Text'span_Draw'rect a) = toElem a
    toElem (Text'span_Draw'line a) = toElem a
    toElem (Text'span_Draw'polyline a) = toElem a
    toElem (Text'span_Draw'polygon a) = toElem a
    toElem (Text'span_Draw'path a) = toElem a
    toElem (Text'span_Draw'circle a) = toElem a
    toElem (Text'span_Draw'ellipse a) = toElem a
    toElem (Text'span_Draw'g a) = toElem a
    toElem (Text'span_Draw'page_thumbnail a) = toElem a
    toElem (Text'span_Draw'text_box a) = toElem a
    toElem (Text'span_Draw'image a) = toElem a
    toElem (Text'span_Draw'object a) = toElem a
    toElem (Text'span_Draw'object_ole a) = toElem a
    toElem (Text'span_Draw'applet a) = toElem a
    toElem (Text'span_Draw'floating_frame a) = toElem a
    toElem (Text'span_Draw'plugin a) = toElem a
    toElem (Text'span_Draw'measure a) = toElem a
    toElem (Text'span_Draw'caption a) = toElem a
    toElem (Text'span_Draw'connector a) = toElem a
    toElem (Text'span_Chart'chart a) = toElem a
    toElem (Text'span_Dr3d'scene a) = toElem a
    toElem (Text'span_Draw'control a) = toElem a
    toElem (Text'span_Text'toc_mark_start a) = toElem a
    toElem (Text'span_Text'toc_mark_end a) = toElem a
    toElem (Text'span_Text'toc_mark a) = toElem a
    toElem (Text'span_Text'user_index_mark_start a) = toElem a
    toElem (Text'span_Text'user_index_mark_end a) = toElem a
    toElem (Text'span_Text'user_index_mark a) = toElem a
    toElem (Text'span_Text'alphabetical_index_mark_start a) = toElem a
    toElem (Text'span_Text'alphabetical_index_mark_end a) = toElem a
    toElem (Text'span_Text'alphabetical_index_mark a) = toElem a
    toElem (Text'span_Text'change a) = toElem a
    toElem (Text'span_Text'change_start a) = toElem a
    toElem (Text'span_Text'change_end a) = toElem a
    toElem (Text'span_Draw'a a) = toElem a
    toElem (Text'span_Text'ruby a) = toElem a
instance XmlContent Text'a where
    fromElem (CElem (Elem "text:a" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'a (fromAttrs as) a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'a as a) =
	[CElem (Elem "text:a" (toAttrs as) (concatMap toElem a))]
instance XmlAttributes Text'a_Attrs where
    fromAttrs as =
	Text'a_Attrs
	  { text'aXlink'href = definiteA fromAttrToStr "text:a" "xlink:href" as
	  , text'aXlink'type = defaultA fromAttrToTyp Text'a_xlink'type_simple "xlink:type" as
	  , text'aXlink'actuate = defaultA fromAttrToTyp Text'a_xlink'actuate_onRequest "xlink:actuate" as
	  , text'aXlink'show = defaultA fromAttrToTyp Text'a_xlink'show_replace "xlink:show" as
	  , text'aOffice'name = possibleA fromAttrToStr "office:name" as
	  , text'aOffice'target_frame_name = possibleA fromAttrToStr "office:target-frame-name" as
	  , text'aText'style_name = possibleA fromAttrToStr "text:style-name" as
	  , text'aText'visited_style_name = possibleA fromAttrToStr "text:visited-style-name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "xlink:href" (text'aXlink'href v)
	, defaultToAttr toAttrFrTyp "xlink:type" (text'aXlink'type v)
	, defaultToAttr toAttrFrTyp "xlink:actuate" (text'aXlink'actuate v)
	, defaultToAttr toAttrFrTyp "xlink:show" (text'aXlink'show v)
	, maybeToAttr toAttrFrStr "office:name" (text'aOffice'name v)
	, maybeToAttr toAttrFrStr "office:target-frame-name" (text'aOffice'target_frame_name v)
	, maybeToAttr toAttrFrStr "text:style-name" (text'aText'style_name v)
	, maybeToAttr toAttrFrStr "text:visited-style-name" (text'aText'visited_style_name v)
	]
instance XmlContent Text'a_ where
    fromElem c0 =
	case (fromText c0) of
	(Just a,rest) -> (Just (Text'a_Str a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Text'a_Office'events a), rest)
		(_,_) ->
			case (fromElem c0) of
			(Just a,rest) -> (Just (Text'a_Text'span a), rest)
			(_,_) ->
				case (fromElem c0) of
				(Just a,rest) -> (Just (Text'a_Text'tab_stop a), rest)
				(_,_) ->
					case (fromElem c0) of
					(Just a,rest) -> (Just (Text'a_Text's a), rest)
					(_,_) ->
						case (fromElem c0) of
						(Just a,rest) -> (Just (Text'a_Text'line_break a), rest)
						(_,_) ->
							case (fromElem c0) of
							(Just a,rest) -> (Just (Text'a_Text'footnote a), rest)
							(_,_) ->
								case (fromElem c0) of
								(Just a,rest) -> (Just (Text'a_Text'endnote a), rest)
								(_,_) ->
									case (fromElem c0) of
									(Just a,rest) -> (Just (Text'a_Text'a a), rest)
									(_,_) ->
										case (fromElem c0) of
										(Just a,rest) -> (Just (Text'a_Text'bookmark a), rest)
										(_,_) ->
											case (fromElem c0) of
											(Just a,rest) -> (Just (Text'a_Text'bookmark_start a), rest)
											(_,_) ->
												case (fromElem c0) of
												(Just a,rest) -> (Just (Text'a_Text'bookmark_end a), rest)
												(_,_) ->
													case (fromElem c0) of
													(Just a,rest) -> (Just (Text'a_Text'reference_mark a), rest)
													(_,_) ->
														case (fromElem c0) of
														(Just a,rest) -> (Just (Text'a_Text'reference_mark_start a), rest)
														(_,_) ->
															case (fromElem c0) of
															(Just a,rest) -> (Just (Text'a_Text'reference_mark_end a), rest)
															(_,_) ->
																case (fromElem c0) of
																(Just a,rest) -> (Just (Text'a_Text'date a), rest)
																(_,_) ->
																	case (fromElem c0) of
																	(Just a,rest) -> (Just (Text'a_Text'time a), rest)
																	(_,_) ->
																		case (fromElem c0) of
																		(Just a,rest) -> (Just (Text'a_Text'page_number a), rest)
																		(_,_) ->
																			case (fromElem c0) of
																			(Just a,rest) -> (Just (Text'a_Text'page_continuation a), rest)
																			(_,_) ->
																				case (fromElem c0) of
																				(Just a,rest) -> (Just (Text'a_Text'sender_firstname a), rest)
																				(_,_) ->
																					case (fromElem c0) of
																					(Just a,rest) -> (Just (Text'a_Text'sender_lastname a), rest)
																					(_,_) ->
																						case (fromElem c0) of
																						(Just a,rest) -> (Just (Text'a_Text'sender_initials a), rest)
																						(_,_) ->
																							case (fromElem c0) of
																							(Just a,rest) -> (Just (Text'a_Text'sender_title a), rest)
																							(_,_) ->
																								case (fromElem c0) of
																								(Just a,rest) -> (Just (Text'a_Text'sender_position a), rest)
																								(_,_) ->
																									case (fromElem c0) of
																									(Just a,rest) -> (Just (Text'a_Text'sender_email a), rest)
																									(_,_) ->
																										case (fromElem c0) of
																										(Just a,rest) -> (Just (Text'a_Text'sender_phone_private a), rest)
																										(_,_) ->
																											case (fromElem c0) of
																											(Just a,rest) -> (Just (Text'a_Text'sender_fax a), rest)
																											(_,_) ->
																												case (fromElem c0) of
																												(Just a,rest) -> (Just (Text'a_Text'sender_company a), rest)
																												(_,_) ->
																													case (fromElem c0) of
																													(Just a,rest) -> (Just (Text'a_Text'sender_phone_work a), rest)
																													(_,_) ->
																														case (fromElem c0) of
																														(Just a,rest) -> (Just (Text'a_Text'sender_street a), rest)
																														(_,_) ->
																															case (fromElem c0) of
																															(Just a,rest) -> (Just (Text'a_Text'sender_city a), rest)
																															(_,_) ->
																																case (fromElem c0) of
																																(Just a,rest) -> (Just (Text'a_Text'sender_postal_code a), rest)
																																(_,_) ->
																																	case (fromElem c0) of
																																	(Just a,rest) -> (Just (Text'a_Text'sender_country a), rest)
																																	(_,_) ->
																																		case (fromElem c0) of
																																		(Just a,rest) -> (Just (Text'a_Text'sender_state_or_province a), rest)
																																		(_,_) ->
																																			case (fromElem c0) of
																																			(Just a,rest) -> (Just (Text'a_Text'author_name a), rest)
																																			(_,_) ->
																																				case (fromElem c0) of
																																				(Just a,rest) -> (Just (Text'a_Text'author_initials a), rest)
																																				(_,_) ->
																																					case (fromElem c0) of
																																					(Just a,rest) -> (Just (Text'a_Text'placeholder a), rest)
																																					(_,_) ->
																																						case (fromElem c0) of
																																						(Just a,rest) -> (Just (Text'a_Text'variable_set a), rest)
																																						(_,_) ->
																																							case (fromElem c0) of
																																							(Just a,rest) -> (Just (Text'a_Text'variable_get a), rest)
																																							(_,_) ->
																																								case (fromElem c0) of
																																								(Just a,rest) -> (Just (Text'a_Text'variable_input a), rest)
																																								(_,_) ->
																																									case (fromElem c0) of
																																									(Just a,rest) -> (Just (Text'a_Text'user_field_get a), rest)
																																									(_,_) ->
																																										case (fromElem c0) of
																																										(Just a,rest) -> (Just (Text'a_Text'user_field_input a), rest)
																																										(_,_) ->
																																											case (fromElem c0) of
																																											(Just a,rest) -> (Just (Text'a_Text'sequence a), rest)
																																											(_,_) ->
																																												case (fromElem c0) of
																																												(Just a,rest) -> (Just (Text'a_Text'expression a), rest)
																																												(_,_) ->
																																													case (fromElem c0) of
																																													(Just a,rest) -> (Just (Text'a_Text'text_input a), rest)
																																													(_,_) ->
																																														case (fromElem c0) of
																																														(Just a,rest) -> (Just (Text'a_Text'database_display a), rest)
																																														(_,_) ->
																																															case (fromElem c0) of
																																															(Just a,rest) -> (Just (Text'a_Text'database_next a), rest)
																																															(_,_) ->
																																																case (fromElem c0) of
																																																(Just a,rest) -> (Just (Text'a_Text'database_select a), rest)
																																																(_,_) ->
																																																	case (fromElem c0) of
																																																	(Just a,rest) -> (Just (Text'a_Text'database_row_number a), rest)
																																																	(_,_) ->
																																																		case (fromElem c0) of
																																																		(Just a,rest) -> (Just (Text'a_Text'database_name a), rest)
																																																		(_,_) ->
																																																			case (fromElem c0) of
																																																			(Just a,rest) -> (Just (Text'a_Text'initial_creator a), rest)
																																																			(_,_) ->
																																																				case (fromElem c0) of
																																																				(Just a,rest) -> (Just (Text'a_Text'creation_date a), rest)
																																																				(_,_) ->
																																																					case (fromElem c0) of
																																																					(Just a,rest) -> (Just (Text'a_Text'creation_time a), rest)
																																																					(_,_) ->
																																																						case (fromElem c0) of
																																																						(Just a,rest) -> (Just (Text'a_Text'description a), rest)
																																																						(_,_) ->
																																																							case (fromElem c0) of
																																																							(Just a,rest) -> (Just (Text'a_Text'user_defined a), rest)
																																																							(_,_) ->
																																																								case (fromElem c0) of
																																																								(Just a,rest) -> (Just (Text'a_Text'print_time a), rest)
																																																								(_,_) ->
																																																									case (fromElem c0) of
																																																									(Just a,rest) -> (Just (Text'a_Text'print_date a), rest)
																																																									(_,_) ->
																																																										case (fromElem c0) of
																																																										(Just a,rest) -> (Just (Text'a_Text'printed_by a), rest)
																																																										(_,_) ->
																																																											case (fromElem c0) of
																																																											(Just a,rest) -> (Just (Text'a_Text'title a), rest)
																																																											(_,_) ->
																																																												case (fromElem c0) of
																																																												(Just a,rest) -> (Just (Text'a_Text'subject a), rest)
																																																												(_,_) ->
																																																													case (fromElem c0) of
																																																													(Just a,rest) -> (Just (Text'a_Text'keywords a), rest)
																																																													(_,_) ->
																																																														case (fromElem c0) of
																																																														(Just a,rest) -> (Just (Text'a_Text'editing_cycles a), rest)
																																																														(_,_) ->
																																																															case (fromElem c0) of
																																																															(Just a,rest) -> (Just (Text'a_Text'editing_duration a), rest)
																																																															(_,_) ->
																																																																case (fromElem c0) of
																																																																(Just a,rest) -> (Just (Text'a_Text'modification_time a), rest)
																																																																(_,_) ->
																																																																	case (fromElem c0) of
																																																																	(Just a,rest) -> (Just (Text'a_Text'modification_date a), rest)
																																																																	(_,_) ->
																																																																		case (fromElem c0) of
																																																																		(Just a,rest) -> (Just (Text'a_Text'creator a), rest)
																																																																		(_,_) ->
																																																																			case (fromElem c0) of
																																																																			(Just a,rest) -> (Just (Text'a_Text'conditional_text a), rest)
																																																																			(_,_) ->
																																																																				case (fromElem c0) of
																																																																				(Just a,rest) -> (Just (Text'a_Text'hidden_text a), rest)
																																																																				(_,_) ->
																																																																					case (fromElem c0) of
																																																																					(Just a,rest) -> (Just (Text'a_Text'hidden_paragraph a), rest)
																																																																					(_,_) ->
																																																																						case (fromElem c0) of
																																																																						(Just a,rest) -> (Just (Text'a_Text'chapter a), rest)
																																																																						(_,_) ->
																																																																							case (fromElem c0) of
																																																																							(Just a,rest) -> (Just (Text'a_Text'file_name a), rest)
																																																																							(_,_) ->
																																																																								case (fromElem c0) of
																																																																								(Just a,rest) -> (Just (Text'a_Text'template_name a), rest)
																																																																								(_,_) ->
																																																																									case (fromElem c0) of
																																																																									(Just a,rest) -> (Just (Text'a_Text'page_variable_set a), rest)
																																																																									(_,_) ->
																																																																										case (fromElem c0) of
																																																																										(Just a,rest) -> (Just (Text'a_Text'page_variable_get a), rest)
																																																																										(_,_) ->
																																																																											case (fromElem c0) of
																																																																											(Just a,rest) -> (Just (Text'a_Text'execute_macro a), rest)
																																																																											(_,_) ->
																																																																												case (fromElem c0) of
																																																																												(Just a,rest) -> (Just (Text'a_Text'dde_connection a), rest)
																																																																												(_,_) ->
																																																																													case (fromElem c0) of
																																																																													(Just a,rest) -> (Just (Text'a_Text'reference_ref a), rest)
																																																																													(_,_) ->
																																																																														case (fromElem c0) of
																																																																														(Just a,rest) -> (Just (Text'a_Text'sequence_ref a), rest)
																																																																														(_,_) ->
																																																																															case (fromElem c0) of
																																																																															(Just a,rest) -> (Just (Text'a_Text'bookmark_ref a), rest)
																																																																															(_,_) ->
																																																																																case (fromElem c0) of
																																																																																(Just a,rest) -> (Just (Text'a_Text'footnote_ref a), rest)
																																																																																(_,_) ->
																																																																																	case (fromElem c0) of
																																																																																	(Just a,rest) -> (Just (Text'a_Text'endnote_ref a), rest)
																																																																																	(_,_) ->
																																																																																		case (fromElem c0) of
																																																																																		(Just a,rest) -> (Just (Text'a_Text'sheet_name a), rest)
																																																																																		(_,_) ->
																																																																																			case (fromElem c0) of
																																																																																			(Just a,rest) -> (Just (Text'a_Text'bibliography_mark a), rest)
																																																																																			(_,_) ->
																																																																																				case (fromElem c0) of
																																																																																				(Just a,rest) -> (Just (Text'a_Text'page_count a), rest)
																																																																																				(_,_) ->
																																																																																					case (fromElem c0) of
																																																																																					(Just a,rest) -> (Just (Text'a_Text'paragraph_count a), rest)
																																																																																					(_,_) ->
																																																																																						case (fromElem c0) of
																																																																																						(Just a,rest) -> (Just (Text'a_Text'word_count a), rest)
																																																																																						(_,_) ->
																																																																																							case (fromElem c0) of
																																																																																							(Just a,rest) -> (Just (Text'a_Text'character_count a), rest)
																																																																																							(_,_) ->
																																																																																								case (fromElem c0) of
																																																																																								(Just a,rest) -> (Just (Text'a_Text'table_count a), rest)
																																																																																								(_,_) ->
																																																																																									case (fromElem c0) of
																																																																																									(Just a,rest) -> (Just (Text'a_Text'image_count a), rest)
																																																																																									(_,_) ->
																																																																																										case (fromElem c0) of
																																																																																										(Just a,rest) -> (Just (Text'a_Text'object_count a), rest)
																																																																																										(_,_) ->
																																																																																											case (fromElem c0) of
																																																																																											(Just a,rest) -> (Just (Text'a_Office'annotation a), rest)
																																																																																											(_,_) ->
																																																																																												case (fromElem c0) of
																																																																																												(Just a,rest) -> (Just (Text'a_Text'script a), rest)
																																																																																												(_,_) ->
																																																																																													case (fromElem c0) of
																																																																																													(Just a,rest) -> (Just (Text'a_Text'measure a), rest)
																																																																																													(_,_) ->
																																																																																														case (fromElem c0) of
																																																																																														(Just a,rest) -> (Just (Text'a_Draw'rect a), rest)
																																																																																														(_,_) ->
																																																																																															case (fromElem c0) of
																																																																																															(Just a,rest) -> (Just (Text'a_Draw'line a), rest)
																																																																																															(_,_) ->
																																																																																																case (fromElem c0) of
																																																																																																(Just a,rest) -> (Just (Text'a_Draw'polyline a), rest)
																																																																																																(_,_) ->
																																																																																																	case (fromElem c0) of
																																																																																																	(Just a,rest) -> (Just (Text'a_Draw'polygon a), rest)
																																																																																																	(_,_) ->
																																																																																																		case (fromElem c0) of
																																																																																																		(Just a,rest) -> (Just (Text'a_Draw'path a), rest)
																																																																																																		(_,_) ->
																																																																																																			case (fromElem c0) of
																																																																																																			(Just a,rest) -> (Just (Text'a_Draw'circle a), rest)
																																																																																																			(_,_) ->
																																																																																																				case (fromElem c0) of
																																																																																																				(Just a,rest) -> (Just (Text'a_Draw'ellipse a), rest)
																																																																																																				(_,_) ->
																																																																																																					case (fromElem c0) of
																																																																																																					(Just a,rest) -> (Just (Text'a_Draw'g a), rest)
																																																																																																					(_,_) ->
																																																																																																						case (fromElem c0) of
																																																																																																						(Just a,rest) -> (Just (Text'a_Draw'page_thumbnail a), rest)
																																																																																																						(_,_) ->
																																																																																																							case (fromElem c0) of
																																																																																																							(Just a,rest) -> (Just (Text'a_Draw'text_box a), rest)
																																																																																																							(_,_) ->
																																																																																																								case (fromElem c0) of
																																																																																																								(Just a,rest) -> (Just (Text'a_Draw'image a), rest)
																																																																																																								(_,_) ->
																																																																																																									case (fromElem c0) of
																																																																																																									(Just a,rest) -> (Just (Text'a_Draw'object a), rest)
																																																																																																									(_,_) ->
																																																																																																										case (fromElem c0) of
																																																																																																										(Just a,rest) -> (Just (Text'a_Draw'object_ole a), rest)
																																																																																																										(_,_) ->
																																																																																																											case (fromElem c0) of
																																																																																																											(Just a,rest) -> (Just (Text'a_Draw'applet a), rest)
																																																																																																											(_,_) ->
																																																																																																												case (fromElem c0) of
																																																																																																												(Just a,rest) -> (Just (Text'a_Draw'floating_frame a), rest)
																																																																																																												(_,_) ->
																																																																																																													case (fromElem c0) of
																																																																																																													(Just a,rest) -> (Just (Text'a_Draw'plugin a), rest)
																																																																																																													(_,_) ->
																																																																																																														case (fromElem c0) of
																																																																																																														(Just a,rest) -> (Just (Text'a_Draw'measure a), rest)
																																																																																																														(_,_) ->
																																																																																																															case (fromElem c0) of
																																																																																																															(Just a,rest) -> (Just (Text'a_Draw'caption a), rest)
																																																																																																															(_,_) ->
																																																																																																																case (fromElem c0) of
																																																																																																																(Just a,rest) -> (Just (Text'a_Draw'connector a), rest)
																																																																																																																(_,_) ->
																																																																																																																	case (fromElem c0) of
																																																																																																																	(Just a,rest) -> (Just (Text'a_Chart'chart a), rest)
																																																																																																																	(_,_) ->
																																																																																																																		case (fromElem c0) of
																																																																																																																		(Just a,rest) -> (Just (Text'a_Dr3d'scene a), rest)
																																																																																																																		(_,_) ->
																																																																																																																			case (fromElem c0) of
																																																																																																																			(Just a,rest) -> (Just (Text'a_Draw'control a), rest)
																																																																																																																			(_,_) ->
																																																																																																																				case (fromElem c0) of
																																																																																																																				(Just a,rest) -> (Just (Text'a_Text'toc_mark_start a), rest)
																																																																																																																				(_,_) ->
																																																																																																																					case (fromElem c0) of
																																																																																																																					(Just a,rest) -> (Just (Text'a_Text'toc_mark_end a), rest)
																																																																																																																					(_,_) ->
																																																																																																																						case (fromElem c0) of
																																																																																																																						(Just a,rest) -> (Just (Text'a_Text'toc_mark a), rest)
																																																																																																																						(_,_) ->
																																																																																																																							case (fromElem c0) of
																																																																																																																							(Just a,rest) -> (Just (Text'a_Text'user_index_mark_start a), rest)
																																																																																																																							(_,_) ->
																																																																																																																								case (fromElem c0) of
																																																																																																																								(Just a,rest) -> (Just (Text'a_Text'user_index_mark_end a), rest)
																																																																																																																								(_,_) ->
																																																																																																																									case (fromElem c0) of
																																																																																																																									(Just a,rest) -> (Just (Text'a_Text'user_index_mark a), rest)
																																																																																																																									(_,_) ->
																																																																																																																										case (fromElem c0) of
																																																																																																																										(Just a,rest) -> (Just (Text'a_Text'alphabetical_index_mark_start a), rest)
																																																																																																																										(_,_) ->
																																																																																																																											case (fromElem c0) of
																																																																																																																											(Just a,rest) -> (Just (Text'a_Text'alphabetical_index_mark_end a), rest)
																																																																																																																											(_,_) ->
																																																																																																																												case (fromElem c0) of
																																																																																																																												(Just a,rest) -> (Just (Text'a_Text'alphabetical_index_mark a), rest)
																																																																																																																												(_,_) ->
																																																																																																																													case (fromElem c0) of
																																																																																																																													(Just a,rest) -> (Just (Text'a_Text'change a), rest)
																																																																																																																													(_,_) ->
																																																																																																																														case (fromElem c0) of
																																																																																																																														(Just a,rest) -> (Just (Text'a_Text'change_start a), rest)
																																																																																																																														(_,_) ->
																																																																																																																															case (fromElem c0) of
																																																																																																																															(Just a,rest) -> (Just (Text'a_Text'change_end a), rest)
																																																																																																																															(_,_) ->
																																																																																																																																case (fromElem c0) of
																																																																																																																																(Just a,rest) -> (Just (Text'a_Draw'a a), rest)
																																																																																																																																(_,_) ->
																																																																																																																																	case (fromElem c0) of
																																																																																																																																	(Just a,rest) -> (Just (Text'a_Text'ruby a), rest)
																																																																																																																																	(_,_) ->
																																																																																																																																	    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'a_Str a) = toText a
    toElem (Text'a_Office'events a) = toElem a
    toElem (Text'a_Text'span a) = toElem a
    toElem (Text'a_Text'tab_stop a) = toElem a
    toElem (Text'a_Text's a) = toElem a
    toElem (Text'a_Text'line_break a) = toElem a
    toElem (Text'a_Text'footnote a) = toElem a
    toElem (Text'a_Text'endnote a) = toElem a
    toElem (Text'a_Text'a a) = toElem a
    toElem (Text'a_Text'bookmark a) = toElem a
    toElem (Text'a_Text'bookmark_start a) = toElem a
    toElem (Text'a_Text'bookmark_end a) = toElem a
    toElem (Text'a_Text'reference_mark a) = toElem a
    toElem (Text'a_Text'reference_mark_start a) = toElem a
    toElem (Text'a_Text'reference_mark_end a) = toElem a
    toElem (Text'a_Text'date a) = toElem a
    toElem (Text'a_Text'time a) = toElem a
    toElem (Text'a_Text'page_number a) = toElem a
    toElem (Text'a_Text'page_continuation a) = toElem a
    toElem (Text'a_Text'sender_firstname a) = toElem a
    toElem (Text'a_Text'sender_lastname a) = toElem a
    toElem (Text'a_Text'sender_initials a) = toElem a
    toElem (Text'a_Text'sender_title a) = toElem a
    toElem (Text'a_Text'sender_position a) = toElem a
    toElem (Text'a_Text'sender_email a) = toElem a
    toElem (Text'a_Text'sender_phone_private a) = toElem a
    toElem (Text'a_Text'sender_fax a) = toElem a
    toElem (Text'a_Text'sender_company a) = toElem a
    toElem (Text'a_Text'sender_phone_work a) = toElem a
    toElem (Text'a_Text'sender_street a) = toElem a
    toElem (Text'a_Text'sender_city a) = toElem a
    toElem (Text'a_Text'sender_postal_code a) = toElem a
    toElem (Text'a_Text'sender_country a) = toElem a
    toElem (Text'a_Text'sender_state_or_province a) = toElem a
    toElem (Text'a_Text'author_name a) = toElem a
    toElem (Text'a_Text'author_initials a) = toElem a
    toElem (Text'a_Text'placeholder a) = toElem a
    toElem (Text'a_Text'variable_set a) = toElem a
    toElem (Text'a_Text'variable_get a) = toElem a
    toElem (Text'a_Text'variable_input a) = toElem a
    toElem (Text'a_Text'user_field_get a) = toElem a
    toElem (Text'a_Text'user_field_input a) = toElem a
    toElem (Text'a_Text'sequence a) = toElem a
    toElem (Text'a_Text'expression a) = toElem a
    toElem (Text'a_Text'text_input a) = toElem a
    toElem (Text'a_Text'database_display a) = toElem a
    toElem (Text'a_Text'database_next a) = toElem a
    toElem (Text'a_Text'database_select a) = toElem a
    toElem (Text'a_Text'database_row_number a) = toElem a
    toElem (Text'a_Text'database_name a) = toElem a
    toElem (Text'a_Text'initial_creator a) = toElem a
    toElem (Text'a_Text'creation_date a) = toElem a
    toElem (Text'a_Text'creation_time a) = toElem a
    toElem (Text'a_Text'description a) = toElem a
    toElem (Text'a_Text'user_defined a) = toElem a
    toElem (Text'a_Text'print_time a) = toElem a
    toElem (Text'a_Text'print_date a) = toElem a
    toElem (Text'a_Text'printed_by a) = toElem a
    toElem (Text'a_Text'title a) = toElem a
    toElem (Text'a_Text'subject a) = toElem a
    toElem (Text'a_Text'keywords a) = toElem a
    toElem (Text'a_Text'editing_cycles a) = toElem a
    toElem (Text'a_Text'editing_duration a) = toElem a
    toElem (Text'a_Text'modification_time a) = toElem a
    toElem (Text'a_Text'modification_date a) = toElem a
    toElem (Text'a_Text'creator a) = toElem a
    toElem (Text'a_Text'conditional_text a) = toElem a
    toElem (Text'a_Text'hidden_text a) = toElem a
    toElem (Text'a_Text'hidden_paragraph a) = toElem a
    toElem (Text'a_Text'chapter a) = toElem a
    toElem (Text'a_Text'file_name a) = toElem a
    toElem (Text'a_Text'template_name a) = toElem a
    toElem (Text'a_Text'page_variable_set a) = toElem a
    toElem (Text'a_Text'page_variable_get a) = toElem a
    toElem (Text'a_Text'execute_macro a) = toElem a
    toElem (Text'a_Text'dde_connection a) = toElem a
    toElem (Text'a_Text'reference_ref a) = toElem a
    toElem (Text'a_Text'sequence_ref a) = toElem a
    toElem (Text'a_Text'bookmark_ref a) = toElem a
    toElem (Text'a_Text'footnote_ref a) = toElem a
    toElem (Text'a_Text'endnote_ref a) = toElem a
    toElem (Text'a_Text'sheet_name a) = toElem a
    toElem (Text'a_Text'bibliography_mark a) = toElem a
    toElem (Text'a_Text'page_count a) = toElem a
    toElem (Text'a_Text'paragraph_count a) = toElem a
    toElem (Text'a_Text'word_count a) = toElem a
    toElem (Text'a_Text'character_count a) = toElem a
    toElem (Text'a_Text'table_count a) = toElem a
    toElem (Text'a_Text'image_count a) = toElem a
    toElem (Text'a_Text'object_count a) = toElem a
    toElem (Text'a_Office'annotation a) = toElem a
    toElem (Text'a_Text'script a) = toElem a
    toElem (Text'a_Text'measure a) = toElem a
    toElem (Text'a_Draw'rect a) = toElem a
    toElem (Text'a_Draw'line a) = toElem a
    toElem (Text'a_Draw'polyline a) = toElem a
    toElem (Text'a_Draw'polygon a) = toElem a
    toElem (Text'a_Draw'path a) = toElem a
    toElem (Text'a_Draw'circle a) = toElem a
    toElem (Text'a_Draw'ellipse a) = toElem a
    toElem (Text'a_Draw'g a) = toElem a
    toElem (Text'a_Draw'page_thumbnail a) = toElem a
    toElem (Text'a_Draw'text_box a) = toElem a
    toElem (Text'a_Draw'image a) = toElem a
    toElem (Text'a_Draw'object a) = toElem a
    toElem (Text'a_Draw'object_ole a) = toElem a
    toElem (Text'a_Draw'applet a) = toElem a
    toElem (Text'a_Draw'floating_frame a) = toElem a
    toElem (Text'a_Draw'plugin a) = toElem a
    toElem (Text'a_Draw'measure a) = toElem a
    toElem (Text'a_Draw'caption a) = toElem a
    toElem (Text'a_Draw'connector a) = toElem a
    toElem (Text'a_Chart'chart a) = toElem a
    toElem (Text'a_Dr3d'scene a) = toElem a
    toElem (Text'a_Draw'control a) = toElem a
    toElem (Text'a_Text'toc_mark_start a) = toElem a
    toElem (Text'a_Text'toc_mark_end a) = toElem a
    toElem (Text'a_Text'toc_mark a) = toElem a
    toElem (Text'a_Text'user_index_mark_start a) = toElem a
    toElem (Text'a_Text'user_index_mark_end a) = toElem a
    toElem (Text'a_Text'user_index_mark a) = toElem a
    toElem (Text'a_Text'alphabetical_index_mark_start a) = toElem a
    toElem (Text'a_Text'alphabetical_index_mark_end a) = toElem a
    toElem (Text'a_Text'alphabetical_index_mark a) = toElem a
    toElem (Text'a_Text'change a) = toElem a
    toElem (Text'a_Text'change_start a) = toElem a
    toElem (Text'a_Text'change_end a) = toElem a
    toElem (Text'a_Draw'a a) = toElem a
    toElem (Text'a_Text'ruby a) = toElem a
instance XmlAttrType Text'a_xlink'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "simple" = Just Text'a_xlink'type_simple
	    translate _ = Nothing
    toAttrFrTyp n Text'a_xlink'type_simple = Just (n, str2attr "simple")
instance XmlAttrType Text'a_xlink'actuate where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "onRequest" = Just Text'a_xlink'actuate_onRequest
	    translate _ = Nothing
    toAttrFrTyp n Text'a_xlink'actuate_onRequest = Just (n, str2attr "onRequest")
instance XmlAttrType Text'a_xlink'show where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "new" = Just Text'a_xlink'show_new
	    translate "replace" = Just Text'a_xlink'show_replace
	    translate _ = Nothing
    toAttrFrTyp n Text'a_xlink'show_new = Just (n, str2attr "new")
    toAttrFrTyp n Text'a_xlink'show_replace = Just (n, str2attr "replace")
instance XmlContent Text's where
    fromElem (CElem (Elem "text:s" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:s" (toAttrs as) [])]
instance XmlAttributes Text's where
    fromAttrs as =
	Text's
	  { text'sText'c = defaultA fromAttrToStr "1" "text:c" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:c" (text'sText'c v)
	]
instance XmlContent Text'tab_stop where
    fromElem (CElem (Elem "text:tab-stop" [] []):rest) =
	(Just Text'tab_stop, rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem Text'tab_stop =
	[CElem (Elem "text:tab-stop" [] [])]
instance XmlContent Text'line_break where
    fromElem (CElem (Elem "text:line-break" [] []):rest) =
	(Just Text'line_break, rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem Text'line_break =
	[CElem (Elem "text:line-break" [] [])]
instance XmlContent Text'ordered_list where
    fromElem (CElem (Elem "text:ordered-list" as c0):rest) =
	case (\(a,ca)->
		(\(b,cb)->
		   (a,b,cb))
		(many fromElem ca))
	     (fromElem c0) of
	(Just a,b,_) -> (Just (Text'ordered_listText'list_header_Text'list_item (fromAttrs as) a
											       b), rest)
	(_,[],_) ->
		case (fromElem c0) of
		(Just a,_) -> (Just (Text'ordered_listText'list_item (fromAttrs as) a), rest)
		(_,_) ->
		    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'ordered_listText'list_header_Text'list_item as a
								b) = [CElem (Elem "text:ordered-list" (toAttrs as) (toElem a
														    ++
														    concatMap toElem b) )]
    toElem (Text'ordered_listText'list_item as a) = [CElem (Elem "text:ordered-list" (toAttrs as) (toElem a) )]
instance XmlAttributes Text'ordered_list_Attrs where
    fromAttrs as =
	Text'ordered_list_Attrs
	  { text'ordered_listText'style_name = possibleA fromAttrToStr "text:style-name" as
	  , text'ordered_listText'continue_numbering = defaultA fromAttrToStr "false" "text:continue-numbering" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "text:style-name" (text'ordered_listText'style_name v)
	, defaultToAttr toAttrFrStr "text:continue-numbering" (text'ordered_listText'continue_numbering v)
	]
instance XmlContent Text'unordered_list where
    fromElem (CElem (Elem "text:unordered-list" as c0):rest) =
	case (\(a,ca)->
		(\(b,cb)->
		   (a,b,cb))
		(many fromElem ca))
	     (fromElem c0) of
	(Just a,b,_) -> (Just (Text'unordered_listText'list_header_Text'list_item (fromAttrs as) a
												 b), rest)
	(_,[],_) ->
		case (fromElem c0) of
		(Just a,_) -> (Just (Text'unordered_listText'list_item (fromAttrs as) a), rest)
		(_,_) ->
		    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'unordered_listText'list_header_Text'list_item as a
								  b) = [CElem (Elem "text:unordered-list" (toAttrs as) (toElem a
															++
															concatMap toElem b) )]
    toElem (Text'unordered_listText'list_item as a) = [CElem (Elem "text:unordered-list" (toAttrs as) (toElem a) )]
instance XmlAttributes Text'unordered_list_Attrs where
    fromAttrs as =
	Text'unordered_list_Attrs
	  { text'unordered_listText'style_name = possibleA fromAttrToStr "text:style-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "text:style-name" (text'unordered_listText'style_name v)
	]
instance XmlContent Text'list_header where
    fromElem (CElem (Elem "text:list-header" [] c0):rest) =
	(\(a,ca)->
	   (Just (Text'list_header a), rest))
	(definite fromElem "text:list-header+" "text:list-header" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'list_header a) =
	[CElem (Elem "text:list-header" [] (toElem a))]
instance XmlContent Text'list_header_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Text'list_header_Text'p a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Text'list_header_Text'h a), rest)
		(_,_) ->
		    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'list_header_Text'p a) = toElem a
    toElem (Text'list_header_Text'h a) = toElem a
instance XmlContent Text'list_item where
    fromElem (CElem (Elem "text:list-item" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'list_item (fromAttrs as) a), rest))
	(definite fromElem "text:list-item+" "text:list-item" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'list_item as a) =
	[CElem (Elem "text:list-item" (toAttrs as) (toElem a))]
instance XmlAttributes Text'list_item_Attrs where
    fromAttrs as =
	Text'list_item_Attrs
	  { text'list_itemText'restart_numbering = defaultA fromAttrToStr "false" "text:restart-numbering" as
	  , text'list_itemText'start_value = possibleA fromAttrToStr "text:start-value" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:restart-numbering" (text'list_itemText'restart_numbering v)
	, maybeToAttr toAttrFrStr "text:start-value" (text'list_itemText'start_value v)
	]
instance XmlContent Text'list_item_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Text'list_item_Text'p a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Text'list_item_Text'h a), rest)
		(_,_) ->
			case (fromElem c0) of
			(Just a,rest) -> (Just (Text'list_item_Text'ordered_list a), rest)
			(_,_) ->
				case (fromElem c0) of
				(Just a,rest) -> (Just (Text'list_item_Text'unordered_list a), rest)
				(_,_) ->
				    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'list_item_Text'p a) = toElem a
    toElem (Text'list_item_Text'h a) = toElem a
    toElem (Text'list_item_Text'ordered_list a) = toElem a
    toElem (Text'list_item_Text'unordered_list a) = toElem a
instance XmlContent Text'list_style where
    fromElem (CElem (Elem "text:list-style" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'list_style (fromAttrs as) a), rest))
	(definite fromElem "text:list-style+" "text:list-style" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'list_style as a) =
	[CElem (Elem "text:list-style" (toAttrs as) (toElem a))]
instance XmlAttributes Text'list_style_Attrs where
    fromAttrs as =
	Text'list_style_Attrs
	  { text'list_styleStyle'name = possibleA fromAttrToStr "style:name" as
	  , text'list_styleText'consecutive_numbering = defaultA fromAttrToStr "false" "text:consecutive-numbering" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "style:name" (text'list_styleStyle'name v)
	, defaultToAttr toAttrFrStr "text:consecutive-numbering" (text'list_styleText'consecutive_numbering v)
	]
instance XmlContent Text'list_style_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Text'list_style_Text'list_level_style_number a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Text'list_style_Text'list_level_style_bullet a), rest)
		(_,_) ->
			case (fromElem c0) of
			(Just a,rest) -> (Just (Text'list_style_Text'list_level_style_image a), rest)
			(_,_) ->
			    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'list_style_Text'list_level_style_number a) = toElem a
    toElem (Text'list_style_Text'list_level_style_bullet a) = toElem a
    toElem (Text'list_style_Text'list_level_style_image a) = toElem a
instance XmlContent Text'list_level_style_number where
    fromElem (CElem (Elem "text:list-level-style-number" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'list_level_style_number (fromAttrs as) a), rest))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'list_level_style_number as a) =
	[CElem (Elem "text:list-level-style-number" (toAttrs as) (maybe [] toElem a))]
instance XmlAttributes Text'list_level_style_number_Attrs where
    fromAttrs as =
	Text'list_level_style_number_Attrs
	  { text'list_level_style_numberText'level = definiteA fromAttrToStr "text:list-level-style-number" "text:level" as
	  , text'list_level_style_numberText'style_name = possibleA fromAttrToStr "text:style-name" as
	  , text'list_level_style_numberStyle'num_format = definiteA fromAttrToStr "text:list-level-style-number" "style:num-format" as
	  , text'list_level_style_numberStyle'num_prefix = possibleA fromAttrToStr "style:num-prefix" as
	  , text'list_level_style_numberStyle'num_suffix = possibleA fromAttrToStr "style:num-suffix" as
	  , text'list_level_style_numberStyle'num_letter_sync = defaultA fromAttrToStr "false" "style:num-letter-sync" as
	  , text'list_level_style_numberText'display_levels = defaultA fromAttrToStr "1" "text:display-levels" as
	  , text'list_level_style_numberText'start_value = defaultA fromAttrToStr "1" "text:start-value" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:level" (text'list_level_style_numberText'level v)
	, maybeToAttr toAttrFrStr "text:style-name" (text'list_level_style_numberText'style_name v)
	, toAttrFrStr "style:num-format" (text'list_level_style_numberStyle'num_format v)
	, maybeToAttr toAttrFrStr "style:num-prefix" (text'list_level_style_numberStyle'num_prefix v)
	, maybeToAttr toAttrFrStr "style:num-suffix" (text'list_level_style_numberStyle'num_suffix v)
	, defaultToAttr toAttrFrStr "style:num-letter-sync" (text'list_level_style_numberStyle'num_letter_sync v)
	, defaultToAttr toAttrFrStr "text:display-levels" (text'list_level_style_numberText'display_levels v)
	, defaultToAttr toAttrFrStr "text:start-value" (text'list_level_style_numberText'start_value v)
	]
instance XmlContent Text'list_level_style_bullet where
    fromElem (CElem (Elem "text:list-level-style-bullet" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'list_level_style_bullet (fromAttrs as) a), rest))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'list_level_style_bullet as a) =
	[CElem (Elem "text:list-level-style-bullet" (toAttrs as) (maybe [] toElem a))]
instance XmlAttributes Text'list_level_style_bullet_Attrs where
    fromAttrs as =
	Text'list_level_style_bullet_Attrs
	  { text'list_level_style_bulletText'level = definiteA fromAttrToStr "text:list-level-style-bullet" "text:level" as
	  , text'list_level_style_bulletText'style_name = possibleA fromAttrToStr "text:style-name" as
	  , text'list_level_style_bulletText'bullet_char = definiteA fromAttrToStr "text:list-level-style-bullet" "text:bullet-char" as
	  , text'list_level_style_bulletStyle'num_prefix = possibleA fromAttrToStr "style:num-prefix" as
	  , text'list_level_style_bulletStyle'num_suffix = possibleA fromAttrToStr "style:num-suffix" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:level" (text'list_level_style_bulletText'level v)
	, maybeToAttr toAttrFrStr "text:style-name" (text'list_level_style_bulletText'style_name v)
	, toAttrFrStr "text:bullet-char" (text'list_level_style_bulletText'bullet_char v)
	, maybeToAttr toAttrFrStr "style:num-prefix" (text'list_level_style_bulletStyle'num_prefix v)
	, maybeToAttr toAttrFrStr "style:num-suffix" (text'list_level_style_bulletStyle'num_suffix v)
	]
instance XmlContent Text'list_level_style_image where
    fromElem (CElem (Elem "text:list-level-style-image" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Text'list_level_style_image (fromAttrs as) a b), rest))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'list_level_style_image as a b) =
	[CElem (Elem "text:list-level-style-image" (toAttrs as) (maybe [] toElem a
								 ++ maybe [] toElem b))]
instance XmlAttributes Text'list_level_style_image_Attrs where
    fromAttrs as =
	Text'list_level_style_image_Attrs
	  { text'list_level_style_imageText'level = definiteA fromAttrToStr "text:list-level-style-image" "text:level" as
	  , text'list_level_style_imageXlink'type = possibleA fromAttrToTyp "xlink:type" as
	  , text'list_level_style_imageXlink'href = possibleA fromAttrToStr "xlink:href" as
	  , text'list_level_style_imageXlink'actuate = possibleA fromAttrToTyp "xlink:actuate" as
	  , text'list_level_style_imageXlink'show = possibleA fromAttrToTyp "xlink:show" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:level" (text'list_level_style_imageText'level v)
	, maybeToAttr toAttrFrTyp "xlink:type" (text'list_level_style_imageXlink'type v)
	, maybeToAttr toAttrFrStr "xlink:href" (text'list_level_style_imageXlink'href v)
	, maybeToAttr toAttrFrTyp "xlink:actuate" (text'list_level_style_imageXlink'actuate v)
	, maybeToAttr toAttrFrTyp "xlink:show" (text'list_level_style_imageXlink'show v)
	]
instance XmlAttrType Text'list_level_style_image_xlink'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "simple" = Just Text'list_level_style_image_xlink'type_simple
	    translate _ = Nothing
    toAttrFrTyp n Text'list_level_style_image_xlink'type_simple = Just (n, str2attr "simple")
instance XmlAttrType Text'list_level_style_image_xlink'actuate where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "onLoad" = Just Text'list_level_style_image_xlink'actuate_onLoad
	    translate _ = Nothing
    toAttrFrTyp n Text'list_level_style_image_xlink'actuate_onLoad = Just (n, str2attr "onLoad")
instance XmlAttrType Text'list_level_style_image_xlink'show where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "embed" = Just Text'list_level_style_image_xlink'show_embed
	    translate _ = Nothing
    toAttrFrTyp n Text'list_level_style_image_xlink'show_embed = Just (n, str2attr "embed")
instance XmlContent Text'outline_style where
    fromElem (CElem (Elem "text:outline-style" [] c0):rest) =
	(\(a,ca)->
	   (Just (Text'outline_style a), rest))
	(definite fromElem "text:outline-level-style+" "text:outline-style" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'outline_style a) =
	[CElem (Elem "text:outline-style" [] (toElem a))]
instance XmlContent Text'outline_level_style where
    fromElem (CElem (Elem "text:outline-level-style" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'outline_level_style (fromAttrs as) a), rest))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'outline_level_style as a) =
	[CElem (Elem "text:outline-level-style" (toAttrs as) (maybe [] toElem a))]
instance XmlAttributes Text'outline_level_style_Attrs where
    fromAttrs as =
	Text'outline_level_style_Attrs
	  { text'outline_level_styleText'level = definiteA fromAttrToStr "text:outline-level-style" "text:level" as
	  , text'outline_level_styleText'style_name = possibleA fromAttrToStr "text:style-name" as
	  , text'outline_level_styleStyle'num_format = definiteA fromAttrToStr "text:outline-level-style" "style:num-format" as
	  , text'outline_level_styleStyle'num_prefix = possibleA fromAttrToStr "style:num-prefix" as
	  , text'outline_level_styleStyle'num_suffix = possibleA fromAttrToStr "style:num-suffix" as
	  , text'outline_level_styleStyle'num_letter_sync = defaultA fromAttrToStr "false" "style:num-letter-sync" as
	  , text'outline_level_styleText'display_levels = defaultA fromAttrToStr "1" "text:display-levels" as
	  , text'outline_level_styleText'start_value = defaultA fromAttrToStr "1" "text:start-value" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:level" (text'outline_level_styleText'level v)
	, maybeToAttr toAttrFrStr "text:style-name" (text'outline_level_styleText'style_name v)
	, toAttrFrStr "style:num-format" (text'outline_level_styleStyle'num_format v)
	, maybeToAttr toAttrFrStr "style:num-prefix" (text'outline_level_styleStyle'num_prefix v)
	, maybeToAttr toAttrFrStr "style:num-suffix" (text'outline_level_styleStyle'num_suffix v)
	, defaultToAttr toAttrFrStr "style:num-letter-sync" (text'outline_level_styleStyle'num_letter_sync v)
	, defaultToAttr toAttrFrStr "text:display-levels" (text'outline_level_styleText'display_levels v)
	, defaultToAttr toAttrFrStr "text:start-value" (text'outline_level_styleText'start_value v)
	]
instance XmlContent Text'date where
    fromElem (CElem (Elem "text:date" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'date (fromAttrs as) a), rest))
	(definite fromText "text" "text:date" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'date as a) =
	[CElem (Elem "text:date" (toAttrs as) (toText a))]
instance XmlAttributes Text'date_Attrs where
    fromAttrs as =
	Text'date_Attrs
	  { text'dateText'date_value = possibleA fromAttrToStr "text:date-value" as
	  , text'dateText'date_adjust = possibleA fromAttrToStr "text:date-adjust" as
	  , text'dateText'fixed = defaultA fromAttrToStr "false" "text:fixed" as
	  , text'dateStyle'data_style_name = possibleA fromAttrToStr "style:data-style-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "text:date-value" (text'dateText'date_value v)
	, maybeToAttr toAttrFrStr "text:date-adjust" (text'dateText'date_adjust v)
	, defaultToAttr toAttrFrStr "text:fixed" (text'dateText'fixed v)
	, maybeToAttr toAttrFrStr "style:data-style-name" (text'dateStyle'data_style_name v)
	]
instance XmlContent Text'time where
    fromElem (CElem (Elem "text:time" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'time (fromAttrs as) a), rest))
	(definite fromText "text" "text:time" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'time as a) =
	[CElem (Elem "text:time" (toAttrs as) (toText a))]
instance XmlAttributes Text'time_Attrs where
    fromAttrs as =
	Text'time_Attrs
	  { text'timeText'time_value = possibleA fromAttrToStr "text:time-value" as
	  , text'timeText'time_adjust = possibleA fromAttrToStr "text:time-adjust" as
	  , text'timeText'fixed = defaultA fromAttrToStr "false" "text:fixed" as
	  , text'timeStyle'data_style_name = possibleA fromAttrToStr "style:data-style-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "text:time-value" (text'timeText'time_value v)
	, maybeToAttr toAttrFrStr "text:time-adjust" (text'timeText'time_adjust v)
	, defaultToAttr toAttrFrStr "text:fixed" (text'timeText'fixed v)
	, maybeToAttr toAttrFrStr "style:data-style-name" (text'timeStyle'data_style_name v)
	]
instance XmlContent Text'page_number where
    fromElem (CElem (Elem "text:page-number" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'page_number (fromAttrs as) a), rest))
	(definite fromText "text" "text:page-number" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'page_number as a) =
	[CElem (Elem "text:page-number" (toAttrs as) (toText a))]
instance XmlAttributes Text'page_number_Attrs where
    fromAttrs as =
	Text'page_number_Attrs
	  { text'page_numberText'page_adjust = possibleA fromAttrToStr "text:page-adjust" as
	  , text'page_numberText'select_page = defaultA fromAttrToTyp Text'page_number_text'select_page_current "text:select-page" as
	  , text'page_numberStyle'num_format = possibleA fromAttrToStr "style:num-format" as
	  , text'page_numberStyle'num_letter_sync = defaultA fromAttrToStr "false" "style:num-letter-sync" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "text:page-adjust" (text'page_numberText'page_adjust v)
	, defaultToAttr toAttrFrTyp "text:select-page" (text'page_numberText'select_page v)
	, maybeToAttr toAttrFrStr "style:num-format" (text'page_numberStyle'num_format v)
	, defaultToAttr toAttrFrStr "style:num-letter-sync" (text'page_numberStyle'num_letter_sync v)
	]
instance XmlAttrType Text'page_number_text'select_page where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "previous" = Just Text'page_number_text'select_page_previous
	    translate "current" = Just Text'page_number_text'select_page_current
	    translate "next" = Just Text'page_number_text'select_page_next
	    translate _ = Nothing
    toAttrFrTyp n Text'page_number_text'select_page_previous = Just (n, str2attr "previous")
    toAttrFrTyp n Text'page_number_text'select_page_current = Just (n, str2attr "current")
    toAttrFrTyp n Text'page_number_text'select_page_next = Just (n, str2attr "next")
instance XmlContent Text'page_continuation where
    fromElem (CElem (Elem "text:page-continuation" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'page_continuation (fromAttrs as) a), rest))
	(definite fromText "text" "text:page-continuation" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'page_continuation as a) =
	[CElem (Elem "text:page-continuation" (toAttrs as) (toText a))]
instance XmlAttributes Text'page_continuation_Attrs where
    fromAttrs as =
	Text'page_continuation_Attrs
	  { text'page_continuationText'select_page = definiteA fromAttrToTyp "text:page-continuation" "text:select-page" as
	  , text'page_continuationText'string_value = possibleA fromAttrToStr "text:string-value" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrTyp "text:select-page" (text'page_continuationText'select_page v)
	, maybeToAttr toAttrFrStr "text:string-value" (text'page_continuationText'string_value v)
	]
instance XmlAttrType Text'page_continuation_text'select_page where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "previous" = Just Text'page_continuation_text'select_page_previous
	    translate "next" = Just Text'page_continuation_text'select_page_next
	    translate _ = Nothing
    toAttrFrTyp n Text'page_continuation_text'select_page_previous = Just (n, str2attr "previous")
    toAttrFrTyp n Text'page_continuation_text'select_page_next = Just (n, str2attr "next")
instance XmlContent Text'sender_firstname where
    fromElem (CElem (Elem "text:sender-firstname" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'sender_firstname (fromAttrs as) a), rest))
	(definite fromText "text" "text:sender-firstname" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'sender_firstname as a) =
	[CElem (Elem "text:sender-firstname" (toAttrs as) (toText a))]
instance XmlAttributes Text'sender_firstname_Attrs where
    fromAttrs as =
	Text'sender_firstname_Attrs
	  { text'sender_firstnameText'fixed = defaultA fromAttrToStr "true" "text:fixed" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'sender_firstnameText'fixed v)
	]
instance XmlContent Text'sender_lastname where
    fromElem (CElem (Elem "text:sender-lastname" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'sender_lastname (fromAttrs as) a), rest))
	(definite fromText "text" "text:sender-lastname" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'sender_lastname as a) =
	[CElem (Elem "text:sender-lastname" (toAttrs as) (toText a))]
instance XmlAttributes Text'sender_lastname_Attrs where
    fromAttrs as =
	Text'sender_lastname_Attrs
	  { text'sender_lastnameText'fixed = defaultA fromAttrToStr "true" "text:fixed" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'sender_lastnameText'fixed v)
	]
instance XmlContent Text'sender_initials where
    fromElem (CElem (Elem "text:sender-initials" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'sender_initials (fromAttrs as) a), rest))
	(definite fromText "text" "text:sender-initials" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'sender_initials as a) =
	[CElem (Elem "text:sender-initials" (toAttrs as) (toText a))]
instance XmlAttributes Text'sender_initials_Attrs where
    fromAttrs as =
	Text'sender_initials_Attrs
	  { text'sender_initialsText'fixed = defaultA fromAttrToStr "true" "text:fixed" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'sender_initialsText'fixed v)
	]
instance XmlContent Text'sender_title where
    fromElem (CElem (Elem "text:sender-title" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'sender_title (fromAttrs as) a), rest))
	(definite fromText "text" "text:sender-title" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'sender_title as a) =
	[CElem (Elem "text:sender-title" (toAttrs as) (toText a))]
instance XmlAttributes Text'sender_title_Attrs where
    fromAttrs as =
	Text'sender_title_Attrs
	  { text'sender_titleText'fixed = defaultA fromAttrToStr "true" "text:fixed" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'sender_titleText'fixed v)
	]
instance XmlContent Text'sender_position where
    fromElem (CElem (Elem "text:sender-position" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'sender_position (fromAttrs as) a), rest))
	(definite fromText "text" "text:sender-position" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'sender_position as a) =
	[CElem (Elem "text:sender-position" (toAttrs as) (toText a))]
instance XmlAttributes Text'sender_position_Attrs where
    fromAttrs as =
	Text'sender_position_Attrs
	  { text'sender_positionText'fixed = defaultA fromAttrToStr "true" "text:fixed" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'sender_positionText'fixed v)
	]
instance XmlContent Text'sender_email where
    fromElem (CElem (Elem "text:sender-email" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'sender_email (fromAttrs as) a), rest))
	(definite fromText "text" "text:sender-email" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'sender_email as a) =
	[CElem (Elem "text:sender-email" (toAttrs as) (toText a))]
instance XmlAttributes Text'sender_email_Attrs where
    fromAttrs as =
	Text'sender_email_Attrs
	  { text'sender_emailText'fixed = defaultA fromAttrToStr "true" "text:fixed" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'sender_emailText'fixed v)
	]
instance XmlContent Text'sender_phone_private where
    fromElem (CElem (Elem "text:sender-phone-private" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'sender_phone_private (fromAttrs as) a), rest))
	(definite fromText "text" "text:sender-phone-private" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'sender_phone_private as a) =
	[CElem (Elem "text:sender-phone-private" (toAttrs as) (toText a))]
instance XmlAttributes Text'sender_phone_private_Attrs where
    fromAttrs as =
	Text'sender_phone_private_Attrs
	  { text'sender_phone_privateText'fixed = defaultA fromAttrToStr "true" "text:fixed" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'sender_phone_privateText'fixed v)
	]
instance XmlContent Text'sender_fax where
    fromElem (CElem (Elem "text:sender-fax" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'sender_fax (fromAttrs as) a), rest))
	(definite fromText "text" "text:sender-fax" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'sender_fax as a) =
	[CElem (Elem "text:sender-fax" (toAttrs as) (toText a))]
instance XmlAttributes Text'sender_fax_Attrs where
    fromAttrs as =
	Text'sender_fax_Attrs
	  { text'sender_faxText'fixed = defaultA fromAttrToStr "true" "text:fixed" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'sender_faxText'fixed v)
	]
instance XmlContent Text'sender_company where
    fromElem (CElem (Elem "text:sender-company" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'sender_company (fromAttrs as) a), rest))
	(definite fromText "text" "text:sender-company" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'sender_company as a) =
	[CElem (Elem "text:sender-company" (toAttrs as) (toText a))]
instance XmlAttributes Text'sender_company_Attrs where
    fromAttrs as =
	Text'sender_company_Attrs
	  { text'sender_companyText'fixed = defaultA fromAttrToStr "true" "text:fixed" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'sender_companyText'fixed v)
	]
instance XmlContent Text'sender_phone_work where
    fromElem (CElem (Elem "text:sender-phone-work" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'sender_phone_work (fromAttrs as) a), rest))
	(definite fromText "text" "text:sender-phone-work" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'sender_phone_work as a) =
	[CElem (Elem "text:sender-phone-work" (toAttrs as) (toText a))]
instance XmlAttributes Text'sender_phone_work_Attrs where
    fromAttrs as =
	Text'sender_phone_work_Attrs
	  { text'sender_phone_workText'fixed = defaultA fromAttrToStr "true" "text:fixed" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'sender_phone_workText'fixed v)
	]
instance XmlContent Text'sender_street where
    fromElem (CElem (Elem "text:sender-street" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'sender_street (fromAttrs as) a), rest))
	(definite fromText "text" "text:sender-street" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'sender_street as a) =
	[CElem (Elem "text:sender-street" (toAttrs as) (toText a))]
instance XmlAttributes Text'sender_street_Attrs where
    fromAttrs as =
	Text'sender_street_Attrs
	  { text'sender_streetText'fixed = defaultA fromAttrToStr "true" "text:fixed" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'sender_streetText'fixed v)
	]
instance XmlContent Text'sender_city where
    fromElem (CElem (Elem "text:sender-city" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'sender_city (fromAttrs as) a), rest))
	(definite fromText "text" "text:sender-city" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'sender_city as a) =
	[CElem (Elem "text:sender-city" (toAttrs as) (toText a))]
instance XmlAttributes Text'sender_city_Attrs where
    fromAttrs as =
	Text'sender_city_Attrs
	  { text'sender_cityText'fixed = defaultA fromAttrToStr "true" "text:fixed" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'sender_cityText'fixed v)
	]
instance XmlContent Text'sender_postal_code where
    fromElem (CElem (Elem "text:sender-postal-code" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'sender_postal_code (fromAttrs as) a), rest))
	(definite fromText "text" "text:sender-postal-code" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'sender_postal_code as a) =
	[CElem (Elem "text:sender-postal-code" (toAttrs as) (toText a))]
instance XmlAttributes Text'sender_postal_code_Attrs where
    fromAttrs as =
	Text'sender_postal_code_Attrs
	  { text'sender_postal_codeText'fixed = defaultA fromAttrToStr "true" "text:fixed" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'sender_postal_codeText'fixed v)
	]
instance XmlContent Text'sender_country where
    fromElem (CElem (Elem "text:sender-country" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'sender_country (fromAttrs as) a), rest))
	(definite fromText "text" "text:sender-country" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'sender_country as a) =
	[CElem (Elem "text:sender-country" (toAttrs as) (toText a))]
instance XmlAttributes Text'sender_country_Attrs where
    fromAttrs as =
	Text'sender_country_Attrs
	  { text'sender_countryText'fixed = defaultA fromAttrToStr "true" "text:fixed" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'sender_countryText'fixed v)
	]
instance XmlContent Text'sender_state_or_province where
    fromElem (CElem (Elem "text:sender-state-or-province" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'sender_state_or_province (fromAttrs as) a), rest))
	(definite fromText "text" "text:sender-state-or-province" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'sender_state_or_province as a) =
	[CElem (Elem "text:sender-state-or-province" (toAttrs as) (toText a))]
instance XmlAttributes Text'sender_state_or_province_Attrs where
    fromAttrs as =
	Text'sender_state_or_province_Attrs
	  { text'sender_state_or_provinceText'fixed = defaultA fromAttrToStr "true" "text:fixed" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'sender_state_or_provinceText'fixed v)
	]
instance XmlContent Text'author_name where
    fromElem (CElem (Elem "text:author-name" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'author_name (fromAttrs as) a), rest))
	(definite fromText "text" "text:author-name" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'author_name as a) =
	[CElem (Elem "text:author-name" (toAttrs as) (toText a))]
instance XmlAttributes Text'author_name_Attrs where
    fromAttrs as =
	Text'author_name_Attrs
	  { text'author_nameText'fixed = defaultA fromAttrToStr "true" "text:fixed" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'author_nameText'fixed v)
	]
instance XmlContent Text'author_initials where
    fromElem (CElem (Elem "text:author-initials" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'author_initials (fromAttrs as) a), rest))
	(definite fromText "text" "text:author-initials" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'author_initials as a) =
	[CElem (Elem "text:author-initials" (toAttrs as) (toText a))]
instance XmlAttributes Text'author_initials_Attrs where
    fromAttrs as =
	Text'author_initials_Attrs
	  { text'author_initialsText'fixed = defaultA fromAttrToStr "true" "text:fixed" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'author_initialsText'fixed v)
	]
instance XmlContent Text'placeholder where
    fromElem (CElem (Elem "text:placeholder" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'placeholder (fromAttrs as) a), rest))
	(definite fromText "text" "text:placeholder" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'placeholder as a) =
	[CElem (Elem "text:placeholder" (toAttrs as) (toText a))]
instance XmlAttributes Text'placeholder_Attrs where
    fromAttrs as =
	Text'placeholder_Attrs
	  { text'placeholderText'placeholder_type = definiteA fromAttrToTyp "text:placeholder" "text:placeholder-type" as
	  , text'placeholderText'description = possibleA fromAttrToStr "text:description" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrTyp "text:placeholder-type" (text'placeholderText'placeholder_type v)
	, maybeToAttr toAttrFrStr "text:description" (text'placeholderText'description v)
	]
instance XmlAttrType Text'placeholder_text'placeholder_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "text" = Just Text'placeholder_text'placeholder_type_text
	    translate "table" = Just Text'placeholder_text'placeholder_type_table
	    translate "text-box" = Just Text'placeholder_text'placeholder_type_text_box
	    translate "image" = Just Text'placeholder_text'placeholder_type_image
	    translate "object" = Just Text'placeholder_text'placeholder_type_object
	    translate _ = Nothing
    toAttrFrTyp n Text'placeholder_text'placeholder_type_text = Just (n, str2attr "text")
    toAttrFrTyp n Text'placeholder_text'placeholder_type_table = Just (n, str2attr "table")
    toAttrFrTyp n Text'placeholder_text'placeholder_type_text_box = Just (n, str2attr "text-box")
    toAttrFrTyp n Text'placeholder_text'placeholder_type_image = Just (n, str2attr "image")
    toAttrFrTyp n Text'placeholder_text'placeholder_type_object = Just (n, str2attr "object")
instance XmlContent Text'variable_decls where
    fromElem (CElem (Elem "text:variable-decls" [] c0):rest) =
	(\(a,ca)->
	   (Just (Text'variable_decls a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'variable_decls a) =
	[CElem (Elem "text:variable-decls" [] (concatMap toElem a))]
instance XmlContent Text'variable_decl where
    fromElem (CElem (Elem "text:variable-decl" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:variable-decl" (toAttrs as) [])]
instance XmlAttributes Text'variable_decl where
    fromAttrs as =
	Text'variable_decl
	  { text'variable_declText'name = definiteA fromAttrToStr "text:variable-decl" "text:name" as
	  , text'variable_declText'value_type = possibleA fromAttrToTyp "text:value-type" as
	  , text'variable_declText'currency = possibleA fromAttrToStr "text:currency" as
	  , text'variable_declText'value = possibleA fromAttrToStr "text:value" as
	  , text'variable_declText'date_value = possibleA fromAttrToStr "text:date-value" as
	  , text'variable_declText'time_value = possibleA fromAttrToStr "text:time-value" as
	  , text'variable_declText'boolean_value = possibleA fromAttrToStr "text:boolean-value" as
	  , text'variable_declText'string_value = possibleA fromAttrToStr "text:string-value" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:name" (text'variable_declText'name v)
	, maybeToAttr toAttrFrTyp "text:value-type" (text'variable_declText'value_type v)
	, maybeToAttr toAttrFrStr "text:currency" (text'variable_declText'currency v)
	, maybeToAttr toAttrFrStr "text:value" (text'variable_declText'value v)
	, maybeToAttr toAttrFrStr "text:date-value" (text'variable_declText'date_value v)
	, maybeToAttr toAttrFrStr "text:time-value" (text'variable_declText'time_value v)
	, maybeToAttr toAttrFrStr "text:boolean-value" (text'variable_declText'boolean_value v)
	, maybeToAttr toAttrFrStr "text:string-value" (text'variable_declText'string_value v)
	]
instance XmlAttrType Text'variable_decl_text'value_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "float" = Just Text'variable_decl_text'value_type_float
	    translate "time" = Just Text'variable_decl_text'value_type_time
	    translate "date" = Just Text'variable_decl_text'value_type_date
	    translate "percentage" = Just Text'variable_decl_text'value_type_percentage
	    translate "currency" = Just Text'variable_decl_text'value_type_currency
	    translate "boolean" = Just Text'variable_decl_text'value_type_boolean
	    translate "string" = Just Text'variable_decl_text'value_type_string
	    translate _ = Nothing
    toAttrFrTyp n Text'variable_decl_text'value_type_float = Just (n, str2attr "float")
    toAttrFrTyp n Text'variable_decl_text'value_type_time = Just (n, str2attr "time")
    toAttrFrTyp n Text'variable_decl_text'value_type_date = Just (n, str2attr "date")
    toAttrFrTyp n Text'variable_decl_text'value_type_percentage = Just (n, str2attr "percentage")
    toAttrFrTyp n Text'variable_decl_text'value_type_currency = Just (n, str2attr "currency")
    toAttrFrTyp n Text'variable_decl_text'value_type_boolean = Just (n, str2attr "boolean")
    toAttrFrTyp n Text'variable_decl_text'value_type_string = Just (n, str2attr "string")
instance XmlContent Text'variable_set where
    fromElem (CElem (Elem "text:variable-set" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'variable_set (fromAttrs as) a), rest))
	(definite fromText "text" "text:variable-set" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'variable_set as a) =
	[CElem (Elem "text:variable-set" (toAttrs as) (toText a))]
instance XmlAttributes Text'variable_set_Attrs where
    fromAttrs as =
	Text'variable_set_Attrs
	  { text'variable_setText'name = definiteA fromAttrToStr "text:variable-set" "text:name" as
	  , text'variable_setText'formula = possibleA fromAttrToStr "text:formula" as
	  , text'variable_setText'value_type = possibleA fromAttrToTyp "text:value-type" as
	  , text'variable_setText'currency = possibleA fromAttrToStr "text:currency" as
	  , text'variable_setText'value = possibleA fromAttrToStr "text:value" as
	  , text'variable_setText'date_value = possibleA fromAttrToStr "text:date-value" as
	  , text'variable_setText'time_value = possibleA fromAttrToStr "text:time-value" as
	  , text'variable_setText'boolean_value = possibleA fromAttrToStr "text:boolean-value" as
	  , text'variable_setText'string_value = possibleA fromAttrToStr "text:string-value" as
	  , text'variable_setText'display = defaultA fromAttrToTyp Text'variable_set_text'display_value "text:display" as
	  , text'variable_setStyle'data_style_name = possibleA fromAttrToStr "style:data-style-name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:name" (text'variable_setText'name v)
	, maybeToAttr toAttrFrStr "text:formula" (text'variable_setText'formula v)
	, maybeToAttr toAttrFrTyp "text:value-type" (text'variable_setText'value_type v)
	, maybeToAttr toAttrFrStr "text:currency" (text'variable_setText'currency v)
	, maybeToAttr toAttrFrStr "text:value" (text'variable_setText'value v)
	, maybeToAttr toAttrFrStr "text:date-value" (text'variable_setText'date_value v)
	, maybeToAttr toAttrFrStr "text:time-value" (text'variable_setText'time_value v)
	, maybeToAttr toAttrFrStr "text:boolean-value" (text'variable_setText'boolean_value v)
	, maybeToAttr toAttrFrStr "text:string-value" (text'variable_setText'string_value v)
	, defaultToAttr toAttrFrTyp "text:display" (text'variable_setText'display v)
	, maybeToAttr toAttrFrStr "style:data-style-name" (text'variable_setStyle'data_style_name v)
	]
instance XmlAttrType Text'variable_set_text'value_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "float" = Just Text'variable_set_text'value_type_float
	    translate "time" = Just Text'variable_set_text'value_type_time
	    translate "date" = Just Text'variable_set_text'value_type_date
	    translate "percentage" = Just Text'variable_set_text'value_type_percentage
	    translate "currency" = Just Text'variable_set_text'value_type_currency
	    translate "boolean" = Just Text'variable_set_text'value_type_boolean
	    translate "string" = Just Text'variable_set_text'value_type_string
	    translate _ = Nothing
    toAttrFrTyp n Text'variable_set_text'value_type_float = Just (n, str2attr "float")
    toAttrFrTyp n Text'variable_set_text'value_type_time = Just (n, str2attr "time")
    toAttrFrTyp n Text'variable_set_text'value_type_date = Just (n, str2attr "date")
    toAttrFrTyp n Text'variable_set_text'value_type_percentage = Just (n, str2attr "percentage")
    toAttrFrTyp n Text'variable_set_text'value_type_currency = Just (n, str2attr "currency")
    toAttrFrTyp n Text'variable_set_text'value_type_boolean = Just (n, str2attr "boolean")
    toAttrFrTyp n Text'variable_set_text'value_type_string = Just (n, str2attr "string")
instance XmlAttrType Text'variable_set_text'display where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "value" = Just Text'variable_set_text'display_value
	    translate "none" = Just Text'variable_set_text'display_none
	    translate _ = Nothing
    toAttrFrTyp n Text'variable_set_text'display_value = Just (n, str2attr "value")
    toAttrFrTyp n Text'variable_set_text'display_none = Just (n, str2attr "none")
instance XmlContent Text'variable_get where
    fromElem (CElem (Elem "text:variable-get" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'variable_get (fromAttrs as) a), rest))
	(definite fromText "text" "text:variable-get" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'variable_get as a) =
	[CElem (Elem "text:variable-get" (toAttrs as) (toText a))]
instance XmlAttributes Text'variable_get_Attrs where
    fromAttrs as =
	Text'variable_get_Attrs
	  { text'variable_getText'name = definiteA fromAttrToStr "text:variable-get" "text:name" as
	  , text'variable_getText'display = defaultA fromAttrToTyp Text'variable_get_text'display_value "text:display" as
	  , text'variable_getStyle'data_style_name = possibleA fromAttrToStr "style:data-style-name" as
	  , text'variable_getText'value_type = possibleA fromAttrToTyp "text:value-type" as
	  , text'variable_getText'currency = possibleA fromAttrToStr "text:currency" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:name" (text'variable_getText'name v)
	, defaultToAttr toAttrFrTyp "text:display" (text'variable_getText'display v)
	, maybeToAttr toAttrFrStr "style:data-style-name" (text'variable_getStyle'data_style_name v)
	, maybeToAttr toAttrFrTyp "text:value-type" (text'variable_getText'value_type v)
	, maybeToAttr toAttrFrStr "text:currency" (text'variable_getText'currency v)
	]
instance XmlAttrType Text'variable_get_text'display where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "value" = Just Text'variable_get_text'display_value
	    translate "formula" = Just Text'variable_get_text'display_formula
	    translate _ = Nothing
    toAttrFrTyp n Text'variable_get_text'display_value = Just (n, str2attr "value")
    toAttrFrTyp n Text'variable_get_text'display_formula = Just (n, str2attr "formula")
instance XmlAttrType Text'variable_get_text'value_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "float" = Just Text'variable_get_text'value_type_float
	    translate "time" = Just Text'variable_get_text'value_type_time
	    translate "date" = Just Text'variable_get_text'value_type_date
	    translate "percentage" = Just Text'variable_get_text'value_type_percentage
	    translate "currency" = Just Text'variable_get_text'value_type_currency
	    translate "boolean" = Just Text'variable_get_text'value_type_boolean
	    translate "string" = Just Text'variable_get_text'value_type_string
	    translate _ = Nothing
    toAttrFrTyp n Text'variable_get_text'value_type_float = Just (n, str2attr "float")
    toAttrFrTyp n Text'variable_get_text'value_type_time = Just (n, str2attr "time")
    toAttrFrTyp n Text'variable_get_text'value_type_date = Just (n, str2attr "date")
    toAttrFrTyp n Text'variable_get_text'value_type_percentage = Just (n, str2attr "percentage")
    toAttrFrTyp n Text'variable_get_text'value_type_currency = Just (n, str2attr "currency")
    toAttrFrTyp n Text'variable_get_text'value_type_boolean = Just (n, str2attr "boolean")
    toAttrFrTyp n Text'variable_get_text'value_type_string = Just (n, str2attr "string")
instance XmlContent Text'variable_input where
    fromElem (CElem (Elem "text:variable-input" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'variable_input (fromAttrs as) a), rest))
	(definite fromText "text" "text:variable-input" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'variable_input as a) =
	[CElem (Elem "text:variable-input" (toAttrs as) (toText a))]
instance XmlAttributes Text'variable_input_Attrs where
    fromAttrs as =
	Text'variable_input_Attrs
	  { text'variable_inputText'name = definiteA fromAttrToStr "text:variable-input" "text:name" as
	  , text'variable_inputText'description = possibleA fromAttrToStr "text:description" as
	  , text'variable_inputText'value_type = possibleA fromAttrToTyp "text:value-type" as
	  , text'variable_inputText'currency = possibleA fromAttrToStr "text:currency" as
	  , text'variable_inputText'value = possibleA fromAttrToStr "text:value" as
	  , text'variable_inputText'date_value = possibleA fromAttrToStr "text:date-value" as
	  , text'variable_inputText'time_value = possibleA fromAttrToStr "text:time-value" as
	  , text'variable_inputText'boolean_value = possibleA fromAttrToStr "text:boolean-value" as
	  , text'variable_inputText'string_value = possibleA fromAttrToStr "text:string-value" as
	  , text'variable_inputText'display = defaultA fromAttrToTyp Text'variable_input_text'display_value "text:display" as
	  , text'variable_inputStyle'data_style_name = possibleA fromAttrToStr "style:data-style-name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:name" (text'variable_inputText'name v)
	, maybeToAttr toAttrFrStr "text:description" (text'variable_inputText'description v)
	, maybeToAttr toAttrFrTyp "text:value-type" (text'variable_inputText'value_type v)
	, maybeToAttr toAttrFrStr "text:currency" (text'variable_inputText'currency v)
	, maybeToAttr toAttrFrStr "text:value" (text'variable_inputText'value v)
	, maybeToAttr toAttrFrStr "text:date-value" (text'variable_inputText'date_value v)
	, maybeToAttr toAttrFrStr "text:time-value" (text'variable_inputText'time_value v)
	, maybeToAttr toAttrFrStr "text:boolean-value" (text'variable_inputText'boolean_value v)
	, maybeToAttr toAttrFrStr "text:string-value" (text'variable_inputText'string_value v)
	, defaultToAttr toAttrFrTyp "text:display" (text'variable_inputText'display v)
	, maybeToAttr toAttrFrStr "style:data-style-name" (text'variable_inputStyle'data_style_name v)
	]
instance XmlAttrType Text'variable_input_text'value_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "float" = Just Text'variable_input_text'value_type_float
	    translate "time" = Just Text'variable_input_text'value_type_time
	    translate "date" = Just Text'variable_input_text'value_type_date
	    translate "percentage" = Just Text'variable_input_text'value_type_percentage
	    translate "currency" = Just Text'variable_input_text'value_type_currency
	    translate "boolean" = Just Text'variable_input_text'value_type_boolean
	    translate "string" = Just Text'variable_input_text'value_type_string
	    translate _ = Nothing
    toAttrFrTyp n Text'variable_input_text'value_type_float = Just (n, str2attr "float")
    toAttrFrTyp n Text'variable_input_text'value_type_time = Just (n, str2attr "time")
    toAttrFrTyp n Text'variable_input_text'value_type_date = Just (n, str2attr "date")
    toAttrFrTyp n Text'variable_input_text'value_type_percentage = Just (n, str2attr "percentage")
    toAttrFrTyp n Text'variable_input_text'value_type_currency = Just (n, str2attr "currency")
    toAttrFrTyp n Text'variable_input_text'value_type_boolean = Just (n, str2attr "boolean")
    toAttrFrTyp n Text'variable_input_text'value_type_string = Just (n, str2attr "string")
instance XmlAttrType Text'variable_input_text'display where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "value" = Just Text'variable_input_text'display_value
	    translate "none" = Just Text'variable_input_text'display_none
	    translate _ = Nothing
    toAttrFrTyp n Text'variable_input_text'display_value = Just (n, str2attr "value")
    toAttrFrTyp n Text'variable_input_text'display_none = Just (n, str2attr "none")
instance XmlContent Text'user_field_decls where
    fromElem (CElem (Elem "text:user-field-decls" [] c0):rest) =
	(\(a,ca)->
	   (Just (Text'user_field_decls a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'user_field_decls a) =
	[CElem (Elem "text:user-field-decls" [] (concatMap toElem a))]
instance XmlContent Text'user_field_decl where
    fromElem (CElem (Elem "text:user-field-decl" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:user-field-decl" (toAttrs as) [])]
instance XmlAttributes Text'user_field_decl where
    fromAttrs as =
	Text'user_field_decl
	  { text'user_field_declText'name = definiteA fromAttrToStr "text:user-field-decl" "text:name" as
	  , text'user_field_declText'formula = possibleA fromAttrToStr "text:formula" as
	  , text'user_field_declText'value_type = possibleA fromAttrToTyp "text:value-type" as
	  , text'user_field_declText'currency = possibleA fromAttrToStr "text:currency" as
	  , text'user_field_declText'value = possibleA fromAttrToStr "text:value" as
	  , text'user_field_declText'date_value = possibleA fromAttrToStr "text:date-value" as
	  , text'user_field_declText'time_value = possibleA fromAttrToStr "text:time-value" as
	  , text'user_field_declText'boolean_value = possibleA fromAttrToStr "text:boolean-value" as
	  , text'user_field_declText'string_value = possibleA fromAttrToStr "text:string-value" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:name" (text'user_field_declText'name v)
	, maybeToAttr toAttrFrStr "text:formula" (text'user_field_declText'formula v)
	, maybeToAttr toAttrFrTyp "text:value-type" (text'user_field_declText'value_type v)
	, maybeToAttr toAttrFrStr "text:currency" (text'user_field_declText'currency v)
	, maybeToAttr toAttrFrStr "text:value" (text'user_field_declText'value v)
	, maybeToAttr toAttrFrStr "text:date-value" (text'user_field_declText'date_value v)
	, maybeToAttr toAttrFrStr "text:time-value" (text'user_field_declText'time_value v)
	, maybeToAttr toAttrFrStr "text:boolean-value" (text'user_field_declText'boolean_value v)
	, maybeToAttr toAttrFrStr "text:string-value" (text'user_field_declText'string_value v)
	]
instance XmlAttrType Text'user_field_decl_text'value_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "float" = Just Text'user_field_decl_text'value_type_float
	    translate "time" = Just Text'user_field_decl_text'value_type_time
	    translate "date" = Just Text'user_field_decl_text'value_type_date
	    translate "percentage" = Just Text'user_field_decl_text'value_type_percentage
	    translate "currency" = Just Text'user_field_decl_text'value_type_currency
	    translate "boolean" = Just Text'user_field_decl_text'value_type_boolean
	    translate "string" = Just Text'user_field_decl_text'value_type_string
	    translate _ = Nothing
    toAttrFrTyp n Text'user_field_decl_text'value_type_float = Just (n, str2attr "float")
    toAttrFrTyp n Text'user_field_decl_text'value_type_time = Just (n, str2attr "time")
    toAttrFrTyp n Text'user_field_decl_text'value_type_date = Just (n, str2attr "date")
    toAttrFrTyp n Text'user_field_decl_text'value_type_percentage = Just (n, str2attr "percentage")
    toAttrFrTyp n Text'user_field_decl_text'value_type_currency = Just (n, str2attr "currency")
    toAttrFrTyp n Text'user_field_decl_text'value_type_boolean = Just (n, str2attr "boolean")
    toAttrFrTyp n Text'user_field_decl_text'value_type_string = Just (n, str2attr "string")
instance XmlContent Text'user_field_get where
    fromElem (CElem (Elem "text:user-field-get" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'user_field_get (fromAttrs as) a), rest))
	(definite fromText "text" "text:user-field-get" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'user_field_get as a) =
	[CElem (Elem "text:user-field-get" (toAttrs as) (toText a))]
instance XmlAttributes Text'user_field_get_Attrs where
    fromAttrs as =
	Text'user_field_get_Attrs
	  { text'user_field_getText'name = definiteA fromAttrToStr "text:user-field-get" "text:name" as
	  , text'user_field_getText'display = defaultA fromAttrToTyp Text'user_field_get_text'display_value "text:display" as
	  , text'user_field_getStyle'data_style_name = possibleA fromAttrToStr "style:data-style-name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:name" (text'user_field_getText'name v)
	, defaultToAttr toAttrFrTyp "text:display" (text'user_field_getText'display v)
	, maybeToAttr toAttrFrStr "style:data-style-name" (text'user_field_getStyle'data_style_name v)
	]
instance XmlAttrType Text'user_field_get_text'display where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "value" = Just Text'user_field_get_text'display_value
	    translate "formula" = Just Text'user_field_get_text'display_formula
	    translate "none" = Just Text'user_field_get_text'display_none
	    translate _ = Nothing
    toAttrFrTyp n Text'user_field_get_text'display_value = Just (n, str2attr "value")
    toAttrFrTyp n Text'user_field_get_text'display_formula = Just (n, str2attr "formula")
    toAttrFrTyp n Text'user_field_get_text'display_none = Just (n, str2attr "none")
instance XmlContent Text'user_field_input where
    fromElem (CElem (Elem "text:user-field-input" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'user_field_input (fromAttrs as) a), rest))
	(definite fromText "text" "text:user-field-input" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'user_field_input as a) =
	[CElem (Elem "text:user-field-input" (toAttrs as) (toText a))]
instance XmlAttributes Text'user_field_input_Attrs where
    fromAttrs as =
	Text'user_field_input_Attrs
	  { text'user_field_inputText'name = definiteA fromAttrToStr "text:user-field-input" "text:name" as
	  , text'user_field_inputText'description = possibleA fromAttrToStr "text:description" as
	  , text'user_field_inputStyle'data_style_name = possibleA fromAttrToStr "style:data-style-name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:name" (text'user_field_inputText'name v)
	, maybeToAttr toAttrFrStr "text:description" (text'user_field_inputText'description v)
	, maybeToAttr toAttrFrStr "style:data-style-name" (text'user_field_inputStyle'data_style_name v)
	]
instance XmlContent Text'sequence_decls where
    fromElem (CElem (Elem "text:sequence-decls" [] c0):rest) =
	(\(a,ca)->
	   (Just (Text'sequence_decls a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'sequence_decls a) =
	[CElem (Elem "text:sequence-decls" [] (concatMap toElem a))]
instance XmlContent Text'sequence_decl where
    fromElem (CElem (Elem "text:sequence-decl" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:sequence-decl" (toAttrs as) [])]
instance XmlAttributes Text'sequence_decl where
    fromAttrs as =
	Text'sequence_decl
	  { text'sequence_declText'name = definiteA fromAttrToStr "text:sequence-decl" "text:name" as
	  , text'sequence_declText'display_outline_level = defaultA fromAttrToStr "0" "text:display-outline-level" as
	  , text'sequence_declText'separation_character = defaultA fromAttrToStr "." "text:separation-character" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:name" (text'sequence_declText'name v)
	, defaultToAttr toAttrFrStr "text:display-outline-level" (text'sequence_declText'display_outline_level v)
	, defaultToAttr toAttrFrStr "text:separation-character" (text'sequence_declText'separation_character v)
	]
instance XmlContent Text'sequence where
    fromElem (CElem (Elem "text:sequence" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'sequence (fromAttrs as) a), rest))
	(definite fromText "text" "text:sequence" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'sequence as a) =
	[CElem (Elem "text:sequence" (toAttrs as) (toText a))]
instance XmlAttributes Text'sequence_Attrs where
    fromAttrs as =
	Text'sequence_Attrs
	  { text'sequenceText'name = definiteA fromAttrToStr "text:sequence" "text:name" as
	  , text'sequenceText'formula = possibleA fromAttrToStr "text:formula" as
	  , text'sequenceStyle'num_format = possibleA fromAttrToStr "style:num-format" as
	  , text'sequenceStyle'num_letter_sync = defaultA fromAttrToStr "false" "style:num-letter-sync" as
	  , text'sequenceText'ref_name = possibleA fromAttrToStr "text:ref-name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:name" (text'sequenceText'name v)
	, maybeToAttr toAttrFrStr "text:formula" (text'sequenceText'formula v)
	, maybeToAttr toAttrFrStr "style:num-format" (text'sequenceStyle'num_format v)
	, defaultToAttr toAttrFrStr "style:num-letter-sync" (text'sequenceStyle'num_letter_sync v)
	, maybeToAttr toAttrFrStr "text:ref-name" (text'sequenceText'ref_name v)
	]
instance XmlContent Text'expression where
    fromElem (CElem (Elem "text:expression" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'expression (fromAttrs as) a), rest))
	(definite fromText "text" "text:expression" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'expression as a) =
	[CElem (Elem "text:expression" (toAttrs as) (toText a))]
instance XmlAttributes Text'expression_Attrs where
    fromAttrs as =
	Text'expression_Attrs
	  { text'expressionText'formula = possibleA fromAttrToStr "text:formula" as
	  , text'expressionText'display = defaultA fromAttrToTyp Text'expression_text'display_value "text:display" as
	  , text'expressionText'value_type = possibleA fromAttrToTyp "text:value-type" as
	  , text'expressionText'currency = possibleA fromAttrToStr "text:currency" as
	  , text'expressionText'value = possibleA fromAttrToStr "text:value" as
	  , text'expressionText'date_value = possibleA fromAttrToStr "text:date-value" as
	  , text'expressionText'time_value = possibleA fromAttrToStr "text:time-value" as
	  , text'expressionText'boolean_value = possibleA fromAttrToStr "text:boolean-value" as
	  , text'expressionText'string_value = possibleA fromAttrToStr "text:string-value" as
	  , text'expressionStyle'data_style_name = possibleA fromAttrToStr "style:data-style-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "text:formula" (text'expressionText'formula v)
	, defaultToAttr toAttrFrTyp "text:display" (text'expressionText'display v)
	, maybeToAttr toAttrFrTyp "text:value-type" (text'expressionText'value_type v)
	, maybeToAttr toAttrFrStr "text:currency" (text'expressionText'currency v)
	, maybeToAttr toAttrFrStr "text:value" (text'expressionText'value v)
	, maybeToAttr toAttrFrStr "text:date-value" (text'expressionText'date_value v)
	, maybeToAttr toAttrFrStr "text:time-value" (text'expressionText'time_value v)
	, maybeToAttr toAttrFrStr "text:boolean-value" (text'expressionText'boolean_value v)
	, maybeToAttr toAttrFrStr "text:string-value" (text'expressionText'string_value v)
	, maybeToAttr toAttrFrStr "style:data-style-name" (text'expressionStyle'data_style_name v)
	]
instance XmlAttrType Text'expression_text'display where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "value" = Just Text'expression_text'display_value
	    translate "formula" = Just Text'expression_text'display_formula
	    translate _ = Nothing
    toAttrFrTyp n Text'expression_text'display_value = Just (n, str2attr "value")
    toAttrFrTyp n Text'expression_text'display_formula = Just (n, str2attr "formula")
instance XmlAttrType Text'expression_text'value_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "float" = Just Text'expression_text'value_type_float
	    translate "time" = Just Text'expression_text'value_type_time
	    translate "date" = Just Text'expression_text'value_type_date
	    translate "percentage" = Just Text'expression_text'value_type_percentage
	    translate "currency" = Just Text'expression_text'value_type_currency
	    translate "boolean" = Just Text'expression_text'value_type_boolean
	    translate "string" = Just Text'expression_text'value_type_string
	    translate _ = Nothing
    toAttrFrTyp n Text'expression_text'value_type_float = Just (n, str2attr "float")
    toAttrFrTyp n Text'expression_text'value_type_time = Just (n, str2attr "time")
    toAttrFrTyp n Text'expression_text'value_type_date = Just (n, str2attr "date")
    toAttrFrTyp n Text'expression_text'value_type_percentage = Just (n, str2attr "percentage")
    toAttrFrTyp n Text'expression_text'value_type_currency = Just (n, str2attr "currency")
    toAttrFrTyp n Text'expression_text'value_type_boolean = Just (n, str2attr "boolean")
    toAttrFrTyp n Text'expression_text'value_type_string = Just (n, str2attr "string")
instance XmlContent Text'text_input where
    fromElem (CElem (Elem "text:text-input" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'text_input (fromAttrs as) a), rest))
	(definite fromText "text" "text:text-input" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'text_input as a) =
	[CElem (Elem "text:text-input" (toAttrs as) (toText a))]
instance XmlAttributes Text'text_input_Attrs where
    fromAttrs as =
	Text'text_input_Attrs
	  { text'text_inputText'description = possibleA fromAttrToStr "text:description" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "text:description" (text'text_inputText'description v)
	]
instance XmlContent Text'database_display where
    fromElem (CElem (Elem "text:database-display" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'database_display (fromAttrs as) a), rest))
	(definite fromText "text" "text:database-display" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'database_display as a) =
	[CElem (Elem "text:database-display" (toAttrs as) (toText a))]
instance XmlAttributes Text'database_display_Attrs where
    fromAttrs as =
	Text'database_display_Attrs
	  { text'database_displayText'database_name = definiteA fromAttrToStr "text:database-display" "text:database-name" as
	  , text'database_displayText'table_name = definiteA fromAttrToStr "text:database-display" "text:table-name" as
	  , text'database_displayText'table_type = possibleA fromAttrToTyp "text:table-type" as
	  , text'database_displayText'column_name = definiteA fromAttrToStr "text:database-display" "text:column-name" as
	  , text'database_displayStyle'data_style_name = possibleA fromAttrToStr "style:data-style-name" as
	  , text'database_displayText'display = possibleA fromAttrToTyp "text:display" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:database-name" (text'database_displayText'database_name v)
	, toAttrFrStr "text:table-name" (text'database_displayText'table_name v)
	, maybeToAttr toAttrFrTyp "text:table-type" (text'database_displayText'table_type v)
	, toAttrFrStr "text:column-name" (text'database_displayText'column_name v)
	, maybeToAttr toAttrFrStr "style:data-style-name" (text'database_displayStyle'data_style_name v)
	, maybeToAttr toAttrFrTyp "text:display" (text'database_displayText'display v)
	]
instance XmlAttrType Text'database_display_text'table_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "table" = Just Text'database_display_text'table_type_table
	    translate "query" = Just Text'database_display_text'table_type_query
	    translate "command" = Just Text'database_display_text'table_type_command
	    translate _ = Nothing
    toAttrFrTyp n Text'database_display_text'table_type_table = Just (n, str2attr "table")
    toAttrFrTyp n Text'database_display_text'table_type_query = Just (n, str2attr "query")
    toAttrFrTyp n Text'database_display_text'table_type_command = Just (n, str2attr "command")
instance XmlAttrType Text'database_display_text'display where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Text'database_display_text'display_none
	    translate "value" = Just Text'database_display_text'display_value
	    translate _ = Nothing
    toAttrFrTyp n Text'database_display_text'display_none = Just (n, str2attr "none")
    toAttrFrTyp n Text'database_display_text'display_value = Just (n, str2attr "value")
instance XmlContent Text'database_next where
    fromElem (CElem (Elem "text:database-next" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'database_next (fromAttrs as) a), rest))
	(definite fromText "text" "text:database-next" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'database_next as a) =
	[CElem (Elem "text:database-next" (toAttrs as) (toText a))]
instance XmlAttributes Text'database_next_Attrs where
    fromAttrs as =
	Text'database_next_Attrs
	  { text'database_nextText'database_name = definiteA fromAttrToStr "text:database-next" "text:database-name" as
	  , text'database_nextText'table_name = definiteA fromAttrToStr "text:database-next" "text:table-name" as
	  , text'database_nextText'table_type = possibleA fromAttrToTyp "text:table-type" as
	  , text'database_nextText'condition = possibleA fromAttrToStr "text:condition" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:database-name" (text'database_nextText'database_name v)
	, toAttrFrStr "text:table-name" (text'database_nextText'table_name v)
	, maybeToAttr toAttrFrTyp "text:table-type" (text'database_nextText'table_type v)
	, maybeToAttr toAttrFrStr "text:condition" (text'database_nextText'condition v)
	]
instance XmlAttrType Text'database_next_text'table_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "table" = Just Text'database_next_text'table_type_table
	    translate "query" = Just Text'database_next_text'table_type_query
	    translate "command" = Just Text'database_next_text'table_type_command
	    translate _ = Nothing
    toAttrFrTyp n Text'database_next_text'table_type_table = Just (n, str2attr "table")
    toAttrFrTyp n Text'database_next_text'table_type_query = Just (n, str2attr "query")
    toAttrFrTyp n Text'database_next_text'table_type_command = Just (n, str2attr "command")
instance XmlContent Text'database_select where
    fromElem (CElem (Elem "text:database-select" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'database_select (fromAttrs as) a), rest))
	(definite fromText "text" "text:database-select" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'database_select as a) =
	[CElem (Elem "text:database-select" (toAttrs as) (toText a))]
instance XmlAttributes Text'database_select_Attrs where
    fromAttrs as =
	Text'database_select_Attrs
	  { text'database_selectText'database_name = definiteA fromAttrToStr "text:database-select" "text:database-name" as
	  , text'database_selectText'table_name = definiteA fromAttrToStr "text:database-select" "text:table-name" as
	  , text'database_selectText'table_type = possibleA fromAttrToTyp "text:table-type" as
	  , text'database_selectText'condition = possibleA fromAttrToStr "text:condition" as
	  , text'database_selectText'row_number = definiteA fromAttrToStr "text:database-select" "text:row-number" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:database-name" (text'database_selectText'database_name v)
	, toAttrFrStr "text:table-name" (text'database_selectText'table_name v)
	, maybeToAttr toAttrFrTyp "text:table-type" (text'database_selectText'table_type v)
	, maybeToAttr toAttrFrStr "text:condition" (text'database_selectText'condition v)
	, toAttrFrStr "text:row-number" (text'database_selectText'row_number v)
	]
instance XmlAttrType Text'database_select_text'table_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "table" = Just Text'database_select_text'table_type_table
	    translate "query" = Just Text'database_select_text'table_type_query
	    translate "command" = Just Text'database_select_text'table_type_command
	    translate _ = Nothing
    toAttrFrTyp n Text'database_select_text'table_type_table = Just (n, str2attr "table")
    toAttrFrTyp n Text'database_select_text'table_type_query = Just (n, str2attr "query")
    toAttrFrTyp n Text'database_select_text'table_type_command = Just (n, str2attr "command")
instance XmlContent Text'database_row_number where
    fromElem (CElem (Elem "text:database-row-number" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'database_row_number (fromAttrs as) a), rest))
	(definite fromText "text" "text:database-row-number" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'database_row_number as a) =
	[CElem (Elem "text:database-row-number" (toAttrs as) (toText a))]
instance XmlAttributes Text'database_row_number_Attrs where
    fromAttrs as =
	Text'database_row_number_Attrs
	  { text'database_row_numberText'database_name = definiteA fromAttrToStr "text:database-row-number" "text:database-name" as
	  , text'database_row_numberText'table_name = definiteA fromAttrToStr "text:database-row-number" "text:table-name" as
	  , text'database_row_numberText'table_type = possibleA fromAttrToTyp "text:table-type" as
	  , text'database_row_numberStyle'num_format = possibleA fromAttrToStr "style:num-format" as
	  , text'database_row_numberStyle'num_letter_sync = defaultA fromAttrToStr "false" "style:num-letter-sync" as
	  , text'database_row_numberText'value = possibleA fromAttrToStr "text:value" as
	  , text'database_row_numberText'display = possibleA fromAttrToTyp "text:display" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:database-name" (text'database_row_numberText'database_name v)
	, toAttrFrStr "text:table-name" (text'database_row_numberText'table_name v)
	, maybeToAttr toAttrFrTyp "text:table-type" (text'database_row_numberText'table_type v)
	, maybeToAttr toAttrFrStr "style:num-format" (text'database_row_numberStyle'num_format v)
	, defaultToAttr toAttrFrStr "style:num-letter-sync" (text'database_row_numberStyle'num_letter_sync v)
	, maybeToAttr toAttrFrStr "text:value" (text'database_row_numberText'value v)
	, maybeToAttr toAttrFrTyp "text:display" (text'database_row_numberText'display v)
	]
instance XmlAttrType Text'database_row_number_text'table_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "table" = Just Text'database_row_number_text'table_type_table
	    translate "query" = Just Text'database_row_number_text'table_type_query
	    translate "command" = Just Text'database_row_number_text'table_type_command
	    translate _ = Nothing
    toAttrFrTyp n Text'database_row_number_text'table_type_table = Just (n, str2attr "table")
    toAttrFrTyp n Text'database_row_number_text'table_type_query = Just (n, str2attr "query")
    toAttrFrTyp n Text'database_row_number_text'table_type_command = Just (n, str2attr "command")
instance XmlAttrType Text'database_row_number_text'display where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Text'database_row_number_text'display_none
	    translate "value" = Just Text'database_row_number_text'display_value
	    translate _ = Nothing
    toAttrFrTyp n Text'database_row_number_text'display_none = Just (n, str2attr "none")
    toAttrFrTyp n Text'database_row_number_text'display_value = Just (n, str2attr "value")
instance XmlContent Text'database_name where
    fromElem (CElem (Elem "text:database-name" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'database_name (fromAttrs as) a), rest))
	(definite fromText "text" "text:database-name" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'database_name as a) =
	[CElem (Elem "text:database-name" (toAttrs as) (toText a))]
instance XmlAttributes Text'database_name_Attrs where
    fromAttrs as =
	Text'database_name_Attrs
	  { text'database_nameText'database_name = definiteA fromAttrToStr "text:database-name" "text:database-name" as
	  , text'database_nameText'table_name = definiteA fromAttrToStr "text:database-name" "text:table-name" as
	  , text'database_nameText'table_type = possibleA fromAttrToTyp "text:table-type" as
	  , text'database_nameText'display = possibleA fromAttrToTyp "text:display" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:database-name" (text'database_nameText'database_name v)
	, toAttrFrStr "text:table-name" (text'database_nameText'table_name v)
	, maybeToAttr toAttrFrTyp "text:table-type" (text'database_nameText'table_type v)
	, maybeToAttr toAttrFrTyp "text:display" (text'database_nameText'display v)
	]
instance XmlAttrType Text'database_name_text'table_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "table" = Just Text'database_name_text'table_type_table
	    translate "query" = Just Text'database_name_text'table_type_query
	    translate "command" = Just Text'database_name_text'table_type_command
	    translate _ = Nothing
    toAttrFrTyp n Text'database_name_text'table_type_table = Just (n, str2attr "table")
    toAttrFrTyp n Text'database_name_text'table_type_query = Just (n, str2attr "query")
    toAttrFrTyp n Text'database_name_text'table_type_command = Just (n, str2attr "command")
instance XmlAttrType Text'database_name_text'display where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Text'database_name_text'display_none
	    translate "value" = Just Text'database_name_text'display_value
	    translate _ = Nothing
    toAttrFrTyp n Text'database_name_text'display_none = Just (n, str2attr "none")
    toAttrFrTyp n Text'database_name_text'display_value = Just (n, str2attr "value")
instance XmlContent Text'initial_creator where
    fromElem (CElem (Elem "text:initial-creator" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'initial_creator (fromAttrs as) a), rest))
	(definite fromText "text" "text:initial-creator" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'initial_creator as a) =
	[CElem (Elem "text:initial-creator" (toAttrs as) (toText a))]
instance XmlAttributes Text'initial_creator_Attrs where
    fromAttrs as =
	Text'initial_creator_Attrs
	  { text'initial_creatorText'fixed = defaultA fromAttrToStr "false" "text:fixed" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'initial_creatorText'fixed v)
	]
instance XmlContent Text'creation_date where
    fromElem (CElem (Elem "text:creation-date" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'creation_date (fromAttrs as) a), rest))
	(definite fromText "text" "text:creation-date" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'creation_date as a) =
	[CElem (Elem "text:creation-date" (toAttrs as) (toText a))]
instance XmlAttributes Text'creation_date_Attrs where
    fromAttrs as =
	Text'creation_date_Attrs
	  { text'creation_dateText'fixed = defaultA fromAttrToStr "false" "text:fixed" as
	  , text'creation_dateText'date_value = possibleA fromAttrToStr "text:date-value" as
	  , text'creation_dateStyle'data_style_name = possibleA fromAttrToStr "style:data-style-name" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'creation_dateText'fixed v)
	, maybeToAttr toAttrFrStr "text:date-value" (text'creation_dateText'date_value v)
	, maybeToAttr toAttrFrStr "style:data-style-name" (text'creation_dateStyle'data_style_name v)
	]
instance XmlContent Text'creation_time where
    fromElem (CElem (Elem "text:creation-time" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'creation_time (fromAttrs as) a), rest))
	(definite fromText "text" "text:creation-time" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'creation_time as a) =
	[CElem (Elem "text:creation-time" (toAttrs as) (toText a))]
instance XmlAttributes Text'creation_time_Attrs where
    fromAttrs as =
	Text'creation_time_Attrs
	  { text'creation_timeText'fixed = defaultA fromAttrToStr "false" "text:fixed" as
	  , text'creation_timeText'time_value = possibleA fromAttrToStr "text:time-value" as
	  , text'creation_timeStyle'data_style_name = possibleA fromAttrToStr "style:data-style-name" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'creation_timeText'fixed v)
	, maybeToAttr toAttrFrStr "text:time-value" (text'creation_timeText'time_value v)
	, maybeToAttr toAttrFrStr "style:data-style-name" (text'creation_timeStyle'data_style_name v)
	]
instance XmlContent Text'description where
    fromElem (CElem (Elem "text:description" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'description (fromAttrs as) a), rest))
	(definite fromText "text" "text:description" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'description as a) =
	[CElem (Elem "text:description" (toAttrs as) (toText a))]
instance XmlAttributes Text'description_Attrs where
    fromAttrs as =
	Text'description_Attrs
	  { text'descriptionText'fixed = defaultA fromAttrToStr "false" "text:fixed" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'descriptionText'fixed v)
	]
instance XmlContent Text'user_defined where
    fromElem (CElem (Elem "text:user-defined" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'user_defined (fromAttrs as) a), rest))
	(definite fromText "text" "text:user-defined" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'user_defined as a) =
	[CElem (Elem "text:user-defined" (toAttrs as) (toText a))]
instance XmlAttributes Text'user_defined_Attrs where
    fromAttrs as =
	Text'user_defined_Attrs
	  { text'user_definedText'fixed = defaultA fromAttrToStr "false" "text:fixed" as
	  , text'user_definedText'name = definiteA fromAttrToStr "text:user-defined" "text:name" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'user_definedText'fixed v)
	, toAttrFrStr "text:name" (text'user_definedText'name v)
	]
instance XmlContent Text'print_time where
    fromElem (CElem (Elem "text:print-time" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'print_time (fromAttrs as) a), rest))
	(definite fromText "text" "text:print-time" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'print_time as a) =
	[CElem (Elem "text:print-time" (toAttrs as) (toText a))]
instance XmlAttributes Text'print_time_Attrs where
    fromAttrs as =
	Text'print_time_Attrs
	  { text'print_timeText'fixed = defaultA fromAttrToStr "false" "text:fixed" as
	  , text'print_timeText'time_value = possibleA fromAttrToStr "text:time-value" as
	  , text'print_timeStyle'data_style_name = possibleA fromAttrToStr "style:data-style-name" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'print_timeText'fixed v)
	, maybeToAttr toAttrFrStr "text:time-value" (text'print_timeText'time_value v)
	, maybeToAttr toAttrFrStr "style:data-style-name" (text'print_timeStyle'data_style_name v)
	]
instance XmlContent Text'print_date where
    fromElem (CElem (Elem "text:print-date" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'print_date (fromAttrs as) a), rest))
	(definite fromText "text" "text:print-date" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'print_date as a) =
	[CElem (Elem "text:print-date" (toAttrs as) (toText a))]
instance XmlAttributes Text'print_date_Attrs where
    fromAttrs as =
	Text'print_date_Attrs
	  { text'print_dateText'fixed = defaultA fromAttrToStr "false" "text:fixed" as
	  , text'print_dateText'date_value = possibleA fromAttrToStr "text:date-value" as
	  , text'print_dateStyle'data_style_name = possibleA fromAttrToStr "style:data-style-name" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'print_dateText'fixed v)
	, maybeToAttr toAttrFrStr "text:date-value" (text'print_dateText'date_value v)
	, maybeToAttr toAttrFrStr "style:data-style-name" (text'print_dateStyle'data_style_name v)
	]
instance XmlContent Text'printed_by where
    fromElem (CElem (Elem "text:printed-by" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'printed_by (fromAttrs as) a), rest))
	(definite fromText "text" "text:printed-by" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'printed_by as a) =
	[CElem (Elem "text:printed-by" (toAttrs as) (toText a))]
instance XmlAttributes Text'printed_by_Attrs where
    fromAttrs as =
	Text'printed_by_Attrs
	  { text'printed_byText'fixed = defaultA fromAttrToStr "false" "text:fixed" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'printed_byText'fixed v)
	]
instance XmlContent Text'title where
    fromElem (CElem (Elem "text:title" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'title (fromAttrs as) a), rest))
	(definite fromText "text" "text:title" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'title as a) =
	[CElem (Elem "text:title" (toAttrs as) (toText a))]
instance XmlAttributes Text'title_Attrs where
    fromAttrs as =
	Text'title_Attrs
	  { text'titleText'fixed = defaultA fromAttrToStr "false" "text:fixed" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'titleText'fixed v)
	]
instance XmlContent Text'subject where
    fromElem (CElem (Elem "text:subject" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'subject (fromAttrs as) a), rest))
	(definite fromText "text" "text:subject" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'subject as a) =
	[CElem (Elem "text:subject" (toAttrs as) (toText a))]
instance XmlAttributes Text'subject_Attrs where
    fromAttrs as =
	Text'subject_Attrs
	  { text'subjectText'fixed = defaultA fromAttrToStr "false" "text:fixed" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'subjectText'fixed v)
	]
instance XmlContent Text'keywords where
    fromElem (CElem (Elem "text:keywords" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'keywords (fromAttrs as) a), rest))
	(definite fromText "text" "text:keywords" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'keywords as a) =
	[CElem (Elem "text:keywords" (toAttrs as) (toText a))]
instance XmlAttributes Text'keywords_Attrs where
    fromAttrs as =
	Text'keywords_Attrs
	  { text'keywordsText'fixed = defaultA fromAttrToStr "false" "text:fixed" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'keywordsText'fixed v)
	]
instance XmlContent Text'editing_cycles where
    fromElem (CElem (Elem "text:editing-cycles" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'editing_cycles (fromAttrs as) a), rest))
	(definite fromText "text" "text:editing-cycles" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'editing_cycles as a) =
	[CElem (Elem "text:editing-cycles" (toAttrs as) (toText a))]
instance XmlAttributes Text'editing_cycles_Attrs where
    fromAttrs as =
	Text'editing_cycles_Attrs
	  { text'editing_cyclesText'fixed = defaultA fromAttrToStr "false" "text:fixed" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'editing_cyclesText'fixed v)
	]
instance XmlContent Text'editing_duration where
    fromElem (CElem (Elem "text:editing-duration" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'editing_duration (fromAttrs as) a), rest))
	(definite fromText "text" "text:editing-duration" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'editing_duration as a) =
	[CElem (Elem "text:editing-duration" (toAttrs as) (toText a))]
instance XmlAttributes Text'editing_duration_Attrs where
    fromAttrs as =
	Text'editing_duration_Attrs
	  { text'editing_durationText'fixed = defaultA fromAttrToStr "false" "text:fixed" as
	  , text'editing_durationText'duration = possibleA fromAttrToStr "text:duration" as
	  , text'editing_durationStyle'data_style_name = possibleA fromAttrToStr "style:data-style-name" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'editing_durationText'fixed v)
	, maybeToAttr toAttrFrStr "text:duration" (text'editing_durationText'duration v)
	, maybeToAttr toAttrFrStr "style:data-style-name" (text'editing_durationStyle'data_style_name v)
	]
instance XmlContent Text'modification_time where
    fromElem (CElem (Elem "text:modification-time" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'modification_time (fromAttrs as) a), rest))
	(definite fromText "text" "text:modification-time" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'modification_time as a) =
	[CElem (Elem "text:modification-time" (toAttrs as) (toText a))]
instance XmlAttributes Text'modification_time_Attrs where
    fromAttrs as =
	Text'modification_time_Attrs
	  { text'modification_timeText'fixed = defaultA fromAttrToStr "false" "text:fixed" as
	  , text'modification_timeText'time_value = possibleA fromAttrToStr "text:time-value" as
	  , text'modification_timeStyle'data_style_name = possibleA fromAttrToStr "style:data-style-name" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'modification_timeText'fixed v)
	, maybeToAttr toAttrFrStr "text:time-value" (text'modification_timeText'time_value v)
	, maybeToAttr toAttrFrStr "style:data-style-name" (text'modification_timeStyle'data_style_name v)
	]
instance XmlContent Text'modification_date where
    fromElem (CElem (Elem "text:modification-date" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'modification_date (fromAttrs as) a), rest))
	(definite fromText "text" "text:modification-date" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'modification_date as a) =
	[CElem (Elem "text:modification-date" (toAttrs as) (toText a))]
instance XmlAttributes Text'modification_date_Attrs where
    fromAttrs as =
	Text'modification_date_Attrs
	  { text'modification_dateText'fixed = defaultA fromAttrToStr "false" "text:fixed" as
	  , text'modification_dateText'date_value = possibleA fromAttrToStr "text:date-value" as
	  , text'modification_dateStyle'data_style_name = possibleA fromAttrToStr "style:data-style-name" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'modification_dateText'fixed v)
	, maybeToAttr toAttrFrStr "text:date-value" (text'modification_dateText'date_value v)
	, maybeToAttr toAttrFrStr "style:data-style-name" (text'modification_dateStyle'data_style_name v)
	]
instance XmlContent Text'creator where
    fromElem (CElem (Elem "text:creator" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'creator (fromAttrs as) a), rest))
	(definite fromText "text" "text:creator" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'creator as a) =
	[CElem (Elem "text:creator" (toAttrs as) (toText a))]
instance XmlAttributes Text'creator_Attrs where
    fromAttrs as =
	Text'creator_Attrs
	  { text'creatorText'fixed = defaultA fromAttrToStr "false" "text:fixed" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:fixed" (text'creatorText'fixed v)
	]
instance XmlContent Text'conditional_text where
    fromElem (CElem (Elem "text:conditional-text" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'conditional_text (fromAttrs as) a), rest))
	(definite fromText "text" "text:conditional-text" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'conditional_text as a) =
	[CElem (Elem "text:conditional-text" (toAttrs as) (toText a))]
instance XmlAttributes Text'conditional_text_Attrs where
    fromAttrs as =
	Text'conditional_text_Attrs
	  { text'conditional_textText'condition = definiteA fromAttrToStr "text:conditional-text" "text:condition" as
	  , text'conditional_textText'string_value_if_false = definiteA fromAttrToStr "text:conditional-text" "text:string-value-if-false" as
	  , text'conditional_textText'string_value_if_true = definiteA fromAttrToStr "text:conditional-text" "text:string-value-if-true" as
	  , text'conditional_textText'current_value = defaultA fromAttrToStr "false" "text:current-value" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:condition" (text'conditional_textText'condition v)
	, toAttrFrStr "text:string-value-if-false" (text'conditional_textText'string_value_if_false v)
	, toAttrFrStr "text:string-value-if-true" (text'conditional_textText'string_value_if_true v)
	, defaultToAttr toAttrFrStr "text:current-value" (text'conditional_textText'current_value v)
	]
instance XmlContent Text'hidden_text where
    fromElem (CElem (Elem "text:hidden-text" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'hidden_text (fromAttrs as) a), rest))
	(definite fromText "text" "text:hidden-text" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'hidden_text as a) =
	[CElem (Elem "text:hidden-text" (toAttrs as) (toText a))]
instance XmlAttributes Text'hidden_text_Attrs where
    fromAttrs as =
	Text'hidden_text_Attrs
	  { text'hidden_textText'condition = definiteA fromAttrToStr "text:hidden-text" "text:condition" as
	  , text'hidden_textText'string_value = definiteA fromAttrToStr "text:hidden-text" "text:string-value" as
	  , text'hidden_textText'is_hidden = defaultA fromAttrToStr "false" "text:is-hidden" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:condition" (text'hidden_textText'condition v)
	, toAttrFrStr "text:string-value" (text'hidden_textText'string_value v)
	, defaultToAttr toAttrFrStr "text:is-hidden" (text'hidden_textText'is_hidden v)
	]
instance XmlContent Text'hidden_paragraph where
    fromElem (CElem (Elem "text:hidden-paragraph" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:hidden-paragraph" (toAttrs as) [])]
instance XmlAttributes Text'hidden_paragraph where
    fromAttrs as =
	Text'hidden_paragraph
	  { text'hidden_paragraphText'condition = definiteA fromAttrToStr "text:hidden-paragraph" "text:condition" as
	  , text'hidden_paragraphText'is_hidden = defaultA fromAttrToStr "false" "text:is-hidden" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:condition" (text'hidden_paragraphText'condition v)
	, defaultToAttr toAttrFrStr "text:is-hidden" (text'hidden_paragraphText'is_hidden v)
	]
instance XmlContent Text'chapter where
    fromElem (CElem (Elem "text:chapter" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'chapter (fromAttrs as) a), rest))
	(definite fromText "text" "text:chapter" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'chapter as a) =
	[CElem (Elem "text:chapter" (toAttrs as) (toText a))]
instance XmlAttributes Text'chapter_Attrs where
    fromAttrs as =
	Text'chapter_Attrs
	  { text'chapterText'display = defaultA fromAttrToTyp Text'chapter_text'display_number_and_name "text:display" as
	  , text'chapterText'outline_level = defaultA fromAttrToStr "1" "text:outline-level" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrTyp "text:display" (text'chapterText'display v)
	, defaultToAttr toAttrFrStr "text:outline-level" (text'chapterText'outline_level v)
	]
instance XmlAttrType Text'chapter_text'display where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "name" = Just Text'chapter_text'display_name
	    translate "number" = Just Text'chapter_text'display_number
	    translate "number-and-name" = Just Text'chapter_text'display_number_and_name
	    translate "plain-number-and-name" = Just Text'chapter_text'display_plain_number_and_name
	    translate "plain-number" = Just Text'chapter_text'display_plain_number
	    translate _ = Nothing
    toAttrFrTyp n Text'chapter_text'display_name = Just (n, str2attr "name")
    toAttrFrTyp n Text'chapter_text'display_number = Just (n, str2attr "number")
    toAttrFrTyp n Text'chapter_text'display_number_and_name = Just (n, str2attr "number-and-name")
    toAttrFrTyp n Text'chapter_text'display_plain_number_and_name = Just (n, str2attr "plain-number-and-name")
    toAttrFrTyp n Text'chapter_text'display_plain_number = Just (n, str2attr "plain-number")
instance XmlContent Text'file_name where
    fromElem (CElem (Elem "text:file-name" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'file_name (fromAttrs as) a), rest))
	(definite fromText "text" "text:file-name" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'file_name as a) =
	[CElem (Elem "text:file-name" (toAttrs as) (toText a))]
instance XmlAttributes Text'file_name_Attrs where
    fromAttrs as =
	Text'file_name_Attrs
	  { text'file_nameText'display = defaultA fromAttrToTyp Text'file_name_text'display_full "text:display" as
	  , text'file_nameText'fixed = defaultA fromAttrToStr "false" "text:fixed" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrTyp "text:display" (text'file_nameText'display v)
	, defaultToAttr toAttrFrStr "text:fixed" (text'file_nameText'fixed v)
	]
instance XmlAttrType Text'file_name_text'display where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "full" = Just Text'file_name_text'display_full
	    translate "path" = Just Text'file_name_text'display_path
	    translate "name" = Just Text'file_name_text'display_name
	    translate "name-and-extension" = Just Text'file_name_text'display_name_and_extension
	    translate _ = Nothing
    toAttrFrTyp n Text'file_name_text'display_full = Just (n, str2attr "full")
    toAttrFrTyp n Text'file_name_text'display_path = Just (n, str2attr "path")
    toAttrFrTyp n Text'file_name_text'display_name = Just (n, str2attr "name")
    toAttrFrTyp n Text'file_name_text'display_name_and_extension = Just (n, str2attr "name-and-extension")
instance XmlContent Text'template_name where
    fromElem (CElem (Elem "text:template-name" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'template_name (fromAttrs as) a), rest))
	(definite fromText "text" "text:template-name" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'template_name as a) =
	[CElem (Elem "text:template-name" (toAttrs as) (toText a))]
instance XmlAttributes Text'template_name_Attrs where
    fromAttrs as =
	Text'template_name_Attrs
	  { text'template_nameText'display = defaultA fromAttrToTyp Text'template_name_text'display_full "text:display" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrTyp "text:display" (text'template_nameText'display v)
	]
instance XmlAttrType Text'template_name_text'display where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "full" = Just Text'template_name_text'display_full
	    translate "path" = Just Text'template_name_text'display_path
	    translate "name" = Just Text'template_name_text'display_name
	    translate "name-and-extension" = Just Text'template_name_text'display_name_and_extension
	    translate "area" = Just Text'template_name_text'display_area
	    translate "title" = Just Text'template_name_text'display_title
	    translate _ = Nothing
    toAttrFrTyp n Text'template_name_text'display_full = Just (n, str2attr "full")
    toAttrFrTyp n Text'template_name_text'display_path = Just (n, str2attr "path")
    toAttrFrTyp n Text'template_name_text'display_name = Just (n, str2attr "name")
    toAttrFrTyp n Text'template_name_text'display_name_and_extension = Just (n, str2attr "name-and-extension")
    toAttrFrTyp n Text'template_name_text'display_area = Just (n, str2attr "area")
    toAttrFrTyp n Text'template_name_text'display_title = Just (n, str2attr "title")
instance XmlContent Text'page_variable_set where
    fromElem (CElem (Elem "text:page-variable-set" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:page-variable-set" (toAttrs as) [])]
instance XmlAttributes Text'page_variable_set where
    fromAttrs as =
	Text'page_variable_set
	  { text'page_variable_setText'active = defaultA fromAttrToStr "true" "text:active" as
	  , text'page_variable_setText'page_adjust = defaultA fromAttrToStr "0" "text:page-adjust" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:active" (text'page_variable_setText'active v)
	, defaultToAttr toAttrFrStr "text:page-adjust" (text'page_variable_setText'page_adjust v)
	]
instance XmlContent Text'page_variable_get where
    fromElem (CElem (Elem "text:page-variable-get" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'page_variable_get (fromAttrs as) a), rest))
	(definite fromText "text" "text:page-variable-get" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'page_variable_get as a) =
	[CElem (Elem "text:page-variable-get" (toAttrs as) (toText a))]
instance XmlAttributes Text'page_variable_get_Attrs where
    fromAttrs as =
	Text'page_variable_get_Attrs
	  { text'page_variable_getStyle'num_format = possibleA fromAttrToStr "style:num-format" as
	  , text'page_variable_getStyle'num_letter_sync = defaultA fromAttrToStr "false" "style:num-letter-sync" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "style:num-format" (text'page_variable_getStyle'num_format v)
	, defaultToAttr toAttrFrStr "style:num-letter-sync" (text'page_variable_getStyle'num_letter_sync v)
	]
instance XmlContent Text'execute_macro where
    fromElem (CElem (Elem "text:execute-macro" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'execute_macro (fromAttrs as) a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'execute_macro as a) =
	[CElem (Elem "text:execute-macro" (toAttrs as) (concatMap toElem a))]
instance XmlAttributes Text'execute_macro_Attrs where
    fromAttrs as =
	Text'execute_macro_Attrs
	  { text'execute_macroText'description = possibleA fromAttrToStr "text:description" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "text:description" (text'execute_macroText'description v)
	]
instance XmlContent Text'execute_macro_ where
    fromElem c0 =
	case (fromText c0) of
	(Just a,rest) -> (Just (Text'execute_macro_Str a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Text'execute_macro_Office'events a), rest)
		(_,_) ->
		    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'execute_macro_Str a) = toText a
    toElem (Text'execute_macro_Office'events a) = toElem a
instance XmlContent Text'dde_connection_decls where
    fromElem (CElem (Elem "text:dde-connection-decls" [] c0):rest) =
	(\(a,ca)->
	   (Just (Text'dde_connection_decls a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'dde_connection_decls a) =
	[CElem (Elem "text:dde-connection-decls" [] (concatMap toElem a))]
instance XmlContent Text'dde_connection_decl where
    fromElem (CElem (Elem "text:dde-connection-decl" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:dde-connection-decl" (toAttrs as) [])]
instance XmlAttributes Text'dde_connection_decl where
    fromAttrs as =
	Text'dde_connection_decl
	  { text'dde_connection_declText'name = definiteA fromAttrToStr "text:dde-connection-decl" "text:name" as
	  , text'dde_connection_declOffice'dde_application = definiteA fromAttrToStr "text:dde-connection-decl" "office:dde-application" as
	  , text'dde_connection_declOffice'dde_topic = definiteA fromAttrToStr "text:dde-connection-decl" "office:dde-topic" as
	  , text'dde_connection_declOffice'dde_item = definiteA fromAttrToStr "text:dde-connection-decl" "office:dde-item" as
	  , text'dde_connection_declOffice'automatic_update = defaultA fromAttrToStr "false" "office:automatic-update" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:name" (text'dde_connection_declText'name v)
	, toAttrFrStr "office:dde-application" (text'dde_connection_declOffice'dde_application v)
	, toAttrFrStr "office:dde-topic" (text'dde_connection_declOffice'dde_topic v)
	, toAttrFrStr "office:dde-item" (text'dde_connection_declOffice'dde_item v)
	, defaultToAttr toAttrFrStr "office:automatic-update" (text'dde_connection_declOffice'automatic_update v)
	]
instance XmlContent Text'dde_connection where
    fromElem (CElem (Elem "text:dde-connection" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'dde_connection (fromAttrs as) a), rest))
	(definite fromText "text" "text:dde-connection" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'dde_connection as a) =
	[CElem (Elem "text:dde-connection" (toAttrs as) (toText a))]
instance XmlAttributes Text'dde_connection_Attrs where
    fromAttrs as =
	Text'dde_connection_Attrs
	  { text'dde_connectionText'connection_name = definiteA fromAttrToStr "text:dde-connection" "text:connection-name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:connection-name" (text'dde_connectionText'connection_name v)
	]
instance XmlContent Text'reference_ref where
    fromElem (CElem (Elem "text:reference-ref" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'reference_ref (fromAttrs as) a), rest))
	(definite fromText "text" "text:reference-ref" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'reference_ref as a) =
	[CElem (Elem "text:reference-ref" (toAttrs as) (toText a))]
instance XmlAttributes Text'reference_ref_Attrs where
    fromAttrs as =
	Text'reference_ref_Attrs
	  { text'reference_refText'ref_name = definiteA fromAttrToStr "text:reference-ref" "text:ref-name" as
	  , text'reference_refText'reference_format = possibleA fromAttrToTyp "text:reference-format" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:ref-name" (text'reference_refText'ref_name v)
	, maybeToAttr toAttrFrTyp "text:reference-format" (text'reference_refText'reference_format v)
	]
instance XmlAttrType Text'reference_ref_text'reference_format where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "page" = Just Text'reference_ref_text'reference_format_page
	    translate "chapter" = Just Text'reference_ref_text'reference_format_chapter
	    translate "text" = Just Text'reference_ref_text'reference_format_text
	    translate "direction" = Just Text'reference_ref_text'reference_format_direction
	    translate _ = Nothing
    toAttrFrTyp n Text'reference_ref_text'reference_format_page = Just (n, str2attr "page")
    toAttrFrTyp n Text'reference_ref_text'reference_format_chapter = Just (n, str2attr "chapter")
    toAttrFrTyp n Text'reference_ref_text'reference_format_text = Just (n, str2attr "text")
    toAttrFrTyp n Text'reference_ref_text'reference_format_direction = Just (n, str2attr "direction")
instance XmlContent Text'sequence_ref where
    fromElem (CElem (Elem "text:sequence-ref" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'sequence_ref (fromAttrs as) a), rest))
	(definite fromText "text" "text:sequence-ref" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'sequence_ref as a) =
	[CElem (Elem "text:sequence-ref" (toAttrs as) (toText a))]
instance XmlAttributes Text'sequence_ref_Attrs where
    fromAttrs as =
	Text'sequence_ref_Attrs
	  { text'sequence_refText'ref_name = definiteA fromAttrToStr "text:sequence-ref" "text:ref-name" as
	  , text'sequence_refText'reference_format = possibleA fromAttrToTyp "text:reference-format" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:ref-name" (text'sequence_refText'ref_name v)
	, maybeToAttr toAttrFrTyp "text:reference-format" (text'sequence_refText'reference_format v)
	]
instance XmlAttrType Text'sequence_ref_text'reference_format where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "page" = Just Text'sequence_ref_text'reference_format_page
	    translate "chapter" = Just Text'sequence_ref_text'reference_format_chapter
	    translate "text" = Just Text'sequence_ref_text'reference_format_text
	    translate "direction" = Just Text'sequence_ref_text'reference_format_direction
	    translate "category-and-value" = Just Text'sequence_ref_text'reference_format_category_and_value
	    translate "caption" = Just Text'sequence_ref_text'reference_format_caption
	    translate "value" = Just Text'sequence_ref_text'reference_format_value
	    translate _ = Nothing
    toAttrFrTyp n Text'sequence_ref_text'reference_format_page = Just (n, str2attr "page")
    toAttrFrTyp n Text'sequence_ref_text'reference_format_chapter = Just (n, str2attr "chapter")
    toAttrFrTyp n Text'sequence_ref_text'reference_format_text = Just (n, str2attr "text")
    toAttrFrTyp n Text'sequence_ref_text'reference_format_direction = Just (n, str2attr "direction")
    toAttrFrTyp n Text'sequence_ref_text'reference_format_category_and_value = Just (n, str2attr "category-and-value")
    toAttrFrTyp n Text'sequence_ref_text'reference_format_caption = Just (n, str2attr "caption")
    toAttrFrTyp n Text'sequence_ref_text'reference_format_value = Just (n, str2attr "value")
instance XmlContent Text'bookmark_ref where
    fromElem (CElem (Elem "text:bookmark-ref" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'bookmark_ref (fromAttrs as) a), rest))
	(definite fromText "text" "text:bookmark-ref" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'bookmark_ref as a) =
	[CElem (Elem "text:bookmark-ref" (toAttrs as) (toText a))]
instance XmlAttributes Text'bookmark_ref_Attrs where
    fromAttrs as =
	Text'bookmark_ref_Attrs
	  { text'bookmark_refText'ref_name = definiteA fromAttrToStr "text:bookmark-ref" "text:ref-name" as
	  , text'bookmark_refText'reference_format = possibleA fromAttrToTyp "text:reference-format" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:ref-name" (text'bookmark_refText'ref_name v)
	, maybeToAttr toAttrFrTyp "text:reference-format" (text'bookmark_refText'reference_format v)
	]
instance XmlAttrType Text'bookmark_ref_text'reference_format where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "page" = Just Text'bookmark_ref_text'reference_format_page
	    translate "chapter" = Just Text'bookmark_ref_text'reference_format_chapter
	    translate "text" = Just Text'bookmark_ref_text'reference_format_text
	    translate "direction" = Just Text'bookmark_ref_text'reference_format_direction
	    translate _ = Nothing
    toAttrFrTyp n Text'bookmark_ref_text'reference_format_page = Just (n, str2attr "page")
    toAttrFrTyp n Text'bookmark_ref_text'reference_format_chapter = Just (n, str2attr "chapter")
    toAttrFrTyp n Text'bookmark_ref_text'reference_format_text = Just (n, str2attr "text")
    toAttrFrTyp n Text'bookmark_ref_text'reference_format_direction = Just (n, str2attr "direction")
instance XmlContent Text'footnote_ref where
    fromElem (CElem (Elem "text:footnote-ref" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'footnote_ref (fromAttrs as) a), rest))
	(definite fromText "text" "text:footnote-ref" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'footnote_ref as a) =
	[CElem (Elem "text:footnote-ref" (toAttrs as) (toText a))]
instance XmlAttributes Text'footnote_ref_Attrs where
    fromAttrs as =
	Text'footnote_ref_Attrs
	  { text'footnote_refText'ref_name = definiteA fromAttrToStr "text:footnote-ref" "text:ref-name" as
	  , text'footnote_refText'reference_format = possibleA fromAttrToTyp "text:reference-format" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:ref-name" (text'footnote_refText'ref_name v)
	, maybeToAttr toAttrFrTyp "text:reference-format" (text'footnote_refText'reference_format v)
	]
instance XmlAttrType Text'footnote_ref_text'reference_format where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "page" = Just Text'footnote_ref_text'reference_format_page
	    translate "chapter" = Just Text'footnote_ref_text'reference_format_chapter
	    translate "text" = Just Text'footnote_ref_text'reference_format_text
	    translate "direction" = Just Text'footnote_ref_text'reference_format_direction
	    translate _ = Nothing
    toAttrFrTyp n Text'footnote_ref_text'reference_format_page = Just (n, str2attr "page")
    toAttrFrTyp n Text'footnote_ref_text'reference_format_chapter = Just (n, str2attr "chapter")
    toAttrFrTyp n Text'footnote_ref_text'reference_format_text = Just (n, str2attr "text")
    toAttrFrTyp n Text'footnote_ref_text'reference_format_direction = Just (n, str2attr "direction")
instance XmlContent Text'endnote_ref where
    fromElem (CElem (Elem "text:endnote-ref" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'endnote_ref (fromAttrs as) a), rest))
	(definite fromText "text" "text:endnote-ref" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'endnote_ref as a) =
	[CElem (Elem "text:endnote-ref" (toAttrs as) (toText a))]
instance XmlAttributes Text'endnote_ref_Attrs where
    fromAttrs as =
	Text'endnote_ref_Attrs
	  { text'endnote_refText'ref_name = definiteA fromAttrToStr "text:endnote-ref" "text:ref-name" as
	  , text'endnote_refText'reference_format = possibleA fromAttrToTyp "text:reference-format" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:ref-name" (text'endnote_refText'ref_name v)
	, maybeToAttr toAttrFrTyp "text:reference-format" (text'endnote_refText'reference_format v)
	]
instance XmlAttrType Text'endnote_ref_text'reference_format where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "page" = Just Text'endnote_ref_text'reference_format_page
	    translate "chapter" = Just Text'endnote_ref_text'reference_format_chapter
	    translate "text" = Just Text'endnote_ref_text'reference_format_text
	    translate "direction" = Just Text'endnote_ref_text'reference_format_direction
	    translate _ = Nothing
    toAttrFrTyp n Text'endnote_ref_text'reference_format_page = Just (n, str2attr "page")
    toAttrFrTyp n Text'endnote_ref_text'reference_format_chapter = Just (n, str2attr "chapter")
    toAttrFrTyp n Text'endnote_ref_text'reference_format_text = Just (n, str2attr "text")
    toAttrFrTyp n Text'endnote_ref_text'reference_format_direction = Just (n, str2attr "direction")
instance XmlContent Text'sheet_name where
    fromElem (CElem (Elem "text:sheet-name" [] c0):rest) =
	(\(a,ca)->
	   (Just (Text'sheet_name a), rest))
	(definite fromText "text" "text:sheet-name" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'sheet_name a) =
	[CElem (Elem "text:sheet-name" [] (toText a))]
instance XmlContent Text'page_count where
    fromElem (CElem (Elem "text:page-count" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'page_count (fromAttrs as) a), rest))
	(definite fromText "text" "text:page-count" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'page_count as a) =
	[CElem (Elem "text:page-count" (toAttrs as) (toText a))]
instance XmlAttributes Text'page_count_Attrs where
    fromAttrs as =
	Text'page_count_Attrs
	  { text'page_countStyle'num_format = possibleA fromAttrToStr "style:num-format" as
	  , text'page_countStyle'num_letter_sync = defaultA fromAttrToStr "false" "style:num-letter-sync" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "style:num-format" (text'page_countStyle'num_format v)
	, defaultToAttr toAttrFrStr "style:num-letter-sync" (text'page_countStyle'num_letter_sync v)
	]
instance XmlContent Text'paragraph_count where
    fromElem (CElem (Elem "text:paragraph-count" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'paragraph_count (fromAttrs as) a), rest))
	(definite fromText "text" "text:paragraph-count" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'paragraph_count as a) =
	[CElem (Elem "text:paragraph-count" (toAttrs as) (toText a))]
instance XmlAttributes Text'paragraph_count_Attrs where
    fromAttrs as =
	Text'paragraph_count_Attrs
	  { text'paragraph_countStyle'num_format = possibleA fromAttrToStr "style:num-format" as
	  , text'paragraph_countStyle'num_letter_sync = defaultA fromAttrToStr "false" "style:num-letter-sync" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "style:num-format" (text'paragraph_countStyle'num_format v)
	, defaultToAttr toAttrFrStr "style:num-letter-sync" (text'paragraph_countStyle'num_letter_sync v)
	]
instance XmlContent Text'word_count where
    fromElem (CElem (Elem "text:word-count" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'word_count (fromAttrs as) a), rest))
	(definite fromText "text" "text:word-count" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'word_count as a) =
	[CElem (Elem "text:word-count" (toAttrs as) (toText a))]
instance XmlAttributes Text'word_count_Attrs where
    fromAttrs as =
	Text'word_count_Attrs
	  { text'word_countStyle'num_format = possibleA fromAttrToStr "style:num-format" as
	  , text'word_countStyle'num_letter_sync = defaultA fromAttrToStr "false" "style:num-letter-sync" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "style:num-format" (text'word_countStyle'num_format v)
	, defaultToAttr toAttrFrStr "style:num-letter-sync" (text'word_countStyle'num_letter_sync v)
	]
instance XmlContent Text'character_count where
    fromElem (CElem (Elem "text:character-count" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'character_count (fromAttrs as) a), rest))
	(definite fromText "text" "text:character-count" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'character_count as a) =
	[CElem (Elem "text:character-count" (toAttrs as) (toText a))]
instance XmlAttributes Text'character_count_Attrs where
    fromAttrs as =
	Text'character_count_Attrs
	  { text'character_countStyle'num_format = possibleA fromAttrToStr "style:num-format" as
	  , text'character_countStyle'num_letter_sync = defaultA fromAttrToStr "false" "style:num-letter-sync" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "style:num-format" (text'character_countStyle'num_format v)
	, defaultToAttr toAttrFrStr "style:num-letter-sync" (text'character_countStyle'num_letter_sync v)
	]
instance XmlContent Text'table_count where
    fromElem (CElem (Elem "text:table-count" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'table_count (fromAttrs as) a), rest))
	(definite fromText "text" "text:table-count" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'table_count as a) =
	[CElem (Elem "text:table-count" (toAttrs as) (toText a))]
instance XmlAttributes Text'table_count_Attrs where
    fromAttrs as =
	Text'table_count_Attrs
	  { text'table_countStyle'num_format = possibleA fromAttrToStr "style:num-format" as
	  , text'table_countStyle'num_letter_sync = defaultA fromAttrToStr "false" "style:num-letter-sync" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "style:num-format" (text'table_countStyle'num_format v)
	, defaultToAttr toAttrFrStr "style:num-letter-sync" (text'table_countStyle'num_letter_sync v)
	]
instance XmlContent Text'image_count where
    fromElem (CElem (Elem "text:image-count" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'image_count (fromAttrs as) a), rest))
	(definite fromText "text" "text:image-count" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'image_count as a) =
	[CElem (Elem "text:image-count" (toAttrs as) (toText a))]
instance XmlAttributes Text'image_count_Attrs where
    fromAttrs as =
	Text'image_count_Attrs
	  { text'image_countStyle'num_format = possibleA fromAttrToStr "style:num-format" as
	  , text'image_countStyle'num_letter_sync = defaultA fromAttrToStr "false" "style:num-letter-sync" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "style:num-format" (text'image_countStyle'num_format v)
	, defaultToAttr toAttrFrStr "style:num-letter-sync" (text'image_countStyle'num_letter_sync v)
	]
instance XmlContent Text'object_count where
    fromElem (CElem (Elem "text:object-count" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'object_count (fromAttrs as) a), rest))
	(definite fromText "text" "text:object-count" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'object_count as a) =
	[CElem (Elem "text:object-count" (toAttrs as) (toText a))]
instance XmlAttributes Text'object_count_Attrs where
    fromAttrs as =
	Text'object_count_Attrs
	  { text'object_countStyle'num_format = possibleA fromAttrToStr "style:num-format" as
	  , text'object_countStyle'num_letter_sync = defaultA fromAttrToStr "false" "style:num-letter-sync" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "style:num-format" (text'object_countStyle'num_format v)
	, defaultToAttr toAttrFrStr "style:num-letter-sync" (text'object_countStyle'num_letter_sync v)
	]
instance XmlContent Text'bibliography_mark where
    fromElem (CElem (Elem "text:bibliography-mark" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'bibliography_mark (fromAttrs as) a), rest))
	(definite fromText "text" "text:bibliography-mark" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'bibliography_mark as a) =
	[CElem (Elem "text:bibliography-mark" (toAttrs as) (toText a))]
instance XmlAttributes Text'bibliography_mark_Attrs where
    fromAttrs as =
	Text'bibliography_mark_Attrs
	  { text'bibliography_markText'bibliography_type = definiteA fromAttrToTyp "text:bibliography-mark" "text:bibliography-type" as
	  , text'bibliography_markText'identifier = possibleA fromAttrToStr "text:identifier" as
	  , text'bibliography_markText'address = possibleA fromAttrToStr "text:address" as
	  , text'bibliography_markText'annote = possibleA fromAttrToStr "text:annote" as
	  , text'bibliography_markText'author = possibleA fromAttrToStr "text:author" as
	  , text'bibliography_markText'booktitle = possibleA fromAttrToStr "text:booktitle" as
	  , text'bibliography_markText'chapter = possibleA fromAttrToStr "text:chapter" as
	  , text'bibliography_markText'edition = possibleA fromAttrToStr "text:edition" as
	  , text'bibliography_markText'editor = possibleA fromAttrToStr "text:editor" as
	  , text'bibliography_markText'howpublished = possibleA fromAttrToStr "text:howpublished" as
	  , text'bibliography_markText'institution = possibleA fromAttrToStr "text:institution" as
	  , text'bibliography_markText'journal = possibleA fromAttrToStr "text:journal" as
	  , text'bibliography_markText'month = possibleA fromAttrToStr "text:month" as
	  , text'bibliography_markText'note = possibleA fromAttrToStr "text:note" as
	  , text'bibliography_markText'number = possibleA fromAttrToStr "text:number" as
	  , text'bibliography_markText'organizations = possibleA fromAttrToStr "text:organizations" as
	  , text'bibliography_markText'pages = possibleA fromAttrToStr "text:pages" as
	  , text'bibliography_markText'publisher = possibleA fromAttrToStr "text:publisher" as
	  , text'bibliography_markText'school = possibleA fromAttrToStr "text:school" as
	  , text'bibliography_markText'series = possibleA fromAttrToStr "text:series" as
	  , text'bibliography_markText'title = possibleA fromAttrToStr "text:title" as
	  , text'bibliography_markText'report_type = possibleA fromAttrToStr "text:report-type" as
	  , text'bibliography_markText'volume = possibleA fromAttrToStr "text:volume" as
	  , text'bibliography_markText'year = possibleA fromAttrToStr "text:year" as
	  , text'bibliography_markText'url = possibleA fromAttrToStr "text:url" as
	  , text'bibliography_markText'custom1 = possibleA fromAttrToStr "text:custom1" as
	  , text'bibliography_markText'custom2 = possibleA fromAttrToStr "text:custom2" as
	  , text'bibliography_markText'custom3 = possibleA fromAttrToStr "text:custom3" as
	  , text'bibliography_markText'custom4 = possibleA fromAttrToStr "text:custom4" as
	  , text'bibliography_markText'custom5 = possibleA fromAttrToStr "text:custom5" as
	  , text'bibliography_markText'isbn = possibleA fromAttrToStr "text:isbn" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrTyp "text:bibliography-type" (text'bibliography_markText'bibliography_type v)
	, maybeToAttr toAttrFrStr "text:identifier" (text'bibliography_markText'identifier v)
	, maybeToAttr toAttrFrStr "text:address" (text'bibliography_markText'address v)
	, maybeToAttr toAttrFrStr "text:annote" (text'bibliography_markText'annote v)
	, maybeToAttr toAttrFrStr "text:author" (text'bibliography_markText'author v)
	, maybeToAttr toAttrFrStr "text:booktitle" (text'bibliography_markText'booktitle v)
	, maybeToAttr toAttrFrStr "text:chapter" (text'bibliography_markText'chapter v)
	, maybeToAttr toAttrFrStr "text:edition" (text'bibliography_markText'edition v)
	, maybeToAttr toAttrFrStr "text:editor" (text'bibliography_markText'editor v)
	, maybeToAttr toAttrFrStr "text:howpublished" (text'bibliography_markText'howpublished v)
	, maybeToAttr toAttrFrStr "text:institution" (text'bibliography_markText'institution v)
	, maybeToAttr toAttrFrStr "text:journal" (text'bibliography_markText'journal v)
	, maybeToAttr toAttrFrStr "text:month" (text'bibliography_markText'month v)
	, maybeToAttr toAttrFrStr "text:note" (text'bibliography_markText'note v)
	, maybeToAttr toAttrFrStr "text:number" (text'bibliography_markText'number v)
	, maybeToAttr toAttrFrStr "text:organizations" (text'bibliography_markText'organizations v)
	, maybeToAttr toAttrFrStr "text:pages" (text'bibliography_markText'pages v)
	, maybeToAttr toAttrFrStr "text:publisher" (text'bibliography_markText'publisher v)
	, maybeToAttr toAttrFrStr "text:school" (text'bibliography_markText'school v)
	, maybeToAttr toAttrFrStr "text:series" (text'bibliography_markText'series v)
	, maybeToAttr toAttrFrStr "text:title" (text'bibliography_markText'title v)
	, maybeToAttr toAttrFrStr "text:report-type" (text'bibliography_markText'report_type v)
	, maybeToAttr toAttrFrStr "text:volume" (text'bibliography_markText'volume v)
	, maybeToAttr toAttrFrStr "text:year" (text'bibliography_markText'year v)
	, maybeToAttr toAttrFrStr "text:url" (text'bibliography_markText'url v)
	, maybeToAttr toAttrFrStr "text:custom1" (text'bibliography_markText'custom1 v)
	, maybeToAttr toAttrFrStr "text:custom2" (text'bibliography_markText'custom2 v)
	, maybeToAttr toAttrFrStr "text:custom3" (text'bibliography_markText'custom3 v)
	, maybeToAttr toAttrFrStr "text:custom4" (text'bibliography_markText'custom4 v)
	, maybeToAttr toAttrFrStr "text:custom5" (text'bibliography_markText'custom5 v)
	, maybeToAttr toAttrFrStr "text:isbn" (text'bibliography_markText'isbn v)
	]
instance XmlAttrType Text'bibliography_mark_text'bibliography_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "article" = Just Text'bibliography_mark_text'bibliography_type_article
	    translate "book" = Just Text'bibliography_mark_text'bibliography_type_book
	    translate "booklet" = Just Text'bibliography_mark_text'bibliography_type_booklet
	    translate "conference" = Just Text'bibliography_mark_text'bibliography_type_conference
	    translate "custom1" = Just Text'bibliography_mark_text'bibliography_type_custom1
	    translate "custom2" = Just Text'bibliography_mark_text'bibliography_type_custom2
	    translate "custom3" = Just Text'bibliography_mark_text'bibliography_type_custom3
	    translate "custom4" = Just Text'bibliography_mark_text'bibliography_type_custom4
	    translate "custom5" = Just Text'bibliography_mark_text'bibliography_type_custom5
	    translate "email" = Just Text'bibliography_mark_text'bibliography_type_email
	    translate "inbook" = Just Text'bibliography_mark_text'bibliography_type_inbook
	    translate "incollection" = Just Text'bibliography_mark_text'bibliography_type_incollection
	    translate "inproceedings" = Just Text'bibliography_mark_text'bibliography_type_inproceedings
	    translate "journal" = Just Text'bibliography_mark_text'bibliography_type_journal
	    translate "manual" = Just Text'bibliography_mark_text'bibliography_type_manual
	    translate "mastersthesis" = Just Text'bibliography_mark_text'bibliography_type_mastersthesis
	    translate "misc" = Just Text'bibliography_mark_text'bibliography_type_misc
	    translate "phdthesis" = Just Text'bibliography_mark_text'bibliography_type_phdthesis
	    translate "proceedings" = Just Text'bibliography_mark_text'bibliography_type_proceedings
	    translate "techreport" = Just Text'bibliography_mark_text'bibliography_type_techreport
	    translate "unpublished" = Just Text'bibliography_mark_text'bibliography_type_unpublished
	    translate "www" = Just Text'bibliography_mark_text'bibliography_type_www
	    translate _ = Nothing
    toAttrFrTyp n Text'bibliography_mark_text'bibliography_type_article = Just (n, str2attr "article")
    toAttrFrTyp n Text'bibliography_mark_text'bibliography_type_book = Just (n, str2attr "book")
    toAttrFrTyp n Text'bibliography_mark_text'bibliography_type_booklet = Just (n, str2attr "booklet")
    toAttrFrTyp n Text'bibliography_mark_text'bibliography_type_conference = Just (n, str2attr "conference")
    toAttrFrTyp n Text'bibliography_mark_text'bibliography_type_custom1 = Just (n, str2attr "custom1")
    toAttrFrTyp n Text'bibliography_mark_text'bibliography_type_custom2 = Just (n, str2attr "custom2")
    toAttrFrTyp n Text'bibliography_mark_text'bibliography_type_custom3 = Just (n, str2attr "custom3")
    toAttrFrTyp n Text'bibliography_mark_text'bibliography_type_custom4 = Just (n, str2attr "custom4")
    toAttrFrTyp n Text'bibliography_mark_text'bibliography_type_custom5 = Just (n, str2attr "custom5")
    toAttrFrTyp n Text'bibliography_mark_text'bibliography_type_email = Just (n, str2attr "email")
    toAttrFrTyp n Text'bibliography_mark_text'bibliography_type_inbook = Just (n, str2attr "inbook")
    toAttrFrTyp n Text'bibliography_mark_text'bibliography_type_incollection = Just (n, str2attr "incollection")
    toAttrFrTyp n Text'bibliography_mark_text'bibliography_type_inproceedings = Just (n, str2attr "inproceedings")
    toAttrFrTyp n Text'bibliography_mark_text'bibliography_type_journal = Just (n, str2attr "journal")
    toAttrFrTyp n Text'bibliography_mark_text'bibliography_type_manual = Just (n, str2attr "manual")
    toAttrFrTyp n Text'bibliography_mark_text'bibliography_type_mastersthesis = Just (n, str2attr "mastersthesis")
    toAttrFrTyp n Text'bibliography_mark_text'bibliography_type_misc = Just (n, str2attr "misc")
    toAttrFrTyp n Text'bibliography_mark_text'bibliography_type_phdthesis = Just (n, str2attr "phdthesis")
    toAttrFrTyp n Text'bibliography_mark_text'bibliography_type_proceedings = Just (n, str2attr "proceedings")
    toAttrFrTyp n Text'bibliography_mark_text'bibliography_type_techreport = Just (n, str2attr "techreport")
    toAttrFrTyp n Text'bibliography_mark_text'bibliography_type_unpublished = Just (n, str2attr "unpublished")
    toAttrFrTyp n Text'bibliography_mark_text'bibliography_type_www = Just (n, str2attr "www")
instance XmlContent Text'bookmark where
    fromElem (CElem (Elem "text:bookmark" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:bookmark" (toAttrs as) [])]
instance XmlAttributes Text'bookmark where
    fromAttrs as =
	Text'bookmark
	  { text'bookmarkText'name = definiteA fromAttrToStr "text:bookmark" "text:name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:name" (text'bookmarkText'name v)
	]
instance XmlContent Text'bookmark_start where
    fromElem (CElem (Elem "text:bookmark-start" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:bookmark-start" (toAttrs as) [])]
instance XmlAttributes Text'bookmark_start where
    fromAttrs as =
	Text'bookmark_start
	  { text'bookmark_startText'name = definiteA fromAttrToStr "text:bookmark-start" "text:name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:name" (text'bookmark_startText'name v)
	]
instance XmlContent Text'bookmark_end where
    fromElem (CElem (Elem "text:bookmark-end" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:bookmark-end" (toAttrs as) [])]
instance XmlAttributes Text'bookmark_end where
    fromAttrs as =
	Text'bookmark_end
	  { text'bookmark_endText'name = definiteA fromAttrToStr "text:bookmark-end" "text:name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:name" (text'bookmark_endText'name v)
	]
instance XmlContent Text'reference_mark where
    fromElem (CElem (Elem "text:reference-mark" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:reference-mark" (toAttrs as) [])]
instance XmlAttributes Text'reference_mark where
    fromAttrs as =
	Text'reference_mark
	  { text'reference_markText'name = definiteA fromAttrToStr "text:reference-mark" "text:name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:name" (text'reference_markText'name v)
	]
instance XmlContent Text'reference_mark_start where
    fromElem (CElem (Elem "text:reference-mark-start" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:reference-mark-start" (toAttrs as) [])]
instance XmlAttributes Text'reference_mark_start where
    fromAttrs as =
	Text'reference_mark_start
	  { text'reference_mark_startText'name = definiteA fromAttrToStr "text:reference-mark-start" "text:name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:name" (text'reference_mark_startText'name v)
	]
instance XmlContent Text'reference_mark_end where
    fromElem (CElem (Elem "text:reference-mark-end" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:reference-mark-end" (toAttrs as) [])]
instance XmlAttributes Text'reference_mark_end where
    fromAttrs as =
	Text'reference_mark_end
	  { text'reference_mark_endText'name = definiteA fromAttrToStr "text:reference-mark-end" "text:name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:name" (text'reference_mark_endText'name v)
	]
instance XmlContent Text'footnotes_configuration where
    fromElem (CElem (Elem "text:footnotes-configuration" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Text'footnotes_configuration (fromAttrs as) a b), rest))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'footnotes_configuration as a b) =
	[CElem (Elem "text:footnotes-configuration" (toAttrs as) (maybe [] toElem a
								  ++ maybe [] toElem b))]
instance XmlAttributes Text'footnotes_configuration_Attrs where
    fromAttrs as =
	Text'footnotes_configuration_Attrs
	  { text'footnotes_configurationStyle'num_prefix = possibleA fromAttrToStr "style:num-prefix" as
	  , text'footnotes_configurationStyle'num_suffix = possibleA fromAttrToStr "style:num-suffix" as
	  , text'footnotes_configurationStyle'num_format = possibleA fromAttrToStr "style:num-format" as
	  , text'footnotes_configurationStyle'num_letter_sync = possibleA fromAttrToStr "style:num-letter-sync" as
	  , text'footnotes_configurationText'citation_body_style_name = possibleA fromAttrToStr "text:citation-body-style-name" as
	  , text'footnotes_configurationText'citation_style_name = possibleA fromAttrToStr "text:citation-style-name" as
	  , text'footnotes_configurationText'default_style_name = possibleA fromAttrToStr "text:default-style-name" as
	  , text'footnotes_configurationText'master_page_name = possibleA fromAttrToStr "text:master-page-name" as
	  , text'footnotes_configurationText'start_value = possibleA fromAttrToStr "text:start-value" as
	  , text'footnotes_configurationText'footnotes_position = defaultA fromAttrToTyp Text'footnotes_configuration_text'footnotes_position_page "text:footnotes-position" as
	  , text'footnotes_configurationText'start_numbering_at = defaultA fromAttrToTyp Text'footnotes_configuration_text'start_numbering_at_document "text:start-numbering-at" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "style:num-prefix" (text'footnotes_configurationStyle'num_prefix v)
	, maybeToAttr toAttrFrStr "style:num-suffix" (text'footnotes_configurationStyle'num_suffix v)
	, maybeToAttr toAttrFrStr "style:num-format" (text'footnotes_configurationStyle'num_format v)
	, maybeToAttr toAttrFrStr "style:num-letter-sync" (text'footnotes_configurationStyle'num_letter_sync v)
	, maybeToAttr toAttrFrStr "text:citation-body-style-name" (text'footnotes_configurationText'citation_body_style_name v)
	, maybeToAttr toAttrFrStr "text:citation-style-name" (text'footnotes_configurationText'citation_style_name v)
	, maybeToAttr toAttrFrStr "text:default-style-name" (text'footnotes_configurationText'default_style_name v)
	, maybeToAttr toAttrFrStr "text:master-page-name" (text'footnotes_configurationText'master_page_name v)
	, maybeToAttr toAttrFrStr "text:start-value" (text'footnotes_configurationText'start_value v)
	, defaultToAttr toAttrFrTyp "text:footnotes-position" (text'footnotes_configurationText'footnotes_position v)
	, defaultToAttr toAttrFrTyp "text:start-numbering-at" (text'footnotes_configurationText'start_numbering_at v)
	]
instance XmlAttrType Text'footnotes_configuration_text'footnotes_position where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "document" = Just Text'footnotes_configuration_text'footnotes_position_document
	    translate "page" = Just Text'footnotes_configuration_text'footnotes_position_page
	    translate _ = Nothing
    toAttrFrTyp n Text'footnotes_configuration_text'footnotes_position_document = Just (n, str2attr "document")
    toAttrFrTyp n Text'footnotes_configuration_text'footnotes_position_page = Just (n, str2attr "page")
instance XmlAttrType Text'footnotes_configuration_text'start_numbering_at where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "document" = Just Text'footnotes_configuration_text'start_numbering_at_document
	    translate "chapter" = Just Text'footnotes_configuration_text'start_numbering_at_chapter
	    translate "page" = Just Text'footnotes_configuration_text'start_numbering_at_page
	    translate _ = Nothing
    toAttrFrTyp n Text'footnotes_configuration_text'start_numbering_at_document = Just (n, str2attr "document")
    toAttrFrTyp n Text'footnotes_configuration_text'start_numbering_at_chapter = Just (n, str2attr "chapter")
    toAttrFrTyp n Text'footnotes_configuration_text'start_numbering_at_page = Just (n, str2attr "page")
instance XmlContent Text'footnote_continuation_notice_forward where
    fromElem (CElem (Elem "text:footnote-continuation-notice-forward" [] c0):rest) =
	(\(a,ca)->
	   (Just (Text'footnote_continuation_notice_forward a), rest))
	(definite fromText "text" "text:footnote-continuation-notice-forward" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'footnote_continuation_notice_forward a) =
	[CElem (Elem "text:footnote-continuation-notice-forward" [] (toText a))]
instance XmlContent Text'footnote_continuation_notice_backward where
    fromElem (CElem (Elem "text:footnote-continuation-notice-backward" [] c0):rest) =
	(\(a,ca)->
	   (Just (Text'footnote_continuation_notice_backward a), rest))
	(definite fromText "text" "text:footnote-continuation-notice-backward" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'footnote_continuation_notice_backward a) =
	[CElem (Elem "text:footnote-continuation-notice-backward" [] (toText a))]
instance XmlContent Text'endnotes_configuration where
    fromElem (CElem (Elem "text:endnotes-configuration" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:endnotes-configuration" (toAttrs as) [])]
instance XmlAttributes Text'endnotes_configuration where
    fromAttrs as =
	Text'endnotes_configuration
	  { text'endnotes_configurationStyle'num_prefix = possibleA fromAttrToStr "style:num-prefix" as
	  , text'endnotes_configurationStyle'num_suffix = possibleA fromAttrToStr "style:num-suffix" as
	  , text'endnotes_configurationStyle'num_format = possibleA fromAttrToStr "style:num-format" as
	  , text'endnotes_configurationStyle'num_letter_sync = possibleA fromAttrToStr "style:num-letter-sync" as
	  , text'endnotes_configurationText'start_value = possibleA fromAttrToStr "text:start-value" as
	  , text'endnotes_configurationText'citation_style_name = possibleA fromAttrToStr "text:citation-style-name" as
	  , text'endnotes_configurationText'citation_body_style_name = possibleA fromAttrToStr "text:citation-body-style-name" as
	  , text'endnotes_configurationText'default_style_name = possibleA fromAttrToStr "text:default-style-name" as
	  , text'endnotes_configurationText'master_page_name = possibleA fromAttrToStr "text:master-page-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "style:num-prefix" (text'endnotes_configurationStyle'num_prefix v)
	, maybeToAttr toAttrFrStr "style:num-suffix" (text'endnotes_configurationStyle'num_suffix v)
	, maybeToAttr toAttrFrStr "style:num-format" (text'endnotes_configurationStyle'num_format v)
	, maybeToAttr toAttrFrStr "style:num-letter-sync" (text'endnotes_configurationStyle'num_letter_sync v)
	, maybeToAttr toAttrFrStr "text:start-value" (text'endnotes_configurationText'start_value v)
	, maybeToAttr toAttrFrStr "text:citation-style-name" (text'endnotes_configurationText'citation_style_name v)
	, maybeToAttr toAttrFrStr "text:citation-body-style-name" (text'endnotes_configurationText'citation_body_style_name v)
	, maybeToAttr toAttrFrStr "text:default-style-name" (text'endnotes_configurationText'default_style_name v)
	, maybeToAttr toAttrFrStr "text:master-page-name" (text'endnotes_configurationText'master_page_name v)
	]
instance XmlContent Text'footnote where
    fromElem (CElem (Elem "text:footnote" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Text'footnote (fromAttrs as) a b), rest))
	   (definite fromElem "<text:footnote-body>" "text:footnote" ca))
	(definite fromElem "<text:footnote-citation>" "text:footnote" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'footnote as a b) =
	[CElem (Elem "text:footnote" (toAttrs as) (toElem a ++ toElem b))]
instance XmlAttributes Text'footnote_Attrs where
    fromAttrs as =
	Text'footnote_Attrs
	  { text'footnoteText'id = possibleA fromAttrToStr "text:id" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "text:id" (text'footnoteText'id v)
	]
instance XmlContent Text'footnote_citation where
    fromElem (CElem (Elem "text:footnote-citation" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'footnote_citation (fromAttrs as) a), rest))
	(definite fromText "text" "text:footnote-citation" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'footnote_citation as a) =
	[CElem (Elem "text:footnote-citation" (toAttrs as) (toText a))]
instance XmlAttributes Text'footnote_citation_Attrs where
    fromAttrs as =
	Text'footnote_citation_Attrs
	  { text'footnote_citationText'label = possibleA fromAttrToStr "text:label" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "text:label" (text'footnote_citationText'label v)
	]
instance XmlContent Text'footnote_body where
    fromElem (CElem (Elem "text:footnote-body" [] c0):rest) =
	(\(a,ca)->
	   (Just (Text'footnote_body a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'footnote_body a) =
	[CElem (Elem "text:footnote-body" [] (concatMap toElem a))]
instance XmlContent Text'footnote_body_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Text'footnote_body_Text'h a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Text'footnote_body_Text'p a), rest)
		(_,_) ->
			case (fromElem c0) of
			(Just a,rest) -> (Just (Text'footnote_body_Text'ordered_list a), rest)
			(_,_) ->
				case (fromElem c0) of
				(Just a,rest) -> (Just (Text'footnote_body_Text'unordered_list a), rest)
				(_,_) ->
				    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'footnote_body_Text'h a) = toElem a
    toElem (Text'footnote_body_Text'p a) = toElem a
    toElem (Text'footnote_body_Text'ordered_list a) = toElem a
    toElem (Text'footnote_body_Text'unordered_list a) = toElem a
instance XmlContent Text'endnote where
    fromElem (CElem (Elem "text:endnote" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Text'endnote (fromAttrs as) a b), rest))
	   (definite fromElem "<text:endnote-body>" "text:endnote" ca))
	(definite fromElem "<text:endnote-citation>" "text:endnote" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'endnote as a b) =
	[CElem (Elem "text:endnote" (toAttrs as) (toElem a ++ toElem b))]
instance XmlAttributes Text'endnote_Attrs where
    fromAttrs as =
	Text'endnote_Attrs
	  { text'endnoteText'id = possibleA fromAttrToStr "text:id" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "text:id" (text'endnoteText'id v)
	]
instance XmlContent Text'endnote_citation where
    fromElem (CElem (Elem "text:endnote-citation" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'endnote_citation (fromAttrs as) a), rest))
	(definite fromText "text" "text:endnote-citation" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'endnote_citation as a) =
	[CElem (Elem "text:endnote-citation" (toAttrs as) (toText a))]
instance XmlAttributes Text'endnote_citation_Attrs where
    fromAttrs as =
	Text'endnote_citation_Attrs
	  { text'endnote_citationText'label = possibleA fromAttrToStr "text:label" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "text:label" (text'endnote_citationText'label v)
	]
instance XmlContent Text'endnote_body where
    fromElem (CElem (Elem "text:endnote-body" [] c0):rest) =
	(\(a,ca)->
	   (Just (Text'endnote_body a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'endnote_body a) =
	[CElem (Elem "text:endnote-body" [] (concatMap toElem a))]
instance XmlContent Text'endnote_body_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Text'endnote_body_Text'h a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Text'endnote_body_Text'p a), rest)
		(_,_) ->
			case (fromElem c0) of
			(Just a,rest) -> (Just (Text'endnote_body_Text'ordered_list a), rest)
			(_,_) ->
				case (fromElem c0) of
				(Just a,rest) -> (Just (Text'endnote_body_Text'unordered_list a), rest)
				(_,_) ->
				    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'endnote_body_Text'h a) = toElem a
    toElem (Text'endnote_body_Text'p a) = toElem a
    toElem (Text'endnote_body_Text'ordered_list a) = toElem a
    toElem (Text'endnote_body_Text'unordered_list a) = toElem a
instance XmlContent Text'section where
    fromElem (CElem (Elem "text:section" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Text'section (fromAttrs as) a b), rest))
	   (many fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'section as a b) =
	[CElem (Elem "text:section" (toAttrs as) (maybe [] toElem a ++
						  concatMap toElem b))]
instance XmlAttributes Text'section_Attrs where
    fromAttrs as =
	Text'section_Attrs
	  { text'sectionText'name = definiteA fromAttrToStr "text:section" "text:name" as
	  , text'sectionText'style_name = possibleA fromAttrToStr "text:style-name" as
	  , text'sectionText'protected = defaultA fromAttrToStr "false" "text:protected" as
	  , text'sectionText'display = defaultA fromAttrToTyp Text'section_text'display_true "text:display" as
	  , text'sectionText'condition = possibleA fromAttrToStr "text:condition" as
	  , text'sectionText'protection_key = possibleA fromAttrToStr "text:protection-key" as
	  , text'sectionText'is_hidden = possibleA fromAttrToStr "text:is-hidden" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:name" (text'sectionText'name v)
	, maybeToAttr toAttrFrStr "text:style-name" (text'sectionText'style_name v)
	, defaultToAttr toAttrFrStr "text:protected" (text'sectionText'protected v)
	, defaultToAttr toAttrFrTyp "text:display" (text'sectionText'display v)
	, maybeToAttr toAttrFrStr "text:condition" (text'sectionText'condition v)
	, maybeToAttr toAttrFrStr "text:protection-key" (text'sectionText'protection_key v)
	, maybeToAttr toAttrFrStr "text:is-hidden" (text'sectionText'is_hidden v)
	]
instance XmlAttrType Text'section_text'display where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Text'section_text'display_true
	    translate "none" = Just Text'section_text'display_none
	    translate "condition" = Just Text'section_text'display_condition
	    translate _ = Nothing
    toAttrFrTyp n Text'section_text'display_true = Just (n, str2attr "true")
    toAttrFrTyp n Text'section_text'display_none = Just (n, str2attr "none")
    toAttrFrTyp n Text'section_text'display_condition = Just (n, str2attr "condition")
instance XmlContent Text'section_source where
    fromElem (CElem (Elem "text:section-source" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:section-source" (toAttrs as) [])]
instance XmlAttributes Text'section_source where
    fromAttrs as =
	Text'section_source
	  { text'section_sourceXlink'href = possibleA fromAttrToStr "xlink:href" as
	  , text'section_sourceXlink'type = defaultA fromAttrToTyp Text'section_source_xlink'type_simple "xlink:type" as
	  , text'section_sourceXlink'show = defaultA fromAttrToTyp Text'section_source_xlink'show_embed "xlink:show" as
	  , text'section_sourceText'section_name = possibleA fromAttrToStr "text:section-name" as
	  , text'section_sourceText'filter_name = possibleA fromAttrToStr "text:filter-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "xlink:href" (text'section_sourceXlink'href v)
	, defaultToAttr toAttrFrTyp "xlink:type" (text'section_sourceXlink'type v)
	, defaultToAttr toAttrFrTyp "xlink:show" (text'section_sourceXlink'show v)
	, maybeToAttr toAttrFrStr "text:section-name" (text'section_sourceText'section_name v)
	, maybeToAttr toAttrFrStr "text:filter-name" (text'section_sourceText'filter_name v)
	]
instance XmlAttrType Text'section_source_xlink'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "simple" = Just Text'section_source_xlink'type_simple
	    translate _ = Nothing
    toAttrFrTyp n Text'section_source_xlink'type_simple = Just (n, str2attr "simple")
instance XmlAttrType Text'section_source_xlink'show where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "embed" = Just Text'section_source_xlink'show_embed
	    translate _ = Nothing
    toAttrFrTyp n Text'section_source_xlink'show_embed = Just (n, str2attr "embed")
instance XmlContent Text'table_of_content where
    fromElem (CElem (Elem "text:table-of-content" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Text'table_of_content (fromAttrs as) a b), rest))
	   (definite fromElem "<text:index-body>" "text:table-of-content" ca))
	(definite fromElem "<text:table-of-content-source>" "text:table-of-content" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'table_of_content as a b) =
	[CElem (Elem "text:table-of-content" (toAttrs as) (toElem a ++
							   toElem b))]
instance XmlAttributes Text'table_of_content_Attrs where
    fromAttrs as =
	Text'table_of_content_Attrs
	  { text'table_of_contentText'name = definiteA fromAttrToStr "text:table-of-content" "text:name" as
	  , text'table_of_contentText'style_name = possibleA fromAttrToStr "text:style-name" as
	  , text'table_of_contentText'protected = defaultA fromAttrToStr "false" "text:protected" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:name" (text'table_of_contentText'name v)
	, maybeToAttr toAttrFrStr "text:style-name" (text'table_of_contentText'style_name v)
	, defaultToAttr toAttrFrStr "text:protected" (text'table_of_contentText'protected v)
	]
instance XmlContent Text'table_of_content_source where
    fromElem (CElem (Elem "text:table-of-content-source" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (Just (Text'table_of_content_source (fromAttrs as) a b c), rest))
	      (many fromElem cb))
	   (many fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'table_of_content_source as a b c) =
	[CElem (Elem "text:table-of-content-source" (toAttrs as) (maybe [] toElem a
								  ++ concatMap toElem b ++
								  concatMap toElem c))]
instance XmlAttributes Text'table_of_content_source_Attrs where
    fromAttrs as =
	Text'table_of_content_source_Attrs
	  { text'table_of_content_sourceText'outline_level = possibleA fromAttrToStr "text:outline-level" as
	  , text'table_of_content_sourceText'use_outline_level = defaultA fromAttrToStr "true" "text:use-outline-level" as
	  , text'table_of_content_sourceText'use_index_marks = defaultA fromAttrToStr "true" "text:use-index-marks" as
	  , text'table_of_content_sourceText'use_index_source_styles = defaultA fromAttrToStr "false" "text:use-index-source-styles" as
	  , text'table_of_content_sourceText'index_scope = defaultA fromAttrToTyp Text'table_of_content_source_text'index_scope_document "text:index-scope" as
	  , text'table_of_content_sourceText'relative_tab_stop_position = defaultA fromAttrToStr "true" "text:relative-tab-stop-position" as
	  , text'table_of_content_sourceFo'language = possibleA fromAttrToStr "fo:language" as
	  , text'table_of_content_sourceFo'country = possibleA fromAttrToStr "fo:country" as
	  , text'table_of_content_sourceText'sort_algorithm = possibleA fromAttrToStr "text:sort-algorithm" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "text:outline-level" (text'table_of_content_sourceText'outline_level v)
	, defaultToAttr toAttrFrStr "text:use-outline-level" (text'table_of_content_sourceText'use_outline_level v)
	, defaultToAttr toAttrFrStr "text:use-index-marks" (text'table_of_content_sourceText'use_index_marks v)
	, defaultToAttr toAttrFrStr "text:use-index-source-styles" (text'table_of_content_sourceText'use_index_source_styles v)
	, defaultToAttr toAttrFrTyp "text:index-scope" (text'table_of_content_sourceText'index_scope v)
	, defaultToAttr toAttrFrStr "text:relative-tab-stop-position" (text'table_of_content_sourceText'relative_tab_stop_position v)
	, maybeToAttr toAttrFrStr "fo:language" (text'table_of_content_sourceFo'language v)
	, maybeToAttr toAttrFrStr "fo:country" (text'table_of_content_sourceFo'country v)
	, maybeToAttr toAttrFrStr "text:sort-algorithm" (text'table_of_content_sourceText'sort_algorithm v)
	]
instance XmlAttrType Text'table_of_content_source_text'index_scope where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "document" = Just Text'table_of_content_source_text'index_scope_document
	    translate "chapter" = Just Text'table_of_content_source_text'index_scope_chapter
	    translate _ = Nothing
    toAttrFrTyp n Text'table_of_content_source_text'index_scope_document = Just (n, str2attr "document")
    toAttrFrTyp n Text'table_of_content_source_text'index_scope_chapter = Just (n, str2attr "chapter")
instance XmlContent Text'table_of_content_entry_template where
    fromElem (CElem (Elem "text:table-of-content-entry-template" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'table_of_content_entry_template (fromAttrs as) a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'table_of_content_entry_template as a) =
	[CElem (Elem "text:table-of-content-entry-template" (toAttrs as) (concatMap toElem a))]
instance XmlAttributes Text'table_of_content_entry_template_Attrs where
    fromAttrs as =
	Text'table_of_content_entry_template_Attrs
	  { text'table_of_content_entry_templateText'outline_level = definiteA fromAttrToStr "text:table-of-content-entry-template" "text:outline-level" as
	  , text'table_of_content_entry_templateText'style_name = definiteA fromAttrToStr "text:table-of-content-entry-template" "text:style-name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:outline-level" (text'table_of_content_entry_templateText'outline_level v)
	, toAttrFrStr "text:style-name" (text'table_of_content_entry_templateText'style_name v)
	]
instance XmlContent Text'table_of_content_entry_template_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Text'table_of_content_entry_template_Text'index_entry_chapter_number a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Text'table_of_content_entry_template_Text'index_entry_page_number a), rest)
		(_,_) ->
			case (fromElem c0) of
			(Just a,rest) -> (Just (Text'table_of_content_entry_template_Text'index_entry_text a), rest)
			(_,_) ->
				case (fromElem c0) of
				(Just a,rest) -> (Just (Text'table_of_content_entry_template_Text'index_entry_span a), rest)
				(_,_) ->
					case (fromElem c0) of
					(Just a,rest) -> (Just (Text'table_of_content_entry_template_Text'index_entry_tab_stop a), rest)
					(_,_) ->
						case (fromElem c0) of
						(Just a,rest) -> (Just (Text'table_of_content_entry_template_Text'index_entry_link_start a), rest)
						(_,_) ->
							case (fromElem c0) of
							(Just a,rest) -> (Just (Text'table_of_content_entry_template_Text'index_entry_link_end a), rest)
							(_,_) ->
							    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'table_of_content_entry_template_Text'index_entry_chapter_number a) = toElem a
    toElem (Text'table_of_content_entry_template_Text'index_entry_page_number a) = toElem a
    toElem (Text'table_of_content_entry_template_Text'index_entry_text a) = toElem a
    toElem (Text'table_of_content_entry_template_Text'index_entry_span a) = toElem a
    toElem (Text'table_of_content_entry_template_Text'index_entry_tab_stop a) = toElem a
    toElem (Text'table_of_content_entry_template_Text'index_entry_link_start a) = toElem a
    toElem (Text'table_of_content_entry_template_Text'index_entry_link_end a) = toElem a
instance XmlContent Text'illustration_index where
    fromElem (CElem (Elem "text:illustration-index" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Text'illustration_index (fromAttrs as) a b), rest))
	   (definite fromElem "<text:index-body>" "text:illustration-index" ca))
	(definite fromElem "<text:illustration-index-source>" "text:illustration-index" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'illustration_index as a b) =
	[CElem (Elem "text:illustration-index" (toAttrs as) (toElem a ++
							     toElem b))]
instance XmlAttributes Text'illustration_index_Attrs where
    fromAttrs as =
	Text'illustration_index_Attrs
	  { text'illustration_indexText'name = definiteA fromAttrToStr "text:illustration-index" "text:name" as
	  , text'illustration_indexText'style_name = possibleA fromAttrToStr "text:style-name" as
	  , text'illustration_indexText'protected = defaultA fromAttrToStr "false" "text:protected" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:name" (text'illustration_indexText'name v)
	, maybeToAttr toAttrFrStr "text:style-name" (text'illustration_indexText'style_name v)
	, defaultToAttr toAttrFrStr "text:protected" (text'illustration_indexText'protected v)
	]
instance XmlContent Text'illustration_index_source where
    fromElem (CElem (Elem "text:illustration-index-source" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Text'illustration_index_source (fromAttrs as) a b), rest))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'illustration_index_source as a b) =
	[CElem (Elem "text:illustration-index-source" (toAttrs as) (maybe [] toElem a
								    ++ maybe [] toElem b))]
instance XmlAttributes Text'illustration_index_source_Attrs where
    fromAttrs as =
	Text'illustration_index_source_Attrs
	  { text'illustration_index_sourceText'index_scope = defaultA fromAttrToTyp Text'illustration_index_source_text'index_scope_document "text:index-scope" as
	  , text'illustration_index_sourceText'relative_tab_stop_position = defaultA fromAttrToStr "true" "text:relative-tab-stop-position" as
	  , text'illustration_index_sourceText'use_caption = defaultA fromAttrToStr "true" "text:use-caption" as
	  , text'illustration_index_sourceText'caption_sequence_name = possibleA fromAttrToStr "text:caption-sequence-name" as
	  , text'illustration_index_sourceText'caption_sequence_format = defaultA fromAttrToTyp Text'illustration_index_source_text'caption_sequence_format_text "text:caption-sequence-format" as
	  , text'illustration_index_sourceFo'language = possibleA fromAttrToStr "fo:language" as
	  , text'illustration_index_sourceFo'country = possibleA fromAttrToStr "fo:country" as
	  , text'illustration_index_sourceText'sort_algorithm = possibleA fromAttrToStr "text:sort-algorithm" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrTyp "text:index-scope" (text'illustration_index_sourceText'index_scope v)
	, defaultToAttr toAttrFrStr "text:relative-tab-stop-position" (text'illustration_index_sourceText'relative_tab_stop_position v)
	, defaultToAttr toAttrFrStr "text:use-caption" (text'illustration_index_sourceText'use_caption v)
	, maybeToAttr toAttrFrStr "text:caption-sequence-name" (text'illustration_index_sourceText'caption_sequence_name v)
	, defaultToAttr toAttrFrTyp "text:caption-sequence-format" (text'illustration_index_sourceText'caption_sequence_format v)
	, maybeToAttr toAttrFrStr "fo:language" (text'illustration_index_sourceFo'language v)
	, maybeToAttr toAttrFrStr "fo:country" (text'illustration_index_sourceFo'country v)
	, maybeToAttr toAttrFrStr "text:sort-algorithm" (text'illustration_index_sourceText'sort_algorithm v)
	]
instance XmlAttrType Text'illustration_index_source_text'index_scope where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "document" = Just Text'illustration_index_source_text'index_scope_document
	    translate "chapter" = Just Text'illustration_index_source_text'index_scope_chapter
	    translate _ = Nothing
    toAttrFrTyp n Text'illustration_index_source_text'index_scope_document = Just (n, str2attr "document")
    toAttrFrTyp n Text'illustration_index_source_text'index_scope_chapter = Just (n, str2attr "chapter")
instance XmlAttrType Text'illustration_index_source_text'caption_sequence_format where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "text" = Just Text'illustration_index_source_text'caption_sequence_format_text
	    translate "category-and-value" = Just Text'illustration_index_source_text'caption_sequence_format_category_and_value
	    translate "caption" = Just Text'illustration_index_source_text'caption_sequence_format_caption
	    translate _ = Nothing
    toAttrFrTyp n Text'illustration_index_source_text'caption_sequence_format_text = Just (n, str2attr "text")
    toAttrFrTyp n Text'illustration_index_source_text'caption_sequence_format_category_and_value = Just (n, str2attr "category-and-value")
    toAttrFrTyp n Text'illustration_index_source_text'caption_sequence_format_caption = Just (n, str2attr "caption")
instance XmlContent Text'illustration_index_entry_template where
    fromElem (CElem (Elem "text:illustration-index-entry-template" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'illustration_index_entry_template (fromAttrs as) a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'illustration_index_entry_template as a) =
	[CElem (Elem "text:illustration-index-entry-template" (toAttrs as) (concatMap toElem a))]
instance XmlAttributes Text'illustration_index_entry_template_Attrs where
    fromAttrs as =
	Text'illustration_index_entry_template_Attrs
	  { text'illustration_index_entry_templateText'style_name = definiteA fromAttrToStr "text:illustration-index-entry-template" "text:style-name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:style-name" (text'illustration_index_entry_templateText'style_name v)
	]
instance XmlContent Text'illustration_index_entry_template_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Text'illustration_index_entry_template_Text'index_entry_page_number a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Text'illustration_index_entry_template_Text'index_entry_text a), rest)
		(_,_) ->
			case (fromElem c0) of
			(Just a,rest) -> (Just (Text'illustration_index_entry_template_Text'index_entry_span a), rest)
			(_,_) ->
				case (fromElem c0) of
				(Just a,rest) -> (Just (Text'illustration_index_entry_template_Text'index_entry_tab_stop a), rest)
				(_,_) ->
				    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'illustration_index_entry_template_Text'index_entry_page_number a) = toElem a
    toElem (Text'illustration_index_entry_template_Text'index_entry_text a) = toElem a
    toElem (Text'illustration_index_entry_template_Text'index_entry_span a) = toElem a
    toElem (Text'illustration_index_entry_template_Text'index_entry_tab_stop a) = toElem a
instance XmlContent Text'table_index where
    fromElem (CElem (Elem "text:table-index" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Text'table_index (fromAttrs as) a b), rest))
	   (definite fromElem "<text:index-body>" "text:table-index" ca))
	(definite fromElem "<text:table-index-source>" "text:table-index" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'table_index as a b) =
	[CElem (Elem "text:table-index" (toAttrs as) (toElem a ++
						      toElem b))]
instance XmlAttributes Text'table_index_Attrs where
    fromAttrs as =
	Text'table_index_Attrs
	  { text'table_indexText'name = definiteA fromAttrToStr "text:table-index" "text:name" as
	  , text'table_indexText'style_name = possibleA fromAttrToStr "text:style-name" as
	  , text'table_indexText'protected = defaultA fromAttrToStr "false" "text:protected" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:name" (text'table_indexText'name v)
	, maybeToAttr toAttrFrStr "text:style-name" (text'table_indexText'style_name v)
	, defaultToAttr toAttrFrStr "text:protected" (text'table_indexText'protected v)
	]
instance XmlContent Text'table_index_source where
    fromElem (CElem (Elem "text:table-index-source" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Text'table_index_source (fromAttrs as) a b), rest))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'table_index_source as a b) =
	[CElem (Elem "text:table-index-source" (toAttrs as) (maybe [] toElem a
							     ++ maybe [] toElem b))]
instance XmlAttributes Text'table_index_source_Attrs where
    fromAttrs as =
	Text'table_index_source_Attrs
	  { text'table_index_sourceText'index_scope = defaultA fromAttrToTyp Text'table_index_source_text'index_scope_document "text:index-scope" as
	  , text'table_index_sourceText'relative_tab_stop_position = defaultA fromAttrToStr "true" "text:relative-tab-stop-position" as
	  , text'table_index_sourceText'use_caption = defaultA fromAttrToStr "true" "text:use-caption" as
	  , text'table_index_sourceText'caption_sequence_name = possibleA fromAttrToStr "text:caption-sequence-name" as
	  , text'table_index_sourceText'caption_sequence_format = defaultA fromAttrToTyp Text'table_index_source_text'caption_sequence_format_text "text:caption-sequence-format" as
	  , text'table_index_sourceFo'language = possibleA fromAttrToStr "fo:language" as
	  , text'table_index_sourceFo'country = possibleA fromAttrToStr "fo:country" as
	  , text'table_index_sourceText'sort_algorithm = possibleA fromAttrToStr "text:sort-algorithm" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrTyp "text:index-scope" (text'table_index_sourceText'index_scope v)
	, defaultToAttr toAttrFrStr "text:relative-tab-stop-position" (text'table_index_sourceText'relative_tab_stop_position v)
	, defaultToAttr toAttrFrStr "text:use-caption" (text'table_index_sourceText'use_caption v)
	, maybeToAttr toAttrFrStr "text:caption-sequence-name" (text'table_index_sourceText'caption_sequence_name v)
	, defaultToAttr toAttrFrTyp "text:caption-sequence-format" (text'table_index_sourceText'caption_sequence_format v)
	, maybeToAttr toAttrFrStr "fo:language" (text'table_index_sourceFo'language v)
	, maybeToAttr toAttrFrStr "fo:country" (text'table_index_sourceFo'country v)
	, maybeToAttr toAttrFrStr "text:sort-algorithm" (text'table_index_sourceText'sort_algorithm v)
	]
instance XmlAttrType Text'table_index_source_text'index_scope where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "document" = Just Text'table_index_source_text'index_scope_document
	    translate "chapter" = Just Text'table_index_source_text'index_scope_chapter
	    translate _ = Nothing
    toAttrFrTyp n Text'table_index_source_text'index_scope_document = Just (n, str2attr "document")
    toAttrFrTyp n Text'table_index_source_text'index_scope_chapter = Just (n, str2attr "chapter")
instance XmlAttrType Text'table_index_source_text'caption_sequence_format where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "text" = Just Text'table_index_source_text'caption_sequence_format_text
	    translate "category-and-value" = Just Text'table_index_source_text'caption_sequence_format_category_and_value
	    translate "caption" = Just Text'table_index_source_text'caption_sequence_format_caption
	    translate _ = Nothing
    toAttrFrTyp n Text'table_index_source_text'caption_sequence_format_text = Just (n, str2attr "text")
    toAttrFrTyp n Text'table_index_source_text'caption_sequence_format_category_and_value = Just (n, str2attr "category-and-value")
    toAttrFrTyp n Text'table_index_source_text'caption_sequence_format_caption = Just (n, str2attr "caption")
instance XmlContent Text'table_index_entry_template where
    fromElem (CElem (Elem "text:table-index-entry-template" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'table_index_entry_template (fromAttrs as) a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'table_index_entry_template as a) =
	[CElem (Elem "text:table-index-entry-template" (toAttrs as) (concatMap toElem a))]
instance XmlAttributes Text'table_index_entry_template_Attrs where
    fromAttrs as =
	Text'table_index_entry_template_Attrs
	  { text'table_index_entry_templateText'style_name = definiteA fromAttrToStr "text:table-index-entry-template" "text:style-name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:style-name" (text'table_index_entry_templateText'style_name v)
	]
instance XmlContent Text'table_index_entry_template_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Text'table_index_entry_template_Text'index_entry_page_number a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Text'table_index_entry_template_Text'index_entry_text a), rest)
		(_,_) ->
			case (fromElem c0) of
			(Just a,rest) -> (Just (Text'table_index_entry_template_Text'index_entry_span a), rest)
			(_,_) ->
				case (fromElem c0) of
				(Just a,rest) -> (Just (Text'table_index_entry_template_Text'index_entry_tab_stop a), rest)
				(_,_) ->
				    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'table_index_entry_template_Text'index_entry_page_number a) = toElem a
    toElem (Text'table_index_entry_template_Text'index_entry_text a) = toElem a
    toElem (Text'table_index_entry_template_Text'index_entry_span a) = toElem a
    toElem (Text'table_index_entry_template_Text'index_entry_tab_stop a) = toElem a
instance XmlContent Text'object_index where
    fromElem (CElem (Elem "text:object-index" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Text'object_index (fromAttrs as) a b), rest))
	   (definite fromElem "<text:index-body>" "text:object-index" ca))
	(definite fromElem "<text:object-index-source>" "text:object-index" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'object_index as a b) =
	[CElem (Elem "text:object-index" (toAttrs as) (toElem a ++
						       toElem b))]
instance XmlAttributes Text'object_index_Attrs where
    fromAttrs as =
	Text'object_index_Attrs
	  { text'object_indexText'name = definiteA fromAttrToStr "text:object-index" "text:name" as
	  , text'object_indexText'style_name = possibleA fromAttrToStr "text:style-name" as
	  , text'object_indexText'protected = defaultA fromAttrToStr "false" "text:protected" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:name" (text'object_indexText'name v)
	, maybeToAttr toAttrFrStr "text:style-name" (text'object_indexText'style_name v)
	, defaultToAttr toAttrFrStr "text:protected" (text'object_indexText'protected v)
	]
instance XmlContent Text'object_index_source where
    fromElem (CElem (Elem "text:object-index-source" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Text'object_index_source (fromAttrs as) a b), rest))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'object_index_source as a b) =
	[CElem (Elem "text:object-index-source" (toAttrs as) (maybe [] toElem a
							      ++ maybe [] toElem b))]
instance XmlAttributes Text'object_index_source_Attrs where
    fromAttrs as =
	Text'object_index_source_Attrs
	  { text'object_index_sourceText'index_scope = defaultA fromAttrToTyp Text'object_index_source_text'index_scope_document "text:index-scope" as
	  , text'object_index_sourceText'relative_tab_stop_position = defaultA fromAttrToStr "true" "text:relative-tab-stop-position" as
	  , text'object_index_sourceText'use_spreadsheet_objects = defaultA fromAttrToStr "false" "text:use-spreadsheet-objects" as
	  , text'object_index_sourceText'use_draw_objects = defaultA fromAttrToStr "false" "text:use-draw-objects" as
	  , text'object_index_sourceText'use_chart_objects = defaultA fromAttrToStr "false" "text:use-chart-objects" as
	  , text'object_index_sourceText'use_other_objects = defaultA fromAttrToStr "false" "text:use-other-objects" as
	  , text'object_index_sourceText'use_math_objects = defaultA fromAttrToStr "false" "text:use-math-objects" as
	  , text'object_index_sourceFo'language = possibleA fromAttrToStr "fo:language" as
	  , text'object_index_sourceFo'country = possibleA fromAttrToStr "fo:country" as
	  , text'object_index_sourceText'sort_algorithm = possibleA fromAttrToStr "text:sort-algorithm" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrTyp "text:index-scope" (text'object_index_sourceText'index_scope v)
	, defaultToAttr toAttrFrStr "text:relative-tab-stop-position" (text'object_index_sourceText'relative_tab_stop_position v)
	, defaultToAttr toAttrFrStr "text:use-spreadsheet-objects" (text'object_index_sourceText'use_spreadsheet_objects v)
	, defaultToAttr toAttrFrStr "text:use-draw-objects" (text'object_index_sourceText'use_draw_objects v)
	, defaultToAttr toAttrFrStr "text:use-chart-objects" (text'object_index_sourceText'use_chart_objects v)
	, defaultToAttr toAttrFrStr "text:use-other-objects" (text'object_index_sourceText'use_other_objects v)
	, defaultToAttr toAttrFrStr "text:use-math-objects" (text'object_index_sourceText'use_math_objects v)
	, maybeToAttr toAttrFrStr "fo:language" (text'object_index_sourceFo'language v)
	, maybeToAttr toAttrFrStr "fo:country" (text'object_index_sourceFo'country v)
	, maybeToAttr toAttrFrStr "text:sort-algorithm" (text'object_index_sourceText'sort_algorithm v)
	]
instance XmlAttrType Text'object_index_source_text'index_scope where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "document" = Just Text'object_index_source_text'index_scope_document
	    translate "chapter" = Just Text'object_index_source_text'index_scope_chapter
	    translate _ = Nothing
    toAttrFrTyp n Text'object_index_source_text'index_scope_document = Just (n, str2attr "document")
    toAttrFrTyp n Text'object_index_source_text'index_scope_chapter = Just (n, str2attr "chapter")
instance XmlContent Text'object_index_entry_template where
    fromElem (CElem (Elem "text:object-index-entry-template" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'object_index_entry_template (fromAttrs as) a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'object_index_entry_template as a) =
	[CElem (Elem "text:object-index-entry-template" (toAttrs as) (concatMap toElem a))]
instance XmlAttributes Text'object_index_entry_template_Attrs where
    fromAttrs as =
	Text'object_index_entry_template_Attrs
	  { text'object_index_entry_templateText'style_name = definiteA fromAttrToStr "text:object-index-entry-template" "text:style-name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:style-name" (text'object_index_entry_templateText'style_name v)
	]
instance XmlContent Text'object_index_entry_template_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Text'object_index_entry_template_Text'index_entry_page_number a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Text'object_index_entry_template_Text'index_entry_text a), rest)
		(_,_) ->
			case (fromElem c0) of
			(Just a,rest) -> (Just (Text'object_index_entry_template_Text'index_entry_span a), rest)
			(_,_) ->
				case (fromElem c0) of
				(Just a,rest) -> (Just (Text'object_index_entry_template_Text'index_entry_tab_stop a), rest)
				(_,_) ->
				    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'object_index_entry_template_Text'index_entry_page_number a) = toElem a
    toElem (Text'object_index_entry_template_Text'index_entry_text a) = toElem a
    toElem (Text'object_index_entry_template_Text'index_entry_span a) = toElem a
    toElem (Text'object_index_entry_template_Text'index_entry_tab_stop a) = toElem a
instance XmlContent Text'user_index where
    fromElem (CElem (Elem "text:user-index" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Text'user_index (fromAttrs as) a b), rest))
	   (definite fromElem "<text:index-body>" "text:user-index" ca))
	(definite fromElem "<text:user-index-source>" "text:user-index" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'user_index as a b) =
	[CElem (Elem "text:user-index" (toAttrs as) (toElem a ++
						     toElem b))]
instance XmlAttributes Text'user_index_Attrs where
    fromAttrs as =
	Text'user_index_Attrs
	  { text'user_indexText'name = definiteA fromAttrToStr "text:user-index" "text:name" as
	  , text'user_indexText'style_name = possibleA fromAttrToStr "text:style-name" as
	  , text'user_indexText'protected = defaultA fromAttrToStr "false" "text:protected" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:name" (text'user_indexText'name v)
	, maybeToAttr toAttrFrStr "text:style-name" (text'user_indexText'style_name v)
	, defaultToAttr toAttrFrStr "text:protected" (text'user_indexText'protected v)
	]
instance XmlContent Text'user_index_source where
    fromElem (CElem (Elem "text:user-index-source" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (Just (Text'user_index_source (fromAttrs as) a b c), rest))
	      (many fromElem cb))
	   (many fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'user_index_source as a b c) =
	[CElem (Elem "text:user-index-source" (toAttrs as) (maybe [] toElem a
							    ++ concatMap toElem b ++
							    concatMap toElem c))]
instance XmlAttributes Text'user_index_source_Attrs where
    fromAttrs as =
	Text'user_index_source_Attrs
	  { text'user_index_sourceText'index_scope = defaultA fromAttrToTyp Text'user_index_source_text'index_scope_document "text:index-scope" as
	  , text'user_index_sourceText'relative_tab_stop_position = defaultA fromAttrToStr "true" "text:relative-tab-stop-position" as
	  , text'user_index_sourceText'use_index_marks = defaultA fromAttrToStr "false" "text:use-index-marks" as
	  , text'user_index_sourceText'use_graphics = defaultA fromAttrToStr "false" "text:use-graphics" as
	  , text'user_index_sourceText'use_tables = defaultA fromAttrToStr "false" "text:use-tables" as
	  , text'user_index_sourceText'use_floating_frames = defaultA fromAttrToStr "false" "text:use-floating-frames" as
	  , text'user_index_sourceText'use_objects = defaultA fromAttrToStr "false" "text:use-objects" as
	  , text'user_index_sourceText'use_index_source_styles = defaultA fromAttrToStr "false" "text:use-index-source-styles" as
	  , text'user_index_sourceText'copy_outline_levels = defaultA fromAttrToStr "false" "text:copy-outline-levels" as
	  , text'user_index_sourceFo'language = possibleA fromAttrToStr "fo:language" as
	  , text'user_index_sourceFo'country = possibleA fromAttrToStr "fo:country" as
	  , text'user_index_sourceText'sort_algorithm = possibleA fromAttrToStr "text:sort-algorithm" as
	  , text'user_index_sourceText'index_name = possibleA fromAttrToStr "text:index-name" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrTyp "text:index-scope" (text'user_index_sourceText'index_scope v)
	, defaultToAttr toAttrFrStr "text:relative-tab-stop-position" (text'user_index_sourceText'relative_tab_stop_position v)
	, defaultToAttr toAttrFrStr "text:use-index-marks" (text'user_index_sourceText'use_index_marks v)
	, defaultToAttr toAttrFrStr "text:use-graphics" (text'user_index_sourceText'use_graphics v)
	, defaultToAttr toAttrFrStr "text:use-tables" (text'user_index_sourceText'use_tables v)
	, defaultToAttr toAttrFrStr "text:use-floating-frames" (text'user_index_sourceText'use_floating_frames v)
	, defaultToAttr toAttrFrStr "text:use-objects" (text'user_index_sourceText'use_objects v)
	, defaultToAttr toAttrFrStr "text:use-index-source-styles" (text'user_index_sourceText'use_index_source_styles v)
	, defaultToAttr toAttrFrStr "text:copy-outline-levels" (text'user_index_sourceText'copy_outline_levels v)
	, maybeToAttr toAttrFrStr "fo:language" (text'user_index_sourceFo'language v)
	, maybeToAttr toAttrFrStr "fo:country" (text'user_index_sourceFo'country v)
	, maybeToAttr toAttrFrStr "text:sort-algorithm" (text'user_index_sourceText'sort_algorithm v)
	, maybeToAttr toAttrFrStr "text:index-name" (text'user_index_sourceText'index_name v)
	]
instance XmlAttrType Text'user_index_source_text'index_scope where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "document" = Just Text'user_index_source_text'index_scope_document
	    translate "chapter" = Just Text'user_index_source_text'index_scope_chapter
	    translate _ = Nothing
    toAttrFrTyp n Text'user_index_source_text'index_scope_document = Just (n, str2attr "document")
    toAttrFrTyp n Text'user_index_source_text'index_scope_chapter = Just (n, str2attr "chapter")
instance XmlContent Text'user_index_entry_template where
    fromElem (CElem (Elem "text:user-index-entry-template" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'user_index_entry_template (fromAttrs as) a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'user_index_entry_template as a) =
	[CElem (Elem "text:user-index-entry-template" (toAttrs as) (concatMap toElem a))]
instance XmlAttributes Text'user_index_entry_template_Attrs where
    fromAttrs as =
	Text'user_index_entry_template_Attrs
	  { text'user_index_entry_templateText'outline_level = definiteA fromAttrToStr "text:user-index-entry-template" "text:outline-level" as
	  , text'user_index_entry_templateText'style_name = definiteA fromAttrToStr "text:user-index-entry-template" "text:style-name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:outline-level" (text'user_index_entry_templateText'outline_level v)
	, toAttrFrStr "text:style-name" (text'user_index_entry_templateText'style_name v)
	]
instance XmlContent Text'user_index_entry_template_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Text'user_index_entry_template_Text'index_entry_chapter a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Text'user_index_entry_template_Text'index_entry_page_number a), rest)
		(_,_) ->
			case (fromElem c0) of
			(Just a,rest) -> (Just (Text'user_index_entry_template_Text'index_entry_text a), rest)
			(_,_) ->
				case (fromElem c0) of
				(Just a,rest) -> (Just (Text'user_index_entry_template_Text'index_entry_span a), rest)
				(_,_) ->
					case (fromElem c0) of
					(Just a,rest) -> (Just (Text'user_index_entry_template_Text'index_entry_tab_stop a), rest)
					(_,_) ->
					    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'user_index_entry_template_Text'index_entry_chapter a) = toElem a
    toElem (Text'user_index_entry_template_Text'index_entry_page_number a) = toElem a
    toElem (Text'user_index_entry_template_Text'index_entry_text a) = toElem a
    toElem (Text'user_index_entry_template_Text'index_entry_span a) = toElem a
    toElem (Text'user_index_entry_template_Text'index_entry_tab_stop a) = toElem a
instance XmlContent Text'alphabetical_index where
    fromElem (CElem (Elem "text:alphabetical-index" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Text'alphabetical_index (fromAttrs as) a b), rest))
	   (definite fromElem "<text:index-body>" "text:alphabetical-index" ca))
	(definite fromElem "<text:alphabetical-index-source>" "text:alphabetical-index" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'alphabetical_index as a b) =
	[CElem (Elem "text:alphabetical-index" (toAttrs as) (toElem a ++
							     toElem b))]
instance XmlAttributes Text'alphabetical_index_Attrs where
    fromAttrs as =
	Text'alphabetical_index_Attrs
	  { text'alphabetical_indexText'name = definiteA fromAttrToStr "text:alphabetical-index" "text:name" as
	  , text'alphabetical_indexText'style_name = possibleA fromAttrToStr "text:style-name" as
	  , text'alphabetical_indexText'protected = defaultA fromAttrToStr "false" "text:protected" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:name" (text'alphabetical_indexText'name v)
	, maybeToAttr toAttrFrStr "text:style-name" (text'alphabetical_indexText'style_name v)
	, defaultToAttr toAttrFrStr "text:protected" (text'alphabetical_indexText'protected v)
	]
instance XmlContent Text'alphabetical_index_source where
    fromElem (CElem (Elem "text:alphabetical-index-source" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Text'alphabetical_index_source (fromAttrs as) a b), rest))
	   (many fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'alphabetical_index_source as a b) =
	[CElem (Elem "text:alphabetical-index-source" (toAttrs as) (maybe [] toElem a
								    ++ concatMap toElem b))]
instance XmlAttributes Text'alphabetical_index_source_Attrs where
    fromAttrs as =
	Text'alphabetical_index_source_Attrs
	  { text'alphabetical_index_sourceText'index_scope = defaultA fromAttrToTyp Text'alphabetical_index_source_text'index_scope_document "text:index-scope" as
	  , text'alphabetical_index_sourceText'relative_tab_stop_position = defaultA fromAttrToStr "true" "text:relative-tab-stop-position" as
	  , text'alphabetical_index_sourceText'ignore_case = defaultA fromAttrToStr "false" "text:ignore-case" as
	  , text'alphabetical_index_sourceText'main_entry_style_name = possibleA fromAttrToStr "text:main-entry-style-name" as
	  , text'alphabetical_index_sourceText'alphabetical_separators = defaultA fromAttrToStr "false" "text:alphabetical-separators" as
	  , text'alphabetical_index_sourceText'combine_entries = defaultA fromAttrToStr "true" "text:combine-entries" as
	  , text'alphabetical_index_sourceText'combine_entries_with_dash = defaultA fromAttrToStr "false" "text:combine-entries-with-dash" as
	  , text'alphabetical_index_sourceText'combine_entries_with_pp = defaultA fromAttrToStr "true" "text:combine-entries-with-pp" as
	  , text'alphabetical_index_sourceText'use_keys_as_entries = defaultA fromAttrToStr "false" "text:use-keys-as-entries" as
	  , text'alphabetical_index_sourceText'capitalize_entries = defaultA fromAttrToStr "false" "text:capitalize-entries" as
	  , text'alphabetical_index_sourceText'comma_separated = defaultA fromAttrToStr "false" "text:comma-separated" as
	  , text'alphabetical_index_sourceFo'language = possibleA fromAttrToStr "fo:language" as
	  , text'alphabetical_index_sourceFo'country = possibleA fromAttrToStr "fo:country" as
	  , text'alphabetical_index_sourceText'sort_algorithm = possibleA fromAttrToStr "text:sort-algorithm" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrTyp "text:index-scope" (text'alphabetical_index_sourceText'index_scope v)
	, defaultToAttr toAttrFrStr "text:relative-tab-stop-position" (text'alphabetical_index_sourceText'relative_tab_stop_position v)
	, defaultToAttr toAttrFrStr "text:ignore-case" (text'alphabetical_index_sourceText'ignore_case v)
	, maybeToAttr toAttrFrStr "text:main-entry-style-name" (text'alphabetical_index_sourceText'main_entry_style_name v)
	, defaultToAttr toAttrFrStr "text:alphabetical-separators" (text'alphabetical_index_sourceText'alphabetical_separators v)
	, defaultToAttr toAttrFrStr "text:combine-entries" (text'alphabetical_index_sourceText'combine_entries v)
	, defaultToAttr toAttrFrStr "text:combine-entries-with-dash" (text'alphabetical_index_sourceText'combine_entries_with_dash v)
	, defaultToAttr toAttrFrStr "text:combine-entries-with-pp" (text'alphabetical_index_sourceText'combine_entries_with_pp v)
	, defaultToAttr toAttrFrStr "text:use-keys-as-entries" (text'alphabetical_index_sourceText'use_keys_as_entries v)
	, defaultToAttr toAttrFrStr "text:capitalize-entries" (text'alphabetical_index_sourceText'capitalize_entries v)
	, defaultToAttr toAttrFrStr "text:comma-separated" (text'alphabetical_index_sourceText'comma_separated v)
	, maybeToAttr toAttrFrStr "fo:language" (text'alphabetical_index_sourceFo'language v)
	, maybeToAttr toAttrFrStr "fo:country" (text'alphabetical_index_sourceFo'country v)
	, maybeToAttr toAttrFrStr "text:sort-algorithm" (text'alphabetical_index_sourceText'sort_algorithm v)
	]
instance XmlAttrType Text'alphabetical_index_source_text'index_scope where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "document" = Just Text'alphabetical_index_source_text'index_scope_document
	    translate "chapter" = Just Text'alphabetical_index_source_text'index_scope_chapter
	    translate _ = Nothing
    toAttrFrTyp n Text'alphabetical_index_source_text'index_scope_document = Just (n, str2attr "document")
    toAttrFrTyp n Text'alphabetical_index_source_text'index_scope_chapter = Just (n, str2attr "chapter")
instance XmlContent Text'alphabetical_index_entry_template where
    fromElem (CElem (Elem "text:alphabetical-index-entry-template" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'alphabetical_index_entry_template (fromAttrs as) a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'alphabetical_index_entry_template as a) =
	[CElem (Elem "text:alphabetical-index-entry-template" (toAttrs as) (concatMap toElem a))]
instance XmlAttributes Text'alphabetical_index_entry_template_Attrs where
    fromAttrs as =
	Text'alphabetical_index_entry_template_Attrs
	  { text'alphabetical_index_entry_templateText'outline_level = definiteA fromAttrToTyp "text:alphabetical-index-entry-template" "text:outline-level" as
	  , text'alphabetical_index_entry_templateText'style_name = definiteA fromAttrToStr "text:alphabetical-index-entry-template" "text:style-name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrTyp "text:outline-level" (text'alphabetical_index_entry_templateText'outline_level v)
	, toAttrFrStr "text:style-name" (text'alphabetical_index_entry_templateText'style_name v)
	]
instance XmlContent Text'alphabetical_index_entry_template_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Text'alphabetical_index_entry_template_Text'index_entry_chapter a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Text'alphabetical_index_entry_template_Text'index_entry_page_number a), rest)
		(_,_) ->
			case (fromElem c0) of
			(Just a,rest) -> (Just (Text'alphabetical_index_entry_template_Text'index_entry_text a), rest)
			(_,_) ->
				case (fromElem c0) of
				(Just a,rest) -> (Just (Text'alphabetical_index_entry_template_Text'index_entry_span a), rest)
				(_,_) ->
					case (fromElem c0) of
					(Just a,rest) -> (Just (Text'alphabetical_index_entry_template_Text'index_entry_tab_stop a), rest)
					(_,_) ->
					    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'alphabetical_index_entry_template_Text'index_entry_chapter a) = toElem a
    toElem (Text'alphabetical_index_entry_template_Text'index_entry_page_number a) = toElem a
    toElem (Text'alphabetical_index_entry_template_Text'index_entry_text a) = toElem a
    toElem (Text'alphabetical_index_entry_template_Text'index_entry_span a) = toElem a
    toElem (Text'alphabetical_index_entry_template_Text'index_entry_tab_stop a) = toElem a
instance XmlAttrType Text'alphabetical_index_entry_template_text'outline_level where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "1" = Just Text'alphabetical_index_entry_template_text'outline_level_1
	    translate "2" = Just Text'alphabetical_index_entry_template_text'outline_level_2
	    translate "3" = Just Text'alphabetical_index_entry_template_text'outline_level_3
	    translate "separator" = Just Text'alphabetical_index_entry_template_text'outline_level_separator
	    translate _ = Nothing
    toAttrFrTyp n Text'alphabetical_index_entry_template_text'outline_level_1 = Just (n, str2attr "1")
    toAttrFrTyp n Text'alphabetical_index_entry_template_text'outline_level_2 = Just (n, str2attr "2")
    toAttrFrTyp n Text'alphabetical_index_entry_template_text'outline_level_3 = Just (n, str2attr "3")
    toAttrFrTyp n Text'alphabetical_index_entry_template_text'outline_level_separator = Just (n, str2attr "separator")
instance XmlContent Text'alphabetical_index_auto_mark_file where
    fromElem (CElem (Elem "text:alphabetical-index-auto-mark-file" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:alphabetical-index-auto-mark-file" (toAttrs as) [])]
instance XmlAttributes Text'alphabetical_index_auto_mark_file where
    fromAttrs as =
	Text'alphabetical_index_auto_mark_file
	  { text'alphabetical_index_auto_mark_fileXlink'href = possibleA fromAttrToStr "xlink:href" as
	  , text'alphabetical_index_auto_mark_fileXlink'type = defaultA fromAttrToTyp Text'alphabetical_index_auto_mark_file_xlink'type_simple "xlink:type" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "xlink:href" (text'alphabetical_index_auto_mark_fileXlink'href v)
	, defaultToAttr toAttrFrTyp "xlink:type" (text'alphabetical_index_auto_mark_fileXlink'type v)
	]
instance XmlAttrType Text'alphabetical_index_auto_mark_file_xlink'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "simple" = Just Text'alphabetical_index_auto_mark_file_xlink'type_simple
	    translate _ = Nothing
    toAttrFrTyp n Text'alphabetical_index_auto_mark_file_xlink'type_simple = Just (n, str2attr "simple")
instance XmlContent Text'bibliography where
    fromElem (CElem (Elem "text:bibliography" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Text'bibliography (fromAttrs as) a b), rest))
	   (definite fromElem "<text:index-body>" "text:bibliography" ca))
	(definite fromElem "<text:bibliography-source>" "text:bibliography" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'bibliography as a b) =
	[CElem (Elem "text:bibliography" (toAttrs as) (toElem a ++
						       toElem b))]
instance XmlAttributes Text'bibliography_Attrs where
    fromAttrs as =
	Text'bibliography_Attrs
	  { text'bibliographyText'name = definiteA fromAttrToStr "text:bibliography" "text:name" as
	  , text'bibliographyText'style_name = possibleA fromAttrToStr "text:style-name" as
	  , text'bibliographyText'protected = defaultA fromAttrToStr "false" "text:protected" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:name" (text'bibliographyText'name v)
	, maybeToAttr toAttrFrStr "text:style-name" (text'bibliographyText'style_name v)
	, defaultToAttr toAttrFrStr "text:protected" (text'bibliographyText'protected v)
	]
instance XmlContent Text'bibliography_source where
    fromElem (CElem (Elem "text:bibliography-source" [] c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Text'bibliography_source a b), rest))
	   (many fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'bibliography_source a b) =
	[CElem (Elem "text:bibliography-source" [] (maybe [] toElem a ++
						    concatMap toElem b))]
instance XmlContent Text'bibliography_entry_template where
    fromElem (CElem (Elem "text:bibliography-entry-template" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'bibliography_entry_template (fromAttrs as) a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'bibliography_entry_template as a) =
	[CElem (Elem "text:bibliography-entry-template" (toAttrs as) (concatMap toElem a))]
instance XmlAttributes Text'bibliography_entry_template_Attrs where
    fromAttrs as =
	Text'bibliography_entry_template_Attrs
	  { text'bibliography_entry_templateText'bibliography_type = definiteA fromAttrToTyp "text:bibliography-entry-template" "text:bibliography-type" as
	  , text'bibliography_entry_templateText'style_name = definiteA fromAttrToStr "text:bibliography-entry-template" "text:style-name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrTyp "text:bibliography-type" (text'bibliography_entry_templateText'bibliography_type v)
	, toAttrFrStr "text:style-name" (text'bibliography_entry_templateText'style_name v)
	]
instance XmlContent Text'bibliography_entry_template_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Text'bibliography_entry_template_Text'index_entry_span a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Text'bibliography_entry_template_Text'index_entry_tab_stop a), rest)
		(_,_) ->
			case (fromElem c0) of
			(Just a,rest) -> (Just (Text'bibliography_entry_template_Text'index_entry_bibliography a), rest)
			(_,_) ->
			    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'bibliography_entry_template_Text'index_entry_span a) = toElem a
    toElem (Text'bibliography_entry_template_Text'index_entry_tab_stop a) = toElem a
    toElem (Text'bibliography_entry_template_Text'index_entry_bibliography a) = toElem a
instance XmlAttrType Text'bibliography_entry_template_text'bibliography_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "article" = Just Text'bibliography_entry_template_text'bibliography_type_article
	    translate "book" = Just Text'bibliography_entry_template_text'bibliography_type_book
	    translate "booklet" = Just Text'bibliography_entry_template_text'bibliography_type_booklet
	    translate "conference" = Just Text'bibliography_entry_template_text'bibliography_type_conference
	    translate "custom1" = Just Text'bibliography_entry_template_text'bibliography_type_custom1
	    translate "custom2" = Just Text'bibliography_entry_template_text'bibliography_type_custom2
	    translate "custom3" = Just Text'bibliography_entry_template_text'bibliography_type_custom3
	    translate "custom4" = Just Text'bibliography_entry_template_text'bibliography_type_custom4
	    translate "custom5" = Just Text'bibliography_entry_template_text'bibliography_type_custom5
	    translate "email" = Just Text'bibliography_entry_template_text'bibliography_type_email
	    translate "inbook" = Just Text'bibliography_entry_template_text'bibliography_type_inbook
	    translate "incollection" = Just Text'bibliography_entry_template_text'bibliography_type_incollection
	    translate "inproceedings" = Just Text'bibliography_entry_template_text'bibliography_type_inproceedings
	    translate "journal" = Just Text'bibliography_entry_template_text'bibliography_type_journal
	    translate "manual" = Just Text'bibliography_entry_template_text'bibliography_type_manual
	    translate "mastersthesis" = Just Text'bibliography_entry_template_text'bibliography_type_mastersthesis
	    translate "misc" = Just Text'bibliography_entry_template_text'bibliography_type_misc
	    translate "phdthesis" = Just Text'bibliography_entry_template_text'bibliography_type_phdthesis
	    translate "proceedings" = Just Text'bibliography_entry_template_text'bibliography_type_proceedings
	    translate "techreport" = Just Text'bibliography_entry_template_text'bibliography_type_techreport
	    translate "unpublished" = Just Text'bibliography_entry_template_text'bibliography_type_unpublished
	    translate "www" = Just Text'bibliography_entry_template_text'bibliography_type_www
	    translate _ = Nothing
    toAttrFrTyp n Text'bibliography_entry_template_text'bibliography_type_article = Just (n, str2attr "article")
    toAttrFrTyp n Text'bibliography_entry_template_text'bibliography_type_book = Just (n, str2attr "book")
    toAttrFrTyp n Text'bibliography_entry_template_text'bibliography_type_booklet = Just (n, str2attr "booklet")
    toAttrFrTyp n Text'bibliography_entry_template_text'bibliography_type_conference = Just (n, str2attr "conference")
    toAttrFrTyp n Text'bibliography_entry_template_text'bibliography_type_custom1 = Just (n, str2attr "custom1")
    toAttrFrTyp n Text'bibliography_entry_template_text'bibliography_type_custom2 = Just (n, str2attr "custom2")
    toAttrFrTyp n Text'bibliography_entry_template_text'bibliography_type_custom3 = Just (n, str2attr "custom3")
    toAttrFrTyp n Text'bibliography_entry_template_text'bibliography_type_custom4 = Just (n, str2attr "custom4")
    toAttrFrTyp n Text'bibliography_entry_template_text'bibliography_type_custom5 = Just (n, str2attr "custom5")
    toAttrFrTyp n Text'bibliography_entry_template_text'bibliography_type_email = Just (n, str2attr "email")
    toAttrFrTyp n Text'bibliography_entry_template_text'bibliography_type_inbook = Just (n, str2attr "inbook")
    toAttrFrTyp n Text'bibliography_entry_template_text'bibliography_type_incollection = Just (n, str2attr "incollection")
    toAttrFrTyp n Text'bibliography_entry_template_text'bibliography_type_inproceedings = Just (n, str2attr "inproceedings")
    toAttrFrTyp n Text'bibliography_entry_template_text'bibliography_type_journal = Just (n, str2attr "journal")
    toAttrFrTyp n Text'bibliography_entry_template_text'bibliography_type_manual = Just (n, str2attr "manual")
    toAttrFrTyp n Text'bibliography_entry_template_text'bibliography_type_mastersthesis = Just (n, str2attr "mastersthesis")
    toAttrFrTyp n Text'bibliography_entry_template_text'bibliography_type_misc = Just (n, str2attr "misc")
    toAttrFrTyp n Text'bibliography_entry_template_text'bibliography_type_phdthesis = Just (n, str2attr "phdthesis")
    toAttrFrTyp n Text'bibliography_entry_template_text'bibliography_type_proceedings = Just (n, str2attr "proceedings")
    toAttrFrTyp n Text'bibliography_entry_template_text'bibliography_type_techreport = Just (n, str2attr "techreport")
    toAttrFrTyp n Text'bibliography_entry_template_text'bibliography_type_unpublished = Just (n, str2attr "unpublished")
    toAttrFrTyp n Text'bibliography_entry_template_text'bibliography_type_www = Just (n, str2attr "www")
instance XmlContent Text'index_body where
    fromElem (CElem (Elem "text:index-body" [] c0):rest) =
	(\(a,ca)->
	   (Just (Text'index_body a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'index_body a) =
	[CElem (Elem "text:index-body" [] (concatMap toElem a))]
instance XmlContent Text'index_body_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Text'index_body_Text'h a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Text'index_body_Text'p a), rest)
		(_,_) ->
			case (fromElem c0) of
			(Just a,rest) -> (Just (Text'index_body_Text'ordered_list a), rest)
			(_,_) ->
				case (fromElem c0) of
				(Just a,rest) -> (Just (Text'index_body_Text'unordered_list a), rest)
				(_,_) ->
					case (fromElem c0) of
					(Just a,rest) -> (Just (Text'index_body_Table'table a), rest)
					(_,_) ->
						case (fromElem c0) of
						(Just a,rest) -> (Just (Text'index_body_Text'section a), rest)
						(_,_) ->
							case (fromElem c0) of
							(Just a,rest) -> (Just (Text'index_body_Text'table_of_content a), rest)
							(_,_) ->
								case (fromElem c0) of
								(Just a,rest) -> (Just (Text'index_body_Text'illustration_index a), rest)
								(_,_) ->
									case (fromElem c0) of
									(Just a,rest) -> (Just (Text'index_body_Text'table_index a), rest)
									(_,_) ->
										case (fromElem c0) of
										(Just a,rest) -> (Just (Text'index_body_Text'object_index a), rest)
										(_,_) ->
											case (fromElem c0) of
											(Just a,rest) -> (Just (Text'index_body_Text'user_index a), rest)
											(_,_) ->
												case (fromElem c0) of
												(Just a,rest) -> (Just (Text'index_body_Text'alphabetical_index a), rest)
												(_,_) ->
													case (fromElem c0) of
													(Just a,rest) -> (Just (Text'index_body_Text'bibliography a), rest)
													(_,_) ->
														case (fromElem c0) of
														(Just a,rest) -> (Just (Text'index_body_Text'index_title a), rest)
														(_,_) ->
															case (fromElem c0) of
															(Just a,rest) -> (Just (Text'index_body_Text'change a), rest)
															(_,_) ->
																case (fromElem c0) of
																(Just a,rest) -> (Just (Text'index_body_Text'change_start a), rest)
																(_,_) ->
																	case (fromElem c0) of
																	(Just a,rest) -> (Just (Text'index_body_Text'change_end a), rest)
																	(_,_) ->
																	    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'index_body_Text'h a) = toElem a
    toElem (Text'index_body_Text'p a) = toElem a
    toElem (Text'index_body_Text'ordered_list a) = toElem a
    toElem (Text'index_body_Text'unordered_list a) = toElem a
    toElem (Text'index_body_Table'table a) = toElem a
    toElem (Text'index_body_Text'section a) = toElem a
    toElem (Text'index_body_Text'table_of_content a) = toElem a
    toElem (Text'index_body_Text'illustration_index a) = toElem a
    toElem (Text'index_body_Text'table_index a) = toElem a
    toElem (Text'index_body_Text'object_index a) = toElem a
    toElem (Text'index_body_Text'user_index a) = toElem a
    toElem (Text'index_body_Text'alphabetical_index a) = toElem a
    toElem (Text'index_body_Text'bibliography a) = toElem a
    toElem (Text'index_body_Text'index_title a) = toElem a
    toElem (Text'index_body_Text'change a) = toElem a
    toElem (Text'index_body_Text'change_start a) = toElem a
    toElem (Text'index_body_Text'change_end a) = toElem a
instance XmlContent Text'index_title where
    fromElem (CElem (Elem "text:index-title" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'index_title (fromAttrs as) a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'index_title as a) =
	[CElem (Elem "text:index-title" (toAttrs as) (concatMap toElem a))]
instance XmlAttributes Text'index_title_Attrs where
    fromAttrs as =
	Text'index_title_Attrs
	  { text'index_titleText'style_name = possibleA fromAttrToStr "text:style-name" as
	  , text'index_titleText'name = possibleA fromAttrToStr "text:name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "text:style-name" (text'index_titleText'style_name v)
	, maybeToAttr toAttrFrStr "text:name" (text'index_titleText'name v)
	]
instance XmlContent Text'index_title_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Text'index_title_Text'h a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Text'index_title_Text'p a), rest)
		(_,_) ->
			case (fromElem c0) of
			(Just a,rest) -> (Just (Text'index_title_Text'ordered_list a), rest)
			(_,_) ->
				case (fromElem c0) of
				(Just a,rest) -> (Just (Text'index_title_Text'unordered_list a), rest)
				(_,_) ->
					case (fromElem c0) of
					(Just a,rest) -> (Just (Text'index_title_Table'table a), rest)
					(_,_) ->
						case (fromElem c0) of
						(Just a,rest) -> (Just (Text'index_title_Text'section a), rest)
						(_,_) ->
							case (fromElem c0) of
							(Just a,rest) -> (Just (Text'index_title_Text'table_of_content a), rest)
							(_,_) ->
								case (fromElem c0) of
								(Just a,rest) -> (Just (Text'index_title_Text'illustration_index a), rest)
								(_,_) ->
									case (fromElem c0) of
									(Just a,rest) -> (Just (Text'index_title_Text'table_index a), rest)
									(_,_) ->
										case (fromElem c0) of
										(Just a,rest) -> (Just (Text'index_title_Text'object_index a), rest)
										(_,_) ->
											case (fromElem c0) of
											(Just a,rest) -> (Just (Text'index_title_Text'user_index a), rest)
											(_,_) ->
												case (fromElem c0) of
												(Just a,rest) -> (Just (Text'index_title_Text'alphabetical_index a), rest)
												(_,_) ->
													case (fromElem c0) of
													(Just a,rest) -> (Just (Text'index_title_Text'bibliography a), rest)
													(_,_) ->
														case (fromElem c0) of
														(Just a,rest) -> (Just (Text'index_title_Text'index_title a), rest)
														(_,_) ->
															case (fromElem c0) of
															(Just a,rest) -> (Just (Text'index_title_Text'change a), rest)
															(_,_) ->
																case (fromElem c0) of
																(Just a,rest) -> (Just (Text'index_title_Text'change_start a), rest)
																(_,_) ->
																	case (fromElem c0) of
																	(Just a,rest) -> (Just (Text'index_title_Text'change_end a), rest)
																	(_,_) ->
																	    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'index_title_Text'h a) = toElem a
    toElem (Text'index_title_Text'p a) = toElem a
    toElem (Text'index_title_Text'ordered_list a) = toElem a
    toElem (Text'index_title_Text'unordered_list a) = toElem a
    toElem (Text'index_title_Table'table a) = toElem a
    toElem (Text'index_title_Text'section a) = toElem a
    toElem (Text'index_title_Text'table_of_content a) = toElem a
    toElem (Text'index_title_Text'illustration_index a) = toElem a
    toElem (Text'index_title_Text'table_index a) = toElem a
    toElem (Text'index_title_Text'object_index a) = toElem a
    toElem (Text'index_title_Text'user_index a) = toElem a
    toElem (Text'index_title_Text'alphabetical_index a) = toElem a
    toElem (Text'index_title_Text'bibliography a) = toElem a
    toElem (Text'index_title_Text'index_title a) = toElem a
    toElem (Text'index_title_Text'change a) = toElem a
    toElem (Text'index_title_Text'change_start a) = toElem a
    toElem (Text'index_title_Text'change_end a) = toElem a
instance XmlContent Text'index_title_template where
    fromElem (CElem (Elem "text:index-title-template" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'index_title_template (fromAttrs as) a), rest))
	(definite fromText "text" "text:index-title-template" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'index_title_template as a) =
	[CElem (Elem "text:index-title-template" (toAttrs as) (toText a))]
instance XmlAttributes Text'index_title_template_Attrs where
    fromAttrs as =
	Text'index_title_template_Attrs
	  { text'index_title_templateText'style_name = possibleA fromAttrToStr "text:style-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "text:style-name" (text'index_title_templateText'style_name v)
	]
instance XmlContent Text'index_entry_chapter_number where
    fromElem (CElem (Elem "text:index-entry-chapter-number" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:index-entry-chapter-number" (toAttrs as) [])]
instance XmlAttributes Text'index_entry_chapter_number where
    fromAttrs as =
	Text'index_entry_chapter_number
	  { text'index_entry_chapter_numberText'style_name = possibleA fromAttrToStr "text:style-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "text:style-name" (text'index_entry_chapter_numberText'style_name v)
	]
instance XmlContent Text'index_entry_chapter where
    fromElem (CElem (Elem "text:index-entry-chapter" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:index-entry-chapter" (toAttrs as) [])]
instance XmlAttributes Text'index_entry_chapter where
    fromAttrs as =
	Text'index_entry_chapter
	  { text'index_entry_chapterText'style_name = possibleA fromAttrToStr "text:style-name" as
	  , text'index_entry_chapterText'display = defaultA fromAttrToTyp Text'index_entry_chapter_text'display_number_and_name "text:display" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "text:style-name" (text'index_entry_chapterText'style_name v)
	, defaultToAttr toAttrFrTyp "text:display" (text'index_entry_chapterText'display v)
	]
instance XmlAttrType Text'index_entry_chapter_text'display where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "name" = Just Text'index_entry_chapter_text'display_name
	    translate "number" = Just Text'index_entry_chapter_text'display_number
	    translate "number-and-name" = Just Text'index_entry_chapter_text'display_number_and_name
	    translate _ = Nothing
    toAttrFrTyp n Text'index_entry_chapter_text'display_name = Just (n, str2attr "name")
    toAttrFrTyp n Text'index_entry_chapter_text'display_number = Just (n, str2attr "number")
    toAttrFrTyp n Text'index_entry_chapter_text'display_number_and_name = Just (n, str2attr "number-and-name")
instance XmlContent Text'index_entry_text where
    fromElem (CElem (Elem "text:index-entry-text" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:index-entry-text" (toAttrs as) [])]
instance XmlAttributes Text'index_entry_text where
    fromAttrs as =
	Text'index_entry_text
	  { text'index_entry_textText'style_name = possibleA fromAttrToStr "text:style-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "text:style-name" (text'index_entry_textText'style_name v)
	]
instance XmlContent Text'index_entry_page_number where
    fromElem (CElem (Elem "text:index-entry-page-number" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:index-entry-page-number" (toAttrs as) [])]
instance XmlAttributes Text'index_entry_page_number where
    fromAttrs as =
	Text'index_entry_page_number
	  { text'index_entry_page_numberText'style_name = possibleA fromAttrToStr "text:style-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "text:style-name" (text'index_entry_page_numberText'style_name v)
	]
instance XmlContent Text'index_entry_span where
    fromElem (CElem (Elem "text:index-entry-span" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'index_entry_span (fromAttrs as) a), rest))
	(definite fromText "text" "text:index-entry-span" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'index_entry_span as a) =
	[CElem (Elem "text:index-entry-span" (toAttrs as) (toText a))]
instance XmlAttributes Text'index_entry_span_Attrs where
    fromAttrs as =
	Text'index_entry_span_Attrs
	  { text'index_entry_spanText'style_name = possibleA fromAttrToStr "text:style-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "text:style-name" (text'index_entry_spanText'style_name v)
	]
instance XmlContent Text'index_entry_bibliography where
    fromElem (CElem (Elem "text:index-entry-bibliography" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:index-entry-bibliography" (toAttrs as) [])]
instance XmlAttributes Text'index_entry_bibliography where
    fromAttrs as =
	Text'index_entry_bibliography
	  { text'index_entry_bibliographyText'style_name = possibleA fromAttrToStr "text:style-name" as
	  , text'index_entry_bibliographyText'bibliography_data_field = definiteA fromAttrToTyp "text:index-entry-bibliography" "text:bibliography-data-field" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "text:style-name" (text'index_entry_bibliographyText'style_name v)
	, toAttrFrTyp "text:bibliography-data-field" (text'index_entry_bibliographyText'bibliography_data_field v)
	]
instance XmlAttrType Text'index_entry_bibliography_text'bibliography_data_field where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "address" = Just Text'index_entry_bibliography_text'bibliography_data_field_address
	    translate "annote" = Just Text'index_entry_bibliography_text'bibliography_data_field_annote
	    translate "author" = Just Text'index_entry_bibliography_text'bibliography_data_field_author
	    translate "bibliography-type" = Just Text'index_entry_bibliography_text'bibliography_data_field_bibliography_type
	    translate "booktitle" = Just Text'index_entry_bibliography_text'bibliography_data_field_booktitle
	    translate "chapter" = Just Text'index_entry_bibliography_text'bibliography_data_field_chapter
	    translate "custom1" = Just Text'index_entry_bibliography_text'bibliography_data_field_custom1
	    translate "custom2" = Just Text'index_entry_bibliography_text'bibliography_data_field_custom2
	    translate "custom3" = Just Text'index_entry_bibliography_text'bibliography_data_field_custom3
	    translate "custom4" = Just Text'index_entry_bibliography_text'bibliography_data_field_custom4
	    translate "custom5" = Just Text'index_entry_bibliography_text'bibliography_data_field_custom5
	    translate "edition" = Just Text'index_entry_bibliography_text'bibliography_data_field_edition
	    translate "editor" = Just Text'index_entry_bibliography_text'bibliography_data_field_editor
	    translate "howpublished" = Just Text'index_entry_bibliography_text'bibliography_data_field_howpublished
	    translate "identifier" = Just Text'index_entry_bibliography_text'bibliography_data_field_identifier
	    translate "institution" = Just Text'index_entry_bibliography_text'bibliography_data_field_institution
	    translate "isbn" = Just Text'index_entry_bibliography_text'bibliography_data_field_isbn
	    translate "journal" = Just Text'index_entry_bibliography_text'bibliography_data_field_journal
	    translate "month" = Just Text'index_entry_bibliography_text'bibliography_data_field_month
	    translate "note" = Just Text'index_entry_bibliography_text'bibliography_data_field_note
	    translate "number" = Just Text'index_entry_bibliography_text'bibliography_data_field_number
	    translate "organizations" = Just Text'index_entry_bibliography_text'bibliography_data_field_organizations
	    translate "pages" = Just Text'index_entry_bibliography_text'bibliography_data_field_pages
	    translate "publisher" = Just Text'index_entry_bibliography_text'bibliography_data_field_publisher
	    translate "report-type" = Just Text'index_entry_bibliography_text'bibliography_data_field_report_type
	    translate "school" = Just Text'index_entry_bibliography_text'bibliography_data_field_school
	    translate "series" = Just Text'index_entry_bibliography_text'bibliography_data_field_series
	    translate "title" = Just Text'index_entry_bibliography_text'bibliography_data_field_title
	    translate "url" = Just Text'index_entry_bibliography_text'bibliography_data_field_url
	    translate "volume" = Just Text'index_entry_bibliography_text'bibliography_data_field_volume
	    translate "year" = Just Text'index_entry_bibliography_text'bibliography_data_field_year
	    translate _ = Nothing
    toAttrFrTyp n Text'index_entry_bibliography_text'bibliography_data_field_address = Just (n, str2attr "address")
    toAttrFrTyp n Text'index_entry_bibliography_text'bibliography_data_field_annote = Just (n, str2attr "annote")
    toAttrFrTyp n Text'index_entry_bibliography_text'bibliography_data_field_author = Just (n, str2attr "author")
    toAttrFrTyp n Text'index_entry_bibliography_text'bibliography_data_field_bibliography_type = Just (n, str2attr "bibliography-type")
    toAttrFrTyp n Text'index_entry_bibliography_text'bibliography_data_field_booktitle = Just (n, str2attr "booktitle")
    toAttrFrTyp n Text'index_entry_bibliography_text'bibliography_data_field_chapter = Just (n, str2attr "chapter")
    toAttrFrTyp n Text'index_entry_bibliography_text'bibliography_data_field_custom1 = Just (n, str2attr "custom1")
    toAttrFrTyp n Text'index_entry_bibliography_text'bibliography_data_field_custom2 = Just (n, str2attr "custom2")
    toAttrFrTyp n Text'index_entry_bibliography_text'bibliography_data_field_custom3 = Just (n, str2attr "custom3")
    toAttrFrTyp n Text'index_entry_bibliography_text'bibliography_data_field_custom4 = Just (n, str2attr "custom4")
    toAttrFrTyp n Text'index_entry_bibliography_text'bibliography_data_field_custom5 = Just (n, str2attr "custom5")
    toAttrFrTyp n Text'index_entry_bibliography_text'bibliography_data_field_edition = Just (n, str2attr "edition")
    toAttrFrTyp n Text'index_entry_bibliography_text'bibliography_data_field_editor = Just (n, str2attr "editor")
    toAttrFrTyp n Text'index_entry_bibliography_text'bibliography_data_field_howpublished = Just (n, str2attr "howpublished")
    toAttrFrTyp n Text'index_entry_bibliography_text'bibliography_data_field_identifier = Just (n, str2attr "identifier")
    toAttrFrTyp n Text'index_entry_bibliography_text'bibliography_data_field_institution = Just (n, str2attr "institution")
    toAttrFrTyp n Text'index_entry_bibliography_text'bibliography_data_field_isbn = Just (n, str2attr "isbn")
    toAttrFrTyp n Text'index_entry_bibliography_text'bibliography_data_field_journal = Just (n, str2attr "journal")
    toAttrFrTyp n Text'index_entry_bibliography_text'bibliography_data_field_month = Just (n, str2attr "month")
    toAttrFrTyp n Text'index_entry_bibliography_text'bibliography_data_field_note = Just (n, str2attr "note")
    toAttrFrTyp n Text'index_entry_bibliography_text'bibliography_data_field_number = Just (n, str2attr "number")
    toAttrFrTyp n Text'index_entry_bibliography_text'bibliography_data_field_organizations = Just (n, str2attr "organizations")
    toAttrFrTyp n Text'index_entry_bibliography_text'bibliography_data_field_pages = Just (n, str2attr "pages")
    toAttrFrTyp n Text'index_entry_bibliography_text'bibliography_data_field_publisher = Just (n, str2attr "publisher")
    toAttrFrTyp n Text'index_entry_bibliography_text'bibliography_data_field_report_type = Just (n, str2attr "report-type")
    toAttrFrTyp n Text'index_entry_bibliography_text'bibliography_data_field_school = Just (n, str2attr "school")
    toAttrFrTyp n Text'index_entry_bibliography_text'bibliography_data_field_series = Just (n, str2attr "series")
    toAttrFrTyp n Text'index_entry_bibliography_text'bibliography_data_field_title = Just (n, str2attr "title")
    toAttrFrTyp n Text'index_entry_bibliography_text'bibliography_data_field_url = Just (n, str2attr "url")
    toAttrFrTyp n Text'index_entry_bibliography_text'bibliography_data_field_volume = Just (n, str2attr "volume")
    toAttrFrTyp n Text'index_entry_bibliography_text'bibliography_data_field_year = Just (n, str2attr "year")
instance XmlContent Text'index_entry_tab_stop where
    fromElem (CElem (Elem "text:index-entry-tab-stop" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:index-entry-tab-stop" (toAttrs as) [])]
instance XmlAttributes Text'index_entry_tab_stop where
    fromAttrs as =
	Text'index_entry_tab_stop
	  { text'index_entry_tab_stopText'style_name = possibleA fromAttrToStr "text:style-name" as
	  , text'index_entry_tab_stopStyle'leader_char = defaultA fromAttrToStr " " "style:leader-char" as
	  , text'index_entry_tab_stopStyle'type = defaultA fromAttrToTyp Text'index_entry_tab_stop_style'type_left "style:type" as
	  , text'index_entry_tab_stopStyle'position = possibleA fromAttrToStr "style:position" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "text:style-name" (text'index_entry_tab_stopText'style_name v)
	, defaultToAttr toAttrFrStr "style:leader-char" (text'index_entry_tab_stopStyle'leader_char v)
	, defaultToAttr toAttrFrTyp "style:type" (text'index_entry_tab_stopStyle'type v)
	, maybeToAttr toAttrFrStr "style:position" (text'index_entry_tab_stopStyle'position v)
	]
instance XmlAttrType Text'index_entry_tab_stop_style'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "left" = Just Text'index_entry_tab_stop_style'type_left
	    translate "right" = Just Text'index_entry_tab_stop_style'type_right
	    translate _ = Nothing
    toAttrFrTyp n Text'index_entry_tab_stop_style'type_left = Just (n, str2attr "left")
    toAttrFrTyp n Text'index_entry_tab_stop_style'type_right = Just (n, str2attr "right")
instance XmlContent Text'index_entry_link_start where
    fromElem (CElem (Elem "text:index-entry-link-start" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:index-entry-link-start" (toAttrs as) [])]
instance XmlAttributes Text'index_entry_link_start where
    fromAttrs as =
	Text'index_entry_link_start
	  { text'index_entry_link_startText'style_name = possibleA fromAttrToStr "text:style-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "text:style-name" (text'index_entry_link_startText'style_name v)
	]
instance XmlContent Text'index_entry_link_end where
    fromElem (CElem (Elem "text:index-entry-link-end" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:index-entry-link-end" (toAttrs as) [])]
instance XmlAttributes Text'index_entry_link_end where
    fromAttrs as =
	Text'index_entry_link_end
	  { text'index_entry_link_endText'style_name = possibleA fromAttrToStr "text:style-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "text:style-name" (text'index_entry_link_endText'style_name v)
	]
instance XmlContent Text'index_source_styles where
    fromElem (CElem (Elem "text:index-source-styles" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'index_source_styles (fromAttrs as) a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'index_source_styles as a) =
	[CElem (Elem "text:index-source-styles" (toAttrs as) (concatMap toElem a))]
instance XmlAttributes Text'index_source_styles_Attrs where
    fromAttrs as =
	Text'index_source_styles_Attrs
	  { text'index_source_stylesText'outline_level = definiteA fromAttrToStr "text:index-source-styles" "text:outline-level" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:outline-level" (text'index_source_stylesText'outline_level v)
	]
instance XmlContent Text'index_source_style where
    fromElem (CElem (Elem "text:index-source-style" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:index-source-style" (toAttrs as) [])]
instance XmlAttributes Text'index_source_style where
    fromAttrs as =
	Text'index_source_style
	  { text'index_source_styleText'style_name = definiteA fromAttrToStr "text:index-source-style" "text:style-name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:style-name" (text'index_source_styleText'style_name v)
	]
instance XmlContent Text'toc_mark_start where
    fromElem (CElem (Elem "text:toc-mark-start" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:toc-mark-start" (toAttrs as) [])]
instance XmlAttributes Text'toc_mark_start where
    fromAttrs as =
	Text'toc_mark_start
	  { text'toc_mark_startText'id = definiteA fromAttrToStr "text:toc-mark-start" "text:id" as
	  , text'toc_mark_startText'outline_level = possibleA fromAttrToStr "text:outline-level" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:id" (text'toc_mark_startText'id v)
	, maybeToAttr toAttrFrStr "text:outline-level" (text'toc_mark_startText'outline_level v)
	]
instance XmlContent Text'toc_mark_end where
    fromElem (CElem (Elem "text:toc-mark-end" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:toc-mark-end" (toAttrs as) [])]
instance XmlAttributes Text'toc_mark_end where
    fromAttrs as =
	Text'toc_mark_end
	  { text'toc_mark_endText'id = definiteA fromAttrToStr "text:toc-mark-end" "text:id" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:id" (text'toc_mark_endText'id v)
	]
instance XmlContent Text'toc_mark where
    fromElem (CElem (Elem "text:toc-mark" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:toc-mark" (toAttrs as) [])]
instance XmlAttributes Text'toc_mark where
    fromAttrs as =
	Text'toc_mark
	  { text'toc_markText'string_value = definiteA fromAttrToStr "text:toc-mark" "text:string-value" as
	  , text'toc_markText'outline_level = possibleA fromAttrToStr "text:outline-level" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:string-value" (text'toc_markText'string_value v)
	, maybeToAttr toAttrFrStr "text:outline-level" (text'toc_markText'outline_level v)
	]
instance XmlContent Text'user_index_mark_start where
    fromElem (CElem (Elem "text:user-index-mark-start" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:user-index-mark-start" (toAttrs as) [])]
instance XmlAttributes Text'user_index_mark_start where
    fromAttrs as =
	Text'user_index_mark_start
	  { text'user_index_mark_startText'id = definiteA fromAttrToStr "text:user-index-mark-start" "text:id" as
	  , text'user_index_mark_startText'outline_level = possibleA fromAttrToStr "text:outline-level" as
	  , text'user_index_mark_startText'index_name = possibleA fromAttrToStr "text:index-name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:id" (text'user_index_mark_startText'id v)
	, maybeToAttr toAttrFrStr "text:outline-level" (text'user_index_mark_startText'outline_level v)
	, maybeToAttr toAttrFrStr "text:index-name" (text'user_index_mark_startText'index_name v)
	]
instance XmlContent Text'user_index_mark_end where
    fromElem (CElem (Elem "text:user-index-mark-end" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:user-index-mark-end" (toAttrs as) [])]
instance XmlAttributes Text'user_index_mark_end where
    fromAttrs as =
	Text'user_index_mark_end
	  { text'user_index_mark_endText'id = definiteA fromAttrToStr "text:user-index-mark-end" "text:id" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:id" (text'user_index_mark_endText'id v)
	]
instance XmlContent Text'user_index_mark where
    fromElem (CElem (Elem "text:user-index-mark" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:user-index-mark" (toAttrs as) [])]
instance XmlAttributes Text'user_index_mark where
    fromAttrs as =
	Text'user_index_mark
	  { text'user_index_markText'string_value = definiteA fromAttrToStr "text:user-index-mark" "text:string-value" as
	  , text'user_index_markText'outline_level = possibleA fromAttrToStr "text:outline-level" as
	  , text'user_index_markText'index_name = possibleA fromAttrToStr "text:index-name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:string-value" (text'user_index_markText'string_value v)
	, maybeToAttr toAttrFrStr "text:outline-level" (text'user_index_markText'outline_level v)
	, maybeToAttr toAttrFrStr "text:index-name" (text'user_index_markText'index_name v)
	]
instance XmlContent Text'alphabetical_index_mark_start where
    fromElem (CElem (Elem "text:alphabetical-index-mark-start" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:alphabetical-index-mark-start" (toAttrs as) [])]
instance XmlAttributes Text'alphabetical_index_mark_start where
    fromAttrs as =
	Text'alphabetical_index_mark_start
	  { text'alphabetical_index_mark_startText'id = definiteA fromAttrToStr "text:alphabetical-index-mark-start" "text:id" as
	  , text'alphabetical_index_mark_startText'key1 = possibleA fromAttrToStr "text:key1" as
	  , text'alphabetical_index_mark_startText'key2 = possibleA fromAttrToStr "text:key2" as
	  , text'alphabetical_index_mark_startText'main_etry = defaultA fromAttrToStr "false" "text:main-etry" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:id" (text'alphabetical_index_mark_startText'id v)
	, maybeToAttr toAttrFrStr "text:key1" (text'alphabetical_index_mark_startText'key1 v)
	, maybeToAttr toAttrFrStr "text:key2" (text'alphabetical_index_mark_startText'key2 v)
	, defaultToAttr toAttrFrStr "text:main-etry" (text'alphabetical_index_mark_startText'main_etry v)
	]
instance XmlContent Text'alphabetical_index_mark_end where
    fromElem (CElem (Elem "text:alphabetical-index-mark-end" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:alphabetical-index-mark-end" (toAttrs as) [])]
instance XmlAttributes Text'alphabetical_index_mark_end where
    fromAttrs as =
	Text'alphabetical_index_mark_end
	  { text'alphabetical_index_mark_endText'id = definiteA fromAttrToStr "text:alphabetical-index-mark-end" "text:id" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:id" (text'alphabetical_index_mark_endText'id v)
	]
instance XmlContent Text'alphabetical_index_mark where
    fromElem (CElem (Elem "text:alphabetical-index-mark" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:alphabetical-index-mark" (toAttrs as) [])]
instance XmlAttributes Text'alphabetical_index_mark where
    fromAttrs as =
	Text'alphabetical_index_mark
	  { text'alphabetical_index_markText'string_value = definiteA fromAttrToStr "text:alphabetical-index-mark" "text:string-value" as
	  , text'alphabetical_index_markText'key1 = possibleA fromAttrToStr "text:key1" as
	  , text'alphabetical_index_markText'key2 = possibleA fromAttrToStr "text:key2" as
	  , text'alphabetical_index_markText'main_etry = defaultA fromAttrToStr "false" "text:main-etry" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:string-value" (text'alphabetical_index_markText'string_value v)
	, maybeToAttr toAttrFrStr "text:key1" (text'alphabetical_index_markText'key1 v)
	, maybeToAttr toAttrFrStr "text:key2" (text'alphabetical_index_markText'key2 v)
	, defaultToAttr toAttrFrStr "text:main-etry" (text'alphabetical_index_markText'main_etry v)
	]
instance XmlContent Text'bibliography_configuration where
    fromElem (CElem (Elem "text:bibliography-configuration" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'bibliography_configuration (fromAttrs as) a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'bibliography_configuration as a) =
	[CElem (Elem "text:bibliography-configuration" (toAttrs as) (concatMap toElem a))]
instance XmlAttributes Text'bibliography_configuration_Attrs where
    fromAttrs as =
	Text'bibliography_configuration_Attrs
	  { text'bibliography_configurationText'prefix = possibleA fromAttrToStr "text:prefix" as
	  , text'bibliography_configurationText'suffix = possibleA fromAttrToStr "text:suffix" as
	  , text'bibliography_configurationText'sort_by_position = defaultA fromAttrToStr "true" "text:sort-by-position" as
	  , text'bibliography_configurationText'numbered_entries = defaultA fromAttrToStr "false" "text:numbered-entries" as
	  , text'bibliography_configurationFo'language = possibleA fromAttrToStr "fo:language" as
	  , text'bibliography_configurationFo'country = possibleA fromAttrToStr "fo:country" as
	  , text'bibliography_configurationText'sort_algorithm = possibleA fromAttrToStr "text:sort-algorithm" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "text:prefix" (text'bibliography_configurationText'prefix v)
	, maybeToAttr toAttrFrStr "text:suffix" (text'bibliography_configurationText'suffix v)
	, defaultToAttr toAttrFrStr "text:sort-by-position" (text'bibliography_configurationText'sort_by_position v)
	, defaultToAttr toAttrFrStr "text:numbered-entries" (text'bibliography_configurationText'numbered_entries v)
	, maybeToAttr toAttrFrStr "fo:language" (text'bibliography_configurationFo'language v)
	, maybeToAttr toAttrFrStr "fo:country" (text'bibliography_configurationFo'country v)
	, maybeToAttr toAttrFrStr "text:sort-algorithm" (text'bibliography_configurationText'sort_algorithm v)
	]
instance XmlContent Text'sort_key where
    fromElem (CElem (Elem "text:sort-key" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:sort-key" (toAttrs as) [])]
instance XmlAttributes Text'sort_key where
    fromAttrs as =
	Text'sort_key
	  { text'sort_keyText'key = definiteA fromAttrToTyp "text:sort-key" "text:key" as
	  , text'sort_keyText'sort_ascending = defaultA fromAttrToStr "true" "text:sort-ascending" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrTyp "text:key" (text'sort_keyText'key v)
	, defaultToAttr toAttrFrStr "text:sort-ascending" (text'sort_keyText'sort_ascending v)
	]
instance XmlAttrType Text'sort_key_text'key where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "address" = Just Text'sort_key_text'key_address
	    translate "annote" = Just Text'sort_key_text'key_annote
	    translate "author" = Just Text'sort_key_text'key_author
	    translate "bibliography-type" = Just Text'sort_key_text'key_bibliography_type
	    translate "booktitle" = Just Text'sort_key_text'key_booktitle
	    translate "chapter" = Just Text'sort_key_text'key_chapter
	    translate "custom1" = Just Text'sort_key_text'key_custom1
	    translate "custom2" = Just Text'sort_key_text'key_custom2
	    translate "custom3" = Just Text'sort_key_text'key_custom3
	    translate "custom4" = Just Text'sort_key_text'key_custom4
	    translate "custom5" = Just Text'sort_key_text'key_custom5
	    translate "edition" = Just Text'sort_key_text'key_edition
	    translate "editor" = Just Text'sort_key_text'key_editor
	    translate "howpublished" = Just Text'sort_key_text'key_howpublished
	    translate "identifier" = Just Text'sort_key_text'key_identifier
	    translate "institution" = Just Text'sort_key_text'key_institution
	    translate "isbn" = Just Text'sort_key_text'key_isbn
	    translate "journal" = Just Text'sort_key_text'key_journal
	    translate "month" = Just Text'sort_key_text'key_month
	    translate "note" = Just Text'sort_key_text'key_note
	    translate "number" = Just Text'sort_key_text'key_number
	    translate "organizations" = Just Text'sort_key_text'key_organizations
	    translate "pages" = Just Text'sort_key_text'key_pages
	    translate "publisher" = Just Text'sort_key_text'key_publisher
	    translate "report-type" = Just Text'sort_key_text'key_report_type
	    translate "school" = Just Text'sort_key_text'key_school
	    translate "series" = Just Text'sort_key_text'key_series
	    translate "title" = Just Text'sort_key_text'key_title
	    translate "url" = Just Text'sort_key_text'key_url
	    translate "volume" = Just Text'sort_key_text'key_volume
	    translate "year" = Just Text'sort_key_text'key_year
	    translate _ = Nothing
    toAttrFrTyp n Text'sort_key_text'key_address = Just (n, str2attr "address")
    toAttrFrTyp n Text'sort_key_text'key_annote = Just (n, str2attr "annote")
    toAttrFrTyp n Text'sort_key_text'key_author = Just (n, str2attr "author")
    toAttrFrTyp n Text'sort_key_text'key_bibliography_type = Just (n, str2attr "bibliography-type")
    toAttrFrTyp n Text'sort_key_text'key_booktitle = Just (n, str2attr "booktitle")
    toAttrFrTyp n Text'sort_key_text'key_chapter = Just (n, str2attr "chapter")
    toAttrFrTyp n Text'sort_key_text'key_custom1 = Just (n, str2attr "custom1")
    toAttrFrTyp n Text'sort_key_text'key_custom2 = Just (n, str2attr "custom2")
    toAttrFrTyp n Text'sort_key_text'key_custom3 = Just (n, str2attr "custom3")
    toAttrFrTyp n Text'sort_key_text'key_custom4 = Just (n, str2attr "custom4")
    toAttrFrTyp n Text'sort_key_text'key_custom5 = Just (n, str2attr "custom5")
    toAttrFrTyp n Text'sort_key_text'key_edition = Just (n, str2attr "edition")
    toAttrFrTyp n Text'sort_key_text'key_editor = Just (n, str2attr "editor")
    toAttrFrTyp n Text'sort_key_text'key_howpublished = Just (n, str2attr "howpublished")
    toAttrFrTyp n Text'sort_key_text'key_identifier = Just (n, str2attr "identifier")
    toAttrFrTyp n Text'sort_key_text'key_institution = Just (n, str2attr "institution")
    toAttrFrTyp n Text'sort_key_text'key_isbn = Just (n, str2attr "isbn")
    toAttrFrTyp n Text'sort_key_text'key_journal = Just (n, str2attr "journal")
    toAttrFrTyp n Text'sort_key_text'key_month = Just (n, str2attr "month")
    toAttrFrTyp n Text'sort_key_text'key_note = Just (n, str2attr "note")
    toAttrFrTyp n Text'sort_key_text'key_number = Just (n, str2attr "number")
    toAttrFrTyp n Text'sort_key_text'key_organizations = Just (n, str2attr "organizations")
    toAttrFrTyp n Text'sort_key_text'key_pages = Just (n, str2attr "pages")
    toAttrFrTyp n Text'sort_key_text'key_publisher = Just (n, str2attr "publisher")
    toAttrFrTyp n Text'sort_key_text'key_report_type = Just (n, str2attr "report-type")
    toAttrFrTyp n Text'sort_key_text'key_school = Just (n, str2attr "school")
    toAttrFrTyp n Text'sort_key_text'key_series = Just (n, str2attr "series")
    toAttrFrTyp n Text'sort_key_text'key_title = Just (n, str2attr "title")
    toAttrFrTyp n Text'sort_key_text'key_url = Just (n, str2attr "url")
    toAttrFrTyp n Text'sort_key_text'key_volume = Just (n, str2attr "volume")
    toAttrFrTyp n Text'sort_key_text'key_year = Just (n, str2attr "year")
instance XmlContent Text'linenumbering_configuration where
    fromElem (CElem (Elem "text:linenumbering-configuration" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'linenumbering_configuration (fromAttrs as) a), rest))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'linenumbering_configuration as a) =
	[CElem (Elem "text:linenumbering-configuration" (toAttrs as) (maybe [] toElem a))]
instance XmlAttributes Text'linenumbering_configuration_Attrs where
    fromAttrs as =
	Text'linenumbering_configuration_Attrs
	  { text'linenumbering_configurationText'style_name = possibleA fromAttrToStr "text:style-name" as
	  , text'linenumbering_configurationText'number_lines = defaultA fromAttrToStr "true" "text:number-lines" as
	  , text'linenumbering_configurationText'count_empty_lines = defaultA fromAttrToStr "true" "text:count-empty-lines" as
	  , text'linenumbering_configurationText'count_in_floating_frames = defaultA fromAttrToStr "false" "text:count-in-floating-frames" as
	  , text'linenumbering_configurationText'restart_numbering = defaultA fromAttrToStr "false" "text:restart-numbering" as
	  , text'linenumbering_configurationText'offset = possibleA fromAttrToStr "text:offset" as
	  , text'linenumbering_configurationStyle'num_format = defaultA fromAttrToTyp Text'linenumbering_configuration_style'num_format_1 "style:num-format" as
	  , text'linenumbering_configurationStyle'num_letter_sync = defaultA fromAttrToStr "false" "style:num-letter-sync" as
	  , text'linenumbering_configurationText'number_position = defaultA fromAttrToTyp Text'linenumbering_configuration_text'number_position_left "text:number-position" as
	  , text'linenumbering_configurationText'increment = possibleA fromAttrToStr "text:increment" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "text:style-name" (text'linenumbering_configurationText'style_name v)
	, defaultToAttr toAttrFrStr "text:number-lines" (text'linenumbering_configurationText'number_lines v)
	, defaultToAttr toAttrFrStr "text:count-empty-lines" (text'linenumbering_configurationText'count_empty_lines v)
	, defaultToAttr toAttrFrStr "text:count-in-floating-frames" (text'linenumbering_configurationText'count_in_floating_frames v)
	, defaultToAttr toAttrFrStr "text:restart-numbering" (text'linenumbering_configurationText'restart_numbering v)
	, maybeToAttr toAttrFrStr "text:offset" (text'linenumbering_configurationText'offset v)
	, defaultToAttr toAttrFrTyp "style:num-format" (text'linenumbering_configurationStyle'num_format v)
	, defaultToAttr toAttrFrStr "style:num-letter-sync" (text'linenumbering_configurationStyle'num_letter_sync v)
	, defaultToAttr toAttrFrTyp "text:number-position" (text'linenumbering_configurationText'number_position v)
	, maybeToAttr toAttrFrStr "text:increment" (text'linenumbering_configurationText'increment v)
	]
instance XmlAttrType Text'linenumbering_configuration_style'num_format where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "1" = Just Text'linenumbering_configuration_style'num_format_1
	    translate "a" = Just Text'linenumbering_configuration_style'num_format_a
	    translate "A" = Just Text'linenumbering_configuration_style'num_format_A
	    translate "i" = Just Text'linenumbering_configuration_style'num_format_i
	    translate "I" = Just Text'linenumbering_configuration_style'num_format_I
	    translate _ = Nothing
    toAttrFrTyp n Text'linenumbering_configuration_style'num_format_1 = Just (n, str2attr "1")
    toAttrFrTyp n Text'linenumbering_configuration_style'num_format_a = Just (n, str2attr "a")
    toAttrFrTyp n Text'linenumbering_configuration_style'num_format_A = Just (n, str2attr "A")
    toAttrFrTyp n Text'linenumbering_configuration_style'num_format_i = Just (n, str2attr "i")
    toAttrFrTyp n Text'linenumbering_configuration_style'num_format_I = Just (n, str2attr "I")
instance XmlAttrType Text'linenumbering_configuration_text'number_position where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "left" = Just Text'linenumbering_configuration_text'number_position_left
	    translate "rigth" = Just Text'linenumbering_configuration_text'number_position_rigth
	    translate "inner" = Just Text'linenumbering_configuration_text'number_position_inner
	    translate "outer" = Just Text'linenumbering_configuration_text'number_position_outer
	    translate _ = Nothing
    toAttrFrTyp n Text'linenumbering_configuration_text'number_position_left = Just (n, str2attr "left")
    toAttrFrTyp n Text'linenumbering_configuration_text'number_position_rigth = Just (n, str2attr "rigth")
    toAttrFrTyp n Text'linenumbering_configuration_text'number_position_inner = Just (n, str2attr "inner")
    toAttrFrTyp n Text'linenumbering_configuration_text'number_position_outer = Just (n, str2attr "outer")
instance XmlContent Text'linenumbering_separator where
    fromElem (CElem (Elem "text:linenumbering-separator" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'linenumbering_separator (fromAttrs as) a), rest))
	(definite fromText "text" "text:linenumbering-separator" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'linenumbering_separator as a) =
	[CElem (Elem "text:linenumbering-separator" (toAttrs as) (toText a))]
instance XmlAttributes Text'linenumbering_separator_Attrs where
    fromAttrs as =
	Text'linenumbering_separator_Attrs
	  { text'linenumbering_separatorText'increment = possibleA fromAttrToStr "text:increment" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "text:increment" (text'linenumbering_separatorText'increment v)
	]
instance XmlContent Text'script where
    fromElem (CElem (Elem "text:script" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'script (fromAttrs as) a), rest))
	(definite fromText "text" "text:script" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'script as a) =
	[CElem (Elem "text:script" (toAttrs as) (toText a))]
instance XmlAttributes Text'script_Attrs where
    fromAttrs as =
	Text'script_Attrs
	  { text'scriptScript'language = definiteA fromAttrToStr "text:script" "script:language" as
	  , text'scriptXlink'href = possibleA fromAttrToStr "xlink:href" as
	  , text'scriptXlink'type = defaultA fromAttrToTyp Text'script_xlink'type_simple "xlink:type" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "script:language" (text'scriptScript'language v)
	, maybeToAttr toAttrFrStr "xlink:href" (text'scriptXlink'href v)
	, defaultToAttr toAttrFrTyp "xlink:type" (text'scriptXlink'type v)
	]
instance XmlAttrType Text'script_xlink'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "simple" = Just Text'script_xlink'type_simple
	    translate _ = Nothing
    toAttrFrTyp n Text'script_xlink'type_simple = Just (n, str2attr "simple")
instance XmlContent Text'measure where
    fromElem (CElem (Elem "text:measure" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'measure (fromAttrs as) a), rest))
	(definite fromText "text" "text:measure" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'measure as a) =
	[CElem (Elem "text:measure" (toAttrs as) (toText a))]
instance XmlAttributes Text'measure_Attrs where
    fromAttrs as =
	Text'measure_Attrs
	  { text'measureText'kind = definiteA fromAttrToTyp "text:measure" "text:kind" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrTyp "text:kind" (text'measureText'kind v)
	]
instance XmlAttrType Text'measure_text'kind where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "value" = Just Text'measure_text'kind_value
	    translate "unit" = Just Text'measure_text'kind_unit
	    translate "gap" = Just Text'measure_text'kind_gap
	    translate _ = Nothing
    toAttrFrTyp n Text'measure_text'kind_value = Just (n, str2attr "value")
    toAttrFrTyp n Text'measure_text'kind_unit = Just (n, str2attr "unit")
    toAttrFrTyp n Text'measure_text'kind_gap = Just (n, str2attr "gap")
instance XmlContent Text'ruby where
    fromElem (CElem (Elem "text:ruby" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Text'ruby (fromAttrs as) a b), rest))
	   (definite fromElem "<text:ruby-text>" "text:ruby" ca))
	(definite fromElem "<text:ruby-base>" "text:ruby" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'ruby as a b) =
	[CElem (Elem "text:ruby" (toAttrs as) (toElem a ++ toElem b))]
instance XmlAttributes Text'ruby_Attrs where
    fromAttrs as =
	Text'ruby_Attrs
	  { text'rubyText'style_name = possibleA fromAttrToStr "text:style-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "text:style-name" (text'rubyText'style_name v)
	]
instance XmlContent Text'ruby_base where
    fromElem (CElem (Elem "text:ruby-base" [] c0):rest) =
	(\(a,ca)->
	   (Just (Text'ruby_base a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'ruby_base a) =
	[CElem (Elem "text:ruby-base" [] (concatMap toElem a))]
instance XmlContent Text'ruby_base_ where
    fromElem c0 =
	case (fromText c0) of
	(Just a,rest) -> (Just (Text'ruby_base_Str a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Text'ruby_base_Text'span a), rest)
		(_,_) ->
			case (fromElem c0) of
			(Just a,rest) -> (Just (Text'ruby_base_Text'tab_stop a), rest)
			(_,_) ->
				case (fromElem c0) of
				(Just a,rest) -> (Just (Text'ruby_base_Text's a), rest)
				(_,_) ->
					case (fromElem c0) of
					(Just a,rest) -> (Just (Text'ruby_base_Text'line_break a), rest)
					(_,_) ->
						case (fromElem c0) of
						(Just a,rest) -> (Just (Text'ruby_base_Text'footnote a), rest)
						(_,_) ->
							case (fromElem c0) of
							(Just a,rest) -> (Just (Text'ruby_base_Text'endnote a), rest)
							(_,_) ->
								case (fromElem c0) of
								(Just a,rest) -> (Just (Text'ruby_base_Text'a a), rest)
								(_,_) ->
									case (fromElem c0) of
									(Just a,rest) -> (Just (Text'ruby_base_Text'bookmark a), rest)
									(_,_) ->
										case (fromElem c0) of
										(Just a,rest) -> (Just (Text'ruby_base_Text'bookmark_start a), rest)
										(_,_) ->
											case (fromElem c0) of
											(Just a,rest) -> (Just (Text'ruby_base_Text'bookmark_end a), rest)
											(_,_) ->
												case (fromElem c0) of
												(Just a,rest) -> (Just (Text'ruby_base_Text'reference_mark a), rest)
												(_,_) ->
													case (fromElem c0) of
													(Just a,rest) -> (Just (Text'ruby_base_Text'reference_mark_start a), rest)
													(_,_) ->
														case (fromElem c0) of
														(Just a,rest) -> (Just (Text'ruby_base_Text'reference_mark_end a), rest)
														(_,_) ->
															case (fromElem c0) of
															(Just a,rest) -> (Just (Text'ruby_base_Text'date a), rest)
															(_,_) ->
																case (fromElem c0) of
																(Just a,rest) -> (Just (Text'ruby_base_Text'time a), rest)
																(_,_) ->
																	case (fromElem c0) of
																	(Just a,rest) -> (Just (Text'ruby_base_Text'page_number a), rest)
																	(_,_) ->
																		case (fromElem c0) of
																		(Just a,rest) -> (Just (Text'ruby_base_Text'page_continuation a), rest)
																		(_,_) ->
																			case (fromElem c0) of
																			(Just a,rest) -> (Just (Text'ruby_base_Text'sender_firstname a), rest)
																			(_,_) ->
																				case (fromElem c0) of
																				(Just a,rest) -> (Just (Text'ruby_base_Text'sender_lastname a), rest)
																				(_,_) ->
																					case (fromElem c0) of
																					(Just a,rest) -> (Just (Text'ruby_base_Text'sender_initials a), rest)
																					(_,_) ->
																						case (fromElem c0) of
																						(Just a,rest) -> (Just (Text'ruby_base_Text'sender_title a), rest)
																						(_,_) ->
																							case (fromElem c0) of
																							(Just a,rest) -> (Just (Text'ruby_base_Text'sender_position a), rest)
																							(_,_) ->
																								case (fromElem c0) of
																								(Just a,rest) -> (Just (Text'ruby_base_Text'sender_email a), rest)
																								(_,_) ->
																									case (fromElem c0) of
																									(Just a,rest) -> (Just (Text'ruby_base_Text'sender_phone_private a), rest)
																									(_,_) ->
																										case (fromElem c0) of
																										(Just a,rest) -> (Just (Text'ruby_base_Text'sender_fax a), rest)
																										(_,_) ->
																											case (fromElem c0) of
																											(Just a,rest) -> (Just (Text'ruby_base_Text'sender_company a), rest)
																											(_,_) ->
																												case (fromElem c0) of
																												(Just a,rest) -> (Just (Text'ruby_base_Text'sender_phone_work a), rest)
																												(_,_) ->
																													case (fromElem c0) of
																													(Just a,rest) -> (Just (Text'ruby_base_Text'sender_street a), rest)
																													(_,_) ->
																														case (fromElem c0) of
																														(Just a,rest) -> (Just (Text'ruby_base_Text'sender_city a), rest)
																														(_,_) ->
																															case (fromElem c0) of
																															(Just a,rest) -> (Just (Text'ruby_base_Text'sender_postal_code a), rest)
																															(_,_) ->
																																case (fromElem c0) of
																																(Just a,rest) -> (Just (Text'ruby_base_Text'sender_country a), rest)
																																(_,_) ->
																																	case (fromElem c0) of
																																	(Just a,rest) -> (Just (Text'ruby_base_Text'sender_state_or_province a), rest)
																																	(_,_) ->
																																		case (fromElem c0) of
																																		(Just a,rest) -> (Just (Text'ruby_base_Text'author_name a), rest)
																																		(_,_) ->
																																			case (fromElem c0) of
																																			(Just a,rest) -> (Just (Text'ruby_base_Text'author_initials a), rest)
																																			(_,_) ->
																																				case (fromElem c0) of
																																				(Just a,rest) -> (Just (Text'ruby_base_Text'placeholder a), rest)
																																				(_,_) ->
																																					case (fromElem c0) of
																																					(Just a,rest) -> (Just (Text'ruby_base_Text'variable_set a), rest)
																																					(_,_) ->
																																						case (fromElem c0) of
																																						(Just a,rest) -> (Just (Text'ruby_base_Text'variable_get a), rest)
																																						(_,_) ->
																																							case (fromElem c0) of
																																							(Just a,rest) -> (Just (Text'ruby_base_Text'variable_input a), rest)
																																							(_,_) ->
																																								case (fromElem c0) of
																																								(Just a,rest) -> (Just (Text'ruby_base_Text'user_field_get a), rest)
																																								(_,_) ->
																																									case (fromElem c0) of
																																									(Just a,rest) -> (Just (Text'ruby_base_Text'user_field_input a), rest)
																																									(_,_) ->
																																										case (fromElem c0) of
																																										(Just a,rest) -> (Just (Text'ruby_base_Text'sequence a), rest)
																																										(_,_) ->
																																											case (fromElem c0) of
																																											(Just a,rest) -> (Just (Text'ruby_base_Text'expression a), rest)
																																											(_,_) ->
																																												case (fromElem c0) of
																																												(Just a,rest) -> (Just (Text'ruby_base_Text'text_input a), rest)
																																												(_,_) ->
																																													case (fromElem c0) of
																																													(Just a,rest) -> (Just (Text'ruby_base_Text'database_display a), rest)
																																													(_,_) ->
																																														case (fromElem c0) of
																																														(Just a,rest) -> (Just (Text'ruby_base_Text'database_next a), rest)
																																														(_,_) ->
																																															case (fromElem c0) of
																																															(Just a,rest) -> (Just (Text'ruby_base_Text'database_select a), rest)
																																															(_,_) ->
																																																case (fromElem c0) of
																																																(Just a,rest) -> (Just (Text'ruby_base_Text'database_row_number a), rest)
																																																(_,_) ->
																																																	case (fromElem c0) of
																																																	(Just a,rest) -> (Just (Text'ruby_base_Text'database_name a), rest)
																																																	(_,_) ->
																																																		case (fromElem c0) of
																																																		(Just a,rest) -> (Just (Text'ruby_base_Text'initial_creator a), rest)
																																																		(_,_) ->
																																																			case (fromElem c0) of
																																																			(Just a,rest) -> (Just (Text'ruby_base_Text'creation_date a), rest)
																																																			(_,_) ->
																																																				case (fromElem c0) of
																																																				(Just a,rest) -> (Just (Text'ruby_base_Text'creation_time a), rest)
																																																				(_,_) ->
																																																					case (fromElem c0) of
																																																					(Just a,rest) -> (Just (Text'ruby_base_Text'description a), rest)
																																																					(_,_) ->
																																																						case (fromElem c0) of
																																																						(Just a,rest) -> (Just (Text'ruby_base_Text'user_defined a), rest)
																																																						(_,_) ->
																																																							case (fromElem c0) of
																																																							(Just a,rest) -> (Just (Text'ruby_base_Text'print_time a), rest)
																																																							(_,_) ->
																																																								case (fromElem c0) of
																																																								(Just a,rest) -> (Just (Text'ruby_base_Text'print_date a), rest)
																																																								(_,_) ->
																																																									case (fromElem c0) of
																																																									(Just a,rest) -> (Just (Text'ruby_base_Text'printed_by a), rest)
																																																									(_,_) ->
																																																										case (fromElem c0) of
																																																										(Just a,rest) -> (Just (Text'ruby_base_Text'title a), rest)
																																																										(_,_) ->
																																																											case (fromElem c0) of
																																																											(Just a,rest) -> (Just (Text'ruby_base_Text'subject a), rest)
																																																											(_,_) ->
																																																												case (fromElem c0) of
																																																												(Just a,rest) -> (Just (Text'ruby_base_Text'keywords a), rest)
																																																												(_,_) ->
																																																													case (fromElem c0) of
																																																													(Just a,rest) -> (Just (Text'ruby_base_Text'editing_cycles a), rest)
																																																													(_,_) ->
																																																														case (fromElem c0) of
																																																														(Just a,rest) -> (Just (Text'ruby_base_Text'editing_duration a), rest)
																																																														(_,_) ->
																																																															case (fromElem c0) of
																																																															(Just a,rest) -> (Just (Text'ruby_base_Text'modification_time a), rest)
																																																															(_,_) ->
																																																																case (fromElem c0) of
																																																																(Just a,rest) -> (Just (Text'ruby_base_Text'modification_date a), rest)
																																																																(_,_) ->
																																																																	case (fromElem c0) of
																																																																	(Just a,rest) -> (Just (Text'ruby_base_Text'creator a), rest)
																																																																	(_,_) ->
																																																																		case (fromElem c0) of
																																																																		(Just a,rest) -> (Just (Text'ruby_base_Text'conditional_text a), rest)
																																																																		(_,_) ->
																																																																			case (fromElem c0) of
																																																																			(Just a,rest) -> (Just (Text'ruby_base_Text'hidden_text a), rest)
																																																																			(_,_) ->
																																																																				case (fromElem c0) of
																																																																				(Just a,rest) -> (Just (Text'ruby_base_Text'hidden_paragraph a), rest)
																																																																				(_,_) ->
																																																																					case (fromElem c0) of
																																																																					(Just a,rest) -> (Just (Text'ruby_base_Text'chapter a), rest)
																																																																					(_,_) ->
																																																																						case (fromElem c0) of
																																																																						(Just a,rest) -> (Just (Text'ruby_base_Text'file_name a), rest)
																																																																						(_,_) ->
																																																																							case (fromElem c0) of
																																																																							(Just a,rest) -> (Just (Text'ruby_base_Text'template_name a), rest)
																																																																							(_,_) ->
																																																																								case (fromElem c0) of
																																																																								(Just a,rest) -> (Just (Text'ruby_base_Text'page_variable_set a), rest)
																																																																								(_,_) ->
																																																																									case (fromElem c0) of
																																																																									(Just a,rest) -> (Just (Text'ruby_base_Text'page_variable_get a), rest)
																																																																									(_,_) ->
																																																																										case (fromElem c0) of
																																																																										(Just a,rest) -> (Just (Text'ruby_base_Text'execute_macro a), rest)
																																																																										(_,_) ->
																																																																											case (fromElem c0) of
																																																																											(Just a,rest) -> (Just (Text'ruby_base_Text'dde_connection a), rest)
																																																																											(_,_) ->
																																																																												case (fromElem c0) of
																																																																												(Just a,rest) -> (Just (Text'ruby_base_Text'reference_ref a), rest)
																																																																												(_,_) ->
																																																																													case (fromElem c0) of
																																																																													(Just a,rest) -> (Just (Text'ruby_base_Text'sequence_ref a), rest)
																																																																													(_,_) ->
																																																																														case (fromElem c0) of
																																																																														(Just a,rest) -> (Just (Text'ruby_base_Text'bookmark_ref a), rest)
																																																																														(_,_) ->
																																																																															case (fromElem c0) of
																																																																															(Just a,rest) -> (Just (Text'ruby_base_Text'footnote_ref a), rest)
																																																																															(_,_) ->
																																																																																case (fromElem c0) of
																																																																																(Just a,rest) -> (Just (Text'ruby_base_Text'endnote_ref a), rest)
																																																																																(_,_) ->
																																																																																	case (fromElem c0) of
																																																																																	(Just a,rest) -> (Just (Text'ruby_base_Text'sheet_name a), rest)
																																																																																	(_,_) ->
																																																																																		case (fromElem c0) of
																																																																																		(Just a,rest) -> (Just (Text'ruby_base_Text'bibliography_mark a), rest)
																																																																																		(_,_) ->
																																																																																			case (fromElem c0) of
																																																																																			(Just a,rest) -> (Just (Text'ruby_base_Text'page_count a), rest)
																																																																																			(_,_) ->
																																																																																				case (fromElem c0) of
																																																																																				(Just a,rest) -> (Just (Text'ruby_base_Text'paragraph_count a), rest)
																																																																																				(_,_) ->
																																																																																					case (fromElem c0) of
																																																																																					(Just a,rest) -> (Just (Text'ruby_base_Text'word_count a), rest)
																																																																																					(_,_) ->
																																																																																						case (fromElem c0) of
																																																																																						(Just a,rest) -> (Just (Text'ruby_base_Text'character_count a), rest)
																																																																																						(_,_) ->
																																																																																							case (fromElem c0) of
																																																																																							(Just a,rest) -> (Just (Text'ruby_base_Text'table_count a), rest)
																																																																																							(_,_) ->
																																																																																								case (fromElem c0) of
																																																																																								(Just a,rest) -> (Just (Text'ruby_base_Text'image_count a), rest)
																																																																																								(_,_) ->
																																																																																									case (fromElem c0) of
																																																																																									(Just a,rest) -> (Just (Text'ruby_base_Text'object_count a), rest)
																																																																																									(_,_) ->
																																																																																										case (fromElem c0) of
																																																																																										(Just a,rest) -> (Just (Text'ruby_base_Office'annotation a), rest)
																																																																																										(_,_) ->
																																																																																											case (fromElem c0) of
																																																																																											(Just a,rest) -> (Just (Text'ruby_base_Text'script a), rest)
																																																																																											(_,_) ->
																																																																																												case (fromElem c0) of
																																																																																												(Just a,rest) -> (Just (Text'ruby_base_Text'measure a), rest)
																																																																																												(_,_) ->
																																																																																													case (fromElem c0) of
																																																																																													(Just a,rest) -> (Just (Text'ruby_base_Draw'rect a), rest)
																																																																																													(_,_) ->
																																																																																														case (fromElem c0) of
																																																																																														(Just a,rest) -> (Just (Text'ruby_base_Draw'line a), rest)
																																																																																														(_,_) ->
																																																																																															case (fromElem c0) of
																																																																																															(Just a,rest) -> (Just (Text'ruby_base_Draw'polyline a), rest)
																																																																																															(_,_) ->
																																																																																																case (fromElem c0) of
																																																																																																(Just a,rest) -> (Just (Text'ruby_base_Draw'polygon a), rest)
																																																																																																(_,_) ->
																																																																																																	case (fromElem c0) of
																																																																																																	(Just a,rest) -> (Just (Text'ruby_base_Draw'path a), rest)
																																																																																																	(_,_) ->
																																																																																																		case (fromElem c0) of
																																																																																																		(Just a,rest) -> (Just (Text'ruby_base_Draw'circle a), rest)
																																																																																																		(_,_) ->
																																																																																																			case (fromElem c0) of
																																																																																																			(Just a,rest) -> (Just (Text'ruby_base_Draw'ellipse a), rest)
																																																																																																			(_,_) ->
																																																																																																				case (fromElem c0) of
																																																																																																				(Just a,rest) -> (Just (Text'ruby_base_Draw'g a), rest)
																																																																																																				(_,_) ->
																																																																																																					case (fromElem c0) of
																																																																																																					(Just a,rest) -> (Just (Text'ruby_base_Draw'page_thumbnail a), rest)
																																																																																																					(_,_) ->
																																																																																																						case (fromElem c0) of
																																																																																																						(Just a,rest) -> (Just (Text'ruby_base_Draw'text_box a), rest)
																																																																																																						(_,_) ->
																																																																																																							case (fromElem c0) of
																																																																																																							(Just a,rest) -> (Just (Text'ruby_base_Draw'image a), rest)
																																																																																																							(_,_) ->
																																																																																																								case (fromElem c0) of
																																																																																																								(Just a,rest) -> (Just (Text'ruby_base_Draw'object a), rest)
																																																																																																								(_,_) ->
																																																																																																									case (fromElem c0) of
																																																																																																									(Just a,rest) -> (Just (Text'ruby_base_Draw'object_ole a), rest)
																																																																																																									(_,_) ->
																																																																																																										case (fromElem c0) of
																																																																																																										(Just a,rest) -> (Just (Text'ruby_base_Draw'applet a), rest)
																																																																																																										(_,_) ->
																																																																																																											case (fromElem c0) of
																																																																																																											(Just a,rest) -> (Just (Text'ruby_base_Draw'floating_frame a), rest)
																																																																																																											(_,_) ->
																																																																																																												case (fromElem c0) of
																																																																																																												(Just a,rest) -> (Just (Text'ruby_base_Draw'plugin a), rest)
																																																																																																												(_,_) ->
																																																																																																													case (fromElem c0) of
																																																																																																													(Just a,rest) -> (Just (Text'ruby_base_Draw'measure a), rest)
																																																																																																													(_,_) ->
																																																																																																														case (fromElem c0) of
																																																																																																														(Just a,rest) -> (Just (Text'ruby_base_Draw'caption a), rest)
																																																																																																														(_,_) ->
																																																																																																															case (fromElem c0) of
																																																																																																															(Just a,rest) -> (Just (Text'ruby_base_Draw'connector a), rest)
																																																																																																															(_,_) ->
																																																																																																																case (fromElem c0) of
																																																																																																																(Just a,rest) -> (Just (Text'ruby_base_Chart'chart a), rest)
																																																																																																																(_,_) ->
																																																																																																																	case (fromElem c0) of
																																																																																																																	(Just a,rest) -> (Just (Text'ruby_base_Dr3d'scene a), rest)
																																																																																																																	(_,_) ->
																																																																																																																		case (fromElem c0) of
																																																																																																																		(Just a,rest) -> (Just (Text'ruby_base_Draw'control a), rest)
																																																																																																																		(_,_) ->
																																																																																																																			case (fromElem c0) of
																																																																																																																			(Just a,rest) -> (Just (Text'ruby_base_Text'toc_mark_start a), rest)
																																																																																																																			(_,_) ->
																																																																																																																				case (fromElem c0) of
																																																																																																																				(Just a,rest) -> (Just (Text'ruby_base_Text'toc_mark_end a), rest)
																																																																																																																				(_,_) ->
																																																																																																																					case (fromElem c0) of
																																																																																																																					(Just a,rest) -> (Just (Text'ruby_base_Text'toc_mark a), rest)
																																																																																																																					(_,_) ->
																																																																																																																						case (fromElem c0) of
																																																																																																																						(Just a,rest) -> (Just (Text'ruby_base_Text'user_index_mark_start a), rest)
																																																																																																																						(_,_) ->
																																																																																																																							case (fromElem c0) of
																																																																																																																							(Just a,rest) -> (Just (Text'ruby_base_Text'user_index_mark_end a), rest)
																																																																																																																							(_,_) ->
																																																																																																																								case (fromElem c0) of
																																																																																																																								(Just a,rest) -> (Just (Text'ruby_base_Text'user_index_mark a), rest)
																																																																																																																								(_,_) ->
																																																																																																																									case (fromElem c0) of
																																																																																																																									(Just a,rest) -> (Just (Text'ruby_base_Text'alphabetical_index_mark_start a), rest)
																																																																																																																									(_,_) ->
																																																																																																																										case (fromElem c0) of
																																																																																																																										(Just a,rest) -> (Just (Text'ruby_base_Text'alphabetical_index_mark_end a), rest)
																																																																																																																										(_,_) ->
																																																																																																																											case (fromElem c0) of
																																																																																																																											(Just a,rest) -> (Just (Text'ruby_base_Text'alphabetical_index_mark a), rest)
																																																																																																																											(_,_) ->
																																																																																																																												case (fromElem c0) of
																																																																																																																												(Just a,rest) -> (Just (Text'ruby_base_Text'change a), rest)
																																																																																																																												(_,_) ->
																																																																																																																													case (fromElem c0) of
																																																																																																																													(Just a,rest) -> (Just (Text'ruby_base_Text'change_start a), rest)
																																																																																																																													(_,_) ->
																																																																																																																														case (fromElem c0) of
																																																																																																																														(Just a,rest) -> (Just (Text'ruby_base_Text'change_end a), rest)
																																																																																																																														(_,_) ->
																																																																																																																															case (fromElem c0) of
																																																																																																																															(Just a,rest) -> (Just (Text'ruby_base_Draw'a a), rest)
																																																																																																																															(_,_) ->
																																																																																																																																case (fromElem c0) of
																																																																																																																																(Just a,rest) -> (Just (Text'ruby_base_Text'ruby a), rest)
																																																																																																																																(_,_) ->
																																																																																																																																    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'ruby_base_Str a) = toText a
    toElem (Text'ruby_base_Text'span a) = toElem a
    toElem (Text'ruby_base_Text'tab_stop a) = toElem a
    toElem (Text'ruby_base_Text's a) = toElem a
    toElem (Text'ruby_base_Text'line_break a) = toElem a
    toElem (Text'ruby_base_Text'footnote a) = toElem a
    toElem (Text'ruby_base_Text'endnote a) = toElem a
    toElem (Text'ruby_base_Text'a a) = toElem a
    toElem (Text'ruby_base_Text'bookmark a) = toElem a
    toElem (Text'ruby_base_Text'bookmark_start a) = toElem a
    toElem (Text'ruby_base_Text'bookmark_end a) = toElem a
    toElem (Text'ruby_base_Text'reference_mark a) = toElem a
    toElem (Text'ruby_base_Text'reference_mark_start a) = toElem a
    toElem (Text'ruby_base_Text'reference_mark_end a) = toElem a
    toElem (Text'ruby_base_Text'date a) = toElem a
    toElem (Text'ruby_base_Text'time a) = toElem a
    toElem (Text'ruby_base_Text'page_number a) = toElem a
    toElem (Text'ruby_base_Text'page_continuation a) = toElem a
    toElem (Text'ruby_base_Text'sender_firstname a) = toElem a
    toElem (Text'ruby_base_Text'sender_lastname a) = toElem a
    toElem (Text'ruby_base_Text'sender_initials a) = toElem a
    toElem (Text'ruby_base_Text'sender_title a) = toElem a
    toElem (Text'ruby_base_Text'sender_position a) = toElem a
    toElem (Text'ruby_base_Text'sender_email a) = toElem a
    toElem (Text'ruby_base_Text'sender_phone_private a) = toElem a
    toElem (Text'ruby_base_Text'sender_fax a) = toElem a
    toElem (Text'ruby_base_Text'sender_company a) = toElem a
    toElem (Text'ruby_base_Text'sender_phone_work a) = toElem a
    toElem (Text'ruby_base_Text'sender_street a) = toElem a
    toElem (Text'ruby_base_Text'sender_city a) = toElem a
    toElem (Text'ruby_base_Text'sender_postal_code a) = toElem a
    toElem (Text'ruby_base_Text'sender_country a) = toElem a
    toElem (Text'ruby_base_Text'sender_state_or_province a) = toElem a
    toElem (Text'ruby_base_Text'author_name a) = toElem a
    toElem (Text'ruby_base_Text'author_initials a) = toElem a
    toElem (Text'ruby_base_Text'placeholder a) = toElem a
    toElem (Text'ruby_base_Text'variable_set a) = toElem a
    toElem (Text'ruby_base_Text'variable_get a) = toElem a
    toElem (Text'ruby_base_Text'variable_input a) = toElem a
    toElem (Text'ruby_base_Text'user_field_get a) = toElem a
    toElem (Text'ruby_base_Text'user_field_input a) = toElem a
    toElem (Text'ruby_base_Text'sequence a) = toElem a
    toElem (Text'ruby_base_Text'expression a) = toElem a
    toElem (Text'ruby_base_Text'text_input a) = toElem a
    toElem (Text'ruby_base_Text'database_display a) = toElem a
    toElem (Text'ruby_base_Text'database_next a) = toElem a
    toElem (Text'ruby_base_Text'database_select a) = toElem a
    toElem (Text'ruby_base_Text'database_row_number a) = toElem a
    toElem (Text'ruby_base_Text'database_name a) = toElem a
    toElem (Text'ruby_base_Text'initial_creator a) = toElem a
    toElem (Text'ruby_base_Text'creation_date a) = toElem a
    toElem (Text'ruby_base_Text'creation_time a) = toElem a
    toElem (Text'ruby_base_Text'description a) = toElem a
    toElem (Text'ruby_base_Text'user_defined a) = toElem a
    toElem (Text'ruby_base_Text'print_time a) = toElem a
    toElem (Text'ruby_base_Text'print_date a) = toElem a
    toElem (Text'ruby_base_Text'printed_by a) = toElem a
    toElem (Text'ruby_base_Text'title a) = toElem a
    toElem (Text'ruby_base_Text'subject a) = toElem a
    toElem (Text'ruby_base_Text'keywords a) = toElem a
    toElem (Text'ruby_base_Text'editing_cycles a) = toElem a
    toElem (Text'ruby_base_Text'editing_duration a) = toElem a
    toElem (Text'ruby_base_Text'modification_time a) = toElem a
    toElem (Text'ruby_base_Text'modification_date a) = toElem a
    toElem (Text'ruby_base_Text'creator a) = toElem a
    toElem (Text'ruby_base_Text'conditional_text a) = toElem a
    toElem (Text'ruby_base_Text'hidden_text a) = toElem a
    toElem (Text'ruby_base_Text'hidden_paragraph a) = toElem a
    toElem (Text'ruby_base_Text'chapter a) = toElem a
    toElem (Text'ruby_base_Text'file_name a) = toElem a
    toElem (Text'ruby_base_Text'template_name a) = toElem a
    toElem (Text'ruby_base_Text'page_variable_set a) = toElem a
    toElem (Text'ruby_base_Text'page_variable_get a) = toElem a
    toElem (Text'ruby_base_Text'execute_macro a) = toElem a
    toElem (Text'ruby_base_Text'dde_connection a) = toElem a
    toElem (Text'ruby_base_Text'reference_ref a) = toElem a
    toElem (Text'ruby_base_Text'sequence_ref a) = toElem a
    toElem (Text'ruby_base_Text'bookmark_ref a) = toElem a
    toElem (Text'ruby_base_Text'footnote_ref a) = toElem a
    toElem (Text'ruby_base_Text'endnote_ref a) = toElem a
    toElem (Text'ruby_base_Text'sheet_name a) = toElem a
    toElem (Text'ruby_base_Text'bibliography_mark a) = toElem a
    toElem (Text'ruby_base_Text'page_count a) = toElem a
    toElem (Text'ruby_base_Text'paragraph_count a) = toElem a
    toElem (Text'ruby_base_Text'word_count a) = toElem a
    toElem (Text'ruby_base_Text'character_count a) = toElem a
    toElem (Text'ruby_base_Text'table_count a) = toElem a
    toElem (Text'ruby_base_Text'image_count a) = toElem a
    toElem (Text'ruby_base_Text'object_count a) = toElem a
    toElem (Text'ruby_base_Office'annotation a) = toElem a
    toElem (Text'ruby_base_Text'script a) = toElem a
    toElem (Text'ruby_base_Text'measure a) = toElem a
    toElem (Text'ruby_base_Draw'rect a) = toElem a
    toElem (Text'ruby_base_Draw'line a) = toElem a
    toElem (Text'ruby_base_Draw'polyline a) = toElem a
    toElem (Text'ruby_base_Draw'polygon a) = toElem a
    toElem (Text'ruby_base_Draw'path a) = toElem a
    toElem (Text'ruby_base_Draw'circle a) = toElem a
    toElem (Text'ruby_base_Draw'ellipse a) = toElem a
    toElem (Text'ruby_base_Draw'g a) = toElem a
    toElem (Text'ruby_base_Draw'page_thumbnail a) = toElem a
    toElem (Text'ruby_base_Draw'text_box a) = toElem a
    toElem (Text'ruby_base_Draw'image a) = toElem a
    toElem (Text'ruby_base_Draw'object a) = toElem a
    toElem (Text'ruby_base_Draw'object_ole a) = toElem a
    toElem (Text'ruby_base_Draw'applet a) = toElem a
    toElem (Text'ruby_base_Draw'floating_frame a) = toElem a
    toElem (Text'ruby_base_Draw'plugin a) = toElem a
    toElem (Text'ruby_base_Draw'measure a) = toElem a
    toElem (Text'ruby_base_Draw'caption a) = toElem a
    toElem (Text'ruby_base_Draw'connector a) = toElem a
    toElem (Text'ruby_base_Chart'chart a) = toElem a
    toElem (Text'ruby_base_Dr3d'scene a) = toElem a
    toElem (Text'ruby_base_Draw'control a) = toElem a
    toElem (Text'ruby_base_Text'toc_mark_start a) = toElem a
    toElem (Text'ruby_base_Text'toc_mark_end a) = toElem a
    toElem (Text'ruby_base_Text'toc_mark a) = toElem a
    toElem (Text'ruby_base_Text'user_index_mark_start a) = toElem a
    toElem (Text'ruby_base_Text'user_index_mark_end a) = toElem a
    toElem (Text'ruby_base_Text'user_index_mark a) = toElem a
    toElem (Text'ruby_base_Text'alphabetical_index_mark_start a) = toElem a
    toElem (Text'ruby_base_Text'alphabetical_index_mark_end a) = toElem a
    toElem (Text'ruby_base_Text'alphabetical_index_mark a) = toElem a
    toElem (Text'ruby_base_Text'change a) = toElem a
    toElem (Text'ruby_base_Text'change_start a) = toElem a
    toElem (Text'ruby_base_Text'change_end a) = toElem a
    toElem (Text'ruby_base_Draw'a a) = toElem a
    toElem (Text'ruby_base_Text'ruby a) = toElem a
instance XmlContent Text'ruby_text where
    fromElem (CElem (Elem "text:ruby-text" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'ruby_text (fromAttrs as) a), rest))
	(definite fromText "text" "text:ruby-text" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'ruby_text as a) =
	[CElem (Elem "text:ruby-text" (toAttrs as) (toText a))]
instance XmlAttributes Text'ruby_text_Attrs where
    fromAttrs as =
	Text'ruby_text_Attrs
	  { text'ruby_textText'style_name = possibleA fromAttrToStr "text:style-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "text:style-name" (text'ruby_textText'style_name v)
	]
instance XmlContent Text'change where
    fromElem (CElem (Elem "text:change" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:change" (toAttrs as) [])]
instance XmlAttributes Text'change where
    fromAttrs as =
	Text'change
	  { text'changeText'change_id = definiteA fromAttrToStr "text:change" "text:change-id" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:change-id" (text'changeText'change_id v)
	]
instance XmlContent Text'change_start where
    fromElem (CElem (Elem "text:change-start" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:change-start" (toAttrs as) [])]
instance XmlAttributes Text'change_start where
    fromAttrs as =
	Text'change_start
	  { text'change_startText'change_id = definiteA fromAttrToStr "text:change-start" "text:change-id" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:change-id" (text'change_startText'change_id v)
	]
instance XmlContent Text'change_end where
    fromElem (CElem (Elem "text:change-end" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "text:change-end" (toAttrs as) [])]
instance XmlAttributes Text'change_end where
    fromAttrs as =
	Text'change_end
	  { text'change_endText'change_id = definiteA fromAttrToStr "text:change-end" "text:change-id" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:change-id" (text'change_endText'change_id v)
	]
instance XmlContent Text'tracked_changes where
    fromElem (CElem (Elem "text:tracked-changes" as c0):rest) =
	(\(a,ca)->
	   (Just (Text'tracked_changes (fromAttrs as) a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'tracked_changes as a) =
	[CElem (Elem "text:tracked-changes" (toAttrs as) (concatMap toElem a))]
instance XmlAttributes Text'tracked_changes_Attrs where
    fromAttrs as =
	Text'tracked_changes_Attrs
	  { text'tracked_changesText'track_changes = defaultA fromAttrToStr "true" "text:track-changes" as
	  , text'tracked_changesText'protection_key = possibleA fromAttrToStr "text:protection-key" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "text:track-changes" (text'tracked_changesText'track_changes v)
	, maybeToAttr toAttrFrStr "text:protection-key" (text'tracked_changesText'protection_key v)
	]
instance XmlContent Text'changed_region where
    fromElem (CElem (Elem "text:changed-region" as c0):rest) =
	case (fromElem c0) of
	(Just a,_) -> (Just (Text'changed_regionText'insertion (fromAttrs as) a), rest)
	(_,_) ->
		case (\(a,ca)->
			(\(b,cb)->
			   (a,b,cb))
			(fromElem ca))
		     (fromElem c0) of
		(Just a,b,_) -> (Just (Text'changed_regionText'deletion_Text'insertion (fromAttrs as) a
												      b), rest)
		(_,Nothing,_) ->
			case (fromElem c0) of
			(Just a,_) -> (Just (Text'changed_regionText'format_change (fromAttrs as) a), rest)
			(_,_) ->
			    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'changed_regionText'insertion as a) = [CElem (Elem "text:changed-region" (toAttrs as) (toElem a) )]
    toElem (Text'changed_regionText'deletion_Text'insertion as a
							       b) = [CElem (Elem "text:changed-region" (toAttrs as) (toElem a
														     ++
														     maybe [] toElem b) )]
    toElem (Text'changed_regionText'format_change as a) = [CElem (Elem "text:changed-region" (toAttrs as) (toElem a) )]
instance XmlAttributes Text'changed_region_Attrs where
    fromAttrs as =
	Text'changed_region_Attrs
	  { text'changed_regionText'id = definiteA fromAttrToStr "text:changed-region" "text:id" as
	  , text'changed_regionText'merge_last_paragraph = defaultA fromAttrToStr "true" "text:merge-last-paragraph" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "text:id" (text'changed_regionText'id v)
	, defaultToAttr toAttrFrStr "text:merge-last-paragraph" (text'changed_regionText'merge_last_paragraph v)
	]
instance XmlContent Text'insertion where
    fromElem (CElem (Elem "text:insertion" [] c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Text'insertion a b), rest))
	   (many fromElem ca))
	(definite fromElem "<office:change-info>" "text:insertion" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'insertion a b) =
	[CElem (Elem "text:insertion" [] (toElem a ++ concatMap toElem b))]
instance XmlContent Text'deletion where
    fromElem (CElem (Elem "text:deletion" [] c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Text'deletion a b), rest))
	   (many fromElem ca))
	(definite fromElem "<office:change-info>" "text:deletion" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'deletion a b) =
	[CElem (Elem "text:deletion" [] (toElem a ++ concatMap toElem b))]
instance XmlContent Text'format_change where
    fromElem (CElem (Elem "text:format-change" [] c0):rest) =
	(\(a,ca)->
	   (Just (Text'format_change a), rest))
	(definite fromElem "<office:change-info>" "text:format-change" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Text'format_change a) =
	[CElem (Elem "text:format-change" [] (toElem a))]
instance XmlContent Table'calculation_settings where
    fromElem (CElem (Elem "table:calculation-settings" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Table'calculation_settings (fromAttrs as) a b), rest))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'calculation_settings as a b) =
	[CElem (Elem "table:calculation-settings" (toAttrs as) (maybe [] toElem a
								++ maybe [] toElem b))]
instance XmlAttributes Table'calculation_settings_Attrs where
    fromAttrs as =
	Table'calculation_settings_Attrs
	  { table'calculation_settingsTable'case_sensitive = defaultA fromAttrToStr "true" "table:case-sensitive" as
	  , table'calculation_settingsTable'precision_as_shown = defaultA fromAttrToStr "false" "table:precision-as-shown" as
	  , table'calculation_settingsTable'search_criteria_must_apply_to_whole_cell = defaultA fromAttrToStr "true" "table:search-criteria-must-apply-to-whole-cell" as
	  , table'calculation_settingsTable'automatic_find_labels = defaultA fromAttrToStr "true" "table:automatic-find-labels" as
	  , table'calculation_settingsTable'use_regular_expressions = defaultA fromAttrToStr "true" "table:use-regular-expressions" as
	  , table'calculation_settingsTable'null_year = defaultA fromAttrToStr "1930" "table:null-year" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "table:case-sensitive" (table'calculation_settingsTable'case_sensitive v)
	, defaultToAttr toAttrFrStr "table:precision-as-shown" (table'calculation_settingsTable'precision_as_shown v)
	, defaultToAttr toAttrFrStr "table:search-criteria-must-apply-to-whole-cell" (table'calculation_settingsTable'search_criteria_must_apply_to_whole_cell v)
	, defaultToAttr toAttrFrStr "table:automatic-find-labels" (table'calculation_settingsTable'automatic_find_labels v)
	, defaultToAttr toAttrFrStr "table:use-regular-expressions" (table'calculation_settingsTable'use_regular_expressions v)
	, defaultToAttr toAttrFrStr "table:null-year" (table'calculation_settingsTable'null_year v)
	]
instance XmlContent Table'null_date where
    fromElem (CElem (Elem "table:null-date" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "table:null-date" (toAttrs as) [])]
instance XmlAttributes Table'null_date where
    fromAttrs as =
	Table'null_date
	  { table'null_dateTable'value_type = defaultA fromAttrToTyp Table'null_date_table'value_type_date "table:value-type" as
	  , table'null_dateTable'date_value = defaultA fromAttrToStr "1899-12-30" "table:date-value" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrTyp "table:value-type" (table'null_dateTable'value_type v)
	, defaultToAttr toAttrFrStr "table:date-value" (table'null_dateTable'date_value v)
	]
instance XmlAttrType Table'null_date_table'value_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "float" = Just Table'null_date_table'value_type_float
	    translate "time" = Just Table'null_date_table'value_type_time
	    translate "date" = Just Table'null_date_table'value_type_date
	    translate "percentage" = Just Table'null_date_table'value_type_percentage
	    translate "currency" = Just Table'null_date_table'value_type_currency
	    translate "boolean" = Just Table'null_date_table'value_type_boolean
	    translate "string" = Just Table'null_date_table'value_type_string
	    translate _ = Nothing
    toAttrFrTyp n Table'null_date_table'value_type_float = Just (n, str2attr "float")
    toAttrFrTyp n Table'null_date_table'value_type_time = Just (n, str2attr "time")
    toAttrFrTyp n Table'null_date_table'value_type_date = Just (n, str2attr "date")
    toAttrFrTyp n Table'null_date_table'value_type_percentage = Just (n, str2attr "percentage")
    toAttrFrTyp n Table'null_date_table'value_type_currency = Just (n, str2attr "currency")
    toAttrFrTyp n Table'null_date_table'value_type_boolean = Just (n, str2attr "boolean")
    toAttrFrTyp n Table'null_date_table'value_type_string = Just (n, str2attr "string")
instance XmlContent Table'iteration where
    fromElem (CElem (Elem "table:iteration" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "table:iteration" (toAttrs as) [])]
instance XmlAttributes Table'iteration where
    fromAttrs as =
	Table'iteration
	  { table'iterationTable'status = defaultA fromAttrToTyp Table'iteration_table'status_disable "table:status" as
	  , table'iterationTable'steps = defaultA fromAttrToStr "100" "table:steps" as
	  , table'iterationTable'maximum_difference = defaultA fromAttrToStr "0.001" "table:maximum-difference" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrTyp "table:status" (table'iterationTable'status v)
	, defaultToAttr toAttrFrStr "table:steps" (table'iterationTable'steps v)
	, defaultToAttr toAttrFrStr "table:maximum-difference" (table'iterationTable'maximum_difference v)
	]
instance XmlAttrType Table'iteration_table'status where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "enable" = Just Table'iteration_table'status_enable
	    translate "disable" = Just Table'iteration_table'status_disable
	    translate _ = Nothing
    toAttrFrTyp n Table'iteration_table'status_enable = Just (n, str2attr "enable")
    toAttrFrTyp n Table'iteration_table'status_disable = Just (n, str2attr "disable")
instance XmlContent Table'tracked_changes where
    fromElem (CElem (Elem "table:tracked-changes" as c0):rest) =
	(\(a,ca)->
	   (Just (Table'tracked_changes (fromAttrs as) a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'tracked_changes as a) =
	[CElem (Elem "table:tracked-changes" (toAttrs as) (concatMap toElem a))]
instance XmlAttributes Table'tracked_changes_Attrs where
    fromAttrs as =
	Table'tracked_changes_Attrs
	  { table'tracked_changesTable'track_changes = defaultA fromAttrToStr "true" "table:track-changes" as
	  , table'tracked_changesTable'protected = defaultA fromAttrToStr "false" "table:protected" as
	  , table'tracked_changesTable'protection_key = possibleA fromAttrToStr "table:protection-key" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "table:track-changes" (table'tracked_changesTable'track_changes v)
	, defaultToAttr toAttrFrStr "table:protected" (table'tracked_changesTable'protected v)
	, maybeToAttr toAttrFrStr "table:protection-key" (table'tracked_changesTable'protection_key v)
	]
instance XmlContent Table'tracked_changes_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Table'tracked_changes_Table'cell_content_change a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Table'tracked_changes_Table'insertion a), rest)
		(_,_) ->
			case (fromElem c0) of
			(Just a,rest) -> (Just (Table'tracked_changes_Table'deletion a), rest)
			(_,_) ->
				case (fromElem c0) of
				(Just a,rest) -> (Just (Table'tracked_changes_Table'movement a), rest)
				(_,_) ->
					case (fromElem c0) of
					(Just a,rest) -> (Just (Table'tracked_changes_Table'rejection a), rest)
					(_,_) ->
					    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'tracked_changes_Table'cell_content_change a) = toElem a
    toElem (Table'tracked_changes_Table'insertion a) = toElem a
    toElem (Table'tracked_changes_Table'deletion a) = toElem a
    toElem (Table'tracked_changes_Table'movement a) = toElem a
    toElem (Table'tracked_changes_Table'rejection a) = toElem a
instance XmlContent Table'dependences where
    fromElem (CElem (Elem "table:dependences" [] c0):rest) =
	(\(a,ca)->
	   (Just (Table'dependences a), rest))
	(definite fromElem "table:dependence+" "table:dependences" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'dependences a) =
	[CElem (Elem "table:dependences" [] (toElem a))]
instance XmlContent Table'dependence where
    fromElem (CElem (Elem "table:dependence" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "table:dependence" (toAttrs as) [])]
instance XmlAttributes Table'dependence where
    fromAttrs as =
	Table'dependence
	  { table'dependenceTable'id = definiteA fromAttrToStr "table:dependence" "table:id" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "table:id" (table'dependenceTable'id v)
	]
instance XmlContent Table'deletions where
    fromElem (CElem (Elem "table:deletions" [] c0):rest) =
	(\(a,ca)->
	   (Just (Table'deletions a), rest))
	(definite fromElem "table:deletions+" "table:deletions" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'deletions a) =
	[CElem (Elem "table:deletions" [] (toElem a))]
instance XmlContent Table'deletions_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Table'deletions_Table'cell_content_deletion a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Table'deletions_Table'change_deletion a), rest)
		(_,_) ->
		    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'deletions_Table'cell_content_deletion a) = toElem a
    toElem (Table'deletions_Table'change_deletion a) = toElem a
instance XmlContent Table'cell_content_deletion where
    fromElem (CElem (Elem "table:cell-content-deletion" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Table'cell_content_deletion (fromAttrs as) a b), rest))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'cell_content_deletion as a b) =
	[CElem (Elem "table:cell-content-deletion" (toAttrs as) (maybe [] toElem a
								 ++ maybe [] toElem b))]
instance XmlAttributes Table'cell_content_deletion_Attrs where
    fromAttrs as =
	Table'cell_content_deletion_Attrs
	  { table'cell_content_deletionTable'id = possibleA fromAttrToStr "table:id" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "table:id" (table'cell_content_deletionTable'id v)
	]
instance XmlContent Table'change_deletion where
    fromElem (CElem (Elem "table:change-deletion" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "table:change-deletion" (toAttrs as) [])]
instance XmlAttributes Table'change_deletion where
    fromAttrs as =
	Table'change_deletion
	  { table'change_deletionTable'id = possibleA fromAttrToStr "table:id" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "table:id" (table'change_deletionTable'id v)
	]
instance XmlContent Table'insertion where
    fromElem (CElem (Elem "table:insertion" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (Just (Table'insertion (fromAttrs as) a b c), rest))
	      (fromElem cb))
	   (fromElem ca))
	(definite fromElem "<office:change-info>" "table:insertion" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'insertion as a b c) =
	[CElem (Elem "table:insertion" (toAttrs as) (toElem a ++
						     maybe [] toElem b ++ maybe [] toElem c))]
instance XmlAttributes Table'insertion_Attrs where
    fromAttrs as =
	Table'insertion_Attrs
	  { table'insertionTable'id = definiteA fromAttrToStr "table:insertion" "table:id" as
	  , table'insertionTable'acceptance_state = defaultA fromAttrToTyp Table'insertion_table'acceptance_state_pending "table:acceptance-state" as
	  , table'insertionTable'rejecting_change_id = possibleA fromAttrToStr "table:rejecting-change-id" as
	  , table'insertionTable'type = definiteA fromAttrToTyp "table:insertion" "table:type" as
	  , table'insertionTable'position = definiteA fromAttrToStr "table:insertion" "table:position" as
	  , table'insertionTable'count = defaultA fromAttrToStr "1" "table:count" as
	  , table'insertionTable'table = possibleA fromAttrToStr "table:table" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "table:id" (table'insertionTable'id v)
	, defaultToAttr toAttrFrTyp "table:acceptance-state" (table'insertionTable'acceptance_state v)
	, maybeToAttr toAttrFrStr "table:rejecting-change-id" (table'insertionTable'rejecting_change_id v)
	, toAttrFrTyp "table:type" (table'insertionTable'type v)
	, toAttrFrStr "table:position" (table'insertionTable'position v)
	, defaultToAttr toAttrFrStr "table:count" (table'insertionTable'count v)
	, maybeToAttr toAttrFrStr "table:table" (table'insertionTable'table v)
	]
instance XmlAttrType Table'insertion_table'acceptance_state where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "accepted" = Just Table'insertion_table'acceptance_state_accepted
	    translate "rejected" = Just Table'insertion_table'acceptance_state_rejected
	    translate "pending" = Just Table'insertion_table'acceptance_state_pending
	    translate _ = Nothing
    toAttrFrTyp n Table'insertion_table'acceptance_state_accepted = Just (n, str2attr "accepted")
    toAttrFrTyp n Table'insertion_table'acceptance_state_rejected = Just (n, str2attr "rejected")
    toAttrFrTyp n Table'insertion_table'acceptance_state_pending = Just (n, str2attr "pending")
instance XmlAttrType Table'insertion_table'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "row" = Just Table'insertion_table'type_row
	    translate "column" = Just Table'insertion_table'type_column
	    translate "table" = Just Table'insertion_table'type_table
	    translate _ = Nothing
    toAttrFrTyp n Table'insertion_table'type_row = Just (n, str2attr "row")
    toAttrFrTyp n Table'insertion_table'type_column = Just (n, str2attr "column")
    toAttrFrTyp n Table'insertion_table'type_table = Just (n, str2attr "table")
instance XmlContent Table'deletion where
    fromElem (CElem (Elem "table:deletion" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (\(d,cd)->
		    (Just (Table'deletion (fromAttrs as) a b c d), rest))
		 (fromElem cc))
	      (fromElem cb))
	   (fromElem ca))
	(definite fromElem "<office:change-info>" "table:deletion" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'deletion as a b c d) =
	[CElem (Elem "table:deletion" (toAttrs as) (toElem a ++
						    maybe [] toElem b ++ maybe [] toElem c ++
						    maybe [] toElem d))]
instance XmlAttributes Table'deletion_Attrs where
    fromAttrs as =
	Table'deletion_Attrs
	  { table'deletionTable'id = definiteA fromAttrToStr "table:deletion" "table:id" as
	  , table'deletionTable'acceptance_state = defaultA fromAttrToTyp Table'deletion_table'acceptance_state_pending "table:acceptance-state" as
	  , table'deletionTable'rejecting_change_id = possibleA fromAttrToStr "table:rejecting-change-id" as
	  , table'deletionTable'type = definiteA fromAttrToTyp "table:deletion" "table:type" as
	  , table'deletionTable'position = definiteA fromAttrToStr "table:deletion" "table:position" as
	  , table'deletionTable'count = defaultA fromAttrToStr "1" "table:count" as
	  , table'deletionTable'table = possibleA fromAttrToStr "table:table" as
	  , table'deletionTable'multi_deletion_spanned = possibleA fromAttrToStr "table:multi-deletion-spanned" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "table:id" (table'deletionTable'id v)
	, defaultToAttr toAttrFrTyp "table:acceptance-state" (table'deletionTable'acceptance_state v)
	, maybeToAttr toAttrFrStr "table:rejecting-change-id" (table'deletionTable'rejecting_change_id v)
	, toAttrFrTyp "table:type" (table'deletionTable'type v)
	, toAttrFrStr "table:position" (table'deletionTable'position v)
	, defaultToAttr toAttrFrStr "table:count" (table'deletionTable'count v)
	, maybeToAttr toAttrFrStr "table:table" (table'deletionTable'table v)
	, maybeToAttr toAttrFrStr "table:multi-deletion-spanned" (table'deletionTable'multi_deletion_spanned v)
	]
instance XmlAttrType Table'deletion_table'acceptance_state where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "accepted" = Just Table'deletion_table'acceptance_state_accepted
	    translate "rejected" = Just Table'deletion_table'acceptance_state_rejected
	    translate "pending" = Just Table'deletion_table'acceptance_state_pending
	    translate _ = Nothing
    toAttrFrTyp n Table'deletion_table'acceptance_state_accepted = Just (n, str2attr "accepted")
    toAttrFrTyp n Table'deletion_table'acceptance_state_rejected = Just (n, str2attr "rejected")
    toAttrFrTyp n Table'deletion_table'acceptance_state_pending = Just (n, str2attr "pending")
instance XmlAttrType Table'deletion_table'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "row" = Just Table'deletion_table'type_row
	    translate "column" = Just Table'deletion_table'type_column
	    translate "table" = Just Table'deletion_table'type_table
	    translate _ = Nothing
    toAttrFrTyp n Table'deletion_table'type_row = Just (n, str2attr "row")
    toAttrFrTyp n Table'deletion_table'type_column = Just (n, str2attr "column")
    toAttrFrTyp n Table'deletion_table'type_table = Just (n, str2attr "table")
instance XmlContent Table'cut_offs where
    fromElem (CElem (Elem "table:cut-offs" [] c0):rest) =
	case (fromElem c0) of
	(Just a,_) -> (Just (Table'cut_offsTable'movement_cut_off a), rest)
	(_,_) ->
		case (\(a,ca)->
			(\(b,cb)->
			   (a,b,cb))
			(many fromElem ca))
		     (fromElem c0) of
		(Just a,b,_) -> (Just (Table'cut_offsTable'insertion_cut_off_Table'movement_cut_off a
												    b), rest)
		(_,[],_) ->
		    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'cut_offsTable'movement_cut_off a) = [CElem (Elem "table:cut-offs" [] (toElem a) )]
    toElem (Table'cut_offsTable'insertion_cut_off_Table'movement_cut_off a
									 b) = [CElem (Elem "table:cut-offs" [] (toElem a
														++
														concatMap toElem b) )]
instance XmlContent Table'insertion_cut_off where
    fromElem (CElem (Elem "table:insertion-cut-off" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "table:insertion-cut-off" (toAttrs as) [])]
instance XmlAttributes Table'insertion_cut_off where
    fromAttrs as =
	Table'insertion_cut_off
	  { table'insertion_cut_offTable'id = definiteA fromAttrToStr "table:insertion-cut-off" "table:id" as
	  , table'insertion_cut_offTable'position = definiteA fromAttrToStr "table:insertion-cut-off" "table:position" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "table:id" (table'insertion_cut_offTable'id v)
	, toAttrFrStr "table:position" (table'insertion_cut_offTable'position v)
	]
instance XmlContent Table'movement_cut_off where
    fromElem (CElem (Elem "table:movement-cut-off" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "table:movement-cut-off" (toAttrs as) [])]
instance XmlAttributes Table'movement_cut_off where
    fromAttrs as =
	Table'movement_cut_off
	  { table'movement_cut_offTable'id = definiteA fromAttrToStr "table:movement-cut-off" "table:id" as
	  , table'movement_cut_offTable'start_position = possibleA fromAttrToStr "table:start-position" as
	  , table'movement_cut_offTable'end_position = possibleA fromAttrToStr "table:end-position" as
	  , table'movement_cut_offTable'position = possibleA fromAttrToStr "table:position" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "table:id" (table'movement_cut_offTable'id v)
	, maybeToAttr toAttrFrStr "table:start-position" (table'movement_cut_offTable'start_position v)
	, maybeToAttr toAttrFrStr "table:end-position" (table'movement_cut_offTable'end_position v)
	, maybeToAttr toAttrFrStr "table:position" (table'movement_cut_offTable'position v)
	]
instance XmlContent Table'movement where
    fromElem (CElem (Elem "table:movement" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (\(d,cd)->
		    (\(e,ce)->
		       (Just (Table'movement (fromAttrs as) a b c d e), rest))
		    (fromElem cd))
		 (fromElem cc))
	      (definite fromElem "<office:change-info>" "table:movement" cb))
	   (definite fromElem "<table:target-range-address>" "table:movement" ca))
	(definite fromElem "<table:source-range-address>" "table:movement" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'movement as a b c d e) =
	[CElem (Elem "table:movement" (toAttrs as) (toElem a ++ toElem b ++
						    toElem c ++ maybe [] toElem d ++
						    maybe [] toElem e))]
instance XmlAttributes Table'movement_Attrs where
    fromAttrs as =
	Table'movement_Attrs
	  { table'movementTable'id = definiteA fromAttrToStr "table:movement" "table:id" as
	  , table'movementTable'acceptance_state = defaultA fromAttrToTyp Table'movement_table'acceptance_state_pending "table:acceptance-state" as
	  , table'movementTable'rejecting_change_id = possibleA fromAttrToStr "table:rejecting-change-id" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "table:id" (table'movementTable'id v)
	, defaultToAttr toAttrFrTyp "table:acceptance-state" (table'movementTable'acceptance_state v)
	, maybeToAttr toAttrFrStr "table:rejecting-change-id" (table'movementTable'rejecting_change_id v)
	]
instance XmlAttrType Table'movement_table'acceptance_state where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "accepted" = Just Table'movement_table'acceptance_state_accepted
	    translate "rejected" = Just Table'movement_table'acceptance_state_rejected
	    translate "pending" = Just Table'movement_table'acceptance_state_pending
	    translate _ = Nothing
    toAttrFrTyp n Table'movement_table'acceptance_state_accepted = Just (n, str2attr "accepted")
    toAttrFrTyp n Table'movement_table'acceptance_state_rejected = Just (n, str2attr "rejected")
    toAttrFrTyp n Table'movement_table'acceptance_state_pending = Just (n, str2attr "pending")
instance XmlContent Table'target_range_address where
    fromElem (CElem (Elem "table:target-range-address" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "table:target-range-address" (toAttrs as) [])]
instance XmlAttributes Table'target_range_address where
    fromAttrs as =
	Table'target_range_address
	  { table'target_range_addressTable'column = possibleA fromAttrToStr "table:column" as
	  , table'target_range_addressTable'row = possibleA fromAttrToStr "table:row" as
	  , table'target_range_addressTable'table = possibleA fromAttrToStr "table:table" as
	  , table'target_range_addressTable'start_column = possibleA fromAttrToStr "table:start-column" as
	  , table'target_range_addressTable'start_row = possibleA fromAttrToStr "table:start-row" as
	  , table'target_range_addressTable'start_table = possibleA fromAttrToStr "table:start-table" as
	  , table'target_range_addressTable'end_column = possibleA fromAttrToStr "table:end-column" as
	  , table'target_range_addressTable'end_row = possibleA fromAttrToStr "table:end-row" as
	  , table'target_range_addressTable'end_table = possibleA fromAttrToStr "table:end-table" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "table:column" (table'target_range_addressTable'column v)
	, maybeToAttr toAttrFrStr "table:row" (table'target_range_addressTable'row v)
	, maybeToAttr toAttrFrStr "table:table" (table'target_range_addressTable'table v)
	, maybeToAttr toAttrFrStr "table:start-column" (table'target_range_addressTable'start_column v)
	, maybeToAttr toAttrFrStr "table:start-row" (table'target_range_addressTable'start_row v)
	, maybeToAttr toAttrFrStr "table:start-table" (table'target_range_addressTable'start_table v)
	, maybeToAttr toAttrFrStr "table:end-column" (table'target_range_addressTable'end_column v)
	, maybeToAttr toAttrFrStr "table:end-row" (table'target_range_addressTable'end_row v)
	, maybeToAttr toAttrFrStr "table:end-table" (table'target_range_addressTable'end_table v)
	]
instance XmlContent Table'source_range_address where
    fromElem (CElem (Elem "table:source-range-address" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "table:source-range-address" (toAttrs as) [])]
instance XmlAttributes Table'source_range_address where
    fromAttrs as =
	Table'source_range_address
	  { table'source_range_addressTable'column = possibleA fromAttrToStr "table:column" as
	  , table'source_range_addressTable'row = possibleA fromAttrToStr "table:row" as
	  , table'source_range_addressTable'table = possibleA fromAttrToStr "table:table" as
	  , table'source_range_addressTable'start_column = possibleA fromAttrToStr "table:start-column" as
	  , table'source_range_addressTable'start_row = possibleA fromAttrToStr "table:start-row" as
	  , table'source_range_addressTable'start_table = possibleA fromAttrToStr "table:start-table" as
	  , table'source_range_addressTable'end_column = possibleA fromAttrToStr "table:end-column" as
	  , table'source_range_addressTable'end_row = possibleA fromAttrToStr "table:end-row" as
	  , table'source_range_addressTable'end_table = possibleA fromAttrToStr "table:end-table" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "table:column" (table'source_range_addressTable'column v)
	, maybeToAttr toAttrFrStr "table:row" (table'source_range_addressTable'row v)
	, maybeToAttr toAttrFrStr "table:table" (table'source_range_addressTable'table v)
	, maybeToAttr toAttrFrStr "table:start-column" (table'source_range_addressTable'start_column v)
	, maybeToAttr toAttrFrStr "table:start-row" (table'source_range_addressTable'start_row v)
	, maybeToAttr toAttrFrStr "table:start-table" (table'source_range_addressTable'start_table v)
	, maybeToAttr toAttrFrStr "table:end-column" (table'source_range_addressTable'end_column v)
	, maybeToAttr toAttrFrStr "table:end-row" (table'source_range_addressTable'end_row v)
	, maybeToAttr toAttrFrStr "table:end-table" (table'source_range_addressTable'end_table v)
	]
instance XmlContent Table'change_track_table_cell where
    fromElem (CElem (Elem "table:change-track-table-cell" as c0):rest) =
	(\(a,ca)->
	   (Just (Table'change_track_table_cell (fromAttrs as) a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'change_track_table_cell as a) =
	[CElem (Elem "table:change-track-table-cell" (toAttrs as) (concatMap toElem a))]
instance XmlAttributes Table'change_track_table_cell_Attrs where
    fromAttrs as =
	Table'change_track_table_cell_Attrs
	  { table'change_track_table_cellTable'cell_address = possibleA fromAttrToStr "table:cell-address" as
	  , table'change_track_table_cellTable'matrix_covered = defaultA fromAttrToTyp Table'change_track_table_cell_table'matrix_covered_false "table:matrix-covered" as
	  , table'change_track_table_cellTable'formula = possibleA fromAttrToStr "table:formula" as
	  , table'change_track_table_cellTable'number_matrix_rows_spanned = possibleA fromAttrToStr "table:number-matrix-rows-spanned" as
	  , table'change_track_table_cellTable'number_matrix_columns_spanned = possibleA fromAttrToStr "table:number-matrix-columns-spanned" as
	  , table'change_track_table_cellTable'value_type = defaultA fromAttrToTyp Table'change_track_table_cell_table'value_type_string "table:value-type" as
	  , table'change_track_table_cellTable'value = possibleA fromAttrToStr "table:value" as
	  , table'change_track_table_cellTable'date_value = possibleA fromAttrToStr "table:date-value" as
	  , table'change_track_table_cellTable'time_value = possibleA fromAttrToStr "table:time-value" as
	  , table'change_track_table_cellTable'string_value = possibleA fromAttrToStr "table:string-value" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "table:cell-address" (table'change_track_table_cellTable'cell_address v)
	, defaultToAttr toAttrFrTyp "table:matrix-covered" (table'change_track_table_cellTable'matrix_covered v)
	, maybeToAttr toAttrFrStr "table:formula" (table'change_track_table_cellTable'formula v)
	, maybeToAttr toAttrFrStr "table:number-matrix-rows-spanned" (table'change_track_table_cellTable'number_matrix_rows_spanned v)
	, maybeToAttr toAttrFrStr "table:number-matrix-columns-spanned" (table'change_track_table_cellTable'number_matrix_columns_spanned v)
	, defaultToAttr toAttrFrTyp "table:value-type" (table'change_track_table_cellTable'value_type v)
	, maybeToAttr toAttrFrStr "table:value" (table'change_track_table_cellTable'value v)
	, maybeToAttr toAttrFrStr "table:date-value" (table'change_track_table_cellTable'date_value v)
	, maybeToAttr toAttrFrStr "table:time-value" (table'change_track_table_cellTable'time_value v)
	, maybeToAttr toAttrFrStr "table:string-value" (table'change_track_table_cellTable'string_value v)
	]
instance XmlAttrType Table'change_track_table_cell_table'matrix_covered where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Table'change_track_table_cell_table'matrix_covered_true
	    translate "false" = Just Table'change_track_table_cell_table'matrix_covered_false
	    translate _ = Nothing
    toAttrFrTyp n Table'change_track_table_cell_table'matrix_covered_true = Just (n, str2attr "true")
    toAttrFrTyp n Table'change_track_table_cell_table'matrix_covered_false = Just (n, str2attr "false")
instance XmlAttrType Table'change_track_table_cell_table'value_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "float" = Just Table'change_track_table_cell_table'value_type_float
	    translate "time" = Just Table'change_track_table_cell_table'value_type_time
	    translate "date" = Just Table'change_track_table_cell_table'value_type_date
	    translate "percentage" = Just Table'change_track_table_cell_table'value_type_percentage
	    translate "currency" = Just Table'change_track_table_cell_table'value_type_currency
	    translate "boolean" = Just Table'change_track_table_cell_table'value_type_boolean
	    translate "string" = Just Table'change_track_table_cell_table'value_type_string
	    translate _ = Nothing
    toAttrFrTyp n Table'change_track_table_cell_table'value_type_float = Just (n, str2attr "float")
    toAttrFrTyp n Table'change_track_table_cell_table'value_type_time = Just (n, str2attr "time")
    toAttrFrTyp n Table'change_track_table_cell_table'value_type_date = Just (n, str2attr "date")
    toAttrFrTyp n Table'change_track_table_cell_table'value_type_percentage = Just (n, str2attr "percentage")
    toAttrFrTyp n Table'change_track_table_cell_table'value_type_currency = Just (n, str2attr "currency")
    toAttrFrTyp n Table'change_track_table_cell_table'value_type_boolean = Just (n, str2attr "boolean")
    toAttrFrTyp n Table'change_track_table_cell_table'value_type_string = Just (n, str2attr "string")
instance XmlContent Table'cell_content_change where
    fromElem (CElem (Elem "table:cell-content-change" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (\(d,cd)->
		    (\(e,ce)->
		       (Just (Table'cell_content_change (fromAttrs as) a b c d e), rest))
		    (definite fromElem "<table:previous>" "table:cell-content-change" cd))
		 (fromElem cc))
	      (fromElem cb))
	   (definite fromElem "<office:change-info>" "table:cell-content-change" ca))
	(definite fromElem "<table:cell-address>" "table:cell-content-change" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'cell_content_change as a b c d e) =
	[CElem (Elem "table:cell-content-change" (toAttrs as) (toElem a ++
							       toElem b ++ maybe [] toElem c ++
							       maybe [] toElem d ++ toElem e))]
instance XmlAttributes Table'cell_content_change_Attrs where
    fromAttrs as =
	Table'cell_content_change_Attrs
	  { table'cell_content_changeTable'id = definiteA fromAttrToStr "table:cell-content-change" "table:id" as
	  , table'cell_content_changeTable'acceptance_state = defaultA fromAttrToTyp Table'cell_content_change_table'acceptance_state_pending "table:acceptance-state" as
	  , table'cell_content_changeTable'rejecting_change_id = possibleA fromAttrToStr "table:rejecting-change-id" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "table:id" (table'cell_content_changeTable'id v)
	, defaultToAttr toAttrFrTyp "table:acceptance-state" (table'cell_content_changeTable'acceptance_state v)
	, maybeToAttr toAttrFrStr "table:rejecting-change-id" (table'cell_content_changeTable'rejecting_change_id v)
	]
instance XmlAttrType Table'cell_content_change_table'acceptance_state where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "accepted" = Just Table'cell_content_change_table'acceptance_state_accepted
	    translate "rejected" = Just Table'cell_content_change_table'acceptance_state_rejected
	    translate "pending" = Just Table'cell_content_change_table'acceptance_state_pending
	    translate _ = Nothing
    toAttrFrTyp n Table'cell_content_change_table'acceptance_state_accepted = Just (n, str2attr "accepted")
    toAttrFrTyp n Table'cell_content_change_table'acceptance_state_rejected = Just (n, str2attr "rejected")
    toAttrFrTyp n Table'cell_content_change_table'acceptance_state_pending = Just (n, str2attr "pending")
instance XmlContent Table'cell_address where
    fromElem (CElem (Elem "table:cell-address" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "table:cell-address" (toAttrs as) [])]
instance XmlAttributes Table'cell_address where
    fromAttrs as =
	Table'cell_address
	  { table'cell_addressTable'column = possibleA fromAttrToStr "table:column" as
	  , table'cell_addressTable'row = possibleA fromAttrToStr "table:row" as
	  , table'cell_addressTable'table = possibleA fromAttrToStr "table:table" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "table:column" (table'cell_addressTable'column v)
	, maybeToAttr toAttrFrStr "table:row" (table'cell_addressTable'row v)
	, maybeToAttr toAttrFrStr "table:table" (table'cell_addressTable'table v)
	]
instance XmlContent Table'previous where
    fromElem (CElem (Elem "table:previous" as c0):rest) =
	(\(a,ca)->
	   (Just (Table'previous (fromAttrs as) a), rest))
	(definite fromElem "<table:change-track-table-cell>" "table:previous" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'previous as a) =
	[CElem (Elem "table:previous" (toAttrs as) (toElem a))]
instance XmlAttributes Table'previous_Attrs where
    fromAttrs as =
	Table'previous_Attrs
	  { table'previousTable'id = possibleA fromAttrToStr "table:id" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "table:id" (table'previousTable'id v)
	]
instance XmlContent Table'rejection where
    fromElem (CElem (Elem "table:rejection" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (Just (Table'rejection (fromAttrs as) a b c), rest))
	      (fromElem cb))
	   (fromElem ca))
	(definite fromElem "<office:change-info>" "table:rejection" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'rejection as a b c) =
	[CElem (Elem "table:rejection" (toAttrs as) (toElem a ++
						     maybe [] toElem b ++ maybe [] toElem c))]
instance XmlAttributes Table'rejection_Attrs where
    fromAttrs as =
	Table'rejection_Attrs
	  { table'rejectionTable'id = definiteA fromAttrToStr "table:rejection" "table:id" as
	  , table'rejectionTable'acceptance_state = defaultA fromAttrToTyp Table'rejection_table'acceptance_state_pending "table:acceptance-state" as
	  , table'rejectionTable'rejecting_change_id = possibleA fromAttrToStr "table:rejecting-change-id" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "table:id" (table'rejectionTable'id v)
	, defaultToAttr toAttrFrTyp "table:acceptance-state" (table'rejectionTable'acceptance_state v)
	, maybeToAttr toAttrFrStr "table:rejecting-change-id" (table'rejectionTable'rejecting_change_id v)
	]
instance XmlAttrType Table'rejection_table'acceptance_state where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "accepted" = Just Table'rejection_table'acceptance_state_accepted
	    translate "rejected" = Just Table'rejection_table'acceptance_state_rejected
	    translate "pending" = Just Table'rejection_table'acceptance_state_pending
	    translate _ = Nothing
    toAttrFrTyp n Table'rejection_table'acceptance_state_accepted = Just (n, str2attr "accepted")
    toAttrFrTyp n Table'rejection_table'acceptance_state_rejected = Just (n, str2attr "rejected")
    toAttrFrTyp n Table'rejection_table'acceptance_state_pending = Just (n, str2attr "pending")
instance XmlContent Table'table where
    fromElem (CElem (Elem "table:table" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (\(d,cd)->
		    (\(e,ce)->
		       (\(f,cf)->
			  (Just (Table'table (fromAttrs as) a b c d e f), rest))
		       (definite fromElem "OneOf" "table:table" ce))
		    (definite fromElem "OneOf" "table:table" cd))
		 (fromElem cc))
	      (fromElem cb))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'table as a b c d e f) =
	[CElem (Elem "table:table" (toAttrs as) (maybe [] toElem a ++
						 maybe [] toElem b ++ maybe [] toElem c ++
						 maybe [] toElem d ++ toElem e ++ toElem f))]
instance XmlAttributes Table'table_Attrs where
    fromAttrs as =
	Table'table_Attrs
	  { table'tableTable'name = possibleA fromAttrToStr "table:name" as
	  , table'tableTable'style_name = possibleA fromAttrToStr "table:style-name" as
	  , table'tableTable'protected = defaultA fromAttrToStr "false" "table:protected" as
	  , table'tableTable'protection_key = possibleA fromAttrToStr "table:protection-key" as
	  , table'tableTable'print_ranges = possibleA fromAttrToStr "table:print-ranges" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "table:name" (table'tableTable'name v)
	, maybeToAttr toAttrFrStr "table:style-name" (table'tableTable'style_name v)
	, defaultToAttr toAttrFrStr "table:protected" (table'tableTable'protected v)
	, maybeToAttr toAttrFrStr "table:protection-key" (table'tableTable'protection_key v)
	, maybeToAttr toAttrFrStr "table:print-ranges" (table'tableTable'print_ranges v)
	]
instance XmlContent Table'table_source where
    fromElem (CElem (Elem "table:table-source" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "table:table-source" (toAttrs as) [])]
instance XmlAttributes Table'table_source where
    fromAttrs as =
	Table'table_source
	  { table'table_sourceTable'mode = defaultA fromAttrToTyp Table'table_source_table'mode_copy_all "table:mode" as
	  , table'table_sourceXlink'type = defaultA fromAttrToTyp Table'table_source_xlink'type_simple "xlink:type" as
	  , table'table_sourceXlink'actuate = defaultA fromAttrToTyp Table'table_source_xlink'actuate_onRequest "xlink:actuate" as
	  , table'table_sourceXlink'href = definiteA fromAttrToStr "table:table-source" "xlink:href" as
	  , table'table_sourceTable'filter_name = possibleA fromAttrToStr "table:filter-name" as
	  , table'table_sourceTable'table_name = possibleA fromAttrToStr "table:table-name" as
	  , table'table_sourceTable'filter_options = possibleA fromAttrToStr "table:filter-options" as
	  , table'table_sourceTable'refresh_delay = possibleA fromAttrToStr "table:refresh-delay" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrTyp "table:mode" (table'table_sourceTable'mode v)
	, defaultToAttr toAttrFrTyp "xlink:type" (table'table_sourceXlink'type v)
	, defaultToAttr toAttrFrTyp "xlink:actuate" (table'table_sourceXlink'actuate v)
	, toAttrFrStr "xlink:href" (table'table_sourceXlink'href v)
	, maybeToAttr toAttrFrStr "table:filter-name" (table'table_sourceTable'filter_name v)
	, maybeToAttr toAttrFrStr "table:table-name" (table'table_sourceTable'table_name v)
	, maybeToAttr toAttrFrStr "table:filter-options" (table'table_sourceTable'filter_options v)
	, maybeToAttr toAttrFrStr "table:refresh-delay" (table'table_sourceTable'refresh_delay v)
	]
instance XmlAttrType Table'table_source_table'mode where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "copy-all" = Just Table'table_source_table'mode_copy_all
	    translate "copy-results-only" = Just Table'table_source_table'mode_copy_results_only
	    translate _ = Nothing
    toAttrFrTyp n Table'table_source_table'mode_copy_all = Just (n, str2attr "copy-all")
    toAttrFrTyp n Table'table_source_table'mode_copy_results_only = Just (n, str2attr "copy-results-only")
instance XmlAttrType Table'table_source_xlink'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "simple" = Just Table'table_source_xlink'type_simple
	    translate _ = Nothing
    toAttrFrTyp n Table'table_source_xlink'type_simple = Just (n, str2attr "simple")
instance XmlAttrType Table'table_source_xlink'actuate where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "onRequest" = Just Table'table_source_xlink'actuate_onRequest
	    translate _ = Nothing
    toAttrFrTyp n Table'table_source_xlink'actuate_onRequest = Just (n, str2attr "onRequest")
instance XmlContent Table'scenario where
    fromElem (CElem (Elem "table:scenario" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "table:scenario" (toAttrs as) [])]
instance XmlAttributes Table'scenario where
    fromAttrs as =
	Table'scenario
	  { table'scenarioTable'display_border = defaultA fromAttrToStr "true" "table:display-border" as
	  , table'scenarioTable'border_color = possibleA fromAttrToStr "table:border-color" as
	  , table'scenarioTable'copy_back = defaultA fromAttrToStr "true" "table:copy-back" as
	  , table'scenarioTable'copy_styles = defaultA fromAttrToStr "true" "table:copy-styles" as
	  , table'scenarioTable'copy_formulas = defaultA fromAttrToStr "true" "table:copy-formulas" as
	  , table'scenarioTable'is_active = definiteA fromAttrToStr "table:scenario" "table:is-active" as
	  , table'scenarioTable'scenario_ranges = definiteA fromAttrToStr "table:scenario" "table:scenario-ranges" as
	  , table'scenarioTable'comment = possibleA fromAttrToStr "table:comment" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "table:display-border" (table'scenarioTable'display_border v)
	, maybeToAttr toAttrFrStr "table:border-color" (table'scenarioTable'border_color v)
	, defaultToAttr toAttrFrStr "table:copy-back" (table'scenarioTable'copy_back v)
	, defaultToAttr toAttrFrStr "table:copy-styles" (table'scenarioTable'copy_styles v)
	, defaultToAttr toAttrFrStr "table:copy-formulas" (table'scenarioTable'copy_formulas v)
	, toAttrFrStr "table:is-active" (table'scenarioTable'is_active v)
	, toAttrFrStr "table:scenario-ranges" (table'scenarioTable'scenario_ranges v)
	, maybeToAttr toAttrFrStr "table:comment" (table'scenarioTable'comment v)
	]
instance XmlContent Table'shapes where
    fromElem (CElem (Elem "table:shapes" [] c0):rest) =
	case (fromElem c0) of
	(Just a,_) -> (Just (Table'shapesDraw'rect a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,_) -> (Just (Table'shapesDraw'line a), rest)
		(_,_) ->
			case (fromElem c0) of
			(Just a,_) -> (Just (Table'shapesDraw'polyline a), rest)
			(_,_) ->
				case (fromElem c0) of
				(Just a,_) -> (Just (Table'shapesDraw'polygon a), rest)
				(_,_) ->
					case (fromElem c0) of
					(Just a,_) -> (Just (Table'shapesDraw'path a), rest)
					(_,_) ->
						case (fromElem c0) of
						(Just a,_) -> (Just (Table'shapesDraw'circle a), rest)
						(_,_) ->
							case (fromElem c0) of
							(Just a,_) -> (Just (Table'shapesDraw'ellipse a), rest)
							(_,_) ->
								case (fromElem c0) of
								(Just a,_) -> (Just (Table'shapesDraw'g a), rest)
								(_,_) ->
									case (fromElem c0) of
									(Just a,_) -> (Just (Table'shapesDraw'page_thumbnail a), rest)
									(_,_) ->
										case (fromElem c0) of
										(Just a,_) -> (Just (Table'shapesDraw'text_box a), rest)
										(_,_) ->
											case (fromElem c0) of
											(Just a,_) -> (Just (Table'shapesDraw'image a), rest)
											(_,_) ->
												case (fromElem c0) of
												(Just a,_) -> (Just (Table'shapesDraw'object a), rest)
												(_,_) ->
													case (fromElem c0) of
													(Just a,_) -> (Just (Table'shapesDraw'object_ole a), rest)
													(_,_) ->
														case (fromElem c0) of
														(Just a,_) -> (Just (Table'shapesDraw'applet a), rest)
														(_,_) ->
															case (fromElem c0) of
															(Just a,_) -> (Just (Table'shapesDraw'floating_frame a), rest)
															(_,_) ->
																case (fromElem c0) of
																(Just a,_) -> (Just (Table'shapesDraw'plugin a), rest)
																(_,_) ->
																	case (fromElem c0) of
																	(Just a,_) -> (Just (Table'shapesDraw'measure a), rest)
																	(_,_) ->
																		case (fromElem c0) of
																		(Just a,_) -> (Just (Table'shapesDraw'caption a), rest)
																		(_,_) ->
																			case (fromElem c0) of
																			(Just a,_) -> (Just (Table'shapesDraw'connector a), rest)
																			(_,_) ->
																				case (fromElem c0) of
																				(Just a,_) -> (Just (Table'shapesChart'chart a), rest)
																				(_,_) ->
																					case (fromElem c0) of
																					(Just a,_) -> (Just (Table'shapesDr3d'scene a), rest)
																					(_,_) ->
																						case (fromElem c0) of
																						(Just a,_) -> (Just (Table'shapesDraw'control a), rest)
																						(_,_) ->
																						    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'shapesDraw'rect a) = [CElem (Elem "table:shapes" [] (toElem a) )]
    toElem (Table'shapesDraw'line a) = [CElem (Elem "table:shapes" [] (toElem a) )]
    toElem (Table'shapesDraw'polyline a) = [CElem (Elem "table:shapes" [] (toElem a) )]
    toElem (Table'shapesDraw'polygon a) = [CElem (Elem "table:shapes" [] (toElem a) )]
    toElem (Table'shapesDraw'path a) = [CElem (Elem "table:shapes" [] (toElem a) )]
    toElem (Table'shapesDraw'circle a) = [CElem (Elem "table:shapes" [] (toElem a) )]
    toElem (Table'shapesDraw'ellipse a) = [CElem (Elem "table:shapes" [] (toElem a) )]
    toElem (Table'shapesDraw'g a) = [CElem (Elem "table:shapes" [] (toElem a) )]
    toElem (Table'shapesDraw'page_thumbnail a) = [CElem (Elem "table:shapes" [] (toElem a) )]
    toElem (Table'shapesDraw'text_box a) = [CElem (Elem "table:shapes" [] (toElem a) )]
    toElem (Table'shapesDraw'image a) = [CElem (Elem "table:shapes" [] (toElem a) )]
    toElem (Table'shapesDraw'object a) = [CElem (Elem "table:shapes" [] (toElem a) )]
    toElem (Table'shapesDraw'object_ole a) = [CElem (Elem "table:shapes" [] (toElem a) )]
    toElem (Table'shapesDraw'applet a) = [CElem (Elem "table:shapes" [] (toElem a) )]
    toElem (Table'shapesDraw'floating_frame a) = [CElem (Elem "table:shapes" [] (toElem a) )]
    toElem (Table'shapesDraw'plugin a) = [CElem (Elem "table:shapes" [] (toElem a) )]
    toElem (Table'shapesDraw'measure a) = [CElem (Elem "table:shapes" [] (toElem a) )]
    toElem (Table'shapesDraw'caption a) = [CElem (Elem "table:shapes" [] (toElem a) )]
    toElem (Table'shapesDraw'connector a) = [CElem (Elem "table:shapes" [] (toElem a) )]
    toElem (Table'shapesChart'chart a) = [CElem (Elem "table:shapes" [] (toElem a) )]
    toElem (Table'shapesDr3d'scene a) = [CElem (Elem "table:shapes" [] (toElem a) )]
    toElem (Table'shapesDraw'control a) = [CElem (Elem "table:shapes" [] (toElem a) )]
instance XmlContent Table'table_column_group where
    fromElem (CElem (Elem "table:table-column-group" as c0):rest) =
	(\(a,ca)->
	   (Just (Table'table_column_group (fromAttrs as) a), rest))
	(definite fromElem "table:table-column-group+" "table:table-column-group" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'table_column_group as a) =
	[CElem (Elem "table:table-column-group" (toAttrs as) (toElem a))]
instance XmlAttributes Table'table_column_group_Attrs where
    fromAttrs as =
	Table'table_column_group_Attrs
	  { table'table_column_groupTable'display = defaultA fromAttrToStr "true" "table:display" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "table:display" (table'table_column_groupTable'display v)
	]
instance XmlContent Table'table_column_group_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Table'table_column_group_Table'table_header_columns a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Table'table_column_group_Table'table_column a), rest)
		(_,_) ->
			case (fromElem c0) of
			(Just a,rest) -> (Just (Table'table_column_group_Table'table_column_group a), rest)
			(_,_) ->
			    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'table_column_group_Table'table_header_columns a) = toElem a
    toElem (Table'table_column_group_Table'table_column a) = toElem a
    toElem (Table'table_column_group_Table'table_column_group a) = toElem a
instance XmlContent Table'table_header_columns where
    fromElem (CElem (Elem "table:table-header-columns" [] c0):rest) =
	(\(a,ca)->
	   (Just (Table'table_header_columns a), rest))
	(definite fromElem "table:table-header-columns+" "table:table-header-columns" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'table_header_columns a) =
	[CElem (Elem "table:table-header-columns" [] (toElem a))]
instance XmlContent Table'table_header_columns_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Table'table_header_columns_Table'table_column a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Table'table_header_columns_Table'table_column_group a), rest)
		(_,_) ->
		    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'table_header_columns_Table'table_column a) = toElem a
    toElem (Table'table_header_columns_Table'table_column_group a) = toElem a
instance XmlContent Table'table_columns where
    fromElem (CElem (Elem "table:table-columns" [] c0):rest) =
	(\(a,ca)->
	   (Just (Table'table_columns a), rest))
	(definite fromElem "table:table-columns+" "table:table-columns" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'table_columns a) =
	[CElem (Elem "table:table-columns" [] (toElem a))]
instance XmlContent Table'table_columns_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Table'table_columns_Table'table_column a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Table'table_columns_Table'table_column_group a), rest)
		(_,_) ->
		    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'table_columns_Table'table_column a) = toElem a
    toElem (Table'table_columns_Table'table_column_group a) = toElem a
instance XmlContent Table'table_column where
    fromElem (CElem (Elem "table:table-column" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "table:table-column" (toAttrs as) [])]
instance XmlAttributes Table'table_column where
    fromAttrs as =
	Table'table_column
	  { table'table_columnTable'number_columns_repeated = defaultA fromAttrToStr "1" "table:number-columns-repeated" as
	  , table'table_columnTable'style_name = possibleA fromAttrToStr "table:style-name" as
	  , table'table_columnTable'visibility = defaultA fromAttrToTyp Table'table_column_table'visibility_visible "table:visibility" as
	  , table'table_columnTable'default_cell_style_name = possibleA fromAttrToStr "table:default-cell-style-name" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "table:number-columns-repeated" (table'table_columnTable'number_columns_repeated v)
	, maybeToAttr toAttrFrStr "table:style-name" (table'table_columnTable'style_name v)
	, defaultToAttr toAttrFrTyp "table:visibility" (table'table_columnTable'visibility v)
	, maybeToAttr toAttrFrStr "table:default-cell-style-name" (table'table_columnTable'default_cell_style_name v)
	]
instance XmlAttrType Table'table_column_table'visibility where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "visible" = Just Table'table_column_table'visibility_visible
	    translate "collapse" = Just Table'table_column_table'visibility_collapse
	    translate "filter" = Just Table'table_column_table'visibility_filter
	    translate _ = Nothing
    toAttrFrTyp n Table'table_column_table'visibility_visible = Just (n, str2attr "visible")
    toAttrFrTyp n Table'table_column_table'visibility_collapse = Just (n, str2attr "collapse")
    toAttrFrTyp n Table'table_column_table'visibility_filter = Just (n, str2attr "filter")
instance XmlContent Table'table_row_group where
    fromElem (CElem (Elem "table:table-row-group" as c0):rest) =
	(\(a,ca)->
	   (Just (Table'table_row_group (fromAttrs as) a), rest))
	(definite fromElem "table:table-row-group+" "table:table-row-group" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'table_row_group as a) =
	[CElem (Elem "table:table-row-group" (toAttrs as) (toElem a))]
instance XmlAttributes Table'table_row_group_Attrs where
    fromAttrs as =
	Table'table_row_group_Attrs
	  { table'table_row_groupTable'display = defaultA fromAttrToStr "true" "table:display" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "table:display" (table'table_row_groupTable'display v)
	]
instance XmlContent Table'table_row_group_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Table'table_row_group_Table'table_header_rows a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Table'table_row_group_Table'table_row a), rest)
		(_,_) ->
			case (fromElem c0) of
			(Just a,rest) -> (Just (Table'table_row_group_Table'table_row_group a), rest)
			(_,_) ->
			    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'table_row_group_Table'table_header_rows a) = toElem a
    toElem (Table'table_row_group_Table'table_row a) = toElem a
    toElem (Table'table_row_group_Table'table_row_group a) = toElem a
instance XmlContent Table'table_header_rows where
    fromElem (CElem (Elem "table:table-header-rows" [] c0):rest) =
	(\(a,ca)->
	   (Just (Table'table_header_rows a), rest))
	(definite fromElem "table:table-header-rows+" "table:table-header-rows" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'table_header_rows a) =
	[CElem (Elem "table:table-header-rows" [] (toElem a))]
instance XmlContent Table'table_header_rows_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Table'table_header_rows_Table'table_row a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Table'table_header_rows_Table'table_row_group a), rest)
		(_,_) ->
		    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'table_header_rows_Table'table_row a) = toElem a
    toElem (Table'table_header_rows_Table'table_row_group a) = toElem a
instance XmlContent Table'table_rows where
    fromElem (CElem (Elem "table:table-rows" [] c0):rest) =
	(\(a,ca)->
	   (Just (Table'table_rows a), rest))
	(definite fromElem "table:table-rows+" "table:table-rows" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'table_rows a) =
	[CElem (Elem "table:table-rows" [] (toElem a))]
instance XmlContent Table'table_rows_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Table'table_rows_Table'table_row a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Table'table_rows_Table'table_row_group a), rest)
		(_,_) ->
		    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'table_rows_Table'table_row a) = toElem a
    toElem (Table'table_rows_Table'table_row_group a) = toElem a
instance XmlContent Table'table_row where
    fromElem (CElem (Elem "table:table-row" as c0):rest) =
	(\(a,ca)->
	   (Just (Table'table_row (fromAttrs as) a), rest))
	(definite fromElem "table:table-row+" "table:table-row" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'table_row as a) =
	[CElem (Elem "table:table-row" (toAttrs as) (toElem a))]
instance XmlAttributes Table'table_row_Attrs where
    fromAttrs as =
	Table'table_row_Attrs
	  { table'table_rowTable'number_rows_repeated = defaultA fromAttrToStr "1" "table:number-rows-repeated" as
	  , table'table_rowTable'style_name = possibleA fromAttrToStr "table:style-name" as
	  , table'table_rowTable'visibility = defaultA fromAttrToTyp Table'table_row_table'visibility_visible "table:visibility" as
	  , table'table_rowTable'default_cell_style_name = possibleA fromAttrToStr "table:default-cell-style-name" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "table:number-rows-repeated" (table'table_rowTable'number_rows_repeated v)
	, maybeToAttr toAttrFrStr "table:style-name" (table'table_rowTable'style_name v)
	, defaultToAttr toAttrFrTyp "table:visibility" (table'table_rowTable'visibility v)
	, maybeToAttr toAttrFrStr "table:default-cell-style-name" (table'table_rowTable'default_cell_style_name v)
	]
instance XmlContent Table'table_row_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Table'table_row_Table'table_cell a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Table'table_row_Table'covered_table_cell a), rest)
		(_,_) ->
		    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'table_row_Table'table_cell a) = toElem a
    toElem (Table'table_row_Table'covered_table_cell a) = toElem a
instance XmlAttrType Table'table_row_table'visibility where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "visible" = Just Table'table_row_table'visibility_visible
	    translate "collapse" = Just Table'table_row_table'visibility_collapse
	    translate "filter" = Just Table'table_row_table'visibility_filter
	    translate _ = Nothing
    toAttrFrTyp n Table'table_row_table'visibility_visible = Just (n, str2attr "visible")
    toAttrFrTyp n Table'table_row_table'visibility_collapse = Just (n, str2attr "collapse")
    toAttrFrTyp n Table'table_row_table'visibility_filter = Just (n, str2attr "filter")
instance XmlContent Table'table_cell where
    fromElem (CElem (Elem "table:table-cell" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (\(d,cd)->
		    (Just (Table'table_cell (fromAttrs as) a b c d), rest))
		 (definite fromElem "OneOf" "table:table-cell" cc))
	      (fromElem cb))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'table_cell as a b c d) =
	[CElem (Elem "table:table-cell" (toAttrs as) (maybe [] toElem a ++
						      maybe [] toElem b ++ maybe [] toElem c ++
						      toElem d))]
instance XmlAttributes Table'table_cell_Attrs where
    fromAttrs as =
	Table'table_cell_Attrs
	  { table'table_cellTable'number_columns_repeated = defaultA fromAttrToStr "1" "table:number-columns-repeated" as
	  , table'table_cellTable'number_rows_spanned = defaultA fromAttrToStr "1" "table:number-rows-spanned" as
	  , table'table_cellTable'number_columns_spanned = defaultA fromAttrToStr "1" "table:number-columns-spanned" as
	  , table'table_cellTable'style_name = possibleA fromAttrToStr "table:style-name" as
	  , table'table_cellTable'validation_name = possibleA fromAttrToStr "table:validation-name" as
	  , table'table_cellTable'formula = possibleA fromAttrToStr "table:formula" as
	  , table'table_cellTable'number_matrix_rows_spanned = possibleA fromAttrToStr "table:number-matrix-rows-spanned" as
	  , table'table_cellTable'number_matrix_columns_spanned = possibleA fromAttrToStr "table:number-matrix-columns-spanned" as
	  , table'table_cellTable'value_type = defaultA fromAttrToTyp Table'table_cell_table'value_type_string "table:value-type" as
	  , table'table_cellTable'value = possibleA fromAttrToStr "table:value" as
	  , table'table_cellTable'date_value = possibleA fromAttrToStr "table:date-value" as
	  , table'table_cellTable'time_value = possibleA fromAttrToStr "table:time-value" as
	  , table'table_cellTable'boolean_value = possibleA fromAttrToStr "table:boolean-value" as
	  , table'table_cellTable'string_value = possibleA fromAttrToStr "table:string-value" as
	  , table'table_cellTable'currency = possibleA fromAttrToStr "table:currency" as
	  , table'table_cellTable'protected = defaultA fromAttrToStr "false" "table:protected" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "table:number-columns-repeated" (table'table_cellTable'number_columns_repeated v)
	, defaultToAttr toAttrFrStr "table:number-rows-spanned" (table'table_cellTable'number_rows_spanned v)
	, defaultToAttr toAttrFrStr "table:number-columns-spanned" (table'table_cellTable'number_columns_spanned v)
	, maybeToAttr toAttrFrStr "table:style-name" (table'table_cellTable'style_name v)
	, maybeToAttr toAttrFrStr "table:validation-name" (table'table_cellTable'validation_name v)
	, maybeToAttr toAttrFrStr "table:formula" (table'table_cellTable'formula v)
	, maybeToAttr toAttrFrStr "table:number-matrix-rows-spanned" (table'table_cellTable'number_matrix_rows_spanned v)
	, maybeToAttr toAttrFrStr "table:number-matrix-columns-spanned" (table'table_cellTable'number_matrix_columns_spanned v)
	, defaultToAttr toAttrFrTyp "table:value-type" (table'table_cellTable'value_type v)
	, maybeToAttr toAttrFrStr "table:value" (table'table_cellTable'value v)
	, maybeToAttr toAttrFrStr "table:date-value" (table'table_cellTable'date_value v)
	, maybeToAttr toAttrFrStr "table:time-value" (table'table_cellTable'time_value v)
	, maybeToAttr toAttrFrStr "table:boolean-value" (table'table_cellTable'boolean_value v)
	, maybeToAttr toAttrFrStr "table:string-value" (table'table_cellTable'string_value v)
	, maybeToAttr toAttrFrStr "table:currency" (table'table_cellTable'currency v)
	, defaultToAttr toAttrFrStr "table:protected" (table'table_cellTable'protected v)
	]
instance XmlAttrType Table'table_cell_table'value_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "float" = Just Table'table_cell_table'value_type_float
	    translate "time" = Just Table'table_cell_table'value_type_time
	    translate "date" = Just Table'table_cell_table'value_type_date
	    translate "percentage" = Just Table'table_cell_table'value_type_percentage
	    translate "currency" = Just Table'table_cell_table'value_type_currency
	    translate "boolean" = Just Table'table_cell_table'value_type_boolean
	    translate "string" = Just Table'table_cell_table'value_type_string
	    translate _ = Nothing
    toAttrFrTyp n Table'table_cell_table'value_type_float = Just (n, str2attr "float")
    toAttrFrTyp n Table'table_cell_table'value_type_time = Just (n, str2attr "time")
    toAttrFrTyp n Table'table_cell_table'value_type_date = Just (n, str2attr "date")
    toAttrFrTyp n Table'table_cell_table'value_type_percentage = Just (n, str2attr "percentage")
    toAttrFrTyp n Table'table_cell_table'value_type_currency = Just (n, str2attr "currency")
    toAttrFrTyp n Table'table_cell_table'value_type_boolean = Just (n, str2attr "boolean")
    toAttrFrTyp n Table'table_cell_table'value_type_string = Just (n, str2attr "string")
instance XmlContent Table'covered_table_cell where
    fromElem (CElem (Elem "table:covered-table-cell" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (\(d,cd)->
		    (Just (Table'covered_table_cell (fromAttrs as) a b c d), rest))
		 (definite fromElem "OneOf" "table:covered-table-cell" cc))
	      (fromElem cb))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'covered_table_cell as a b c d) =
	[CElem (Elem "table:covered-table-cell" (toAttrs as) (maybe [] toElem a
							      ++ maybe [] toElem b ++
							      maybe [] toElem c ++ toElem d))]
instance XmlAttributes Table'covered_table_cell_Attrs where
    fromAttrs as =
	Table'covered_table_cell_Attrs
	  { table'covered_table_cellTable'number_columns_repeated = defaultA fromAttrToStr "1" "table:number-columns-repeated" as
	  , table'covered_table_cellTable'style_name = possibleA fromAttrToStr "table:style-name" as
	  , table'covered_table_cellTable'validation_name = possibleA fromAttrToStr "table:validation-name" as
	  , table'covered_table_cellTable'formula = possibleA fromAttrToStr "table:formula" as
	  , table'covered_table_cellTable'number_matrix_rows_spanned = possibleA fromAttrToStr "table:number-matrix-rows-spanned" as
	  , table'covered_table_cellTable'number_matrix_columns_spanned = possibleA fromAttrToStr "table:number-matrix-columns-spanned" as
	  , table'covered_table_cellTable'value_type = defaultA fromAttrToTyp Table'covered_table_cell_table'value_type_string "table:value-type" as
	  , table'covered_table_cellTable'value = possibleA fromAttrToStr "table:value" as
	  , table'covered_table_cellTable'date_value = possibleA fromAttrToStr "table:date-value" as
	  , table'covered_table_cellTable'time_value = possibleA fromAttrToStr "table:time-value" as
	  , table'covered_table_cellTable'boolean_value = possibleA fromAttrToStr "table:boolean-value" as
	  , table'covered_table_cellTable'string_value = possibleA fromAttrToStr "table:string-value" as
	  , table'covered_table_cellTable'currency = possibleA fromAttrToStr "table:currency" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "table:number-columns-repeated" (table'covered_table_cellTable'number_columns_repeated v)
	, maybeToAttr toAttrFrStr "table:style-name" (table'covered_table_cellTable'style_name v)
	, maybeToAttr toAttrFrStr "table:validation-name" (table'covered_table_cellTable'validation_name v)
	, maybeToAttr toAttrFrStr "table:formula" (table'covered_table_cellTable'formula v)
	, maybeToAttr toAttrFrStr "table:number-matrix-rows-spanned" (table'covered_table_cellTable'number_matrix_rows_spanned v)
	, maybeToAttr toAttrFrStr "table:number-matrix-columns-spanned" (table'covered_table_cellTable'number_matrix_columns_spanned v)
	, defaultToAttr toAttrFrTyp "table:value-type" (table'covered_table_cellTable'value_type v)
	, maybeToAttr toAttrFrStr "table:value" (table'covered_table_cellTable'value v)
	, maybeToAttr toAttrFrStr "table:date-value" (table'covered_table_cellTable'date_value v)
	, maybeToAttr toAttrFrStr "table:time-value" (table'covered_table_cellTable'time_value v)
	, maybeToAttr toAttrFrStr "table:boolean-value" (table'covered_table_cellTable'boolean_value v)
	, maybeToAttr toAttrFrStr "table:string-value" (table'covered_table_cellTable'string_value v)
	, maybeToAttr toAttrFrStr "table:currency" (table'covered_table_cellTable'currency v)
	]
instance XmlAttrType Table'covered_table_cell_table'value_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "float" = Just Table'covered_table_cell_table'value_type_float
	    translate "time" = Just Table'covered_table_cell_table'value_type_time
	    translate "date" = Just Table'covered_table_cell_table'value_type_date
	    translate "percentage" = Just Table'covered_table_cell_table'value_type_percentage
	    translate "currency" = Just Table'covered_table_cell_table'value_type_currency
	    translate "boolean" = Just Table'covered_table_cell_table'value_type_boolean
	    translate "string" = Just Table'covered_table_cell_table'value_type_string
	    translate _ = Nothing
    toAttrFrTyp n Table'covered_table_cell_table'value_type_float = Just (n, str2attr "float")
    toAttrFrTyp n Table'covered_table_cell_table'value_type_time = Just (n, str2attr "time")
    toAttrFrTyp n Table'covered_table_cell_table'value_type_date = Just (n, str2attr "date")
    toAttrFrTyp n Table'covered_table_cell_table'value_type_percentage = Just (n, str2attr "percentage")
    toAttrFrTyp n Table'covered_table_cell_table'value_type_currency = Just (n, str2attr "currency")
    toAttrFrTyp n Table'covered_table_cell_table'value_type_boolean = Just (n, str2attr "boolean")
    toAttrFrTyp n Table'covered_table_cell_table'value_type_string = Just (n, str2attr "string")
instance XmlContent Table'cell_range_source where
    fromElem (CElem (Elem "table:cell-range-source" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "table:cell-range-source" (toAttrs as) [])]
instance XmlAttributes Table'cell_range_source where
    fromAttrs as =
	Table'cell_range_source
	  { table'cell_range_sourceTable'name = definiteA fromAttrToStr "table:cell-range-source" "table:name" as
	  , table'cell_range_sourceXlink'type = defaultA fromAttrToTyp Table'cell_range_source_xlink'type_simple "xlink:type" as
	  , table'cell_range_sourceXlink'actuate = defaultA fromAttrToTyp Table'cell_range_source_xlink'actuate_onRequest "xlink:actuate" as
	  , table'cell_range_sourceXlink'href = definiteA fromAttrToStr "table:cell-range-source" "xlink:href" as
	  , table'cell_range_sourceTable'filter_name = definiteA fromAttrToStr "table:cell-range-source" "table:filter-name" as
	  , table'cell_range_sourceTable'filter_options = possibleA fromAttrToStr "table:filter-options" as
	  , table'cell_range_sourceTable'last_column_spanned = definiteA fromAttrToStr "table:cell-range-source" "table:last-column-spanned" as
	  , table'cell_range_sourceTable'last_row_spanned = definiteA fromAttrToStr "table:cell-range-source" "table:last-row-spanned" as
	  , table'cell_range_sourceTable'refresh_delay = possibleA fromAttrToStr "table:refresh-delay" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "table:name" (table'cell_range_sourceTable'name v)
	, defaultToAttr toAttrFrTyp "xlink:type" (table'cell_range_sourceXlink'type v)
	, defaultToAttr toAttrFrTyp "xlink:actuate" (table'cell_range_sourceXlink'actuate v)
	, toAttrFrStr "xlink:href" (table'cell_range_sourceXlink'href v)
	, toAttrFrStr "table:filter-name" (table'cell_range_sourceTable'filter_name v)
	, maybeToAttr toAttrFrStr "table:filter-options" (table'cell_range_sourceTable'filter_options v)
	, toAttrFrStr "table:last-column-spanned" (table'cell_range_sourceTable'last_column_spanned v)
	, toAttrFrStr "table:last-row-spanned" (table'cell_range_sourceTable'last_row_spanned v)
	, maybeToAttr toAttrFrStr "table:refresh-delay" (table'cell_range_sourceTable'refresh_delay v)
	]
instance XmlAttrType Table'cell_range_source_xlink'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "simple" = Just Table'cell_range_source_xlink'type_simple
	    translate _ = Nothing
    toAttrFrTyp n Table'cell_range_source_xlink'type_simple = Just (n, str2attr "simple")
instance XmlAttrType Table'cell_range_source_xlink'actuate where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "onRequest" = Just Table'cell_range_source_xlink'actuate_onRequest
	    translate _ = Nothing
    toAttrFrTyp n Table'cell_range_source_xlink'actuate_onRequest = Just (n, str2attr "onRequest")
instance XmlContent Table'detective where
    fromElem (CElem (Elem "table:detective" [] c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Table'detective a b), rest))
	   (many fromElem ca))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'detective a b) =
	[CElem (Elem "table:detective" [] (concatMap toElem a ++
					   concatMap toElem b))]
instance XmlContent Table'highlighted_range where
    fromElem (CElem (Elem "table:highlighted-range" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "table:highlighted-range" (toAttrs as) [])]
instance XmlAttributes Table'highlighted_range where
    fromAttrs as =
	Table'highlighted_range
	  { table'highlighted_rangeTable'cell_range_address = possibleA fromAttrToStr "table:cell-range-address" as
	  , table'highlighted_rangeTable'direction = possibleA fromAttrToTyp "table:direction" as
	  , table'highlighted_rangeTable'contains_error = possibleA fromAttrToStr "table:contains-error" as
	  , table'highlighted_rangeTable'marked_invalid = possibleA fromAttrToStr "table:marked-invalid" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "table:cell-range-address" (table'highlighted_rangeTable'cell_range_address v)
	, maybeToAttr toAttrFrTyp "table:direction" (table'highlighted_rangeTable'direction v)
	, maybeToAttr toAttrFrStr "table:contains-error" (table'highlighted_rangeTable'contains_error v)
	, maybeToAttr toAttrFrStr "table:marked-invalid" (table'highlighted_rangeTable'marked_invalid v)
	]
instance XmlAttrType Table'highlighted_range_table'direction where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "from-another-table" = Just Table'highlighted_range_table'direction_from_another_table
	    translate "to-another-table" = Just Table'highlighted_range_table'direction_to_another_table
	    translate "from-same-table" = Just Table'highlighted_range_table'direction_from_same_table
	    translate "to-same-table" = Just Table'highlighted_range_table'direction_to_same_table
	    translate _ = Nothing
    toAttrFrTyp n Table'highlighted_range_table'direction_from_another_table = Just (n, str2attr "from-another-table")
    toAttrFrTyp n Table'highlighted_range_table'direction_to_another_table = Just (n, str2attr "to-another-table")
    toAttrFrTyp n Table'highlighted_range_table'direction_from_same_table = Just (n, str2attr "from-same-table")
    toAttrFrTyp n Table'highlighted_range_table'direction_to_same_table = Just (n, str2attr "to-same-table")
instance XmlContent Table'operation where
    fromElem (CElem (Elem "table:operation" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "table:operation" (toAttrs as) [])]
instance XmlAttributes Table'operation where
    fromAttrs as =
	Table'operation
	  { table'operationTable'name = definiteA fromAttrToTyp "table:operation" "table:name" as
	  , table'operationTable'index = definiteA fromAttrToStr "table:operation" "table:index" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrTyp "table:name" (table'operationTable'name v)
	, toAttrFrStr "table:index" (table'operationTable'index v)
	]
instance XmlAttrType Table'operation_table'name where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "trace-dependents" = Just Table'operation_table'name_trace_dependents
	    translate "remove-dependents" = Just Table'operation_table'name_remove_dependents
	    translate "trace-precedents" = Just Table'operation_table'name_trace_precedents
	    translate "remove-precedents" = Just Table'operation_table'name_remove_precedents
	    translate "trace-errors" = Just Table'operation_table'name_trace_errors
	    translate _ = Nothing
    toAttrFrTyp n Table'operation_table'name_trace_dependents = Just (n, str2attr "trace-dependents")
    toAttrFrTyp n Table'operation_table'name_remove_dependents = Just (n, str2attr "remove-dependents")
    toAttrFrTyp n Table'operation_table'name_trace_precedents = Just (n, str2attr "trace-precedents")
    toAttrFrTyp n Table'operation_table'name_remove_precedents = Just (n, str2attr "remove-precedents")
    toAttrFrTyp n Table'operation_table'name_trace_errors = Just (n, str2attr "trace-errors")
instance XmlContent Table'content_validations where
    fromElem (CElem (Elem "table:content-validations" [] c0):rest) =
	(\(a,ca)->
	   (Just (Table'content_validations a), rest))
	(definite fromElem "table:content-validation+" "table:content-validations" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'content_validations a) =
	[CElem (Elem "table:content-validations" [] (toElem a))]
instance XmlContent Table'content_validation where
    fromElem (CElem (Elem "table:content-validation" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Table'content_validation (fromAttrs as) a b), rest))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'content_validation as a b) =
	[CElem (Elem "table:content-validation" (toAttrs as) (maybe [] toElem a
							      ++ maybe [] toElem b))]
instance XmlAttributes Table'content_validation_Attrs where
    fromAttrs as =
	Table'content_validation_Attrs
	  { table'content_validationTable'name = definiteA fromAttrToStr "table:content-validation" "table:name" as
	  , table'content_validationTable'condition = possibleA fromAttrToStr "table:condition" as
	  , table'content_validationTable'base_cell_address = possibleA fromAttrToStr "table:base-cell-address" as
	  , table'content_validationTable'allow_empty_cell = possibleA fromAttrToStr "table:allow-empty-cell" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "table:name" (table'content_validationTable'name v)
	, maybeToAttr toAttrFrStr "table:condition" (table'content_validationTable'condition v)
	, maybeToAttr toAttrFrStr "table:base-cell-address" (table'content_validationTable'base_cell_address v)
	, maybeToAttr toAttrFrStr "table:allow-empty-cell" (table'content_validationTable'allow_empty_cell v)
	]
instance XmlContent Table'help_message where
    fromElem (CElem (Elem "table:help-message" as c0):rest) =
	(\(a,ca)->
	   (Just (Table'help_message (fromAttrs as) a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'help_message as a) =
	[CElem (Elem "table:help-message" (toAttrs as) (concatMap toElem a))]
instance XmlAttributes Table'help_message_Attrs where
    fromAttrs as =
	Table'help_message_Attrs
	  { table'help_messageTable'title = possibleA fromAttrToStr "table:title" as
	  , table'help_messageTable'display = possibleA fromAttrToStr "table:display" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "table:title" (table'help_messageTable'title v)
	, maybeToAttr toAttrFrStr "table:display" (table'help_messageTable'display v)
	]
instance XmlContent Table'error_message where
    fromElem (CElem (Elem "table:error-message" as c0):rest) =
	(\(a,ca)->
	   (Just (Table'error_message (fromAttrs as) a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'error_message as a) =
	[CElem (Elem "table:error-message" (toAttrs as) (concatMap toElem a))]
instance XmlAttributes Table'error_message_Attrs where
    fromAttrs as =
	Table'error_message_Attrs
	  { table'error_messageTable'title = possibleA fromAttrToStr "table:title" as
	  , table'error_messageTable'message_type = possibleA fromAttrToTyp "table:message-type" as
	  , table'error_messageTable'display = possibleA fromAttrToStr "table:display" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "table:title" (table'error_messageTable'title v)
	, maybeToAttr toAttrFrTyp "table:message-type" (table'error_messageTable'message_type v)
	, maybeToAttr toAttrFrStr "table:display" (table'error_messageTable'display v)
	]
instance XmlAttrType Table'error_message_table'message_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "stop" = Just Table'error_message_table'message_type_stop
	    translate "warning" = Just Table'error_message_table'message_type_warning
	    translate "information" = Just Table'error_message_table'message_type_information
	    translate _ = Nothing
    toAttrFrTyp n Table'error_message_table'message_type_stop = Just (n, str2attr "stop")
    toAttrFrTyp n Table'error_message_table'message_type_warning = Just (n, str2attr "warning")
    toAttrFrTyp n Table'error_message_table'message_type_information = Just (n, str2attr "information")
instance XmlContent Table'error_macro where
    fromElem (CElem (Elem "table:error-macro" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "table:error-macro" (toAttrs as) [])]
instance XmlAttributes Table'error_macro where
    fromAttrs as =
	Table'error_macro
	  { table'error_macroTable'name = possibleA fromAttrToStr "table:name" as
	  , table'error_macroTable'execute = possibleA fromAttrToStr "table:execute" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "table:name" (table'error_macroTable'name v)
	, maybeToAttr toAttrFrStr "table:execute" (table'error_macroTable'execute v)
	]
instance XmlContent Table'sub_table where
    fromElem (CElem (Elem "table:sub-table" [] c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Table'sub_table a b), rest))
	   (definite fromElem "OneOf" "table:sub-table" ca))
	(definite fromElem "OneOf" "table:sub-table" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'sub_table a b) =
	[CElem (Elem "table:sub-table" [] (toElem a ++ toElem b))]
instance XmlContent Table'label_ranges where
    fromElem (CElem (Elem "table:label-ranges" [] c0):rest) =
	(\(a,ca)->
	   (Just (Table'label_ranges a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'label_ranges a) =
	[CElem (Elem "table:label-ranges" [] (concatMap toElem a))]
instance XmlContent Table'label_range where
    fromElem (CElem (Elem "table:label-range" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "table:label-range" (toAttrs as) [])]
instance XmlAttributes Table'label_range where
    fromAttrs as =
	Table'label_range
	  { table'label_rangeTable'label_cell_range_address = definiteA fromAttrToStr "table:label-range" "table:label-cell-range-address" as
	  , table'label_rangeTable'data_cell_range_address = definiteA fromAttrToStr "table:label-range" "table:data-cell-range-address" as
	  , table'label_rangeTable'orientation = definiteA fromAttrToTyp "table:label-range" "table:orientation" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "table:label-cell-range-address" (table'label_rangeTable'label_cell_range_address v)
	, toAttrFrStr "table:data-cell-range-address" (table'label_rangeTable'data_cell_range_address v)
	, toAttrFrTyp "table:orientation" (table'label_rangeTable'orientation v)
	]
instance XmlAttrType Table'label_range_table'orientation where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "column" = Just Table'label_range_table'orientation_column
	    translate "row" = Just Table'label_range_table'orientation_row
	    translate _ = Nothing
    toAttrFrTyp n Table'label_range_table'orientation_column = Just (n, str2attr "column")
    toAttrFrTyp n Table'label_range_table'orientation_row = Just (n, str2attr "row")
instance XmlContent Table'named_expressions where
    fromElem (CElem (Elem "table:named-expressions" [] c0):rest) =
	(\(a,ca)->
	   (Just (Table'named_expressions a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'named_expressions a) =
	[CElem (Elem "table:named-expressions" [] (concatMap toElem a))]
instance XmlContent Table'named_expressions_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Table'named_expressions_Table'named_range a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Table'named_expressions_Table'named_expression a), rest)
		(_,_) ->
		    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'named_expressions_Table'named_range a) = toElem a
    toElem (Table'named_expressions_Table'named_expression a) = toElem a
instance XmlContent Table'named_range where
    fromElem (CElem (Elem "table:named-range" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "table:named-range" (toAttrs as) [])]
instance XmlAttributes Table'named_range where
    fromAttrs as =
	Table'named_range
	  { table'named_rangeTable'name = definiteA fromAttrToStr "table:named-range" "table:name" as
	  , table'named_rangeTable'cell_range_address = definiteA fromAttrToStr "table:named-range" "table:cell-range-address" as
	  , table'named_rangeTable'base_cell_address = possibleA fromAttrToStr "table:base-cell-address" as
	  , table'named_rangeTable'range_usable_as = defaultA fromAttrToStr "none" "table:range-usable-as" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "table:name" (table'named_rangeTable'name v)
	, toAttrFrStr "table:cell-range-address" (table'named_rangeTable'cell_range_address v)
	, maybeToAttr toAttrFrStr "table:base-cell-address" (table'named_rangeTable'base_cell_address v)
	, defaultToAttr toAttrFrStr "table:range-usable-as" (table'named_rangeTable'range_usable_as v)
	]
instance XmlContent Table'named_expression where
    fromElem (CElem (Elem "table:named-expression" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "table:named-expression" (toAttrs as) [])]
instance XmlAttributes Table'named_expression where
    fromAttrs as =
	Table'named_expression
	  { table'named_expressionTable'name = definiteA fromAttrToStr "table:named-expression" "table:name" as
	  , table'named_expressionTable'expression = definiteA fromAttrToStr "table:named-expression" "table:expression" as
	  , table'named_expressionTable'base_cell_address = possibleA fromAttrToStr "table:base-cell-address" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "table:name" (table'named_expressionTable'name v)
	, toAttrFrStr "table:expression" (table'named_expressionTable'expression v)
	, maybeToAttr toAttrFrStr "table:base-cell-address" (table'named_expressionTable'base_cell_address v)
	]
instance XmlContent Table'filter where
    fromElem (CElem (Elem "table:filter" as c0):rest) =
	case (fromElem c0) of
	(Just a,_) -> (Just (Table'filterTable'filter_condition (fromAttrs as) a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,_) -> (Just (Table'filterTable'filter_and (fromAttrs as) a), rest)
		(_,_) ->
			case (fromElem c0) of
			(Just a,_) -> (Just (Table'filterTable'filter_or (fromAttrs as) a), rest)
			(_,_) ->
			    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'filterTable'filter_condition as a) = [CElem (Elem "table:filter" (toAttrs as) (toElem a) )]
    toElem (Table'filterTable'filter_and as a) = [CElem (Elem "table:filter" (toAttrs as) (toElem a) )]
    toElem (Table'filterTable'filter_or as a) = [CElem (Elem "table:filter" (toAttrs as) (toElem a) )]
instance XmlAttributes Table'filter_Attrs where
    fromAttrs as =
	Table'filter_Attrs
	  { table'filterTable'target_range_address = possibleA fromAttrToStr "table:target-range-address" as
	  , table'filterTable'condition_source_range_address = possibleA fromAttrToStr "table:condition-source-range-address" as
	  , table'filterTable'condition_source = defaultA fromAttrToTyp Table'filter_table'condition_source_self "table:condition-source" as
	  , table'filterTable'display_duplicates = defaultA fromAttrToStr "true" "table:display-duplicates" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "table:target-range-address" (table'filterTable'target_range_address v)
	, maybeToAttr toAttrFrStr "table:condition-source-range-address" (table'filterTable'condition_source_range_address v)
	, defaultToAttr toAttrFrTyp "table:condition-source" (table'filterTable'condition_source v)
	, defaultToAttr toAttrFrStr "table:display-duplicates" (table'filterTable'display_duplicates v)
	]
instance XmlAttrType Table'filter_table'condition_source where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "self" = Just Table'filter_table'condition_source_self
	    translate "cell-range" = Just Table'filter_table'condition_source_cell_range
	    translate _ = Nothing
    toAttrFrTyp n Table'filter_table'condition_source_self = Just (n, str2attr "self")
    toAttrFrTyp n Table'filter_table'condition_source_cell_range = Just (n, str2attr "cell-range")
instance XmlContent Table'filter_and where
    fromElem (CElem (Elem "table:filter-and" [] c0):rest) =
	(\(a,ca)->
	   (Just (Table'filter_and a), rest))
	(definite fromElem "table:filter-and+" "table:filter-and" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'filter_and a) =
	[CElem (Elem "table:filter-and" [] (toElem a))]
instance XmlContent Table'filter_and_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Table'filter_and_Table'filter_or a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Table'filter_and_Table'filter_condition a), rest)
		(_,_) ->
		    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'filter_and_Table'filter_or a) = toElem a
    toElem (Table'filter_and_Table'filter_condition a) = toElem a
instance XmlContent Table'filter_or where
    fromElem (CElem (Elem "table:filter-or" [] c0):rest) =
	(\(a,ca)->
	   (Just (Table'filter_or a), rest))
	(definite fromElem "table:filter-or+" "table:filter-or" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'filter_or a) =
	[CElem (Elem "table:filter-or" [] (toElem a))]
instance XmlContent Table'filter_or_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Table'filter_or_Table'filter_and a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Table'filter_or_Table'filter_condition a), rest)
		(_,_) ->
		    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'filter_or_Table'filter_and a) = toElem a
    toElem (Table'filter_or_Table'filter_condition a) = toElem a
instance XmlContent Table'filter_condition where
    fromElem (CElem (Elem "table:filter-condition" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "table:filter-condition" (toAttrs as) [])]
instance XmlAttributes Table'filter_condition where
    fromAttrs as =
	Table'filter_condition
	  { table'filter_conditionTable'field_number = definiteA fromAttrToStr "table:filter-condition" "table:field-number" as
	  , table'filter_conditionTable'case_sensitive = defaultA fromAttrToStr "false" "table:case-sensitive" as
	  , table'filter_conditionTable'data_type = defaultA fromAttrToTyp Table'filter_condition_table'data_type_text "table:data-type" as
	  , table'filter_conditionTable'value = definiteA fromAttrToStr "table:filter-condition" "table:value" as
	  , table'filter_conditionTable'operator = definiteA fromAttrToStr "table:filter-condition" "table:operator" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "table:field-number" (table'filter_conditionTable'field_number v)
	, defaultToAttr toAttrFrStr "table:case-sensitive" (table'filter_conditionTable'case_sensitive v)
	, defaultToAttr toAttrFrTyp "table:data-type" (table'filter_conditionTable'data_type v)
	, toAttrFrStr "table:value" (table'filter_conditionTable'value v)
	, toAttrFrStr "table:operator" (table'filter_conditionTable'operator v)
	]
instance XmlAttrType Table'filter_condition_table'data_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "text" = Just Table'filter_condition_table'data_type_text
	    translate "number" = Just Table'filter_condition_table'data_type_number
	    translate _ = Nothing
    toAttrFrTyp n Table'filter_condition_table'data_type_text = Just (n, str2attr "text")
    toAttrFrTyp n Table'filter_condition_table'data_type_number = Just (n, str2attr "number")
instance XmlContent Table'database_ranges where
    fromElem (CElem (Elem "table:database-ranges" [] c0):rest) =
	(\(a,ca)->
	   (Just (Table'database_ranges a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'database_ranges a) =
	[CElem (Elem "table:database-ranges" [] (concatMap toElem a))]
instance XmlContent Table'database_range where
    fromElem (CElem (Elem "table:database-range" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (\(d,cd)->
		    (Just (Table'database_range (fromAttrs as) a b c d), rest))
		 (fromElem cc))
	      (fromElem cb))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'database_range as a b c d) =
	[CElem (Elem "table:database-range" (toAttrs as) (maybe [] toElem a
							  ++ maybe [] toElem b ++ maybe [] toElem c
							  ++ maybe [] toElem d))]
instance XmlAttributes Table'database_range_Attrs where
    fromAttrs as =
	Table'database_range_Attrs
	  { table'database_rangeTable'name = possibleA fromAttrToStr "table:name" as
	  , table'database_rangeTable'is_selection = defaultA fromAttrToStr "false" "table:is-selection" as
	  , table'database_rangeTable'on_update_keep_styles = defaultA fromAttrToStr "false" "table:on-update-keep-styles" as
	  , table'database_rangeTable'on_update_keep_size = defaultA fromAttrToStr "true" "table:on-update-keep-size" as
	  , table'database_rangeTable'has_persistant_data = defaultA fromAttrToStr "true" "table:has-persistant-data" as
	  , table'database_rangeTable'orientation = defaultA fromAttrToTyp Table'database_range_table'orientation_row "table:orientation" as
	  , table'database_rangeTable'contains_header = defaultA fromAttrToStr "true" "table:contains-header" as
	  , table'database_rangeTable'display_filter_buttons = defaultA fromAttrToStr "false" "table:display-filter-buttons" as
	  , table'database_rangeTable'target_range_address = definiteA fromAttrToStr "table:database-range" "table:target-range-address" as
	  , table'database_rangeTable'refresh_delay = possibleA fromAttrToStr "table:refresh-delay" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "table:name" (table'database_rangeTable'name v)
	, defaultToAttr toAttrFrStr "table:is-selection" (table'database_rangeTable'is_selection v)
	, defaultToAttr toAttrFrStr "table:on-update-keep-styles" (table'database_rangeTable'on_update_keep_styles v)
	, defaultToAttr toAttrFrStr "table:on-update-keep-size" (table'database_rangeTable'on_update_keep_size v)
	, defaultToAttr toAttrFrStr "table:has-persistant-data" (table'database_rangeTable'has_persistant_data v)
	, defaultToAttr toAttrFrTyp "table:orientation" (table'database_rangeTable'orientation v)
	, defaultToAttr toAttrFrStr "table:contains-header" (table'database_rangeTable'contains_header v)
	, defaultToAttr toAttrFrStr "table:display-filter-buttons" (table'database_rangeTable'display_filter_buttons v)
	, toAttrFrStr "table:target-range-address" (table'database_rangeTable'target_range_address v)
	, maybeToAttr toAttrFrStr "table:refresh-delay" (table'database_rangeTable'refresh_delay v)
	]
instance XmlAttrType Table'database_range_table'orientation where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "row" = Just Table'database_range_table'orientation_row
	    translate "column" = Just Table'database_range_table'orientation_column
	    translate _ = Nothing
    toAttrFrTyp n Table'database_range_table'orientation_row = Just (n, str2attr "row")
    toAttrFrTyp n Table'database_range_table'orientation_column = Just (n, str2attr "column")
instance XmlContent Table'database_source_sql where
    fromElem (CElem (Elem "table:database-source-sql" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "table:database-source-sql" (toAttrs as) [])]
instance XmlAttributes Table'database_source_sql where
    fromAttrs as =
	Table'database_source_sql
	  { table'database_source_sqlTable'database_name = definiteA fromAttrToStr "table:database-source-sql" "table:database-name" as
	  , table'database_source_sqlTable'sql_statement = definiteA fromAttrToStr "table:database-source-sql" "table:sql-statement" as
	  , table'database_source_sqlTable'parse_sql_statements = defaultA fromAttrToStr "false" "table:parse-sql-statements" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "table:database-name" (table'database_source_sqlTable'database_name v)
	, toAttrFrStr "table:sql-statement" (table'database_source_sqlTable'sql_statement v)
	, defaultToAttr toAttrFrStr "table:parse-sql-statements" (table'database_source_sqlTable'parse_sql_statements v)
	]
instance XmlContent Table'database_source_table where
    fromElem (CElem (Elem "table:database-source-table" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "table:database-source-table" (toAttrs as) [])]
instance XmlAttributes Table'database_source_table where
    fromAttrs as =
	Table'database_source_table
	  { table'database_source_tableTable'database_name = definiteA fromAttrToStr "table:database-source-table" "table:database-name" as
	  , table'database_source_tableTable'table_name = definiteA fromAttrToStr "table:database-source-table" "table:table-name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "table:database-name" (table'database_source_tableTable'database_name v)
	, toAttrFrStr "table:table-name" (table'database_source_tableTable'table_name v)
	]
instance XmlContent Table'database_source_query where
    fromElem (CElem (Elem "table:database-source-query" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "table:database-source-query" (toAttrs as) [])]
instance XmlAttributes Table'database_source_query where
    fromAttrs as =
	Table'database_source_query
	  { table'database_source_queryTable'database_name = definiteA fromAttrToStr "table:database-source-query" "table:database-name" as
	  , table'database_source_queryTable'query_name = definiteA fromAttrToStr "table:database-source-query" "table:query-name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "table:database-name" (table'database_source_queryTable'database_name v)
	, toAttrFrStr "table:query-name" (table'database_source_queryTable'query_name v)
	]
instance XmlContent Table'sort where
    fromElem (CElem (Elem "table:sort" as c0):rest) =
	(\(a,ca)->
	   (Just (Table'sort (fromAttrs as) a), rest))
	(definite fromElem "table:sort-by+" "table:sort" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'sort as a) =
	[CElem (Elem "table:sort" (toAttrs as) (toElem a))]
instance XmlAttributes Table'sort_Attrs where
    fromAttrs as =
	Table'sort_Attrs
	  { table'sortTable'bind_styles_to_content = defaultA fromAttrToStr "true" "table:bind-styles-to-content" as
	  , table'sortTable'target_range_address = possibleA fromAttrToStr "table:target-range-address" as
	  , table'sortTable'case_sensitive = defaultA fromAttrToStr "false" "table:case-sensitive" as
	  , table'sortTable'language = possibleA fromAttrToStr "table:language" as
	  , table'sortTable'country = possibleA fromAttrToStr "table:country" as
	  , table'sortTable'algorithm = possibleA fromAttrToStr "table:algorithm" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "table:bind-styles-to-content" (table'sortTable'bind_styles_to_content v)
	, maybeToAttr toAttrFrStr "table:target-range-address" (table'sortTable'target_range_address v)
	, defaultToAttr toAttrFrStr "table:case-sensitive" (table'sortTable'case_sensitive v)
	, maybeToAttr toAttrFrStr "table:language" (table'sortTable'language v)
	, maybeToAttr toAttrFrStr "table:country" (table'sortTable'country v)
	, maybeToAttr toAttrFrStr "table:algorithm" (table'sortTable'algorithm v)
	]
instance XmlContent Table'sort_by where
    fromElem (CElem (Elem "table:sort-by" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "table:sort-by" (toAttrs as) [])]
instance XmlAttributes Table'sort_by where
    fromAttrs as =
	Table'sort_by
	  { table'sort_byTable'field_number = definiteA fromAttrToStr "table:sort-by" "table:field-number" as
	  , table'sort_byTable'data_type = defaultA fromAttrToStr "automatic" "table:data-type" as
	  , table'sort_byTable'order = defaultA fromAttrToTyp Table'sort_by_table'order_ascending "table:order" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "table:field-number" (table'sort_byTable'field_number v)
	, defaultToAttr toAttrFrStr "table:data-type" (table'sort_byTable'data_type v)
	, defaultToAttr toAttrFrTyp "table:order" (table'sort_byTable'order v)
	]
instance XmlAttrType Table'sort_by_table'order where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "ascending" = Just Table'sort_by_table'order_ascending
	    translate "descending" = Just Table'sort_by_table'order_descending
	    translate _ = Nothing
    toAttrFrTyp n Table'sort_by_table'order_ascending = Just (n, str2attr "ascending")
    toAttrFrTyp n Table'sort_by_table'order_descending = Just (n, str2attr "descending")
instance XmlContent Table'subtotal_rules where
    fromElem (CElem (Elem "table:subtotal-rules" as c0):rest) =
	(\(a,ca)->
	   (Just (Table'subtotal_rules (fromAttrs as) a), rest))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'subtotal_rules as a) =
	[CElem (Elem "table:subtotal-rules" (toAttrs as) (maybe [] toElem a))]
instance XmlAttributes Table'subtotal_rules_Attrs where
    fromAttrs as =
	Table'subtotal_rules_Attrs
	  { table'subtotal_rulesTable'bind_styles_to_content = defaultA fromAttrToStr "true" "table:bind-styles-to-content" as
	  , table'subtotal_rulesTable'case_sensitive = defaultA fromAttrToStr "false" "table:case-sensitive" as
	  , table'subtotal_rulesTable'page_breaks_on_group_change = defaultA fromAttrToStr "false" "table:page-breaks-on-group-change" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "table:bind-styles-to-content" (table'subtotal_rulesTable'bind_styles_to_content v)
	, defaultToAttr toAttrFrStr "table:case-sensitive" (table'subtotal_rulesTable'case_sensitive v)
	, defaultToAttr toAttrFrStr "table:page-breaks-on-group-change" (table'subtotal_rulesTable'page_breaks_on_group_change v)
	]
instance XmlContent Table'subtotal_rules_ where
    fromElem c0 =
	case (fromElem c0) of
	(a,rest) -> (Just (Table'subtotal_rules_Table'sort_groups a), rest)
	(Nothing,_) ->
		case (many fromElem c0) of
		(a,rest) -> (Just (Table'subtotal_rules_Table'subtotal_rule a), rest)
		([],_) ->
		    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'subtotal_rules_Table'sort_groups a) = maybe [] toElem a
    toElem (Table'subtotal_rules_Table'subtotal_rule a) = concatMap toElem a
instance XmlContent Table'sort_groups where
    fromElem (CElem (Elem "table:sort-groups" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "table:sort-groups" (toAttrs as) [])]
instance XmlAttributes Table'sort_groups where
    fromAttrs as =
	Table'sort_groups
	  { table'sort_groupsTable'data_type = defaultA fromAttrToStr "automatic" "table:data-type" as
	  , table'sort_groupsTable'order = defaultA fromAttrToTyp Table'sort_groups_table'order_ascending "table:order" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "table:data-type" (table'sort_groupsTable'data_type v)
	, defaultToAttr toAttrFrTyp "table:order" (table'sort_groupsTable'order v)
	]
instance XmlAttrType Table'sort_groups_table'order where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "ascending" = Just Table'sort_groups_table'order_ascending
	    translate "descending" = Just Table'sort_groups_table'order_descending
	    translate _ = Nothing
    toAttrFrTyp n Table'sort_groups_table'order_ascending = Just (n, str2attr "ascending")
    toAttrFrTyp n Table'sort_groups_table'order_descending = Just (n, str2attr "descending")
instance XmlContent Table'subtotal_rule where
    fromElem (CElem (Elem "table:subtotal-rule" as c0):rest) =
	(\(a,ca)->
	   (Just (Table'subtotal_rule (fromAttrs as) a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'subtotal_rule as a) =
	[CElem (Elem "table:subtotal-rule" (toAttrs as) (concatMap toElem a))]
instance XmlAttributes Table'subtotal_rule_Attrs where
    fromAttrs as =
	Table'subtotal_rule_Attrs
	  { table'subtotal_ruleTable'group_by_field_number = definiteA fromAttrToStr "table:subtotal-rule" "table:group-by-field-number" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "table:group-by-field-number" (table'subtotal_ruleTable'group_by_field_number v)
	]
instance XmlContent Table'subtotal_field where
    fromElem (CElem (Elem "table:subtotal-field" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "table:subtotal-field" (toAttrs as) [])]
instance XmlAttributes Table'subtotal_field where
    fromAttrs as =
	Table'subtotal_field
	  { table'subtotal_fieldTable'field_number = definiteA fromAttrToStr "table:subtotal-field" "table:field-number" as
	  , table'subtotal_fieldTable'function = definiteA fromAttrToStr "table:subtotal-field" "table:function" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "table:field-number" (table'subtotal_fieldTable'field_number v)
	, toAttrFrStr "table:function" (table'subtotal_fieldTable'function v)
	]
instance XmlContent Table'data_pilot_tables where
    fromElem (CElem (Elem "table:data-pilot-tables" [] c0):rest) =
	(\(a,ca)->
	   (Just (Table'data_pilot_tables a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'data_pilot_tables a) =
	[CElem (Elem "table:data-pilot-tables" [] (concatMap toElem a))]
instance XmlContent Table'data_pilot_table where
    fromElem (CElem (Elem "table:data-pilot-table" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Table'data_pilot_table (fromAttrs as) a b), rest))
	   (definite fromElem "table:data-pilot-field+" "table:data-pilot-table" ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'data_pilot_table as a b) =
	[CElem (Elem "table:data-pilot-table" (toAttrs as) (maybe [] toElem a
							    ++ toElem b))]
instance XmlAttributes Table'data_pilot_table_Attrs where
    fromAttrs as =
	Table'data_pilot_table_Attrs
	  { table'data_pilot_tableTable'name = definiteA fromAttrToStr "table:data-pilot-table" "table:name" as
	  , table'data_pilot_tableTable'application_data = possibleA fromAttrToStr "table:application-data" as
	  , table'data_pilot_tableTable'grand_total = defaultA fromAttrToTyp Table'data_pilot_table_table'grand_total_both "table:grand-total" as
	  , table'data_pilot_tableTable'ignore_empty_rows = defaultA fromAttrToStr "false" "table:ignore-empty-rows" as
	  , table'data_pilot_tableTable'identify_categories = defaultA fromAttrToStr "false" "table:identify-categories" as
	  , table'data_pilot_tableTable'target_range_address = definiteA fromAttrToStr "table:data-pilot-table" "table:target-range-address" as
	  , table'data_pilot_tableTable'buttons = definiteA fromAttrToStr "table:data-pilot-table" "table:buttons" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "table:name" (table'data_pilot_tableTable'name v)
	, maybeToAttr toAttrFrStr "table:application-data" (table'data_pilot_tableTable'application_data v)
	, defaultToAttr toAttrFrTyp "table:grand-total" (table'data_pilot_tableTable'grand_total v)
	, defaultToAttr toAttrFrStr "table:ignore-empty-rows" (table'data_pilot_tableTable'ignore_empty_rows v)
	, defaultToAttr toAttrFrStr "table:identify-categories" (table'data_pilot_tableTable'identify_categories v)
	, toAttrFrStr "table:target-range-address" (table'data_pilot_tableTable'target_range_address v)
	, toAttrFrStr "table:buttons" (table'data_pilot_tableTable'buttons v)
	]
instance XmlAttrType Table'data_pilot_table_table'grand_total where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Table'data_pilot_table_table'grand_total_none
	    translate "row" = Just Table'data_pilot_table_table'grand_total_row
	    translate "column" = Just Table'data_pilot_table_table'grand_total_column
	    translate "both" = Just Table'data_pilot_table_table'grand_total_both
	    translate _ = Nothing
    toAttrFrTyp n Table'data_pilot_table_table'grand_total_none = Just (n, str2attr "none")
    toAttrFrTyp n Table'data_pilot_table_table'grand_total_row = Just (n, str2attr "row")
    toAttrFrTyp n Table'data_pilot_table_table'grand_total_column = Just (n, str2attr "column")
    toAttrFrTyp n Table'data_pilot_table_table'grand_total_both = Just (n, str2attr "both")
instance XmlContent Table'source_service where
    fromElem (CElem (Elem "table:source-service" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "table:source-service" (toAttrs as) [])]
instance XmlAttributes Table'source_service where
    fromAttrs as =
	Table'source_service
	  { table'source_serviceTable'name = definiteA fromAttrToStr "table:source-service" "table:name" as
	  , table'source_serviceTable'source_name = definiteA fromAttrToStr "table:source-service" "table:source-name" as
	  , table'source_serviceTable'object_name = definiteA fromAttrToStr "table:source-service" "table:object-name" as
	  , table'source_serviceTable'username = possibleA fromAttrToStr "table:username" as
	  , table'source_serviceTable'password = possibleA fromAttrToStr "table:password" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "table:name" (table'source_serviceTable'name v)
	, toAttrFrStr "table:source-name" (table'source_serviceTable'source_name v)
	, toAttrFrStr "table:object-name" (table'source_serviceTable'object_name v)
	, maybeToAttr toAttrFrStr "table:username" (table'source_serviceTable'username v)
	, maybeToAttr toAttrFrStr "table:password" (table'source_serviceTable'password v)
	]
instance XmlContent Table'source_cell_range where
    fromElem (CElem (Elem "table:source-cell-range" as c0):rest) =
	(\(a,ca)->
	   (Just (Table'source_cell_range (fromAttrs as) a), rest))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'source_cell_range as a) =
	[CElem (Elem "table:source-cell-range" (toAttrs as) (maybe [] toElem a))]
instance XmlAttributes Table'source_cell_range_Attrs where
    fromAttrs as =
	Table'source_cell_range_Attrs
	  { table'source_cell_rangeTable'cell_range_address = definiteA fromAttrToStr "table:source-cell-range" "table:cell-range-address" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "table:cell-range-address" (table'source_cell_rangeTable'cell_range_address v)
	]
instance XmlContent Table'data_pilot_field where
    fromElem (CElem (Elem "table:data-pilot-field" as c0):rest) =
	(\(a,ca)->
	   (Just (Table'data_pilot_field (fromAttrs as) a), rest))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'data_pilot_field as a) =
	[CElem (Elem "table:data-pilot-field" (toAttrs as) (maybe [] toElem a))]
instance XmlAttributes Table'data_pilot_field_Attrs where
    fromAttrs as =
	Table'data_pilot_field_Attrs
	  { table'data_pilot_fieldTable'source_field_name = definiteA fromAttrToStr "table:data-pilot-field" "table:source-field-name" as
	  , table'data_pilot_fieldTable'is_data_layout_field = defaultA fromAttrToStr "false" "table:is-data-layout-field" as
	  , table'data_pilot_fieldTable'function = definiteA fromAttrToStr "table:data-pilot-field" "table:function" as
	  , table'data_pilot_fieldTable'orientation = definiteA fromAttrToTyp "table:data-pilot-field" "table:orientation" as
	  , table'data_pilot_fieldTable'used_hierarchy = defaultA fromAttrToStr "1" "table:used-hierarchy" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "table:source-field-name" (table'data_pilot_fieldTable'source_field_name v)
	, defaultToAttr toAttrFrStr "table:is-data-layout-field" (table'data_pilot_fieldTable'is_data_layout_field v)
	, toAttrFrStr "table:function" (table'data_pilot_fieldTable'function v)
	, toAttrFrTyp "table:orientation" (table'data_pilot_fieldTable'orientation v)
	, defaultToAttr toAttrFrStr "table:used-hierarchy" (table'data_pilot_fieldTable'used_hierarchy v)
	]
instance XmlAttrType Table'data_pilot_field_table'orientation where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "row" = Just Table'data_pilot_field_table'orientation_row
	    translate "column" = Just Table'data_pilot_field_table'orientation_column
	    translate "data" = Just Table'data_pilot_field_table'orientation_data
	    translate "page" = Just Table'data_pilot_field_table'orientation_page
	    translate "hidden" = Just Table'data_pilot_field_table'orientation_hidden
	    translate _ = Nothing
    toAttrFrTyp n Table'data_pilot_field_table'orientation_row = Just (n, str2attr "row")
    toAttrFrTyp n Table'data_pilot_field_table'orientation_column = Just (n, str2attr "column")
    toAttrFrTyp n Table'data_pilot_field_table'orientation_data = Just (n, str2attr "data")
    toAttrFrTyp n Table'data_pilot_field_table'orientation_page = Just (n, str2attr "page")
    toAttrFrTyp n Table'data_pilot_field_table'orientation_hidden = Just (n, str2attr "hidden")
instance XmlContent Table'data_pilot_level where
    fromElem (CElem (Elem "table:data-pilot-level" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Table'data_pilot_level (fromAttrs as) a b), rest))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'data_pilot_level as a b) =
	[CElem (Elem "table:data-pilot-level" (toAttrs as) (maybe [] toElem a
							    ++ maybe [] toElem b))]
instance XmlAttributes Table'data_pilot_level_Attrs where
    fromAttrs as =
	Table'data_pilot_level_Attrs
	  { table'data_pilot_levelTable'display_empty = possibleA fromAttrToStr "table:display-empty" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "table:display-empty" (table'data_pilot_levelTable'display_empty v)
	]
instance XmlContent Table'data_pilot_subtotals where
    fromElem (CElem (Elem "table:data-pilot-subtotals" [] c0):rest) =
	(\(a,ca)->
	   (Just (Table'data_pilot_subtotals a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'data_pilot_subtotals a) =
	[CElem (Elem "table:data-pilot-subtotals" [] (concatMap toElem a))]
instance XmlContent Table'data_pilot_subtotal where
    fromElem (CElem (Elem "table:data-pilot-subtotal" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "table:data-pilot-subtotal" (toAttrs as) [])]
instance XmlAttributes Table'data_pilot_subtotal where
    fromAttrs as =
	Table'data_pilot_subtotal
	  { table'data_pilot_subtotalTable'function = definiteA fromAttrToStr "table:data-pilot-subtotal" "table:function" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "table:function" (table'data_pilot_subtotalTable'function v)
	]
instance XmlContent Table'data_pilot_members where
    fromElem (CElem (Elem "table:data-pilot-members" [] c0):rest) =
	(\(a,ca)->
	   (Just (Table'data_pilot_members a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'data_pilot_members a) =
	[CElem (Elem "table:data-pilot-members" [] (concatMap toElem a))]
instance XmlContent Table'data_pilot_member where
    fromElem (CElem (Elem "table:data-pilot-member" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "table:data-pilot-member" (toAttrs as) [])]
instance XmlAttributes Table'data_pilot_member where
    fromAttrs as =
	Table'data_pilot_member
	  { table'data_pilot_memberTable'name = definiteA fromAttrToStr "table:data-pilot-member" "table:name" as
	  , table'data_pilot_memberTable'display = possibleA fromAttrToStr "table:display" as
	  , table'data_pilot_memberTable'display_details = possibleA fromAttrToStr "table:display-details" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "table:name" (table'data_pilot_memberTable'name v)
	, maybeToAttr toAttrFrStr "table:display" (table'data_pilot_memberTable'display v)
	, maybeToAttr toAttrFrStr "table:display-details" (table'data_pilot_memberTable'display_details v)
	]
instance XmlContent Table'consolidation where
    fromElem (CElem (Elem "table:consolidation" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "table:consolidation" (toAttrs as) [])]
instance XmlAttributes Table'consolidation where
    fromAttrs as =
	Table'consolidation
	  { table'consolidationTable'function = definiteA fromAttrToStr "table:consolidation" "table:function" as
	  , table'consolidationTable'source_cell_range_addresses = definiteA fromAttrToStr "table:consolidation" "table:source-cell-range-addresses" as
	  , table'consolidationTable'target_cell_address = definiteA fromAttrToStr "table:consolidation" "table:target-cell-address" as
	  , table'consolidationTable'use_label = defaultA fromAttrToTyp Table'consolidation_table'use_label_none "table:use-label" as
	  , table'consolidationTable'link_to_source_data = defaultA fromAttrToStr "false" "table:link-to-source-data" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "table:function" (table'consolidationTable'function v)
	, toAttrFrStr "table:source-cell-range-addresses" (table'consolidationTable'source_cell_range_addresses v)
	, toAttrFrStr "table:target-cell-address" (table'consolidationTable'target_cell_address v)
	, defaultToAttr toAttrFrTyp "table:use-label" (table'consolidationTable'use_label v)
	, defaultToAttr toAttrFrStr "table:link-to-source-data" (table'consolidationTable'link_to_source_data v)
	]
instance XmlAttrType Table'consolidation_table'use_label where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Table'consolidation_table'use_label_none
	    translate "column" = Just Table'consolidation_table'use_label_column
	    translate "row" = Just Table'consolidation_table'use_label_row
	    translate "both" = Just Table'consolidation_table'use_label_both
	    translate _ = Nothing
    toAttrFrTyp n Table'consolidation_table'use_label_none = Just (n, str2attr "none")
    toAttrFrTyp n Table'consolidation_table'use_label_column = Just (n, str2attr "column")
    toAttrFrTyp n Table'consolidation_table'use_label_row = Just (n, str2attr "row")
    toAttrFrTyp n Table'consolidation_table'use_label_both = Just (n, str2attr "both")
instance XmlContent Table'dde_links where
    fromElem (CElem (Elem "table:dde-links" [] c0):rest) =
	(\(a,ca)->
	   (Just (Table'dde_links a), rest))
	(definite fromElem "table:dde-link+" "table:dde-links" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'dde_links a) =
	[CElem (Elem "table:dde-links" [] (toElem a))]
instance XmlContent Table'dde_link where
    fromElem (CElem (Elem "table:dde-link" [] c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Table'dde_link a b), rest))
	   (definite fromElem "<table:table>" "table:dde-link" ca))
	(definite fromElem "<office:dde-source>" "table:dde-link" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Table'dde_link a b) =
	[CElem (Elem "table:dde-link" [] (toElem a ++ toElem b))]
instance XmlContent Chart'chart where
    fromElem (CElem (Elem "chart:chart" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (\(d,cd)->
		    (\(e,ce)->
		       (Just (Chart'chart (fromAttrs as) a b c d e), rest))
		    (fromElem cd))
		 (definite fromElem "<chart:plot-area>" "chart:chart" cc))
	      (fromElem cb))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Chart'chart as a b c d e) =
	[CElem (Elem "chart:chart" (toAttrs as) (maybe [] toElem a ++
						 maybe [] toElem b ++ maybe [] toElem c ++ toElem d
						 ++ maybe [] toElem e))]
instance XmlAttributes Chart'chart_Attrs where
    fromAttrs as =
	Chart'chart_Attrs
	  { chart'chartChart'class = definiteA fromAttrToTyp "chart:chart" "chart:class" as
	  , chart'chartChart'add_in_name = possibleA fromAttrToStr "chart:add-in-name" as
	  , chart'chartChart'table_number_list = possibleA fromAttrToStr "chart:table-number-list" as
	  , chart'chartDraw'name = possibleA fromAttrToStr "draw:name" as
	  , chart'chartSvg'x = possibleA fromAttrToStr "svg:x" as
	  , chart'chartSvg'y = possibleA fromAttrToStr "svg:y" as
	  , chart'chartSvg'width = possibleA fromAttrToStr "svg:width" as
	  , chart'chartSvg'height = possibleA fromAttrToStr "svg:height" as
	  , chart'chartDraw'style_name = possibleA fromAttrToStr "draw:style-name" as
	  , chart'chartPresentation'style_name = possibleA fromAttrToStr "presentation:style-name" as
	  , chart'chartDraw'text_style_name = possibleA fromAttrToStr "draw:text-style-name" as
	  , chart'chartChart'column_mapping = possibleA fromAttrToStr "chart:column-mapping" as
	  , chart'chartChart'row_mapping = possibleA fromAttrToStr "chart:row-mapping" as
	  , chart'chartChart'style_name = possibleA fromAttrToStr "chart:style-name" as
	  , chart'chartPresentation'class = possibleA fromAttrToTyp "presentation:class" as
	  , chart'chartPresentation'placeholder = possibleA fromAttrToTyp "presentation:placeholder" as
	  , chart'chartPresentation'user_transformed = possibleA fromAttrToTyp "presentation:user-transformed" as
	  , chart'chartDraw'z_index = possibleA fromAttrToStr "draw:z-index" as
	  , chart'chartTable'end_cell_address = possibleA fromAttrToStr "table:end-cell-address" as
	  , chart'chartTable'end_x = possibleA fromAttrToStr "table:end-x" as
	  , chart'chartTable'end_y = possibleA fromAttrToStr "table:end-y" as
	  , chart'chartDraw'id = possibleA fromAttrToStr "draw:id" as
	  , chart'chartDraw'layer = possibleA fromAttrToStr "draw:layer" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrTyp "chart:class" (chart'chartChart'class v)
	, maybeToAttr toAttrFrStr "chart:add-in-name" (chart'chartChart'add_in_name v)
	, maybeToAttr toAttrFrStr "chart:table-number-list" (chart'chartChart'table_number_list v)
	, maybeToAttr toAttrFrStr "draw:name" (chart'chartDraw'name v)
	, maybeToAttr toAttrFrStr "svg:x" (chart'chartSvg'x v)
	, maybeToAttr toAttrFrStr "svg:y" (chart'chartSvg'y v)
	, maybeToAttr toAttrFrStr "svg:width" (chart'chartSvg'width v)
	, maybeToAttr toAttrFrStr "svg:height" (chart'chartSvg'height v)
	, maybeToAttr toAttrFrStr "draw:style-name" (chart'chartDraw'style_name v)
	, maybeToAttr toAttrFrStr "presentation:style-name" (chart'chartPresentation'style_name v)
	, maybeToAttr toAttrFrStr "draw:text-style-name" (chart'chartDraw'text_style_name v)
	, maybeToAttr toAttrFrStr "chart:column-mapping" (chart'chartChart'column_mapping v)
	, maybeToAttr toAttrFrStr "chart:row-mapping" (chart'chartChart'row_mapping v)
	, maybeToAttr toAttrFrStr "chart:style-name" (chart'chartChart'style_name v)
	, maybeToAttr toAttrFrTyp "presentation:class" (chart'chartPresentation'class v)
	, maybeToAttr toAttrFrTyp "presentation:placeholder" (chart'chartPresentation'placeholder v)
	, maybeToAttr toAttrFrTyp "presentation:user-transformed" (chart'chartPresentation'user_transformed v)
	, maybeToAttr toAttrFrStr "draw:z-index" (chart'chartDraw'z_index v)
	, maybeToAttr toAttrFrStr "table:end-cell-address" (chart'chartTable'end_cell_address v)
	, maybeToAttr toAttrFrStr "table:end-x" (chart'chartTable'end_x v)
	, maybeToAttr toAttrFrStr "table:end-y" (chart'chartTable'end_y v)
	, maybeToAttr toAttrFrStr "draw:id" (chart'chartDraw'id v)
	, maybeToAttr toAttrFrStr "draw:layer" (chart'chartDraw'layer v)
	]
instance XmlAttrType Chart'chart_chart'class where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "line" = Just Chart'chart_chart'class_line
	    translate "area" = Just Chart'chart_chart'class_area
	    translate "circle" = Just Chart'chart_chart'class_circle
	    translate "ring" = Just Chart'chart_chart'class_ring
	    translate "scatter" = Just Chart'chart_chart'class_scatter
	    translate "radar" = Just Chart'chart_chart'class_radar
	    translate "bar" = Just Chart'chart_chart'class_bar
	    translate "stock" = Just Chart'chart_chart'class_stock
	    translate "add-in" = Just Chart'chart_chart'class_add_in
	    translate _ = Nothing
    toAttrFrTyp n Chart'chart_chart'class_line = Just (n, str2attr "line")
    toAttrFrTyp n Chart'chart_chart'class_area = Just (n, str2attr "area")
    toAttrFrTyp n Chart'chart_chart'class_circle = Just (n, str2attr "circle")
    toAttrFrTyp n Chart'chart_chart'class_ring = Just (n, str2attr "ring")
    toAttrFrTyp n Chart'chart_chart'class_scatter = Just (n, str2attr "scatter")
    toAttrFrTyp n Chart'chart_chart'class_radar = Just (n, str2attr "radar")
    toAttrFrTyp n Chart'chart_chart'class_bar = Just (n, str2attr "bar")
    toAttrFrTyp n Chart'chart_chart'class_stock = Just (n, str2attr "stock")
    toAttrFrTyp n Chart'chart_chart'class_add_in = Just (n, str2attr "add-in")
instance XmlAttrType Chart'chart_presentation'class where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "title" = Just Chart'chart_presentation'class_title
	    translate "outline" = Just Chart'chart_presentation'class_outline
	    translate "subtitle" = Just Chart'chart_presentation'class_subtitle
	    translate "text" = Just Chart'chart_presentation'class_text
	    translate "graphic" = Just Chart'chart_presentation'class_graphic
	    translate "object" = Just Chart'chart_presentation'class_object
	    translate "chart" = Just Chart'chart_presentation'class_chart
	    translate "table" = Just Chart'chart_presentation'class_table
	    translate "orgchart" = Just Chart'chart_presentation'class_orgchart
	    translate "page" = Just Chart'chart_presentation'class_page
	    translate "notes" = Just Chart'chart_presentation'class_notes
	    translate _ = Nothing
    toAttrFrTyp n Chart'chart_presentation'class_title = Just (n, str2attr "title")
    toAttrFrTyp n Chart'chart_presentation'class_outline = Just (n, str2attr "outline")
    toAttrFrTyp n Chart'chart_presentation'class_subtitle = Just (n, str2attr "subtitle")
    toAttrFrTyp n Chart'chart_presentation'class_text = Just (n, str2attr "text")
    toAttrFrTyp n Chart'chart_presentation'class_graphic = Just (n, str2attr "graphic")
    toAttrFrTyp n Chart'chart_presentation'class_object = Just (n, str2attr "object")
    toAttrFrTyp n Chart'chart_presentation'class_chart = Just (n, str2attr "chart")
    toAttrFrTyp n Chart'chart_presentation'class_table = Just (n, str2attr "table")
    toAttrFrTyp n Chart'chart_presentation'class_orgchart = Just (n, str2attr "orgchart")
    toAttrFrTyp n Chart'chart_presentation'class_page = Just (n, str2attr "page")
    toAttrFrTyp n Chart'chart_presentation'class_notes = Just (n, str2attr "notes")
instance XmlAttrType Chart'chart_presentation'placeholder where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Chart'chart_presentation'placeholder_true
	    translate "false" = Just Chart'chart_presentation'placeholder_false
	    translate _ = Nothing
    toAttrFrTyp n Chart'chart_presentation'placeholder_true = Just (n, str2attr "true")
    toAttrFrTyp n Chart'chart_presentation'placeholder_false = Just (n, str2attr "false")
instance XmlAttrType Chart'chart_presentation'user_transformed where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "true" = Just Chart'chart_presentation'user_transformed_true
	    translate "false" = Just Chart'chart_presentation'user_transformed_false
	    translate _ = Nothing
    toAttrFrTyp n Chart'chart_presentation'user_transformed_true = Just (n, str2attr "true")
    toAttrFrTyp n Chart'chart_presentation'user_transformed_false = Just (n, str2attr "false")
instance XmlContent Chart'title where
    fromElem (CElem (Elem "chart:title" as c0):rest) =
	(\(a,ca)->
	   (Just (Chart'title (fromAttrs as) a), rest))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Chart'title as a) =
	[CElem (Elem "chart:title" (toAttrs as) (maybe [] toElem a))]
instance XmlAttributes Chart'title_Attrs where
    fromAttrs as =
	Chart'title_Attrs
	  { chart'titleTable'cell_range = possibleA fromAttrToStr "table:cell-range" as
	  , chart'titleSvg'x = possibleA fromAttrToStr "svg:x" as
	  , chart'titleSvg'y = possibleA fromAttrToStr "svg:y" as
	  , chart'titleChart'style_name = possibleA fromAttrToStr "chart:style-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "table:cell-range" (chart'titleTable'cell_range v)
	, maybeToAttr toAttrFrStr "svg:x" (chart'titleSvg'x v)
	, maybeToAttr toAttrFrStr "svg:y" (chart'titleSvg'y v)
	, maybeToAttr toAttrFrStr "chart:style-name" (chart'titleChart'style_name v)
	]
instance XmlContent Chart'subtitle where
    fromElem (CElem (Elem "chart:subtitle" as c0):rest) =
	(\(a,ca)->
	   (Just (Chart'subtitle (fromAttrs as) a), rest))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Chart'subtitle as a) =
	[CElem (Elem "chart:subtitle" (toAttrs as) (maybe [] toElem a))]
instance XmlAttributes Chart'subtitle_Attrs where
    fromAttrs as =
	Chart'subtitle_Attrs
	  { chart'subtitleTable'cell_range = possibleA fromAttrToStr "table:cell-range" as
	  , chart'subtitleSvg'x = possibleA fromAttrToStr "svg:x" as
	  , chart'subtitleSvg'y = possibleA fromAttrToStr "svg:y" as
	  , chart'subtitleChart'style_name = possibleA fromAttrToStr "chart:style-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "table:cell-range" (chart'subtitleTable'cell_range v)
	, maybeToAttr toAttrFrStr "svg:x" (chart'subtitleSvg'x v)
	, maybeToAttr toAttrFrStr "svg:y" (chart'subtitleSvg'y v)
	, maybeToAttr toAttrFrStr "chart:style-name" (chart'subtitleChart'style_name v)
	]
instance XmlContent Chart'legend where
    fromElem (CElem (Elem "chart:legend" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "chart:legend" (toAttrs as) [])]
instance XmlAttributes Chart'legend where
    fromAttrs as =
	Chart'legend
	  { chart'legendChart'legend_position = defaultA fromAttrToTyp Chart'legend_chart'legend_position_right "chart:legend-position" as
	  , chart'legendSvg'x = possibleA fromAttrToStr "svg:x" as
	  , chart'legendSvg'y = possibleA fromAttrToStr "svg:y" as
	  , chart'legendChart'style_name = possibleA fromAttrToStr "chart:style-name" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrTyp "chart:legend-position" (chart'legendChart'legend_position v)
	, maybeToAttr toAttrFrStr "svg:x" (chart'legendSvg'x v)
	, maybeToAttr toAttrFrStr "svg:y" (chart'legendSvg'y v)
	, maybeToAttr toAttrFrStr "chart:style-name" (chart'legendChart'style_name v)
	]
instance XmlAttrType Chart'legend_chart'legend_position where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "top" = Just Chart'legend_chart'legend_position_top
	    translate "left" = Just Chart'legend_chart'legend_position_left
	    translate "bottom" = Just Chart'legend_chart'legend_position_bottom
	    translate "right" = Just Chart'legend_chart'legend_position_right
	    translate _ = Nothing
    toAttrFrTyp n Chart'legend_chart'legend_position_top = Just (n, str2attr "top")
    toAttrFrTyp n Chart'legend_chart'legend_position_left = Just (n, str2attr "left")
    toAttrFrTyp n Chart'legend_chart'legend_position_bottom = Just (n, str2attr "bottom")
    toAttrFrTyp n Chart'legend_chart'legend_position_right = Just (n, str2attr "right")
instance XmlContent Chart'plot_area where
    fromElem (CElem (Elem "chart:plot-area" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (\(d,cd)->
		    (\(e,ce)->
		       (\(f,cf)->
			  (\(g,cg)->
			     (\(h,ch)->
				(\(i,ci)->
				   (Just (Chart'plot_area (fromAttrs as) a b c d e f g h i), rest))
				(fromElem ch))
			     (fromElem cg))
			  (fromElem cf))
		       (fromElem ce))
		    (fromElem cd))
		 (many fromElem cc))
	      (fromElem cb))
	   (many fromElem ca))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Chart'plot_area as a b c d e f g h i) =
	[CElem (Elem "chart:plot-area" (toAttrs as) (concatMap toElem a ++
						     concatMap toElem b ++ maybe [] toElem c ++
						     concatMap toElem d ++ maybe [] toElem e ++
						     maybe [] toElem f ++ maybe [] toElem g ++
						     maybe [] toElem h ++ maybe [] toElem i))]
instance XmlAttributes Chart'plot_area_Attrs where
    fromAttrs as =
	Chart'plot_area_Attrs
	  { chart'plot_areaSvg'x = possibleA fromAttrToStr "svg:x" as
	  , chart'plot_areaSvg'y = possibleA fromAttrToStr "svg:y" as
	  , chart'plot_areaSvg'width = possibleA fromAttrToStr "svg:width" as
	  , chart'plot_areaSvg'height = possibleA fromAttrToStr "svg:height" as
	  , chart'plot_areaChart'style_name = possibleA fromAttrToStr "chart:style-name" as
	  , chart'plot_areaTable'cell_range_address = possibleA fromAttrToStr "table:cell-range-address" as
	  , chart'plot_areaChart'table_number_list = possibleA fromAttrToStr "chart:table-number-list" as
	  , chart'plot_areaChart'data_source_has_labels = defaultA fromAttrToTyp Chart'plot_area_chart'data_source_has_labels_none "chart:data-source-has-labels" as
	  , chart'plot_areaDr3d'vrp = possibleA fromAttrToStr "dr3d:vrp" as
	  , chart'plot_areaDr3d'vpn = possibleA fromAttrToStr "dr3d:vpn" as
	  , chart'plot_areaDr3d'vup = possibleA fromAttrToStr "dr3d:vup" as
	  , chart'plot_areaDr3d'projection = possibleA fromAttrToTyp "dr3d:projection" as
	  , chart'plot_areaDr3d'transform = possibleA fromAttrToStr "dr3d:transform" as
	  , chart'plot_areaDr3d'distance = possibleA fromAttrToStr "dr3d:distance" as
	  , chart'plot_areaDr3d'focal_length = possibleA fromAttrToStr "dr3d:focal-length" as
	  , chart'plot_areaDr3d'shadow_slant = possibleA fromAttrToStr "dr3d:shadow-slant" as
	  , chart'plot_areaDr3d'shade_mode = possibleA fromAttrToTyp "dr3d:shade-mode" as
	  , chart'plot_areaDr3d'ambient_color = possibleA fromAttrToStr "dr3d:ambient-color" as
	  , chart'plot_areaDr3d'lighting_mode = possibleA fromAttrToStr "dr3d:lighting-mode" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "svg:x" (chart'plot_areaSvg'x v)
	, maybeToAttr toAttrFrStr "svg:y" (chart'plot_areaSvg'y v)
	, maybeToAttr toAttrFrStr "svg:width" (chart'plot_areaSvg'width v)
	, maybeToAttr toAttrFrStr "svg:height" (chart'plot_areaSvg'height v)
	, maybeToAttr toAttrFrStr "chart:style-name" (chart'plot_areaChart'style_name v)
	, maybeToAttr toAttrFrStr "table:cell-range-address" (chart'plot_areaTable'cell_range_address v)
	, maybeToAttr toAttrFrStr "chart:table-number-list" (chart'plot_areaChart'table_number_list v)
	, defaultToAttr toAttrFrTyp "chart:data-source-has-labels" (chart'plot_areaChart'data_source_has_labels v)
	, maybeToAttr toAttrFrStr "dr3d:vrp" (chart'plot_areaDr3d'vrp v)
	, maybeToAttr toAttrFrStr "dr3d:vpn" (chart'plot_areaDr3d'vpn v)
	, maybeToAttr toAttrFrStr "dr3d:vup" (chart'plot_areaDr3d'vup v)
	, maybeToAttr toAttrFrTyp "dr3d:projection" (chart'plot_areaDr3d'projection v)
	, maybeToAttr toAttrFrStr "dr3d:transform" (chart'plot_areaDr3d'transform v)
	, maybeToAttr toAttrFrStr "dr3d:distance" (chart'plot_areaDr3d'distance v)
	, maybeToAttr toAttrFrStr "dr3d:focal-length" (chart'plot_areaDr3d'focal_length v)
	, maybeToAttr toAttrFrStr "dr3d:shadow-slant" (chart'plot_areaDr3d'shadow_slant v)
	, maybeToAttr toAttrFrTyp "dr3d:shade-mode" (chart'plot_areaDr3d'shade_mode v)
	, maybeToAttr toAttrFrStr "dr3d:ambient-color" (chart'plot_areaDr3d'ambient_color v)
	, maybeToAttr toAttrFrStr "dr3d:lighting-mode" (chart'plot_areaDr3d'lighting_mode v)
	]
instance XmlAttrType Chart'plot_area_chart'data_source_has_labels where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Chart'plot_area_chart'data_source_has_labels_none
	    translate "row" = Just Chart'plot_area_chart'data_source_has_labels_row
	    translate "column" = Just Chart'plot_area_chart'data_source_has_labels_column
	    translate "both" = Just Chart'plot_area_chart'data_source_has_labels_both
	    translate _ = Nothing
    toAttrFrTyp n Chart'plot_area_chart'data_source_has_labels_none = Just (n, str2attr "none")
    toAttrFrTyp n Chart'plot_area_chart'data_source_has_labels_row = Just (n, str2attr "row")
    toAttrFrTyp n Chart'plot_area_chart'data_source_has_labels_column = Just (n, str2attr "column")
    toAttrFrTyp n Chart'plot_area_chart'data_source_has_labels_both = Just (n, str2attr "both")
instance XmlAttrType Chart'plot_area_dr3d'projection where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "parallel" = Just Chart'plot_area_dr3d'projection_parallel
	    translate "perspective" = Just Chart'plot_area_dr3d'projection_perspective
	    translate _ = Nothing
    toAttrFrTyp n Chart'plot_area_dr3d'projection_parallel = Just (n, str2attr "parallel")
    toAttrFrTyp n Chart'plot_area_dr3d'projection_perspective = Just (n, str2attr "perspective")
instance XmlAttrType Chart'plot_area_dr3d'shade_mode where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "flat" = Just Chart'plot_area_dr3d'shade_mode_flat
	    translate "phong" = Just Chart'plot_area_dr3d'shade_mode_phong
	    translate "gouraud" = Just Chart'plot_area_dr3d'shade_mode_gouraud
	    translate "draft" = Just Chart'plot_area_dr3d'shade_mode_draft
	    translate _ = Nothing
    toAttrFrTyp n Chart'plot_area_dr3d'shade_mode_flat = Just (n, str2attr "flat")
    toAttrFrTyp n Chart'plot_area_dr3d'shade_mode_phong = Just (n, str2attr "phong")
    toAttrFrTyp n Chart'plot_area_dr3d'shade_mode_gouraud = Just (n, str2attr "gouraud")
    toAttrFrTyp n Chart'plot_area_dr3d'shade_mode_draft = Just (n, str2attr "draft")
instance XmlContent Chart'wall where
    fromElem (CElem (Elem "chart:wall" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "chart:wall" (toAttrs as) [])]
instance XmlAttributes Chart'wall where
    fromAttrs as =
	Chart'wall
	  { chart'wallSvg'width = possibleA fromAttrToStr "svg:width" as
	  , chart'wallChart'style_name = possibleA fromAttrToStr "chart:style-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "svg:width" (chart'wallSvg'width v)
	, maybeToAttr toAttrFrStr "chart:style-name" (chart'wallChart'style_name v)
	]
instance XmlContent Chart'floor where
    fromElem (CElem (Elem "chart:floor" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "chart:floor" (toAttrs as) [])]
instance XmlAttributes Chart'floor where
    fromAttrs as =
	Chart'floor
	  { chart'floorSvg'width = possibleA fromAttrToStr "svg:width" as
	  , chart'floorChart'style_name = possibleA fromAttrToStr "chart:style-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "svg:width" (chart'floorSvg'width v)
	, maybeToAttr toAttrFrStr "chart:style-name" (chart'floorChart'style_name v)
	]
instance XmlContent Chart'stock_gain_marker where
    fromElem (CElem (Elem "chart:stock-gain-marker" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "chart:stock-gain-marker" (toAttrs as) [])]
instance XmlAttributes Chart'stock_gain_marker where
    fromAttrs as =
	Chart'stock_gain_marker
	  { chart'stock_gain_markerChart'style_name = possibleA fromAttrToStr "chart:style-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "chart:style-name" (chart'stock_gain_markerChart'style_name v)
	]
instance XmlContent Chart'stock_loss_marker where
    fromElem (CElem (Elem "chart:stock-loss-marker" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "chart:stock-loss-marker" (toAttrs as) [])]
instance XmlAttributes Chart'stock_loss_marker where
    fromAttrs as =
	Chart'stock_loss_marker
	  { chart'stock_loss_markerChart'style_name = possibleA fromAttrToStr "chart:style-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "chart:style-name" (chart'stock_loss_markerChart'style_name v)
	]
instance XmlContent Chart'stock_range_line where
    fromElem (CElem (Elem "chart:stock-range-line" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "chart:stock-range-line" (toAttrs as) [])]
instance XmlAttributes Chart'stock_range_line where
    fromAttrs as =
	Chart'stock_range_line
	  { chart'stock_range_lineChart'style_name = possibleA fromAttrToStr "chart:style-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "chart:style-name" (chart'stock_range_lineChart'style_name v)
	]
instance XmlContent Chart'axis where
    fromElem (CElem (Elem "chart:axis" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Chart'axis (fromAttrs as) a b), rest))
	   (many fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Chart'axis as a b) =
	[CElem (Elem "chart:axis" (toAttrs as) (maybe [] toElem a ++
						concatMap toElem b))]
instance XmlAttributes Chart'axis_Attrs where
    fromAttrs as =
	Chart'axis_Attrs
	  { chart'axisChart'class = definiteA fromAttrToTyp "chart:axis" "chart:class" as
	  , chart'axisChart'name = possibleA fromAttrToStr "chart:name" as
	  , chart'axisChart'style_name = possibleA fromAttrToStr "chart:style-name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrTyp "chart:class" (chart'axisChart'class v)
	, maybeToAttr toAttrFrStr "chart:name" (chart'axisChart'name v)
	, maybeToAttr toAttrFrStr "chart:style-name" (chart'axisChart'style_name v)
	]
instance XmlAttrType Chart'axis_chart'class where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "category" = Just Chart'axis_chart'class_category
	    translate "value" = Just Chart'axis_chart'class_value
	    translate "series" = Just Chart'axis_chart'class_series
	    translate "domain" = Just Chart'axis_chart'class_domain
	    translate _ = Nothing
    toAttrFrTyp n Chart'axis_chart'class_category = Just (n, str2attr "category")
    toAttrFrTyp n Chart'axis_chart'class_value = Just (n, str2attr "value")
    toAttrFrTyp n Chart'axis_chart'class_series = Just (n, str2attr "series")
    toAttrFrTyp n Chart'axis_chart'class_domain = Just (n, str2attr "domain")
instance XmlContent Chart'grid where
    fromElem (CElem (Elem "chart:grid" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "chart:grid" (toAttrs as) [])]
instance XmlAttributes Chart'grid where
    fromAttrs as =
	Chart'grid
	  { chart'gridChart'class = defaultA fromAttrToTyp Chart'grid_chart'class_major "chart:class" as
	  , chart'gridChart'style_name = possibleA fromAttrToStr "chart:style-name" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrTyp "chart:class" (chart'gridChart'class v)
	, maybeToAttr toAttrFrStr "chart:style-name" (chart'gridChart'style_name v)
	]
instance XmlAttrType Chart'grid_chart'class where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "major" = Just Chart'grid_chart'class_major
	    translate "minor" = Just Chart'grid_chart'class_minor
	    translate _ = Nothing
    toAttrFrTyp n Chart'grid_chart'class_major = Just (n, str2attr "major")
    toAttrFrTyp n Chart'grid_chart'class_minor = Just (n, str2attr "minor")
instance XmlContent Chart'categories where
    fromElem (CElem (Elem "chart:categories" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "chart:categories" (toAttrs as) [])]
instance XmlAttributes Chart'categories where
    fromAttrs as =
	Chart'categories
	  { chart'categoriesTable'cell_range_address = possibleA fromAttrToStr "table:cell-range-address" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "table:cell-range-address" (chart'categoriesTable'cell_range_address v)
	]
instance XmlContent Chart'series where
    fromElem (CElem (Elem "chart:series" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (\(d,cd)->
		    (\(e,ce)->
		       (Just (Chart'series (fromAttrs as) a b c d e), rest))
		    (many fromElem cd))
		 (fromElem cc))
	      (fromElem cb))
	   (fromElem ca))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Chart'series as a b c d e) =
	[CElem (Elem "chart:series" (toAttrs as) (concatMap toElem a ++
						  maybe [] toElem b ++ maybe [] toElem c ++
						  maybe [] toElem d ++ concatMap toElem e))]
instance XmlAttributes Chart'series_Attrs where
    fromAttrs as =
	Chart'series_Attrs
	  { chart'seriesChart'values_cell_range_address = possibleA fromAttrToStr "chart:values-cell-range-address" as
	  , chart'seriesChart'label_cell_address = possibleA fromAttrToStr "chart:label-cell-address" as
	  , chart'seriesChart'class = possibleA fromAttrToTyp "chart:class" as
	  , chart'seriesChart'attached_axis = possibleA fromAttrToStr "chart:attached-axis" as
	  , chart'seriesChart'style_name = possibleA fromAttrToStr "chart:style-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "chart:values-cell-range-address" (chart'seriesChart'values_cell_range_address v)
	, maybeToAttr toAttrFrStr "chart:label-cell-address" (chart'seriesChart'label_cell_address v)
	, maybeToAttr toAttrFrTyp "chart:class" (chart'seriesChart'class v)
	, maybeToAttr toAttrFrStr "chart:attached-axis" (chart'seriesChart'attached_axis v)
	, maybeToAttr toAttrFrStr "chart:style-name" (chart'seriesChart'style_name v)
	]
instance XmlAttrType Chart'series_chart'class where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "line" = Just Chart'series_chart'class_line
	    translate "area" = Just Chart'series_chart'class_area
	    translate "circle" = Just Chart'series_chart'class_circle
	    translate "ring" = Just Chart'series_chart'class_ring
	    translate "scatter" = Just Chart'series_chart'class_scatter
	    translate "radar" = Just Chart'series_chart'class_radar
	    translate "bar" = Just Chart'series_chart'class_bar
	    translate "stock" = Just Chart'series_chart'class_stock
	    translate "add-in" = Just Chart'series_chart'class_add_in
	    translate _ = Nothing
    toAttrFrTyp n Chart'series_chart'class_line = Just (n, str2attr "line")
    toAttrFrTyp n Chart'series_chart'class_area = Just (n, str2attr "area")
    toAttrFrTyp n Chart'series_chart'class_circle = Just (n, str2attr "circle")
    toAttrFrTyp n Chart'series_chart'class_ring = Just (n, str2attr "ring")
    toAttrFrTyp n Chart'series_chart'class_scatter = Just (n, str2attr "scatter")
    toAttrFrTyp n Chart'series_chart'class_radar = Just (n, str2attr "radar")
    toAttrFrTyp n Chart'series_chart'class_bar = Just (n, str2attr "bar")
    toAttrFrTyp n Chart'series_chart'class_stock = Just (n, str2attr "stock")
    toAttrFrTyp n Chart'series_chart'class_add_in = Just (n, str2attr "add-in")
instance XmlContent Chart'domain where
    fromElem (CElem (Elem "chart:domain" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "chart:domain" (toAttrs as) [])]
instance XmlAttributes Chart'domain where
    fromAttrs as =
	Chart'domain
	  { chart'domainTable'cell_range_address = possibleA fromAttrToStr "table:cell-range-address" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "table:cell-range-address" (chart'domainTable'cell_range_address v)
	]
instance XmlContent Chart'data_point where
    fromElem (CElem (Elem "chart:data-point" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "chart:data-point" (toAttrs as) [])]
instance XmlAttributes Chart'data_point where
    fromAttrs as =
	Chart'data_point
	  { chart'data_pointChart'repeated = possibleA fromAttrToStr "chart:repeated" as
	  , chart'data_pointChart'style_name = possibleA fromAttrToStr "chart:style-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "chart:repeated" (chart'data_pointChart'repeated v)
	, maybeToAttr toAttrFrStr "chart:style-name" (chart'data_pointChart'style_name v)
	]
instance XmlContent Chart'mean_value where
    fromElem (CElem (Elem "chart:mean-value" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "chart:mean-value" (toAttrs as) [])]
instance XmlAttributes Chart'mean_value where
    fromAttrs as =
	Chart'mean_value
	  { chart'mean_valueChart'style_name = possibleA fromAttrToStr "chart:style-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "chart:style-name" (chart'mean_valueChart'style_name v)
	]
instance XmlContent Chart'regression_curve where
    fromElem (CElem (Elem "chart:regression-curve" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "chart:regression-curve" (toAttrs as) [])]
instance XmlAttributes Chart'regression_curve where
    fromAttrs as =
	Chart'regression_curve
	  { chart'regression_curveChart'style_name = possibleA fromAttrToStr "chart:style-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "chart:style-name" (chart'regression_curveChart'style_name v)
	]
instance XmlContent Chart'error_indicator where
    fromElem (CElem (Elem "chart:error-indicator" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "chart:error-indicator" (toAttrs as) [])]
instance XmlAttributes Chart'error_indicator where
    fromAttrs as =
	Chart'error_indicator
	  { chart'error_indicatorChart'style_name = possibleA fromAttrToStr "chart:style-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "chart:style-name" (chart'error_indicatorChart'style_name v)
	]
instance XmlContent Number'number_style where
    fromElem (CElem (Elem "number:number-style" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (Just (Number'number_style (fromAttrs as) a b c), rest))
	      (many fromElem cb))
	   (definite fromElem "OneOf" "number:number-style" ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Number'number_style as a b c) =
	[CElem (Elem "number:number-style" (toAttrs as) (maybe [] toElem a
							 ++ toElem b ++ concatMap toElem c))]
instance XmlAttributes Number'number_style_Attrs where
    fromAttrs as =
	Number'number_style_Attrs
	  { number'number_styleStyle'name = definiteA fromAttrToStr "number:number-style" "style:name" as
	  , number'number_styleStyle'family = definiteA fromAttrToStr "number:number-style" "style:family" as
	  , number'number_styleNumber'language = possibleA fromAttrToStr "number:language" as
	  , number'number_styleNumber'country = possibleA fromAttrToStr "number:country" as
	  , number'number_styleNumber'title = possibleA fromAttrToStr "number:title" as
	  , number'number_styleStyle'volatile = possibleA fromAttrToStr "style:volatile" as
	  , number'number_styleNumber'transliteration_format = defaultA fromAttrToStr "1" "number:transliteration-format" as
	  , number'number_styleNumber'transliteration_language = possibleA fromAttrToStr "number:transliteration-language" as
	  , number'number_styleNumber'transliteration_country = possibleA fromAttrToStr "number:transliteration-country" as
	  , number'number_styleNumber'transliteration_style = defaultA fromAttrToTyp Number'number_style_number'transliteration_style_short "number:transliteration-style" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "style:name" (number'number_styleStyle'name v)
	, toAttrFrStr "style:family" (number'number_styleStyle'family v)
	, maybeToAttr toAttrFrStr "number:language" (number'number_styleNumber'language v)
	, maybeToAttr toAttrFrStr "number:country" (number'number_styleNumber'country v)
	, maybeToAttr toAttrFrStr "number:title" (number'number_styleNumber'title v)
	, maybeToAttr toAttrFrStr "style:volatile" (number'number_styleStyle'volatile v)
	, defaultToAttr toAttrFrStr "number:transliteration-format" (number'number_styleNumber'transliteration_format v)
	, maybeToAttr toAttrFrStr "number:transliteration-language" (number'number_styleNumber'transliteration_language v)
	, maybeToAttr toAttrFrStr "number:transliteration-country" (number'number_styleNumber'transliteration_country v)
	, defaultToAttr toAttrFrTyp "number:transliteration-style" (number'number_styleNumber'transliteration_style v)
	]
instance XmlAttrType Number'number_style_number'transliteration_style where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "short" = Just Number'number_style_number'transliteration_style_short
	    translate "medium" = Just Number'number_style_number'transliteration_style_medium
	    translate "long" = Just Number'number_style_number'transliteration_style_long
	    translate _ = Nothing
    toAttrFrTyp n Number'number_style_number'transliteration_style_short = Just (n, str2attr "short")
    toAttrFrTyp n Number'number_style_number'transliteration_style_medium = Just (n, str2attr "medium")
    toAttrFrTyp n Number'number_style_number'transliteration_style_long = Just (n, str2attr "long")
instance XmlContent Number'number where
    fromElem (CElem (Elem "number:number" as c0):rest) =
	(\(a,ca)->
	   (Just (Number'number (fromAttrs as) a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Number'number as a) =
	[CElem (Elem "number:number" (toAttrs as) (concatMap toElem a))]
instance XmlAttributes Number'number_Attrs where
    fromAttrs as =
	Number'number_Attrs
	  { number'numberNumber'decimal_places = possibleA fromAttrToStr "number:decimal-places" as
	  , number'numberNumber'min_integer_digits = possibleA fromAttrToStr "number:min-integer-digits" as
	  , number'numberNumber'grouping = defaultA fromAttrToStr "false" "number:grouping" as
	  , number'numberNumber'decimal_replacement = possibleA fromAttrToStr "number:decimal-replacement" as
	  , number'numberNumber'display_factor = defaultA fromAttrToStr "1" "number:display-factor" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "number:decimal-places" (number'numberNumber'decimal_places v)
	, maybeToAttr toAttrFrStr "number:min-integer-digits" (number'numberNumber'min_integer_digits v)
	, defaultToAttr toAttrFrStr "number:grouping" (number'numberNumber'grouping v)
	, maybeToAttr toAttrFrStr "number:decimal-replacement" (number'numberNumber'decimal_replacement v)
	, defaultToAttr toAttrFrStr "number:display-factor" (number'numberNumber'display_factor v)
	]
instance XmlContent Number'scientific_number where
    fromElem (CElem (Elem "number:scientific-number" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "number:scientific-number" (toAttrs as) [])]
instance XmlAttributes Number'scientific_number where
    fromAttrs as =
	Number'scientific_number
	  { number'scientific_numberNumber'decimal_places = possibleA fromAttrToStr "number:decimal-places" as
	  , number'scientific_numberNumber'min_integer_digits = possibleA fromAttrToStr "number:min-integer-digits" as
	  , number'scientific_numberNumber'grouping = defaultA fromAttrToStr "false" "number:grouping" as
	  , number'scientific_numberNumber'min_exponent_digits = possibleA fromAttrToStr "number:min-exponent-digits" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "number:decimal-places" (number'scientific_numberNumber'decimal_places v)
	, maybeToAttr toAttrFrStr "number:min-integer-digits" (number'scientific_numberNumber'min_integer_digits v)
	, defaultToAttr toAttrFrStr "number:grouping" (number'scientific_numberNumber'grouping v)
	, maybeToAttr toAttrFrStr "number:min-exponent-digits" (number'scientific_numberNumber'min_exponent_digits v)
	]
instance XmlContent Number'fraction where
    fromElem (CElem (Elem "number:fraction" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "number:fraction" (toAttrs as) [])]
instance XmlAttributes Number'fraction where
    fromAttrs as =
	Number'fraction
	  { number'fractionNumber'min_integer_digits = possibleA fromAttrToStr "number:min-integer-digits" as
	  , number'fractionNumber'grouping = defaultA fromAttrToStr "false" "number:grouping" as
	  , number'fractionNumber'min_numerator_digits = possibleA fromAttrToStr "number:min-numerator-digits" as
	  , number'fractionNumber'min_denominator_digits = possibleA fromAttrToStr "number:min-denominator-digits" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "number:min-integer-digits" (number'fractionNumber'min_integer_digits v)
	, defaultToAttr toAttrFrStr "number:grouping" (number'fractionNumber'grouping v)
	, maybeToAttr toAttrFrStr "number:min-numerator-digits" (number'fractionNumber'min_numerator_digits v)
	, maybeToAttr toAttrFrStr "number:min-denominator-digits" (number'fractionNumber'min_denominator_digits v)
	]
instance XmlContent Number'embedded_text where
    fromElem (CElem (Elem "number:embedded-text" as c0):rest) =
	(\(a,ca)->
	   (Just (Number'embedded_text (fromAttrs as) a), rest))
	(definite fromText "text" "number:embedded-text" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Number'embedded_text as a) =
	[CElem (Elem "number:embedded-text" (toAttrs as) (toText a))]
instance XmlAttributes Number'embedded_text_Attrs where
    fromAttrs as =
	Number'embedded_text_Attrs
	  { number'embedded_textNumber'position = definiteA fromAttrToStr "number:embedded-text" "number:position" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "number:position" (number'embedded_textNumber'position v)
	]
instance XmlContent Number'currency_style where
    fromElem (CElem (Elem "number:currency-style" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (\(d,cd)->
		    (Just (Number'currency_style (fromAttrs as) a b c d), rest))
		 (many fromElem cc))
	      (fromElem cb))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Number'currency_style as a b c d) =
	[CElem (Elem "number:currency-style" (toAttrs as) (maybe [] toElem a
							   ++ maybe [] toElem b ++ maybe [] toElem c
							   ++ concatMap toElem d))]
instance XmlAttributes Number'currency_style_Attrs where
    fromAttrs as =
	Number'currency_style_Attrs
	  { number'currency_styleStyle'name = definiteA fromAttrToStr "number:currency-style" "style:name" as
	  , number'currency_styleStyle'family = definiteA fromAttrToStr "number:currency-style" "style:family" as
	  , number'currency_styleNumber'language = possibleA fromAttrToStr "number:language" as
	  , number'currency_styleNumber'country = possibleA fromAttrToStr "number:country" as
	  , number'currency_styleNumber'title = possibleA fromAttrToStr "number:title" as
	  , number'currency_styleStyle'volatile = possibleA fromAttrToStr "style:volatile" as
	  , number'currency_styleNumber'transliteration_format = defaultA fromAttrToStr "1" "number:transliteration-format" as
	  , number'currency_styleNumber'transliteration_language = possibleA fromAttrToStr "number:transliteration-language" as
	  , number'currency_styleNumber'transliteration_country = possibleA fromAttrToStr "number:transliteration-country" as
	  , number'currency_styleNumber'transliteration_style = defaultA fromAttrToTyp Number'currency_style_number'transliteration_style_short "number:transliteration-style" as
	  , number'currency_styleNumber'automatic_order = defaultA fromAttrToStr "false" "number:automatic-order" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "style:name" (number'currency_styleStyle'name v)
	, toAttrFrStr "style:family" (number'currency_styleStyle'family v)
	, maybeToAttr toAttrFrStr "number:language" (number'currency_styleNumber'language v)
	, maybeToAttr toAttrFrStr "number:country" (number'currency_styleNumber'country v)
	, maybeToAttr toAttrFrStr "number:title" (number'currency_styleNumber'title v)
	, maybeToAttr toAttrFrStr "style:volatile" (number'currency_styleStyle'volatile v)
	, defaultToAttr toAttrFrStr "number:transliteration-format" (number'currency_styleNumber'transliteration_format v)
	, maybeToAttr toAttrFrStr "number:transliteration-language" (number'currency_styleNumber'transliteration_language v)
	, maybeToAttr toAttrFrStr "number:transliteration-country" (number'currency_styleNumber'transliteration_country v)
	, defaultToAttr toAttrFrTyp "number:transliteration-style" (number'currency_styleNumber'transliteration_style v)
	, defaultToAttr toAttrFrStr "number:automatic-order" (number'currency_styleNumber'automatic_order v)
	]
instance XmlAttrType Number'currency_style_number'transliteration_style where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "short" = Just Number'currency_style_number'transliteration_style_short
	    translate "medium" = Just Number'currency_style_number'transliteration_style_medium
	    translate "long" = Just Number'currency_style_number'transliteration_style_long
	    translate _ = Nothing
    toAttrFrTyp n Number'currency_style_number'transliteration_style_short = Just (n, str2attr "short")
    toAttrFrTyp n Number'currency_style_number'transliteration_style_medium = Just (n, str2attr "medium")
    toAttrFrTyp n Number'currency_style_number'transliteration_style_long = Just (n, str2attr "long")
instance XmlContent Number'currency_symbol where
    fromElem (CElem (Elem "number:currency-symbol" as c0):rest) =
	(\(a,ca)->
	   (Just (Number'currency_symbol (fromAttrs as) a), rest))
	(definite fromText "text" "number:currency-symbol" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Number'currency_symbol as a) =
	[CElem (Elem "number:currency-symbol" (toAttrs as) (toText a))]
instance XmlAttributes Number'currency_symbol_Attrs where
    fromAttrs as =
	Number'currency_symbol_Attrs
	  { number'currency_symbolNumber'language = possibleA fromAttrToStr "number:language" as
	  , number'currency_symbolNumber'country = possibleA fromAttrToStr "number:country" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "number:language" (number'currency_symbolNumber'language v)
	, maybeToAttr toAttrFrStr "number:country" (number'currency_symbolNumber'country v)
	]
instance XmlContent Number'percentage_style where
    fromElem (CElem (Elem "number:percentage-style" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (Just (Number'percentage_style (fromAttrs as) a b c), rest))
	      (many fromElem cb))
	   (definite fromElem "OneOf" "number:percentage-style" ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Number'percentage_style as a b c) =
	[CElem (Elem "number:percentage-style" (toAttrs as) (maybe [] toElem a
							     ++ toElem b ++ concatMap toElem c))]
instance XmlAttributes Number'percentage_style_Attrs where
    fromAttrs as =
	Number'percentage_style_Attrs
	  { number'percentage_styleStyle'name = definiteA fromAttrToStr "number:percentage-style" "style:name" as
	  , number'percentage_styleStyle'family = definiteA fromAttrToStr "number:percentage-style" "style:family" as
	  , number'percentage_styleNumber'language = possibleA fromAttrToStr "number:language" as
	  , number'percentage_styleNumber'country = possibleA fromAttrToStr "number:country" as
	  , number'percentage_styleNumber'title = possibleA fromAttrToStr "number:title" as
	  , number'percentage_styleStyle'volatile = possibleA fromAttrToStr "style:volatile" as
	  , number'percentage_styleNumber'transliteration_format = defaultA fromAttrToStr "1" "number:transliteration-format" as
	  , number'percentage_styleNumber'transliteration_language = possibleA fromAttrToStr "number:transliteration-language" as
	  , number'percentage_styleNumber'transliteration_country = possibleA fromAttrToStr "number:transliteration-country" as
	  , number'percentage_styleNumber'transliteration_style = defaultA fromAttrToTyp Number'percentage_style_number'transliteration_style_short "number:transliteration-style" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "style:name" (number'percentage_styleStyle'name v)
	, toAttrFrStr "style:family" (number'percentage_styleStyle'family v)
	, maybeToAttr toAttrFrStr "number:language" (number'percentage_styleNumber'language v)
	, maybeToAttr toAttrFrStr "number:country" (number'percentage_styleNumber'country v)
	, maybeToAttr toAttrFrStr "number:title" (number'percentage_styleNumber'title v)
	, maybeToAttr toAttrFrStr "style:volatile" (number'percentage_styleStyle'volatile v)
	, defaultToAttr toAttrFrStr "number:transliteration-format" (number'percentage_styleNumber'transliteration_format v)
	, maybeToAttr toAttrFrStr "number:transliteration-language" (number'percentage_styleNumber'transliteration_language v)
	, maybeToAttr toAttrFrStr "number:transliteration-country" (number'percentage_styleNumber'transliteration_country v)
	, defaultToAttr toAttrFrTyp "number:transliteration-style" (number'percentage_styleNumber'transliteration_style v)
	]
instance XmlAttrType Number'percentage_style_number'transliteration_style where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "short" = Just Number'percentage_style_number'transliteration_style_short
	    translate "medium" = Just Number'percentage_style_number'transliteration_style_medium
	    translate "long" = Just Number'percentage_style_number'transliteration_style_long
	    translate _ = Nothing
    toAttrFrTyp n Number'percentage_style_number'transliteration_style_short = Just (n, str2attr "short")
    toAttrFrTyp n Number'percentage_style_number'transliteration_style_medium = Just (n, str2attr "medium")
    toAttrFrTyp n Number'percentage_style_number'transliteration_style_long = Just (n, str2attr "long")
instance XmlContent Number'date_style where
    fromElem (CElem (Elem "number:date-style" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (Just (Number'date_style (fromAttrs as) a b c), rest))
	      (many fromElem cb))
	   (definite fromElem "OneOf" "number:date-style" ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Number'date_style as a b c) =
	[CElem (Elem "number:date-style" (toAttrs as) (maybe [] toElem a ++
						       toElem b ++ concatMap toElem c))]
instance XmlAttributes Number'date_style_Attrs where
    fromAttrs as =
	Number'date_style_Attrs
	  { number'date_styleStyle'name = definiteA fromAttrToStr "number:date-style" "style:name" as
	  , number'date_styleStyle'family = definiteA fromAttrToStr "number:date-style" "style:family" as
	  , number'date_styleNumber'language = possibleA fromAttrToStr "number:language" as
	  , number'date_styleNumber'country = possibleA fromAttrToStr "number:country" as
	  , number'date_styleNumber'title = possibleA fromAttrToStr "number:title" as
	  , number'date_styleStyle'volatile = possibleA fromAttrToStr "style:volatile" as
	  , number'date_styleNumber'transliteration_format = defaultA fromAttrToStr "1" "number:transliteration-format" as
	  , number'date_styleNumber'transliteration_language = possibleA fromAttrToStr "number:transliteration-language" as
	  , number'date_styleNumber'transliteration_country = possibleA fromAttrToStr "number:transliteration-country" as
	  , number'date_styleNumber'transliteration_style = defaultA fromAttrToTyp Number'date_style_number'transliteration_style_short "number:transliteration-style" as
	  , number'date_styleNumber'automatic_order = defaultA fromAttrToStr "false" "number:automatic-order" as
	  , number'date_styleNumber'format_source = defaultA fromAttrToTyp Number'date_style_number'format_source_fixed "number:format-source" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "style:name" (number'date_styleStyle'name v)
	, toAttrFrStr "style:family" (number'date_styleStyle'family v)
	, maybeToAttr toAttrFrStr "number:language" (number'date_styleNumber'language v)
	, maybeToAttr toAttrFrStr "number:country" (number'date_styleNumber'country v)
	, maybeToAttr toAttrFrStr "number:title" (number'date_styleNumber'title v)
	, maybeToAttr toAttrFrStr "style:volatile" (number'date_styleStyle'volatile v)
	, defaultToAttr toAttrFrStr "number:transliteration-format" (number'date_styleNumber'transliteration_format v)
	, maybeToAttr toAttrFrStr "number:transliteration-language" (number'date_styleNumber'transliteration_language v)
	, maybeToAttr toAttrFrStr "number:transliteration-country" (number'date_styleNumber'transliteration_country v)
	, defaultToAttr toAttrFrTyp "number:transliteration-style" (number'date_styleNumber'transliteration_style v)
	, defaultToAttr toAttrFrStr "number:automatic-order" (number'date_styleNumber'automatic_order v)
	, defaultToAttr toAttrFrTyp "number:format-source" (number'date_styleNumber'format_source v)
	]
instance XmlAttrType Number'date_style_number'transliteration_style where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "short" = Just Number'date_style_number'transliteration_style_short
	    translate "medium" = Just Number'date_style_number'transliteration_style_medium
	    translate "long" = Just Number'date_style_number'transliteration_style_long
	    translate _ = Nothing
    toAttrFrTyp n Number'date_style_number'transliteration_style_short = Just (n, str2attr "short")
    toAttrFrTyp n Number'date_style_number'transliteration_style_medium = Just (n, str2attr "medium")
    toAttrFrTyp n Number'date_style_number'transliteration_style_long = Just (n, str2attr "long")
instance XmlAttrType Number'date_style_number'format_source where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "fixed" = Just Number'date_style_number'format_source_fixed
	    translate "language" = Just Number'date_style_number'format_source_language
	    translate _ = Nothing
    toAttrFrTyp n Number'date_style_number'format_source_fixed = Just (n, str2attr "fixed")
    toAttrFrTyp n Number'date_style_number'format_source_language = Just (n, str2attr "language")
instance XmlContent Number'day where
    fromElem (CElem (Elem "number:day" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "number:day" (toAttrs as) [])]
instance XmlAttributes Number'day where
    fromAttrs as =
	Number'day
	  { number'dayNumber'style = defaultA fromAttrToTyp Number'day_number'style_short "number:style" as
	  , number'dayNumber'calendar = possibleA fromAttrToStr "number:calendar" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrTyp "number:style" (number'dayNumber'style v)
	, maybeToAttr toAttrFrStr "number:calendar" (number'dayNumber'calendar v)
	]
instance XmlAttrType Number'day_number'style where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "short" = Just Number'day_number'style_short
	    translate "long" = Just Number'day_number'style_long
	    translate _ = Nothing
    toAttrFrTyp n Number'day_number'style_short = Just (n, str2attr "short")
    toAttrFrTyp n Number'day_number'style_long = Just (n, str2attr "long")
instance XmlContent Number'month where
    fromElem (CElem (Elem "number:month" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "number:month" (toAttrs as) [])]
instance XmlAttributes Number'month where
    fromAttrs as =
	Number'month
	  { number'monthNumber'textual = defaultA fromAttrToStr "false" "number:textual" as
	  , number'monthNumber'style = defaultA fromAttrToTyp Number'month_number'style_short "number:style" as
	  , number'monthNumber'calendar = possibleA fromAttrToStr "number:calendar" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "number:textual" (number'monthNumber'textual v)
	, defaultToAttr toAttrFrTyp "number:style" (number'monthNumber'style v)
	, maybeToAttr toAttrFrStr "number:calendar" (number'monthNumber'calendar v)
	]
instance XmlAttrType Number'month_number'style where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "short" = Just Number'month_number'style_short
	    translate "long" = Just Number'month_number'style_long
	    translate _ = Nothing
    toAttrFrTyp n Number'month_number'style_short = Just (n, str2attr "short")
    toAttrFrTyp n Number'month_number'style_long = Just (n, str2attr "long")
instance XmlContent Number'year where
    fromElem (CElem (Elem "number:year" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "number:year" (toAttrs as) [])]
instance XmlAttributes Number'year where
    fromAttrs as =
	Number'year
	  { number'yearNumber'style = defaultA fromAttrToTyp Number'year_number'style_short "number:style" as
	  , number'yearNumber'calendar = possibleA fromAttrToStr "number:calendar" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrTyp "number:style" (number'yearNumber'style v)
	, maybeToAttr toAttrFrStr "number:calendar" (number'yearNumber'calendar v)
	]
instance XmlAttrType Number'year_number'style where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "short" = Just Number'year_number'style_short
	    translate "long" = Just Number'year_number'style_long
	    translate _ = Nothing
    toAttrFrTyp n Number'year_number'style_short = Just (n, str2attr "short")
    toAttrFrTyp n Number'year_number'style_long = Just (n, str2attr "long")
instance XmlContent Number'era where
    fromElem (CElem (Elem "number:era" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "number:era" (toAttrs as) [])]
instance XmlAttributes Number'era where
    fromAttrs as =
	Number'era
	  { number'eraNumber'style = defaultA fromAttrToTyp Number'era_number'style_short "number:style" as
	  , number'eraNumber'calendar = possibleA fromAttrToStr "number:calendar" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrTyp "number:style" (number'eraNumber'style v)
	, maybeToAttr toAttrFrStr "number:calendar" (number'eraNumber'calendar v)
	]
instance XmlAttrType Number'era_number'style where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "short" = Just Number'era_number'style_short
	    translate "long" = Just Number'era_number'style_long
	    translate _ = Nothing
    toAttrFrTyp n Number'era_number'style_short = Just (n, str2attr "short")
    toAttrFrTyp n Number'era_number'style_long = Just (n, str2attr "long")
instance XmlContent Number'day_of_week where
    fromElem (CElem (Elem "number:day-of-week" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "number:day-of-week" (toAttrs as) [])]
instance XmlAttributes Number'day_of_week where
    fromAttrs as =
	Number'day_of_week
	  { number'day_of_weekNumber'style = defaultA fromAttrToTyp Number'day_of_week_number'style_short "number:style" as
	  , number'day_of_weekNumber'calendar = possibleA fromAttrToStr "number:calendar" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrTyp "number:style" (number'day_of_weekNumber'style v)
	, maybeToAttr toAttrFrStr "number:calendar" (number'day_of_weekNumber'calendar v)
	]
instance XmlAttrType Number'day_of_week_number'style where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "short" = Just Number'day_of_week_number'style_short
	    translate "long" = Just Number'day_of_week_number'style_long
	    translate _ = Nothing
    toAttrFrTyp n Number'day_of_week_number'style_short = Just (n, str2attr "short")
    toAttrFrTyp n Number'day_of_week_number'style_long = Just (n, str2attr "long")
instance XmlContent Number'week_of_year where
    fromElem (CElem (Elem "number:week-of-year" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "number:week-of-year" (toAttrs as) [])]
instance XmlAttributes Number'week_of_year where
    fromAttrs as =
	Number'week_of_year
	  { number'week_of_yearNumber'calendar = possibleA fromAttrToStr "number:calendar" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "number:calendar" (number'week_of_yearNumber'calendar v)
	]
instance XmlContent Number'quarter where
    fromElem (CElem (Elem "number:quarter" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "number:quarter" (toAttrs as) [])]
instance XmlAttributes Number'quarter where
    fromAttrs as =
	Number'quarter
	  { number'quarterNumber'style = defaultA fromAttrToTyp Number'quarter_number'style_short "number:style" as
	  , number'quarterNumber'calendar = possibleA fromAttrToStr "number:calendar" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrTyp "number:style" (number'quarterNumber'style v)
	, maybeToAttr toAttrFrStr "number:calendar" (number'quarterNumber'calendar v)
	]
instance XmlAttrType Number'quarter_number'style where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "short" = Just Number'quarter_number'style_short
	    translate "long" = Just Number'quarter_number'style_long
	    translate _ = Nothing
    toAttrFrTyp n Number'quarter_number'style_short = Just (n, str2attr "short")
    toAttrFrTyp n Number'quarter_number'style_long = Just (n, str2attr "long")
instance XmlContent Number'time_style where
    fromElem (CElem (Elem "number:time-style" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (Just (Number'time_style (fromAttrs as) a b c), rest))
	      (many fromElem cb))
	   (definite fromElem "OneOf" "number:time-style" ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Number'time_style as a b c) =
	[CElem (Elem "number:time-style" (toAttrs as) (maybe [] toElem a ++
						       toElem b ++ concatMap toElem c))]
instance XmlAttributes Number'time_style_Attrs where
    fromAttrs as =
	Number'time_style_Attrs
	  { number'time_styleStyle'name = definiteA fromAttrToStr "number:time-style" "style:name" as
	  , number'time_styleStyle'family = definiteA fromAttrToStr "number:time-style" "style:family" as
	  , number'time_styleNumber'language = possibleA fromAttrToStr "number:language" as
	  , number'time_styleNumber'country = possibleA fromAttrToStr "number:country" as
	  , number'time_styleNumber'title = possibleA fromAttrToStr "number:title" as
	  , number'time_styleStyle'volatile = possibleA fromAttrToStr "style:volatile" as
	  , number'time_styleNumber'transliteration_format = defaultA fromAttrToStr "1" "number:transliteration-format" as
	  , number'time_styleNumber'transliteration_language = possibleA fromAttrToStr "number:transliteration-language" as
	  , number'time_styleNumber'transliteration_country = possibleA fromAttrToStr "number:transliteration-country" as
	  , number'time_styleNumber'transliteration_style = defaultA fromAttrToTyp Number'time_style_number'transliteration_style_short "number:transliteration-style" as
	  , number'time_styleNumber'format_source = defaultA fromAttrToTyp Number'time_style_number'format_source_fixed "number:format-source" as
	  , number'time_styleNumber'truncate_on_overflow = defaultA fromAttrToStr "true" "number:truncate-on-overflow" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "style:name" (number'time_styleStyle'name v)
	, toAttrFrStr "style:family" (number'time_styleStyle'family v)
	, maybeToAttr toAttrFrStr "number:language" (number'time_styleNumber'language v)
	, maybeToAttr toAttrFrStr "number:country" (number'time_styleNumber'country v)
	, maybeToAttr toAttrFrStr "number:title" (number'time_styleNumber'title v)
	, maybeToAttr toAttrFrStr "style:volatile" (number'time_styleStyle'volatile v)
	, defaultToAttr toAttrFrStr "number:transliteration-format" (number'time_styleNumber'transliteration_format v)
	, maybeToAttr toAttrFrStr "number:transliteration-language" (number'time_styleNumber'transliteration_language v)
	, maybeToAttr toAttrFrStr "number:transliteration-country" (number'time_styleNumber'transliteration_country v)
	, defaultToAttr toAttrFrTyp "number:transliteration-style" (number'time_styleNumber'transliteration_style v)
	, defaultToAttr toAttrFrTyp "number:format-source" (number'time_styleNumber'format_source v)
	, defaultToAttr toAttrFrStr "number:truncate-on-overflow" (number'time_styleNumber'truncate_on_overflow v)
	]
instance XmlAttrType Number'time_style_number'transliteration_style where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "short" = Just Number'time_style_number'transliteration_style_short
	    translate "medium" = Just Number'time_style_number'transliteration_style_medium
	    translate "long" = Just Number'time_style_number'transliteration_style_long
	    translate _ = Nothing
    toAttrFrTyp n Number'time_style_number'transliteration_style_short = Just (n, str2attr "short")
    toAttrFrTyp n Number'time_style_number'transliteration_style_medium = Just (n, str2attr "medium")
    toAttrFrTyp n Number'time_style_number'transliteration_style_long = Just (n, str2attr "long")
instance XmlAttrType Number'time_style_number'format_source where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "fixed" = Just Number'time_style_number'format_source_fixed
	    translate "language" = Just Number'time_style_number'format_source_language
	    translate _ = Nothing
    toAttrFrTyp n Number'time_style_number'format_source_fixed = Just (n, str2attr "fixed")
    toAttrFrTyp n Number'time_style_number'format_source_language = Just (n, str2attr "language")
instance XmlContent Number'hours where
    fromElem (CElem (Elem "number:hours" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "number:hours" (toAttrs as) [])]
instance XmlAttributes Number'hours where
    fromAttrs as =
	Number'hours
	  { number'hoursNumber'style = defaultA fromAttrToTyp Number'hours_number'style_short "number:style" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrTyp "number:style" (number'hoursNumber'style v)
	]
instance XmlAttrType Number'hours_number'style where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "short" = Just Number'hours_number'style_short
	    translate "long" = Just Number'hours_number'style_long
	    translate _ = Nothing
    toAttrFrTyp n Number'hours_number'style_short = Just (n, str2attr "short")
    toAttrFrTyp n Number'hours_number'style_long = Just (n, str2attr "long")
instance XmlContent Number'minutes where
    fromElem (CElem (Elem "number:minutes" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "number:minutes" (toAttrs as) [])]
instance XmlAttributes Number'minutes where
    fromAttrs as =
	Number'minutes
	  { number'minutesNumber'style = defaultA fromAttrToTyp Number'minutes_number'style_short "number:style" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrTyp "number:style" (number'minutesNumber'style v)
	]
instance XmlAttrType Number'minutes_number'style where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "short" = Just Number'minutes_number'style_short
	    translate "long" = Just Number'minutes_number'style_long
	    translate _ = Nothing
    toAttrFrTyp n Number'minutes_number'style_short = Just (n, str2attr "short")
    toAttrFrTyp n Number'minutes_number'style_long = Just (n, str2attr "long")
instance XmlContent Number'seconds where
    fromElem (CElem (Elem "number:seconds" as []):rest) =
	(Just (fromAttrs as), rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem as =
	[CElem (Elem "number:seconds" (toAttrs as) [])]
instance XmlAttributes Number'seconds where
    fromAttrs as =
	Number'seconds
	  { number'secondsNumber'style = defaultA fromAttrToTyp Number'seconds_number'style_short "number:style" as
	  , number'secondsNumber'decimal_places = defaultA fromAttrToStr "0" "number:decimal-places" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrTyp "number:style" (number'secondsNumber'style v)
	, defaultToAttr toAttrFrStr "number:decimal-places" (number'secondsNumber'decimal_places v)
	]
instance XmlAttrType Number'seconds_number'style where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "short" = Just Number'seconds_number'style_short
	    translate "long" = Just Number'seconds_number'style_long
	    translate _ = Nothing
    toAttrFrTyp n Number'seconds_number'style_short = Just (n, str2attr "short")
    toAttrFrTyp n Number'seconds_number'style_long = Just (n, str2attr "long")
instance XmlContent Number'am_pm where
    fromElem (CElem (Elem "number:am-pm" [] []):rest) =
	(Just Number'am_pm, rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem Number'am_pm =
	[CElem (Elem "number:am-pm" [] [])]
instance XmlContent Number'boolean_style where
    fromElem (CElem (Elem "number:boolean-style" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (Just (Number'boolean_style (fromAttrs as) a b c), rest))
	      (many fromElem cb))
	   (definite fromElem "OneOf" "number:boolean-style" ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Number'boolean_style as a b c) =
	[CElem (Elem "number:boolean-style" (toAttrs as) (maybe [] toElem a
							  ++ toElem b ++ concatMap toElem c))]
instance XmlAttributes Number'boolean_style_Attrs where
    fromAttrs as =
	Number'boolean_style_Attrs
	  { number'boolean_styleStyle'name = definiteA fromAttrToStr "number:boolean-style" "style:name" as
	  , number'boolean_styleStyle'family = definiteA fromAttrToStr "number:boolean-style" "style:family" as
	  , number'boolean_styleNumber'language = possibleA fromAttrToStr "number:language" as
	  , number'boolean_styleNumber'country = possibleA fromAttrToStr "number:country" as
	  , number'boolean_styleNumber'title = possibleA fromAttrToStr "number:title" as
	  , number'boolean_styleStyle'volatile = possibleA fromAttrToStr "style:volatile" as
	  , number'boolean_styleNumber'transliteration_format = defaultA fromAttrToStr "1" "number:transliteration-format" as
	  , number'boolean_styleNumber'transliteration_language = possibleA fromAttrToStr "number:transliteration-language" as
	  , number'boolean_styleNumber'transliteration_country = possibleA fromAttrToStr "number:transliteration-country" as
	  , number'boolean_styleNumber'transliteration_style = defaultA fromAttrToTyp Number'boolean_style_number'transliteration_style_short "number:transliteration-style" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "style:name" (number'boolean_styleStyle'name v)
	, toAttrFrStr "style:family" (number'boolean_styleStyle'family v)
	, maybeToAttr toAttrFrStr "number:language" (number'boolean_styleNumber'language v)
	, maybeToAttr toAttrFrStr "number:country" (number'boolean_styleNumber'country v)
	, maybeToAttr toAttrFrStr "number:title" (number'boolean_styleNumber'title v)
	, maybeToAttr toAttrFrStr "style:volatile" (number'boolean_styleStyle'volatile v)
	, defaultToAttr toAttrFrStr "number:transliteration-format" (number'boolean_styleNumber'transliteration_format v)
	, maybeToAttr toAttrFrStr "number:transliteration-language" (number'boolean_styleNumber'transliteration_language v)
	, maybeToAttr toAttrFrStr "number:transliteration-country" (number'boolean_styleNumber'transliteration_country v)
	, defaultToAttr toAttrFrTyp "number:transliteration-style" (number'boolean_styleNumber'transliteration_style v)
	]
instance XmlAttrType Number'boolean_style_number'transliteration_style where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "short" = Just Number'boolean_style_number'transliteration_style_short
	    translate "medium" = Just Number'boolean_style_number'transliteration_style_medium
	    translate "long" = Just Number'boolean_style_number'transliteration_style_long
	    translate _ = Nothing
    toAttrFrTyp n Number'boolean_style_number'transliteration_style_short = Just (n, str2attr "short")
    toAttrFrTyp n Number'boolean_style_number'transliteration_style_medium = Just (n, str2attr "medium")
    toAttrFrTyp n Number'boolean_style_number'transliteration_style_long = Just (n, str2attr "long")
instance XmlContent Number'boolean where
    fromElem (CElem (Elem "number:boolean" [] []):rest) =
	(Just Number'boolean, rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem Number'boolean =
	[CElem (Elem "number:boolean" [] [])]
instance XmlContent Number'text_style where
    fromElem (CElem (Elem "number:text-style" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (Just (Number'text_style (fromAttrs as) a b c), rest))
	      (many fromElem cb))
	   (definite fromElem "OneOf" "number:text-style" ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Number'text_style as a b c) =
	[CElem (Elem "number:text-style" (toAttrs as) (maybe [] toElem a ++
						       toElem b ++ concatMap toElem c))]
instance XmlAttributes Number'text_style_Attrs where
    fromAttrs as =
	Number'text_style_Attrs
	  { number'text_styleStyle'name = definiteA fromAttrToStr "number:text-style" "style:name" as
	  , number'text_styleStyle'family = definiteA fromAttrToStr "number:text-style" "style:family" as
	  , number'text_styleNumber'language = possibleA fromAttrToStr "number:language" as
	  , number'text_styleNumber'country = possibleA fromAttrToStr "number:country" as
	  , number'text_styleNumber'title = possibleA fromAttrToStr "number:title" as
	  , number'text_styleStyle'volatile = possibleA fromAttrToStr "style:volatile" as
	  , number'text_styleNumber'transliteration_format = defaultA fromAttrToStr "1" "number:transliteration-format" as
	  , number'text_styleNumber'transliteration_language = possibleA fromAttrToStr "number:transliteration-language" as
	  , number'text_styleNumber'transliteration_country = possibleA fromAttrToStr "number:transliteration-country" as
	  , number'text_styleNumber'transliteration_style = defaultA fromAttrToTyp Number'text_style_number'transliteration_style_short "number:transliteration-style" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "style:name" (number'text_styleStyle'name v)
	, toAttrFrStr "style:family" (number'text_styleStyle'family v)
	, maybeToAttr toAttrFrStr "number:language" (number'text_styleNumber'language v)
	, maybeToAttr toAttrFrStr "number:country" (number'text_styleNumber'country v)
	, maybeToAttr toAttrFrStr "number:title" (number'text_styleNumber'title v)
	, maybeToAttr toAttrFrStr "style:volatile" (number'text_styleStyle'volatile v)
	, defaultToAttr toAttrFrStr "number:transliteration-format" (number'text_styleNumber'transliteration_format v)
	, maybeToAttr toAttrFrStr "number:transliteration-language" (number'text_styleNumber'transliteration_language v)
	, maybeToAttr toAttrFrStr "number:transliteration-country" (number'text_styleNumber'transliteration_country v)
	, defaultToAttr toAttrFrTyp "number:transliteration-style" (number'text_styleNumber'transliteration_style v)
	]
instance XmlAttrType Number'text_style_number'transliteration_style where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "short" = Just Number'text_style_number'transliteration_style_short
	    translate "medium" = Just Number'text_style_number'transliteration_style_medium
	    translate "long" = Just Number'text_style_number'transliteration_style_long
	    translate _ = Nothing
    toAttrFrTyp n Number'text_style_number'transliteration_style_short = Just (n, str2attr "short")
    toAttrFrTyp n Number'text_style_number'transliteration_style_medium = Just (n, str2attr "medium")
    toAttrFrTyp n Number'text_style_number'transliteration_style_long = Just (n, str2attr "long")
instance XmlContent Number'text where
    fromElem (CElem (Elem "number:text" [] c0):rest) =
	(\(a,ca)->
	   (Just (Number'text a), rest))
	(definite fromText "text" "number:text" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Number'text a) =
	[CElem (Elem "number:text" [] (toText a))]
instance XmlContent Number'text_content where
    fromElem (CElem (Elem "number:text-content" [] []):rest) =
	(Just Number'text_content, rest)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem Number'text_content =
	[CElem (Elem "number:text-content" [] [])]
instance XmlContent Form'control where
    fromElem (CElem (Elem "form:control" as c0):rest) =
	(\(a,ca)->
	   (Just (Form'control (fromAttrs as) a), rest))
	(definite fromElem "form:control+" "form:control" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Form'control as a) =
	[CElem (Elem "form:control" (toAttrs as) (toElem a))]
instance XmlAttributes Form'control_Attrs where
    fromAttrs as =
	Form'control_Attrs
	  { form'controlForm'name = possibleA fromAttrToStr "form:name" as
	  , form'controlForm'service_name = possibleA fromAttrToStr "form:service-name" as
	  , form'controlForm'id = definiteA fromAttrToStr "form:control" "form:id" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "form:name" (form'controlForm'name v)
	, maybeToAttr toAttrFrStr "form:service-name" (form'controlForm'service_name v)
	, toAttrFrStr "form:id" (form'controlForm'id v)
	]
instance XmlContent Form'control_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Form'control_Form'text a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Form'control_Form'textarea a), rest)
		(_,_) ->
			case (fromElem c0) of
			(Just a,rest) -> (Just (Form'control_Form'fixed_text a), rest)
			(_,_) ->
				case (fromElem c0) of
				(Just a,rest) -> (Just (Form'control_Form'file a), rest)
				(_,_) ->
					case (fromElem c0) of
					(Just a,rest) -> (Just (Form'control_Form'password a), rest)
					(_,_) ->
						case (fromElem c0) of
						(Just a,rest) -> (Just (Form'control_Form'formatted_text a), rest)
						(_,_) ->
							case (fromElem c0) of
							(Just a,rest) -> (Just (Form'control_Form'button a), rest)
							(_,_) ->
								case (fromElem c0) of
								(Just a,rest) -> (Just (Form'control_Form'image a), rest)
								(_,_) ->
									case (fromElem c0) of
									(Just a,rest) -> (Just (Form'control_Form'checkbox a), rest)
									(_,_) ->
										case (fromElem c0) of
										(Just a,rest) -> (Just (Form'control_Form'radio a), rest)
										(_,_) ->
											case (fromElem c0) of
											(Just a,rest) -> (Just (Form'control_Form'listbox a), rest)
											(_,_) ->
												case (fromElem c0) of
												(Just a,rest) -> (Just (Form'control_Form'combobox a), rest)
												(_,_) ->
													case (fromElem c0) of
													(Just a,rest) -> (Just (Form'control_Form'frame a), rest)
													(_,_) ->
														case (fromElem c0) of
														(Just a,rest) -> (Just (Form'control_Form'hidden a), rest)
														(_,_) ->
															case (fromElem c0) of
															(Just a,rest) -> (Just (Form'control_Form'image_frame a), rest)
															(_,_) ->
																case (fromElem c0) of
																(Just a,rest) -> (Just (Form'control_Form'grid a), rest)
																(_,_) ->
																	case (fromElem c0) of
																	(Just a,rest) -> (Just (Form'control_Form'generic_control a), rest)
																	(_,_) ->
																	    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Form'control_Form'text a) = toElem a
    toElem (Form'control_Form'textarea a) = toElem a
    toElem (Form'control_Form'fixed_text a) = toElem a
    toElem (Form'control_Form'file a) = toElem a
    toElem (Form'control_Form'password a) = toElem a
    toElem (Form'control_Form'formatted_text a) = toElem a
    toElem (Form'control_Form'button a) = toElem a
    toElem (Form'control_Form'image a) = toElem a
    toElem (Form'control_Form'checkbox a) = toElem a
    toElem (Form'control_Form'radio a) = toElem a
    toElem (Form'control_Form'listbox a) = toElem a
    toElem (Form'control_Form'combobox a) = toElem a
    toElem (Form'control_Form'frame a) = toElem a
    toElem (Form'control_Form'hidden a) = toElem a
    toElem (Form'control_Form'image_frame a) = toElem a
    toElem (Form'control_Form'grid a) = toElem a
    toElem (Form'control_Form'generic_control a) = toElem a
instance XmlContent Form'form where
    fromElem (CElem (Elem "form:form" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (Just (Form'form (fromAttrs as) a b c), rest))
	      (many fromElem cb))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Form'form as a b c) =
	[CElem (Elem "form:form" (toAttrs as) (maybe [] toElem a ++
					       maybe [] toElem b ++ concatMap toElem c))]
instance XmlAttributes Form'form_Attrs where
    fromAttrs as =
	Form'form_Attrs
	  { form'formForm'name = possibleA fromAttrToStr "form:name" as
	  , form'formForm'service_name = possibleA fromAttrToStr "form:service-name" as
	  , form'formXlink'href = possibleA fromAttrToStr "xlink:href" as
	  , form'formForm'enctype = defaultA fromAttrToStr "application/x-www-form-urlencoded" "form:enctype" as
	  , form'formForm'method = defaultA fromAttrToStr "get" "form:method" as
	  , form'formOffice'target_frame = defaultA fromAttrToStr "_blank" "office:target-frame" as
	  , form'formForm'allow_deletes = defaultA fromAttrToStr "true" "form:allow-deletes" as
	  , form'formForm'allow_inserts = defaultA fromAttrToStr "true" "form:allow-inserts" as
	  , form'formForm'allow_updates = defaultA fromAttrToStr "true" "form:allow-updates" as
	  , form'formForm'apply_filter = defaultA fromAttrToStr "false" "form:apply-filter" as
	  , form'formForm'command = possibleA fromAttrToStr "form:command" as
	  , form'formForm'command_type = defaultA fromAttrToTyp Form'form_form'command_type_command "form:command-type" as
	  , form'formForm'datasource = possibleA fromAttrToStr "form:datasource" as
	  , form'formForm'detail_fields = possibleA fromAttrToStr "form:detail-fields" as
	  , form'formForm'escape_processing = defaultA fromAttrToStr "true" "form:escape-processing" as
	  , form'formForm'filter = possibleA fromAttrToStr "form:filter" as
	  , form'formForm'ignore_result = defaultA fromAttrToStr "false" "form:ignore-result" as
	  , form'formForm'master_fields = possibleA fromAttrToStr "form:master-fields" as
	  , form'formForm'navigation_mode = possibleA fromAttrToTyp "form:navigation-mode" as
	  , form'formForm'order = possibleA fromAttrToStr "form:order" as
	  , form'formForm'tab_cycle = possibleA fromAttrToTyp "form:tab-cycle" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "form:name" (form'formForm'name v)
	, maybeToAttr toAttrFrStr "form:service-name" (form'formForm'service_name v)
	, maybeToAttr toAttrFrStr "xlink:href" (form'formXlink'href v)
	, defaultToAttr toAttrFrStr "form:enctype" (form'formForm'enctype v)
	, defaultToAttr toAttrFrStr "form:method" (form'formForm'method v)
	, defaultToAttr toAttrFrStr "office:target-frame" (form'formOffice'target_frame v)
	, defaultToAttr toAttrFrStr "form:allow-deletes" (form'formForm'allow_deletes v)
	, defaultToAttr toAttrFrStr "form:allow-inserts" (form'formForm'allow_inserts v)
	, defaultToAttr toAttrFrStr "form:allow-updates" (form'formForm'allow_updates v)
	, defaultToAttr toAttrFrStr "form:apply-filter" (form'formForm'apply_filter v)
	, maybeToAttr toAttrFrStr "form:command" (form'formForm'command v)
	, defaultToAttr toAttrFrTyp "form:command-type" (form'formForm'command_type v)
	, maybeToAttr toAttrFrStr "form:datasource" (form'formForm'datasource v)
	, maybeToAttr toAttrFrStr "form:detail-fields" (form'formForm'detail_fields v)
	, defaultToAttr toAttrFrStr "form:escape-processing" (form'formForm'escape_processing v)
	, maybeToAttr toAttrFrStr "form:filter" (form'formForm'filter v)
	, defaultToAttr toAttrFrStr "form:ignore-result" (form'formForm'ignore_result v)
	, maybeToAttr toAttrFrStr "form:master-fields" (form'formForm'master_fields v)
	, maybeToAttr toAttrFrTyp "form:navigation-mode" (form'formForm'navigation_mode v)
	, maybeToAttr toAttrFrStr "form:order" (form'formForm'order v)
	, maybeToAttr toAttrFrTyp "form:tab-cycle" (form'formForm'tab_cycle v)
	]
instance XmlAttrType Form'form_form'command_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "table" = Just Form'form_form'command_type_table
	    translate "query" = Just Form'form_form'command_type_query
	    translate "command" = Just Form'form_form'command_type_command
	    translate _ = Nothing
    toAttrFrTyp n Form'form_form'command_type_table = Just (n, str2attr "table")
    toAttrFrTyp n Form'form_form'command_type_query = Just (n, str2attr "query")
    toAttrFrTyp n Form'form_form'command_type_command = Just (n, str2attr "command")
instance XmlAttrType Form'form_form'navigation_mode where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "none" = Just Form'form_form'navigation_mode_none
	    translate "current" = Just Form'form_form'navigation_mode_current
	    translate "parent" = Just Form'form_form'navigation_mode_parent
	    translate _ = Nothing
    toAttrFrTyp n Form'form_form'navigation_mode_none = Just (n, str2attr "none")
    toAttrFrTyp n Form'form_form'navigation_mode_current = Just (n, str2attr "current")
    toAttrFrTyp n Form'form_form'navigation_mode_parent = Just (n, str2attr "parent")
instance XmlAttrType Form'form_form'tab_cycle where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "records" = Just Form'form_form'tab_cycle_records
	    translate "current" = Just Form'form_form'tab_cycle_current
	    translate "page" = Just Form'form_form'tab_cycle_page
	    translate _ = Nothing
    toAttrFrTyp n Form'form_form'tab_cycle_records = Just (n, str2attr "records")
    toAttrFrTyp n Form'form_form'tab_cycle_current = Just (n, str2attr "current")
    toAttrFrTyp n Form'form_form'tab_cycle_page = Just (n, str2attr "page")
instance XmlContent Office'forms where
    fromElem (CElem (Elem "office:forms" as c0):rest) =
	(\(a,ca)->
	   (Just (Office'forms (fromAttrs as) a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Office'forms as a) =
	[CElem (Elem "office:forms" (toAttrs as) (concatMap toElem a))]
instance XmlAttributes Office'forms_Attrs where
    fromAttrs as =
	Office'forms_Attrs
	  { office'formsForm'automatic_focus = defaultA fromAttrToStr "false" "form:automatic-focus" as
	  , office'formsForm'apply_design_mode = defaultA fromAttrToStr "true" "form:apply-design-mode" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "form:automatic-focus" (office'formsForm'automatic_focus v)
	, defaultToAttr toAttrFrStr "form:apply-design-mode" (office'formsForm'apply_design_mode v)
	]
instance XmlContent Form'text where
    fromElem (CElem (Elem "form:text" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Form'text (fromAttrs as) a b), rest))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Form'text as a b) =
	[CElem (Elem "form:text" (toAttrs as) (maybe [] toElem a ++
					       maybe [] toElem b))]
instance XmlAttributes Form'text_Attrs where
    fromAttrs as =
	Form'text_Attrs
	  { form'textForm'current_value = possibleA fromAttrToStr "form:current-value" as
	  , form'textForm'disabled = defaultA fromAttrToStr "false" "form:disabled" as
	  , form'textForm'max_length = possibleA fromAttrToStr "form:max-length" as
	  , form'textForm'printable = defaultA fromAttrToStr "true" "form:printable" as
	  , form'textForm'readonly = defaultA fromAttrToStr "false" "form:readonly" as
	  , form'textForm'tab_index = possibleA fromAttrToStr "form:tab-index" as
	  , form'textForm'tab_stop = defaultA fromAttrToStr "true" "form:tab-stop" as
	  , form'textForm'title = possibleA fromAttrToStr "form:title" as
	  , form'textForm'value = possibleA fromAttrToStr "form:value" as
	  , form'textForm'convert_empty_to_null = defaultA fromAttrToStr "false" "form:convert-empty-to-null" as
	  , form'textForm'data_field = possibleA fromAttrToStr "form:data-field" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "form:current-value" (form'textForm'current_value v)
	, defaultToAttr toAttrFrStr "form:disabled" (form'textForm'disabled v)
	, maybeToAttr toAttrFrStr "form:max-length" (form'textForm'max_length v)
	, defaultToAttr toAttrFrStr "form:printable" (form'textForm'printable v)
	, defaultToAttr toAttrFrStr "form:readonly" (form'textForm'readonly v)
	, maybeToAttr toAttrFrStr "form:tab-index" (form'textForm'tab_index v)
	, defaultToAttr toAttrFrStr "form:tab-stop" (form'textForm'tab_stop v)
	, maybeToAttr toAttrFrStr "form:title" (form'textForm'title v)
	, maybeToAttr toAttrFrStr "form:value" (form'textForm'value v)
	, defaultToAttr toAttrFrStr "form:convert-empty-to-null" (form'textForm'convert_empty_to_null v)
	, maybeToAttr toAttrFrStr "form:data-field" (form'textForm'data_field v)
	]
instance XmlContent Form'textarea where
    fromElem (CElem (Elem "form:textarea" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Form'textarea (fromAttrs as) a b), rest))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Form'textarea as a b) =
	[CElem (Elem "form:textarea" (toAttrs as) (maybe [] toElem a ++
						   maybe [] toElem b))]
instance XmlAttributes Form'textarea_Attrs where
    fromAttrs as =
	Form'textarea_Attrs
	  { form'textareaForm'current_value = possibleA fromAttrToStr "form:current-value" as
	  , form'textareaForm'disabled = defaultA fromAttrToStr "false" "form:disabled" as
	  , form'textareaForm'max_length = possibleA fromAttrToStr "form:max-length" as
	  , form'textareaForm'printable = defaultA fromAttrToStr "true" "form:printable" as
	  , form'textareaForm'readonly = defaultA fromAttrToStr "false" "form:readonly" as
	  , form'textareaForm'tab_index = possibleA fromAttrToStr "form:tab-index" as
	  , form'textareaForm'tab_stop = defaultA fromAttrToStr "true" "form:tab-stop" as
	  , form'textareaForm'title = possibleA fromAttrToStr "form:title" as
	  , form'textareaForm'value = possibleA fromAttrToStr "form:value" as
	  , form'textareaForm'convert_empty_to_null = defaultA fromAttrToStr "false" "form:convert-empty-to-null" as
	  , form'textareaForm'data_field = possibleA fromAttrToStr "form:data-field" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "form:current-value" (form'textareaForm'current_value v)
	, defaultToAttr toAttrFrStr "form:disabled" (form'textareaForm'disabled v)
	, maybeToAttr toAttrFrStr "form:max-length" (form'textareaForm'max_length v)
	, defaultToAttr toAttrFrStr "form:printable" (form'textareaForm'printable v)
	, defaultToAttr toAttrFrStr "form:readonly" (form'textareaForm'readonly v)
	, maybeToAttr toAttrFrStr "form:tab-index" (form'textareaForm'tab_index v)
	, defaultToAttr toAttrFrStr "form:tab-stop" (form'textareaForm'tab_stop v)
	, maybeToAttr toAttrFrStr "form:title" (form'textareaForm'title v)
	, maybeToAttr toAttrFrStr "form:value" (form'textareaForm'value v)
	, defaultToAttr toAttrFrStr "form:convert-empty-to-null" (form'textareaForm'convert_empty_to_null v)
	, maybeToAttr toAttrFrStr "form:data-field" (form'textareaForm'data_field v)
	]
instance XmlContent Form'password where
    fromElem (CElem (Elem "form:password" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Form'password (fromAttrs as) a b), rest))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Form'password as a b) =
	[CElem (Elem "form:password" (toAttrs as) (maybe [] toElem a ++
						   maybe [] toElem b))]
instance XmlAttributes Form'password_Attrs where
    fromAttrs as =
	Form'password_Attrs
	  { form'passwordForm'disabled = defaultA fromAttrToStr "false" "form:disabled" as
	  , form'passwordForm'max_length = possibleA fromAttrToStr "form:max-length" as
	  , form'passwordForm'printable = defaultA fromAttrToStr "true" "form:printable" as
	  , form'passwordForm'tab_index = possibleA fromAttrToStr "form:tab-index" as
	  , form'passwordForm'tab_stop = defaultA fromAttrToStr "true" "form:tab-stop" as
	  , form'passwordForm'title = possibleA fromAttrToStr "form:title" as
	  , form'passwordForm'value = possibleA fromAttrToStr "form:value" as
	  , form'passwordForm'convert_empty_to_null = defaultA fromAttrToStr "false" "form:convert-empty-to-null" as
	  , form'passwordForm'echo_char = defaultA fromAttrToStr "*" "form:echo-char" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "form:disabled" (form'passwordForm'disabled v)
	, maybeToAttr toAttrFrStr "form:max-length" (form'passwordForm'max_length v)
	, defaultToAttr toAttrFrStr "form:printable" (form'passwordForm'printable v)
	, maybeToAttr toAttrFrStr "form:tab-index" (form'passwordForm'tab_index v)
	, defaultToAttr toAttrFrStr "form:tab-stop" (form'passwordForm'tab_stop v)
	, maybeToAttr toAttrFrStr "form:title" (form'passwordForm'title v)
	, maybeToAttr toAttrFrStr "form:value" (form'passwordForm'value v)
	, defaultToAttr toAttrFrStr "form:convert-empty-to-null" (form'passwordForm'convert_empty_to_null v)
	, defaultToAttr toAttrFrStr "form:echo-char" (form'passwordForm'echo_char v)
	]
instance XmlContent Form'file where
    fromElem (CElem (Elem "form:file" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Form'file (fromAttrs as) a b), rest))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Form'file as a b) =
	[CElem (Elem "form:file" (toAttrs as) (maybe [] toElem a ++
					       maybe [] toElem b))]
instance XmlAttributes Form'file_Attrs where
    fromAttrs as =
	Form'file_Attrs
	  { form'fileForm'current_value = possibleA fromAttrToStr "form:current-value" as
	  , form'fileForm'disabled = defaultA fromAttrToStr "false" "form:disabled" as
	  , form'fileForm'max_length = possibleA fromAttrToStr "form:max-length" as
	  , form'fileForm'printable = defaultA fromAttrToStr "true" "form:printable" as
	  , form'fileForm'readonly = defaultA fromAttrToStr "false" "form:readonly" as
	  , form'fileForm'tab_index = possibleA fromAttrToStr "form:tab-index" as
	  , form'fileForm'tab_stop = defaultA fromAttrToStr "true" "form:tab-stop" as
	  , form'fileForm'title = possibleA fromAttrToStr "form:title" as
	  , form'fileForm'value = possibleA fromAttrToStr "form:value" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "form:current-value" (form'fileForm'current_value v)
	, defaultToAttr toAttrFrStr "form:disabled" (form'fileForm'disabled v)
	, maybeToAttr toAttrFrStr "form:max-length" (form'fileForm'max_length v)
	, defaultToAttr toAttrFrStr "form:printable" (form'fileForm'printable v)
	, defaultToAttr toAttrFrStr "form:readonly" (form'fileForm'readonly v)
	, maybeToAttr toAttrFrStr "form:tab-index" (form'fileForm'tab_index v)
	, defaultToAttr toAttrFrStr "form:tab-stop" (form'fileForm'tab_stop v)
	, maybeToAttr toAttrFrStr "form:title" (form'fileForm'title v)
	, maybeToAttr toAttrFrStr "form:value" (form'fileForm'value v)
	]
instance XmlContent Form'formatted_text where
    fromElem (CElem (Elem "form:formatted-text" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Form'formatted_text (fromAttrs as) a b), rest))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Form'formatted_text as a b) =
	[CElem (Elem "form:formatted-text" (toAttrs as) (maybe [] toElem a
							 ++ maybe [] toElem b))]
instance XmlAttributes Form'formatted_text_Attrs where
    fromAttrs as =
	Form'formatted_text_Attrs
	  { form'formatted_textForm'current_value = possibleA fromAttrToStr "form:current-value" as
	  , form'formatted_textForm'disabled = defaultA fromAttrToStr "false" "form:disabled" as
	  , form'formatted_textForm'max_length = possibleA fromAttrToStr "form:max-length" as
	  , form'formatted_textForm'printable = defaultA fromAttrToStr "true" "form:printable" as
	  , form'formatted_textForm'readonly = defaultA fromAttrToStr "false" "form:readonly" as
	  , form'formatted_textForm'tab_index = possibleA fromAttrToStr "form:tab-index" as
	  , form'formatted_textForm'tab_stop = defaultA fromAttrToStr "true" "form:tab-stop" as
	  , form'formatted_textForm'title = possibleA fromAttrToStr "form:title" as
	  , form'formatted_textForm'value = possibleA fromAttrToStr "form:value" as
	  , form'formatted_textForm'convert_empty_to_null = defaultA fromAttrToStr "false" "form:convert-empty-to-null" as
	  , form'formatted_textForm'data_field = possibleA fromAttrToStr "form:data-field" as
	  , form'formatted_textForm'max_value = possibleA fromAttrToStr "form:max-value" as
	  , form'formatted_textForm'min_value = possibleA fromAttrToStr "form:min-value" as
	  , form'formatted_textForm'validation = defaultA fromAttrToStr "false" "form:validation" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "form:current-value" (form'formatted_textForm'current_value v)
	, defaultToAttr toAttrFrStr "form:disabled" (form'formatted_textForm'disabled v)
	, maybeToAttr toAttrFrStr "form:max-length" (form'formatted_textForm'max_length v)
	, defaultToAttr toAttrFrStr "form:printable" (form'formatted_textForm'printable v)
	, defaultToAttr toAttrFrStr "form:readonly" (form'formatted_textForm'readonly v)
	, maybeToAttr toAttrFrStr "form:tab-index" (form'formatted_textForm'tab_index v)
	, defaultToAttr toAttrFrStr "form:tab-stop" (form'formatted_textForm'tab_stop v)
	, maybeToAttr toAttrFrStr "form:title" (form'formatted_textForm'title v)
	, maybeToAttr toAttrFrStr "form:value" (form'formatted_textForm'value v)
	, defaultToAttr toAttrFrStr "form:convert-empty-to-null" (form'formatted_textForm'convert_empty_to_null v)
	, maybeToAttr toAttrFrStr "form:data-field" (form'formatted_textForm'data_field v)
	, maybeToAttr toAttrFrStr "form:max-value" (form'formatted_textForm'max_value v)
	, maybeToAttr toAttrFrStr "form:min-value" (form'formatted_textForm'min_value v)
	, defaultToAttr toAttrFrStr "form:validation" (form'formatted_textForm'validation v)
	]
instance XmlContent Form'fixed_text where
    fromElem (CElem (Elem "form:fixed-text" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Form'fixed_text (fromAttrs as) a b), rest))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Form'fixed_text as a b) =
	[CElem (Elem "form:fixed-text" (toAttrs as) (maybe [] toElem a ++
						     maybe [] toElem b))]
instance XmlAttributes Form'fixed_text_Attrs where
    fromAttrs as =
	Form'fixed_text_Attrs
	  { form'fixed_textForm'for = possibleA fromAttrToStr "form:for" as
	  , form'fixed_textForm'disabled = defaultA fromAttrToStr "false" "form:disabled" as
	  , form'fixed_textForm'label = possibleA fromAttrToStr "form:label" as
	  , form'fixed_textForm'printable = defaultA fromAttrToStr "true" "form:printable" as
	  , form'fixed_textForm'title = possibleA fromAttrToStr "form:title" as
	  , form'fixed_textForm'multi_line = defaultA fromAttrToStr "false" "form:multi-line" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "form:for" (form'fixed_textForm'for v)
	, defaultToAttr toAttrFrStr "form:disabled" (form'fixed_textForm'disabled v)
	, maybeToAttr toAttrFrStr "form:label" (form'fixed_textForm'label v)
	, defaultToAttr toAttrFrStr "form:printable" (form'fixed_textForm'printable v)
	, maybeToAttr toAttrFrStr "form:title" (form'fixed_textForm'title v)
	, defaultToAttr toAttrFrStr "form:multi-line" (form'fixed_textForm'multi_line v)
	]
instance XmlContent Form'combobox where
    fromElem (CElem (Elem "form:combobox" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (Just (Form'combobox (fromAttrs as) a b c), rest))
	      (many fromElem cb))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Form'combobox as a b c) =
	[CElem (Elem "form:combobox" (toAttrs as) (maybe [] toElem a ++
						   maybe [] toElem b ++ concatMap toElem c))]
instance XmlAttributes Form'combobox_Attrs where
    fromAttrs as =
	Form'combobox_Attrs
	  { form'comboboxForm'current_value = possibleA fromAttrToStr "form:current-value" as
	  , form'comboboxForm'disabled = defaultA fromAttrToStr "false" "form:disabled" as
	  , form'comboboxForm'dropdown = defaultA fromAttrToStr "false" "form:dropdown" as
	  , form'comboboxForm'max_length = possibleA fromAttrToStr "form:max-length" as
	  , form'comboboxForm'printable = defaultA fromAttrToStr "true" "form:printable" as
	  , form'comboboxForm'readonly = defaultA fromAttrToStr "false" "form:readonly" as
	  , form'comboboxForm'size = possibleA fromAttrToStr "form:size" as
	  , form'comboboxForm'tab_index = possibleA fromAttrToStr "form:tab-index" as
	  , form'comboboxForm'tab_stop = defaultA fromAttrToStr "true" "form:tab-stop" as
	  , form'comboboxForm'title = possibleA fromAttrToStr "form:title" as
	  , form'comboboxForm'value = possibleA fromAttrToStr "form:value" as
	  , form'comboboxForm'convert_empty_to_null = defaultA fromAttrToStr "false" "form:convert-empty-to-null" as
	  , form'comboboxForm'data_field = possibleA fromAttrToStr "form:data-field" as
	  , form'comboboxForm'list_source = possibleA fromAttrToStr "form:list-source" as
	  , form'comboboxForm'list_source_type = possibleA fromAttrToTyp "form:list-source-type" as
	  , form'comboboxForm'auto_complete = possibleA fromAttrToStr "form:auto-complete" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "form:current-value" (form'comboboxForm'current_value v)
	, defaultToAttr toAttrFrStr "form:disabled" (form'comboboxForm'disabled v)
	, defaultToAttr toAttrFrStr "form:dropdown" (form'comboboxForm'dropdown v)
	, maybeToAttr toAttrFrStr "form:max-length" (form'comboboxForm'max_length v)
	, defaultToAttr toAttrFrStr "form:printable" (form'comboboxForm'printable v)
	, defaultToAttr toAttrFrStr "form:readonly" (form'comboboxForm'readonly v)
	, maybeToAttr toAttrFrStr "form:size" (form'comboboxForm'size v)
	, maybeToAttr toAttrFrStr "form:tab-index" (form'comboboxForm'tab_index v)
	, defaultToAttr toAttrFrStr "form:tab-stop" (form'comboboxForm'tab_stop v)
	, maybeToAttr toAttrFrStr "form:title" (form'comboboxForm'title v)
	, maybeToAttr toAttrFrStr "form:value" (form'comboboxForm'value v)
	, defaultToAttr toAttrFrStr "form:convert-empty-to-null" (form'comboboxForm'convert_empty_to_null v)
	, maybeToAttr toAttrFrStr "form:data-field" (form'comboboxForm'data_field v)
	, maybeToAttr toAttrFrStr "form:list-source" (form'comboboxForm'list_source v)
	, maybeToAttr toAttrFrTyp "form:list-source-type" (form'comboboxForm'list_source_type v)
	, maybeToAttr toAttrFrStr "form:auto-complete" (form'comboboxForm'auto_complete v)
	]
instance XmlAttrType Form'combobox_form'list_source_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "table" = Just Form'combobox_form'list_source_type_table
	    translate "query" = Just Form'combobox_form'list_source_type_query
	    translate "sql" = Just Form'combobox_form'list_source_type_sql
	    translate "sql-pass-through" = Just Form'combobox_form'list_source_type_sql_pass_through
	    translate "value-list" = Just Form'combobox_form'list_source_type_value_list
	    translate "table-fields" = Just Form'combobox_form'list_source_type_table_fields
	    translate _ = Nothing
    toAttrFrTyp n Form'combobox_form'list_source_type_table = Just (n, str2attr "table")
    toAttrFrTyp n Form'combobox_form'list_source_type_query = Just (n, str2attr "query")
    toAttrFrTyp n Form'combobox_form'list_source_type_sql = Just (n, str2attr "sql")
    toAttrFrTyp n Form'combobox_form'list_source_type_sql_pass_through = Just (n, str2attr "sql-pass-through")
    toAttrFrTyp n Form'combobox_form'list_source_type_value_list = Just (n, str2attr "value-list")
    toAttrFrTyp n Form'combobox_form'list_source_type_table_fields = Just (n, str2attr "table-fields")
instance XmlContent Form'item where
    fromElem (CElem (Elem "form:item" as c0):rest) =
	(\(a,ca)->
	   (Just (Form'item (fromAttrs as) a), rest))
	(definite fromText "text" "form:item" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Form'item as a) =
	[CElem (Elem "form:item" (toAttrs as) (toText a))]
instance XmlAttributes Form'item_Attrs where
    fromAttrs as =
	Form'item_Attrs
	  { form'itemForm'label = possibleA fromAttrToStr "form:label" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "form:label" (form'itemForm'label v)
	]
instance XmlContent Form'listbox where
    fromElem (CElem (Elem "form:listbox" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (Just (Form'listbox (fromAttrs as) a b c), rest))
	      (many fromElem cb))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Form'listbox as a b c) =
	[CElem (Elem "form:listbox" (toAttrs as) (maybe [] toElem a ++
						  maybe [] toElem b ++ concatMap toElem c))]
instance XmlAttributes Form'listbox_Attrs where
    fromAttrs as =
	Form'listbox_Attrs
	  { form'listboxForm'disabled = defaultA fromAttrToStr "false" "form:disabled" as
	  , form'listboxForm'dropdown = defaultA fromAttrToStr "false" "form:dropdown" as
	  , form'listboxForm'printable = defaultA fromAttrToStr "true" "form:printable" as
	  , form'listboxForm'size = possibleA fromAttrToStr "form:size" as
	  , form'listboxForm'tab_index = possibleA fromAttrToStr "form:tab-index" as
	  , form'listboxForm'tab_stop = defaultA fromAttrToStr "true" "form:tab-stop" as
	  , form'listboxForm'title = possibleA fromAttrToStr "form:title" as
	  , form'listboxForm'bound_column = possibleA fromAttrToStr "form:bound-column" as
	  , form'listboxForm'data_field = possibleA fromAttrToStr "form:data-field" as
	  , form'listboxForm'list_source = possibleA fromAttrToStr "form:list-source" as
	  , form'listboxForm'list_source_type = possibleA fromAttrToTyp "form:list-source-type" as
	  , form'listboxForm'multiple = defaultA fromAttrToStr "false" "form:multiple" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "form:disabled" (form'listboxForm'disabled v)
	, defaultToAttr toAttrFrStr "form:dropdown" (form'listboxForm'dropdown v)
	, defaultToAttr toAttrFrStr "form:printable" (form'listboxForm'printable v)
	, maybeToAttr toAttrFrStr "form:size" (form'listboxForm'size v)
	, maybeToAttr toAttrFrStr "form:tab-index" (form'listboxForm'tab_index v)
	, defaultToAttr toAttrFrStr "form:tab-stop" (form'listboxForm'tab_stop v)
	, maybeToAttr toAttrFrStr "form:title" (form'listboxForm'title v)
	, maybeToAttr toAttrFrStr "form:bound-column" (form'listboxForm'bound_column v)
	, maybeToAttr toAttrFrStr "form:data-field" (form'listboxForm'data_field v)
	, maybeToAttr toAttrFrStr "form:list-source" (form'listboxForm'list_source v)
	, maybeToAttr toAttrFrTyp "form:list-source-type" (form'listboxForm'list_source_type v)
	, defaultToAttr toAttrFrStr "form:multiple" (form'listboxForm'multiple v)
	]
instance XmlAttrType Form'listbox_form'list_source_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "table" = Just Form'listbox_form'list_source_type_table
	    translate "query" = Just Form'listbox_form'list_source_type_query
	    translate "sql" = Just Form'listbox_form'list_source_type_sql
	    translate "sql-pass-through" = Just Form'listbox_form'list_source_type_sql_pass_through
	    translate "value-list" = Just Form'listbox_form'list_source_type_value_list
	    translate "table-fields" = Just Form'listbox_form'list_source_type_table_fields
	    translate _ = Nothing
    toAttrFrTyp n Form'listbox_form'list_source_type_table = Just (n, str2attr "table")
    toAttrFrTyp n Form'listbox_form'list_source_type_query = Just (n, str2attr "query")
    toAttrFrTyp n Form'listbox_form'list_source_type_sql = Just (n, str2attr "sql")
    toAttrFrTyp n Form'listbox_form'list_source_type_sql_pass_through = Just (n, str2attr "sql-pass-through")
    toAttrFrTyp n Form'listbox_form'list_source_type_value_list = Just (n, str2attr "value-list")
    toAttrFrTyp n Form'listbox_form'list_source_type_table_fields = Just (n, str2attr "table-fields")
instance XmlContent Form'option where
    fromElem (CElem (Elem "form:option" as c0):rest) =
	(\(a,ca)->
	   (Just (Form'option (fromAttrs as) a), rest))
	(definite fromText "text" "form:option" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Form'option as a) =
	[CElem (Elem "form:option" (toAttrs as) (toText a))]
instance XmlAttributes Form'option_Attrs where
    fromAttrs as =
	Form'option_Attrs
	  { form'optionForm'current_selected = defaultA fromAttrToStr "false" "form:current-selected" as
	  , form'optionForm'selected = defaultA fromAttrToStr "false" "form:selected" as
	  , form'optionForm'label = possibleA fromAttrToStr "form:label" as
	  , form'optionForm'value = possibleA fromAttrToStr "form:value" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "form:current-selected" (form'optionForm'current_selected v)
	, defaultToAttr toAttrFrStr "form:selected" (form'optionForm'selected v)
	, maybeToAttr toAttrFrStr "form:label" (form'optionForm'label v)
	, maybeToAttr toAttrFrStr "form:value" (form'optionForm'value v)
	]
instance XmlContent Form'button where
    fromElem (CElem (Elem "form:button" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Form'button (fromAttrs as) a b), rest))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Form'button as a b) =
	[CElem (Elem "form:button" (toAttrs as) (maybe [] toElem a ++
						 maybe [] toElem b))]
instance XmlAttributes Form'button_Attrs where
    fromAttrs as =
	Form'button_Attrs
	  { form'buttonForm'button_type = defaultA fromAttrToTyp Form'button_form'button_type_push "form:button-type" as
	  , form'buttonForm'disabled = defaultA fromAttrToStr "false" "form:disabled" as
	  , form'buttonForm'label = possibleA fromAttrToStr "form:label" as
	  , form'buttonForm'image_data = possibleA fromAttrToStr "form:image-data" as
	  , form'buttonForm'printable = defaultA fromAttrToStr "true" "form:printable" as
	  , form'buttonForm'tab_index = possibleA fromAttrToStr "form:tab-index" as
	  , form'buttonForm'tab_stop = defaultA fromAttrToStr "true" "form:tab-stop" as
	  , form'buttonOffice'target_frame = defaultA fromAttrToStr "_blank" "office:target-frame" as
	  , form'buttonXlink'href = possibleA fromAttrToStr "xlink:href" as
	  , form'buttonForm'title = possibleA fromAttrToStr "form:title" as
	  , form'buttonForm'value = possibleA fromAttrToStr "form:value" as
	  , form'buttonForm'default_button = defaultA fromAttrToStr "false" "form:default-button" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrTyp "form:button-type" (form'buttonForm'button_type v)
	, defaultToAttr toAttrFrStr "form:disabled" (form'buttonForm'disabled v)
	, maybeToAttr toAttrFrStr "form:label" (form'buttonForm'label v)
	, maybeToAttr toAttrFrStr "form:image-data" (form'buttonForm'image_data v)
	, defaultToAttr toAttrFrStr "form:printable" (form'buttonForm'printable v)
	, maybeToAttr toAttrFrStr "form:tab-index" (form'buttonForm'tab_index v)
	, defaultToAttr toAttrFrStr "form:tab-stop" (form'buttonForm'tab_stop v)
	, defaultToAttr toAttrFrStr "office:target-frame" (form'buttonOffice'target_frame v)
	, maybeToAttr toAttrFrStr "xlink:href" (form'buttonXlink'href v)
	, maybeToAttr toAttrFrStr "form:title" (form'buttonForm'title v)
	, maybeToAttr toAttrFrStr "form:value" (form'buttonForm'value v)
	, defaultToAttr toAttrFrStr "form:default-button" (form'buttonForm'default_button v)
	]
instance XmlAttrType Form'button_form'button_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "submit" = Just Form'button_form'button_type_submit
	    translate "reset" = Just Form'button_form'button_type_reset
	    translate "push" = Just Form'button_form'button_type_push
	    translate "url" = Just Form'button_form'button_type_url
	    translate _ = Nothing
    toAttrFrTyp n Form'button_form'button_type_submit = Just (n, str2attr "submit")
    toAttrFrTyp n Form'button_form'button_type_reset = Just (n, str2attr "reset")
    toAttrFrTyp n Form'button_form'button_type_push = Just (n, str2attr "push")
    toAttrFrTyp n Form'button_form'button_type_url = Just (n, str2attr "url")
instance XmlContent Form'image where
    fromElem (CElem (Elem "form:image" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Form'image (fromAttrs as) a b), rest))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Form'image as a b) =
	[CElem (Elem "form:image" (toAttrs as) (maybe [] toElem a ++
						maybe [] toElem b))]
instance XmlAttributes Form'image_Attrs where
    fromAttrs as =
	Form'image_Attrs
	  { form'imageForm'button_type = defaultA fromAttrToTyp Form'image_form'button_type_push "form:button-type" as
	  , form'imageForm'disabled = defaultA fromAttrToStr "false" "form:disabled" as
	  , form'imageForm'image_data = possibleA fromAttrToStr "form:image-data" as
	  , form'imageForm'printable = defaultA fromAttrToStr "true" "form:printable" as
	  , form'imageForm'tab_index = possibleA fromAttrToStr "form:tab-index" as
	  , form'imageForm'tab_stop = defaultA fromAttrToStr "true" "form:tab-stop" as
	  , form'imageOffice'target_frame = defaultA fromAttrToStr "_blank" "office:target-frame" as
	  , form'imageXlink'href = possibleA fromAttrToStr "xlink:href" as
	  , form'imageForm'title = possibleA fromAttrToStr "form:title" as
	  , form'imageForm'value = possibleA fromAttrToStr "form:value" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrTyp "form:button-type" (form'imageForm'button_type v)
	, defaultToAttr toAttrFrStr "form:disabled" (form'imageForm'disabled v)
	, maybeToAttr toAttrFrStr "form:image-data" (form'imageForm'image_data v)
	, defaultToAttr toAttrFrStr "form:printable" (form'imageForm'printable v)
	, maybeToAttr toAttrFrStr "form:tab-index" (form'imageForm'tab_index v)
	, defaultToAttr toAttrFrStr "form:tab-stop" (form'imageForm'tab_stop v)
	, defaultToAttr toAttrFrStr "office:target-frame" (form'imageOffice'target_frame v)
	, maybeToAttr toAttrFrStr "xlink:href" (form'imageXlink'href v)
	, maybeToAttr toAttrFrStr "form:title" (form'imageForm'title v)
	, maybeToAttr toAttrFrStr "form:value" (form'imageForm'value v)
	]
instance XmlAttrType Form'image_form'button_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "submit" = Just Form'image_form'button_type_submit
	    translate "reset" = Just Form'image_form'button_type_reset
	    translate "push" = Just Form'image_form'button_type_push
	    translate "url" = Just Form'image_form'button_type_url
	    translate _ = Nothing
    toAttrFrTyp n Form'image_form'button_type_submit = Just (n, str2attr "submit")
    toAttrFrTyp n Form'image_form'button_type_reset = Just (n, str2attr "reset")
    toAttrFrTyp n Form'image_form'button_type_push = Just (n, str2attr "push")
    toAttrFrTyp n Form'image_form'button_type_url = Just (n, str2attr "url")
instance XmlContent Form'checkbox where
    fromElem (CElem (Elem "form:checkbox" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Form'checkbox (fromAttrs as) a b), rest))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Form'checkbox as a b) =
	[CElem (Elem "form:checkbox" (toAttrs as) (maybe [] toElem a ++
						   maybe [] toElem b))]
instance XmlAttributes Form'checkbox_Attrs where
    fromAttrs as =
	Form'checkbox_Attrs
	  { form'checkboxForm'disabled = defaultA fromAttrToStr "false" "form:disabled" as
	  , form'checkboxForm'label = possibleA fromAttrToStr "form:label" as
	  , form'checkboxForm'printable = defaultA fromAttrToStr "true" "form:printable" as
	  , form'checkboxForm'tab_index = possibleA fromAttrToStr "form:tab-index" as
	  , form'checkboxForm'tab_stop = defaultA fromAttrToStr "true" "form:tab-stop" as
	  , form'checkboxForm'title = possibleA fromAttrToStr "form:title" as
	  , form'checkboxForm'value = possibleA fromAttrToStr "form:value" as
	  , form'checkboxForm'data_field = possibleA fromAttrToStr "form:data-field" as
	  , form'checkboxForm'current_state = possibleA fromAttrToTyp "form:current-state" as
	  , form'checkboxForm'is_tristate = defaultA fromAttrToStr "false" "form:is-tristate" as
	  , form'checkboxForm'state = defaultA fromAttrToTyp Form'checkbox_form'state_unchecked "form:state" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "form:disabled" (form'checkboxForm'disabled v)
	, maybeToAttr toAttrFrStr "form:label" (form'checkboxForm'label v)
	, defaultToAttr toAttrFrStr "form:printable" (form'checkboxForm'printable v)
	, maybeToAttr toAttrFrStr "form:tab-index" (form'checkboxForm'tab_index v)
	, defaultToAttr toAttrFrStr "form:tab-stop" (form'checkboxForm'tab_stop v)
	, maybeToAttr toAttrFrStr "form:title" (form'checkboxForm'title v)
	, maybeToAttr toAttrFrStr "form:value" (form'checkboxForm'value v)
	, maybeToAttr toAttrFrStr "form:data-field" (form'checkboxForm'data_field v)
	, maybeToAttr toAttrFrTyp "form:current-state" (form'checkboxForm'current_state v)
	, defaultToAttr toAttrFrStr "form:is-tristate" (form'checkboxForm'is_tristate v)
	, defaultToAttr toAttrFrTyp "form:state" (form'checkboxForm'state v)
	]
instance XmlAttrType Form'checkbox_form'current_state where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "unchecked" = Just Form'checkbox_form'current_state_unchecked
	    translate "checked" = Just Form'checkbox_form'current_state_checked
	    translate "unknown" = Just Form'checkbox_form'current_state_unknown
	    translate _ = Nothing
    toAttrFrTyp n Form'checkbox_form'current_state_unchecked = Just (n, str2attr "unchecked")
    toAttrFrTyp n Form'checkbox_form'current_state_checked = Just (n, str2attr "checked")
    toAttrFrTyp n Form'checkbox_form'current_state_unknown = Just (n, str2attr "unknown")
instance XmlAttrType Form'checkbox_form'state where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "unchecked" = Just Form'checkbox_form'state_unchecked
	    translate "checked" = Just Form'checkbox_form'state_checked
	    translate "unknown" = Just Form'checkbox_form'state_unknown
	    translate _ = Nothing
    toAttrFrTyp n Form'checkbox_form'state_unchecked = Just (n, str2attr "unchecked")
    toAttrFrTyp n Form'checkbox_form'state_checked = Just (n, str2attr "checked")
    toAttrFrTyp n Form'checkbox_form'state_unknown = Just (n, str2attr "unknown")
instance XmlContent Form'radio where
    fromElem (CElem (Elem "form:radio" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Form'radio (fromAttrs as) a b), rest))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Form'radio as a b) =
	[CElem (Elem "form:radio" (toAttrs as) (maybe [] toElem a ++
						maybe [] toElem b))]
instance XmlAttributes Form'radio_Attrs where
    fromAttrs as =
	Form'radio_Attrs
	  { form'radioForm'current_selected = defaultA fromAttrToStr "false" "form:current-selected" as
	  , form'radioForm'disabled = defaultA fromAttrToStr "false" "form:disabled" as
	  , form'radioForm'label = possibleA fromAttrToStr "form:label" as
	  , form'radioForm'printable = defaultA fromAttrToStr "true" "form:printable" as
	  , form'radioForm'selected = defaultA fromAttrToStr "false" "form:selected" as
	  , form'radioForm'tab_index = possibleA fromAttrToStr "form:tab-index" as
	  , form'radioForm'tab_stop = defaultA fromAttrToStr "true" "form:tab-stop" as
	  , form'radioForm'title = possibleA fromAttrToStr "form:title" as
	  , form'radioForm'value = possibleA fromAttrToStr "form:value" as
	  , form'radioForm'data_field = possibleA fromAttrToStr "form:data-field" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "form:current-selected" (form'radioForm'current_selected v)
	, defaultToAttr toAttrFrStr "form:disabled" (form'radioForm'disabled v)
	, maybeToAttr toAttrFrStr "form:label" (form'radioForm'label v)
	, defaultToAttr toAttrFrStr "form:printable" (form'radioForm'printable v)
	, defaultToAttr toAttrFrStr "form:selected" (form'radioForm'selected v)
	, maybeToAttr toAttrFrStr "form:tab-index" (form'radioForm'tab_index v)
	, defaultToAttr toAttrFrStr "form:tab-stop" (form'radioForm'tab_stop v)
	, maybeToAttr toAttrFrStr "form:title" (form'radioForm'title v)
	, maybeToAttr toAttrFrStr "form:value" (form'radioForm'value v)
	, maybeToAttr toAttrFrStr "form:data-field" (form'radioForm'data_field v)
	]
instance XmlContent Form'frame where
    fromElem (CElem (Elem "form:frame" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Form'frame (fromAttrs as) a b), rest))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Form'frame as a b) =
	[CElem (Elem "form:frame" (toAttrs as) (maybe [] toElem a ++
						maybe [] toElem b))]
instance XmlAttributes Form'frame_Attrs where
    fromAttrs as =
	Form'frame_Attrs
	  { form'frameForm'disabled = defaultA fromAttrToStr "false" "form:disabled" as
	  , form'frameForm'for = possibleA fromAttrToStr "form:for" as
	  , form'frameForm'label = possibleA fromAttrToStr "form:label" as
	  , form'frameForm'printable = defaultA fromAttrToStr "true" "form:printable" as
	  , form'frameForm'title = possibleA fromAttrToStr "form:title" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "form:disabled" (form'frameForm'disabled v)
	, maybeToAttr toAttrFrStr "form:for" (form'frameForm'for v)
	, maybeToAttr toAttrFrStr "form:label" (form'frameForm'label v)
	, defaultToAttr toAttrFrStr "form:printable" (form'frameForm'printable v)
	, maybeToAttr toAttrFrStr "form:title" (form'frameForm'title v)
	]
instance XmlContent Form'image_frame where
    fromElem (CElem (Elem "form:image-frame" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Form'image_frame (fromAttrs as) a b), rest))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Form'image_frame as a b) =
	[CElem (Elem "form:image-frame" (toAttrs as) (maybe [] toElem a ++
						      maybe [] toElem b))]
instance XmlAttributes Form'image_frame_Attrs where
    fromAttrs as =
	Form'image_frame_Attrs
	  { form'image_frameForm'disabled = defaultA fromAttrToStr "false" "form:disabled" as
	  , form'image_frameForm'image_data = possibleA fromAttrToStr "form:image-data" as
	  , form'image_frameForm'printable = defaultA fromAttrToStr "true" "form:printable" as
	  , form'image_frameForm'readonly = defaultA fromAttrToStr "false" "form:readonly" as
	  , form'image_frameForm'title = possibleA fromAttrToStr "form:title" as
	  , form'image_frameForm'data_field = possibleA fromAttrToStr "form:data-field" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "form:disabled" (form'image_frameForm'disabled v)
	, maybeToAttr toAttrFrStr "form:image-data" (form'image_frameForm'image_data v)
	, defaultToAttr toAttrFrStr "form:printable" (form'image_frameForm'printable v)
	, defaultToAttr toAttrFrStr "form:readonly" (form'image_frameForm'readonly v)
	, maybeToAttr toAttrFrStr "form:title" (form'image_frameForm'title v)
	, maybeToAttr toAttrFrStr "form:data-field" (form'image_frameForm'data_field v)
	]
instance XmlContent Form'hidden where
    fromElem (CElem (Elem "form:hidden" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Form'hidden (fromAttrs as) a b), rest))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Form'hidden as a b) =
	[CElem (Elem "form:hidden" (toAttrs as) (maybe [] toElem a ++
						 maybe [] toElem b))]
instance XmlAttributes Form'hidden_Attrs where
    fromAttrs as =
	Form'hidden_Attrs
	  { form'hiddenForm'name = possibleA fromAttrToStr "form:name" as
	  , form'hiddenForm'service_name = possibleA fromAttrToStr "form:service-name" as
	  , form'hiddenForm'value = possibleA fromAttrToStr "form:value" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "form:name" (form'hiddenForm'name v)
	, maybeToAttr toAttrFrStr "form:service-name" (form'hiddenForm'service_name v)
	, maybeToAttr toAttrFrStr "form:value" (form'hiddenForm'value v)
	]
instance XmlContent Form'grid where
    fromElem (CElem (Elem "form:grid" as c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (\(c,cc)->
		 (Just (Form'grid (fromAttrs as) a b c), rest))
	      (many fromElem cb))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Form'grid as a b c) =
	[CElem (Elem "form:grid" (toAttrs as) (maybe [] toElem a ++
					       maybe [] toElem b ++ concatMap toElem c))]
instance XmlAttributes Form'grid_Attrs where
    fromAttrs as =
	Form'grid_Attrs
	  { form'gridForm'disabled = defaultA fromAttrToStr "false" "form:disabled" as
	  , form'gridForm'printable = defaultA fromAttrToStr "true" "form:printable" as
	  , form'gridForm'tab_index = possibleA fromAttrToStr "form:tab-index" as
	  , form'gridForm'tab_stop = defaultA fromAttrToStr "true" "form:tab-stop" as
	  , form'gridForm'title = possibleA fromAttrToStr "form:title" as
	  }
    toAttrs v = catMaybes 
	[ defaultToAttr toAttrFrStr "form:disabled" (form'gridForm'disabled v)
	, defaultToAttr toAttrFrStr "form:printable" (form'gridForm'printable v)
	, maybeToAttr toAttrFrStr "form:tab-index" (form'gridForm'tab_index v)
	, defaultToAttr toAttrFrStr "form:tab-stop" (form'gridForm'tab_stop v)
	, maybeToAttr toAttrFrStr "form:title" (form'gridForm'title v)
	]
instance XmlContent Form'column where
    fromElem (CElem (Elem "form:column" as c0):rest) =
	(\(a,ca)->
	   (Just (Form'column (fromAttrs as) a), rest))
	(definite fromElem "form:column+" "form:column" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Form'column as a) =
	[CElem (Elem "form:column" (toAttrs as) (toElem a))]
instance XmlAttributes Form'column_Attrs where
    fromAttrs as =
	Form'column_Attrs
	  { form'columnForm'name = possibleA fromAttrToStr "form:name" as
	  , form'columnForm'service_name = possibleA fromAttrToStr "form:service-name" as
	  , form'columnForm'label = possibleA fromAttrToStr "form:label" as
	  , form'columnForm'column_style_name = possibleA fromAttrToStr "form:column-style-name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "form:name" (form'columnForm'name v)
	, maybeToAttr toAttrFrStr "form:service-name" (form'columnForm'service_name v)
	, maybeToAttr toAttrFrStr "form:label" (form'columnForm'label v)
	, maybeToAttr toAttrFrStr "form:column-style-name" (form'columnForm'column_style_name v)
	]
instance XmlContent Form'column_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Form'column_Form'text a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Form'column_Form'textarea a), rest)
		(_,_) ->
			case (fromElem c0) of
			(Just a,rest) -> (Just (Form'column_Form'formatted_text a), rest)
			(_,_) ->
				case (fromElem c0) of
				(Just a,rest) -> (Just (Form'column_Form'checkbox a), rest)
				(_,_) ->
					case (fromElem c0) of
					(Just a,rest) -> (Just (Form'column_Form'listbox a), rest)
					(_,_) ->
						case (fromElem c0) of
						(Just a,rest) -> (Just (Form'column_Form'combobox a), rest)
						(_,_) ->
						    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Form'column_Form'text a) = toElem a
    toElem (Form'column_Form'textarea a) = toElem a
    toElem (Form'column_Form'formatted_text a) = toElem a
    toElem (Form'column_Form'checkbox a) = toElem a
    toElem (Form'column_Form'listbox a) = toElem a
    toElem (Form'column_Form'combobox a) = toElem a
instance XmlContent Form'generic_control where
    fromElem (CElem (Elem "form:generic-control" [] c0):rest) =
	(\(a,ca)->
	   (\(b,cb)->
	      (Just (Form'generic_control a b), rest))
	   (fromElem ca))
	(fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Form'generic_control a b) =
	[CElem (Elem "form:generic-control" [] (maybe [] toElem a ++
						maybe [] toElem b))]
instance XmlContent Form'properties where
    fromElem (CElem (Elem "form:properties" [] c0):rest) =
	(\(a,ca)->
	   (Just (Form'properties a), rest))
	(definite fromElem "form:property+" "form:properties" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Form'properties a) =
	[CElem (Elem "form:properties" [] (toElem a))]
instance XmlContent Form'property where
    fromElem (CElem (Elem "form:property" as c0):rest) =
	(\(a,ca)->
	   (Just (Form'property (fromAttrs as) a), rest))
	(many fromElem c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Form'property as a) =
	[CElem (Elem "form:property" (toAttrs as) (concatMap toElem a))]
instance XmlAttributes Form'property_Attrs where
    fromAttrs as =
	Form'property_Attrs
	  { form'propertyForm'property_is_list = possibleA fromAttrToStr "form:property-is-list" as
	  , form'propertyForm'property_name = definiteA fromAttrToStr "form:property" "form:property-name" as
	  , form'propertyForm'property_type = definiteA fromAttrToTyp "form:property" "form:property-type" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "form:property-is-list" (form'propertyForm'property_is_list v)
	, toAttrFrStr "form:property-name" (form'propertyForm'property_name v)
	, toAttrFrTyp "form:property-type" (form'propertyForm'property_type v)
	]
instance XmlAttrType Form'property_form'property_type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "boolean" = Just Form'property_form'property_type_boolean
	    translate "short" = Just Form'property_form'property_type_short
	    translate "int" = Just Form'property_form'property_type_int
	    translate "long" = Just Form'property_form'property_type_long
	    translate "double" = Just Form'property_form'property_type_double
	    translate "string" = Just Form'property_form'property_type_string
	    translate _ = Nothing
    toAttrFrTyp n Form'property_form'property_type_boolean = Just (n, str2attr "boolean")
    toAttrFrTyp n Form'property_form'property_type_short = Just (n, str2attr "short")
    toAttrFrTyp n Form'property_form'property_type_int = Just (n, str2attr "int")
    toAttrFrTyp n Form'property_form'property_type_long = Just (n, str2attr "long")
    toAttrFrTyp n Form'property_form'property_type_double = Just (n, str2attr "double")
    toAttrFrTyp n Form'property_form'property_type_string = Just (n, str2attr "string")
instance XmlContent Form'property_value where
    fromElem (CElem (Elem "form:property-value" as c0):rest) =
	(\(a,ca)->
	   (Just (Form'property_value (fromAttrs as) a), rest))
	(definite fromText "text" "form:property-value" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Form'property_value as a) =
	[CElem (Elem "form:property-value" (toAttrs as) (toText a))]
instance XmlAttributes Form'property_value_Attrs where
    fromAttrs as =
	Form'property_value_Attrs
	  { form'property_valueForm'property_is_void = possibleA fromAttrToStr "form:property-is-void" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "form:property-is-void" (form'property_valueForm'property_is_void v)
	]
instance XmlContent Office'settings where
    fromElem (CElem (Elem "office:settings" [] c0):rest) =
	(\(a,ca)->
	   (Just (Office'settings a), rest))
	(definite fromElem "config:config-item-set+" "office:settings" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Office'settings a) =
	[CElem (Elem "office:settings" [] (toElem a))]
instance XmlContent Config'config_item_set where
    fromElem (CElem (Elem "config:config-item-set" as c0):rest) =
	(\(a,ca)->
	   (Just (Config'config_item_set (fromAttrs as) a), rest))
	(definite fromElem "config:config-item-set+" "config:config-item-set" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Config'config_item_set as a) =
	[CElem (Elem "config:config-item-set" (toAttrs as) (toElem a))]
instance XmlAttributes Config'config_item_set_Attrs where
    fromAttrs as =
	Config'config_item_set_Attrs
	  { config'config_item_setConfig'name = definiteA fromAttrToStr "config:config-item-set" "config:name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "config:name" (config'config_item_setConfig'name v)
	]
instance XmlContent Config'config_item_set_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Config'config_item_set_Config'config_item a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Config'config_item_set_Config'config_item_set a), rest)
		(_,_) ->
			case (fromElem c0) of
			(Just a,rest) -> (Just (Config'config_item_set_Config'config_item_map_named a), rest)
			(_,_) ->
				case (fromElem c0) of
				(Just a,rest) -> (Just (Config'config_item_set_Config'config_item_map_indexed a), rest)
				(_,_) ->
				    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Config'config_item_set_Config'config_item a) = toElem a
    toElem (Config'config_item_set_Config'config_item_set a) = toElem a
    toElem (Config'config_item_set_Config'config_item_map_named a) = toElem a
    toElem (Config'config_item_set_Config'config_item_map_indexed a) = toElem a
instance XmlContent Config'config_item where
    fromElem (CElem (Elem "config:config-item" as c0):rest) =
	(\(a,ca)->
	   (Just (Config'config_item (fromAttrs as) a), rest))
	(definite fromText "text" "config:config-item" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Config'config_item as a) =
	[CElem (Elem "config:config-item" (toAttrs as) (toText a))]
instance XmlAttributes Config'config_item_Attrs where
    fromAttrs as =
	Config'config_item_Attrs
	  { config'config_itemConfig'name = definiteA fromAttrToStr "config:config-item" "config:name" as
	  , config'config_itemConfig'type = definiteA fromAttrToTyp "config:config-item" "config:type" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "config:name" (config'config_itemConfig'name v)
	, toAttrFrTyp "config:type" (config'config_itemConfig'type v)
	]
instance XmlAttrType Config'config_item_config'type where
    fromAttrToTyp n (n',v)
	| n==n'     = translate (attr2str v)
	| otherwise = Nothing
      where translate "boolean" = Just Config'config_item_config'type_boolean
	    translate "short" = Just Config'config_item_config'type_short
	    translate "int" = Just Config'config_item_config'type_int
	    translate "long" = Just Config'config_item_config'type_long
	    translate "double" = Just Config'config_item_config'type_double
	    translate "string" = Just Config'config_item_config'type_string
	    translate "datetime" = Just Config'config_item_config'type_datetime
	    translate "base64Binary" = Just Config'config_item_config'type_base64Binary
	    translate _ = Nothing
    toAttrFrTyp n Config'config_item_config'type_boolean = Just (n, str2attr "boolean")
    toAttrFrTyp n Config'config_item_config'type_short = Just (n, str2attr "short")
    toAttrFrTyp n Config'config_item_config'type_int = Just (n, str2attr "int")
    toAttrFrTyp n Config'config_item_config'type_long = Just (n, str2attr "long")
    toAttrFrTyp n Config'config_item_config'type_double = Just (n, str2attr "double")
    toAttrFrTyp n Config'config_item_config'type_string = Just (n, str2attr "string")
    toAttrFrTyp n Config'config_item_config'type_datetime = Just (n, str2attr "datetime")
    toAttrFrTyp n Config'config_item_config'type_base64Binary = Just (n, str2attr "base64Binary")
instance XmlContent Config'config_item_map_named where
    fromElem (CElem (Elem "config:config-item-map-named" as c0):rest) =
	(\(a,ca)->
	   (Just (Config'config_item_map_named (fromAttrs as) a), rest))
	(definite fromElem "config:config-item-map-entry+" "config:config-item-map-named" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Config'config_item_map_named as a) =
	[CElem (Elem "config:config-item-map-named" (toAttrs as) (toElem a))]
instance XmlAttributes Config'config_item_map_named_Attrs where
    fromAttrs as =
	Config'config_item_map_named_Attrs
	  { config'config_item_map_namedConfig'name = definiteA fromAttrToStr "config:config-item-map-named" "config:name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "config:name" (config'config_item_map_namedConfig'name v)
	]
instance XmlContent Config'config_item_map_indexed where
    fromElem (CElem (Elem "config:config-item-map-indexed" as c0):rest) =
	(\(a,ca)->
	   (Just (Config'config_item_map_indexed (fromAttrs as) a), rest))
	(definite fromElem "config:config-item-map-entry+" "config:config-item-map-indexed" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Config'config_item_map_indexed as a) =
	[CElem (Elem "config:config-item-map-indexed" (toAttrs as) (toElem a))]
instance XmlAttributes Config'config_item_map_indexed_Attrs where
    fromAttrs as =
	Config'config_item_map_indexed_Attrs
	  { config'config_item_map_indexedConfig'name = definiteA fromAttrToStr "config:config-item-map-indexed" "config:name" as
	  }
    toAttrs v = catMaybes 
	[ toAttrFrStr "config:name" (config'config_item_map_indexedConfig'name v)
	]
instance XmlContent Config'config_item_map_entry where
    fromElem (CElem (Elem "config:config-item-map-entry" as c0):rest) =
	(\(a,ca)->
	   (Just (Config'config_item_map_entry (fromAttrs as) a), rest))
	(definite fromElem "config:config-item-map-entry+" "config:config-item-map-entry" c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Config'config_item_map_entry as a) =
	[CElem (Elem "config:config-item-map-entry" (toAttrs as) (toElem a))]
instance XmlAttributes Config'config_item_map_entry_Attrs where
    fromAttrs as =
	Config'config_item_map_entry_Attrs
	  { config'config_item_map_entryConfig'name = possibleA fromAttrToStr "config:name" as
	  }
    toAttrs v = catMaybes 
	[ maybeToAttr toAttrFrStr "config:name" (config'config_item_map_entryConfig'name v)
	]
instance XmlContent Config'config_item_map_entry_ where
    fromElem c0 =
	case (fromElem c0) of
	(Just a,rest) -> (Just (Config'config_item_map_entry_Config'config_item a), rest)
	(_,_) ->
		case (fromElem c0) of
		(Just a,rest) -> (Just (Config'config_item_map_entry_Config'config_item_set a), rest)
		(_,_) ->
			case (fromElem c0) of
			(Just a,rest) -> (Just (Config'config_item_map_entry_Config'config_item_map_named a), rest)
			(_,_) ->
				case (fromElem c0) of
				(Just a,rest) -> (Just (Config'config_item_map_entry_Config'config_item_map_indexed a), rest)
				(_,_) ->
				    (Nothing, c0)
    fromElem (CMisc _:rest) = fromElem rest
    fromElem rest = (Nothing, rest)
    toElem (Config'config_item_map_entry_Config'config_item a) = toElem a
    toElem (Config'config_item_map_entry_Config'config_item_set a) = toElem a
    toElem (Config'config_item_map_entry_Config'config_item_map_named a) = toElem a
    toElem (Config'config_item_map_entry_Config'config_item_map_indexed a) = toElem a


{-Done-}
