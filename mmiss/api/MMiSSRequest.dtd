<!--
   XML Document Type Definition for requests to be sent to MMiSS.
   -->

<!-- The element type corresponding to a request.  
     (We use double parentheses (( )) to work around an annoying bug in
     HaXml-1.10) -->
<!ELEMENT request  ( 
      connect | closeServer | listVersions 
      | checkOut | changeUserInfo | commitVersion 
      | closeVersion | getObject | putObject 
      )
   >

<!-- The element type corresponding to a response. 
     Successful requests will return a corresponding response.
     -->
<!ELEMENT response (messages,
     (connectResponse | closeServerResponse | listVersionsResponse
      | checkOutResponse | changeUserInfoResponse | commitVersionResponse
      | closeVersionResponse | getObjectResponse | putObjectResponse
      )? )
   >

<!-- Connecting to a particular server. 
   If the serverRef is specified it is used to identify the server in
   future operations, such as close.  Otherwise a serverRef is generated
   automatically. 
   -->
<!ELEMENT connect (serverRef)? >
<!ATTLIST connect
   server CDATA #IMPLIED
   user CDATA #IMPLIED
   password CDATA #IMPLIED
   >
<!ELEMENT connectResponse (serverRef) >


<!-- Closing the connection to a server. -->
<!ELEMENT closeServer (serverRef) >
<!ELEMENT closeServerResponse EMPTY >


<!-- Listing all known versions. -->
<!ELEMENT listVersions (serverRef) >
<!ELEMENT listVersionsResponse (versionInfo*) >


<!-- Checking out a version. -->
<!ELEMENT checkOut (serverRef,versionRef?) >
<!ATTLIST checkOut version CDATA #REQUIRED >

<!-- The version itself is represented by a sequence of digits -->

<!ELEMENT checkOutResponse (versionRef) >

<!-- Changing the user-info of a current checked-out version. -->
<!ELEMENT changeUserInfo (versionRef,userInfo) >
<!ELEMENT changeUserInfoResponse EMPTY >

<!-- Committing a checked-out version.  If the userInfo is supplied we
     also change that. -->
<!ELEMENT commitVersion (versionRef,userInfo?) >
<!ELEMENT commitVersionResponse EMPTY >

<!-- Closing a checked-out version. -->
<!ELEMENT closeVersion (versionRef) >
<!ELEMENT closeVersionResponse EMPTY >

<!-- Get the contents of an object in the repository. 
     This will be implemented for (a) MMiSS objects; (b) MMiSS files;
     (c) folders or MMiSSPackageFolders. 

     The interpretation depends on whether the <variants> element is
     supplied or not.  If <variants> IS NOT supplied, we get everything
     in all variants in the object, file, folder or package folder, including,
     if recurse=allIncluded, everything in the subfolders too.  If <variants>
     IS supplied, the object must be either an MMiSS object or MMiSS file;
     we get just that variant of that object or that file, except that
     should recurse=allIncluded we also recursively attempt replace all import 
     statements in the input object by the referenced objects.
     -->
<!ELEMENT getObject (versionRef,objectFullName,variants?) >
<!ATTLIST getObject
   what (locations | everything) "locations"
   format (LaTeX | XML)  "LaTeX"
   recurse (justThis | allIncluded) "justThis"
   >
<!-- Interpretation of the attributes.
    "what" specifies what sort of data should be returned.  For "locations"
    no fileVariants elements will be sent.   For "everything", each "file" 
    element will contain all selected variants.

    "format" specifies whether the content of MMiSS objects should be given
    in LaTeX or XML.  They will be sent with an objectType with 
    baseType=mmissFile, and extType=tex or xml.
    -->

<!ELEMENT getObjectResponse (bundle) >
 

<!-- Attempt to import those objects in the bundle with the given packageId
     into the specified object in the repository, which must be a folder or 
     package folder.  

     If packageId is not specified, we simply take the first <packageId> in
     the bundle. -->
<!ELEMENT putObject (versionRef,objectFullName,packageId?,bundle) >
<!ELEMENT putObjectResponse EMPTY >

<!--
   Basic Data Types (shared with MMiSSReply.dtd)

   -->

<!-- References.  These are references to servers, versions & so on which
     have already been opened. -->
<!ENTITY % ref "ref CDATA #REQUIRED" >

<!-- A server reference. -->
<!ELEMENT serverRef EMPTY >
<!ATTLIST serverRef %ref; >

<!-- A version reference. -->
<!ELEMENT versionRef EMPTY >
<!ATTLIST versionRef %ref; >

<!-- A collection of files, each of which has a packageId attached to it. -->
<!-- Each <file> element at the top level must specify a <files> element
     (not <fileVariants>). -->
<!ELEMENT bundle (packageId,file)* >

<!-- A packageId -->
<!ELEMENT packageId EMPTY>
<!ATTLIST packageId id CDATA #REQUIRED>

<!-- A file. 
     Either a fileVariants or a files element must be present, in input
     sent with the "putObject" command. -->
<!ELEMENT file (fileLocation, (fileVariants | files)? ) >
<!ELEMENT fileLocation (objectName?,objectType)>
   <!-- The objectName? needs to be optional because of objects, such as
        preambles, which don't have them. -->

<!-- A collection of files, representing some subdirectory. -->
<!ELEMENT files (file)* >


<!-- A collection of variants. -->
<!ELEMENT fileVariants (fileVariant)* >
<!ELEMENT fileVariant ( variants?,fileContents? ) >
<!ATTLIST fileContents
   dataBlock NMTOKEN #REQUIRED
   charType (byte | unicode) "unicode"
   >

<!-- The VersionInfo and friends. -->
<!ELEMENT versionInfo (userInfo,serverInfo)>
<!ATTLIST versionInfo 
   isPresent (present | absent) "present"
   >

<!ELEMENT userInfo EMPTY>
<!ATTLIST userInfo
   label CDATA #IMPLIED
   contents CDATA #IMPLIED
   private (autoExport|noAutoExport) "autoExport"
   version NMTOKEN #IMPLIED
   parents NMTOKENS #IMPLIED
   >
<!-- version and parents should /not/ be set for changeUserInfo.
     (This is just how the server structures them and I can't be bothered
     to create an especial element for 
     everything-the-user-is-allowed-to-change.) 

     The value of the version attribute is a sequence of digits (the same as 
     are supplied as values of the version attribute of the checkOut element).
     Example "123".

     The value of the parents attribute represents the parent versions of
     this versions, and is a sequence of sequences of digits, separated by
     spaces.  Example: "" (if no parents), "123" (one parent), "123 456"
     (two parents)
     -->

<!ELEMENT serverInfo EMPTY>
<!ATTLIST serverInfo 
   serverId CDATA #REQUIRED
   serialNo NMTOKEN #REQUIRED
   timeStamp CDATA #REQUIRED
   userId CDATA #REQUIRED
   >
<!-- The timestamp has the format
        <optional sign><digits>+<digits>
     where the digits encode two integers N1 and N2 (in order) representing
     the time elapsed since 00:00:00 UTC on 1 Jan 1970.  This will be
     N1 + (N2 / 10^12) seconds.  0<=N2<10^12.
  -->


<!-- A name of an object in a folder, for example "A" -->
<!ELEMENT objectName (#PCDATA) >

<!-- Object Types. 
   An object type is described by its baseType, sometimes additionally 
   qualified by an extType and extraType. 

   The difference between extType and extraType is that the extType
   is part of the file name of an object, while extraType is not.

   The list of baseTypes given in this DTD may be extended later on.

   Examples of extType's: 
      "gif" / "jpeg" (or the appropriate extension) for an mmissFile
      not specified for an mmissFolder, mmissPreamble or mmissObject.

      The combination of baseType=mmissFile and extType="tex" or "xml" 
      is reserved for MMiSS objects being imported or exported.

   The extra data contains extra information identifying particular    
   -->
<!ELEMENT objectType EMPTY >
<!ATTLIST objectType
   baseType ( folder | plainFile 
      | mmissFolder | mmissObject | mmissFile 
      | mmissPreamble | unknownType ) #REQUIRED
   extType CDATA #IMPLIED
   extraType CDATA #IMPLIED
   >

<!-- A path of an object from some other object, for example "A/B". 
     Where this is given as part of an MMiSS request, the path will be
     from the top folder (there is no current directory).  Where 
     this is given as part of a fileLocation, the path will be from the
     object for which the request was initiated, EG the 
     -->
<!ELEMENT objectFullName (#PCDATA) >

<!-- Variant objects. -->
<!ELEMENT variant EMPTY >
<!ATTLIST variant 
   key CDATA #REQUIRED
   value CDATA #REQUIRED
   >

<!ELEMENT variants (variant)* >

<!-- Messages 

     Every request returns a messages object, which in addition
     to providing messages of various levels, also contains a 
     success/fail/panic indicator.
-->

<!ELEMENT messages (alert|error|warning|message)* >
<!ATTLIST messages 
   status (success | fail | panic) "success"
   >

<!-- 
   "fail" means the operation was not successfully completed.
   "panic" means that the session has somehow crashed and that further
       communication within it should not be attempted.
    -->

<!ELEMENT alert (#PCDATA)>
<!ELEMENT error (#PCDATA)>
<!ELEMENT warning (#PCDATA)>
<!ELEMENT message (#PCDATA)>


<!-- Standard Predefined Entities (XML standard section 4.6). --> 
<!ENTITY lt "&#38;#60;">
<!ENTITY gt "&#62;">
<!ENTITY amp "&#38;#38;">
<!ENTITY apos "&#39;">
<!ENTITY quot "&#34;">

