This document describes the proposed security model for MMiSS, both at the
high level, as seen by the user, and at the low-level, as seen at the
interface to UniForM's (extremely basic) database model.
               George Russell   18th August 2004

Users
-----

Each user has a user-id.  The user-id is a String.  The user "logs in" somehow
by obtaining an SSH connection (I don't know how this is done but I'm sure 
it's possible) with that user-id; after this the server knows who the user is.
We describe a user by the Haskell type User.

Groups
------

A group corresponds to a list [Either Group User].  Thus groups can include 
users and also recursively other groups, all of whose users themselves
inherit the privileges of the group.

The groups are defined by a "groups" file in the server's directory.
The group file might look like this

% beginning of file
group1:#user1,#user2
group2:group1,#user3
% end of file

This says that "group1 includes the users user1 and user2,group2 includes
those users in group1, and also user3".  Note that users in the "groups" file
are preceded by "#".

The groups file is read when the server starts up, but also dynamically
checked when the server is running, so the server is never more than 
5 seconds out of date.

Comment lines (beginning with "%"), blank lines, and mutually inclusive
groups are all allowed.

Permissions
-----------

A permission contains 4 components
(1) if it is granting access ("+") or denying it ("-").
(2) the user or group to which the permission applies.  As 
in the group file, user names should be preceded by "#".
In addition "*" indicates that the permission applies to everyone.
(3) the activities to which the permission applies.  These are 
denoted by letters, either "r" for "read", "w" for write, or "p" for
change permissions.  "rw" would thus denote that the permission applies 
to both reading and writing.
(4) the versions to which the permission applies.  Here the person
typing the permission will need the actual version number.  The
syntax is [m] for "version m", [m..], for "version m and all its descendants",
[..n] for "version n and all its ancestors", [m..n] for all versions to
which both [m..] and [..n] apply.  This part may also be omitted,
indicating that the permission applies to all versions.

(3) and (if included) (4) should be preceded by colons.

Thus "+#user1:rwp" means "give user 'user1' read, write and permissions 
access",  "-group1:w:[4..]" means "deny the group 'group1' write 
access to version 4 or its descendants".

In general an object is qualified by a list of permissions.  This
is represented textually as a string with the individual permissions
separated by spaces, as in "+#user1:rwp -group1:w:[4..]".
In this list, earlier entries always override later ones; thus the
above list gives user "user1" write access to all versions, even if
"user1" belongs to "group1".

When there is no applicable permission in a list of permissions, the
list of permissions is deemed to grant access.

"permissions" access is special; it allows those who have it to change
permissions.  It is an error to grant or deny permissions access
selectively by version, so "-group1:p:[4..]" would not be accepted.

Global Permissions
------------------

There is a global list of permissions.  This controls all access to the
repository.  For example, to check out a version the global permissions
must give the user permission to read that version; to commit it again
or to alter its contents or title the user must have permission to write
that version.  Everyone able to log in is able to get at the list of
"VersionInfo"s for the repository (it seems to complicated otherwise to
have varying lists of what individual users may and may not see), but
for example adding "-#user:rw" to the front of the server's global permissions
will deny "#user" any other access.

However global permissions do not allow different parts of an individual
version to have different permissions.  For this we need
to understand something about "Objects in the Repository".

Objects in the Repository
-------------------------

Objects in the repository have an individual Location.  The Location
identifies the individual object, and remains the same through different
versions.* 

Each Location also has a parent Location, except for one Location in each
view, that corresponding to the TOP folder.

Each Location has a list of permissions associated with it.  (By default
this is empty).

For the server to permit an activity ("read", "write" or "permissions") on
a location all the following permissions must grant it.
(a) the location's own permissions.
(b) the permissions on all the locations ancestors.
(c) the global permissions.

Note that to change the permissions on a location you need all of (a),
(b) & (c); it is not enough for just the location's own permissions
to change it.

* actually this is a slight lie.  It is possible for the same location to
refer to different objects in different versions, after versions have
been copied between repositories.  At the lowest level the server does
however have things called "PrimitiveLocations" which really do have this
property.  Thus in the above you should really read "PrimitiveLocation"
instead of "Location".

User Interface
--------------

The global permissions can be changed by selecting an option on the
edit menu of the version graph.  Object permissions can be changed
by selecting an option on a menu of the corresponding view graph.
In the latter case, the permission is not (unlike other changes) applied
to the view; it is made immediately to the server.

ADMIN
-----

In addition there is a group ADMIN.  Users belonging to this group can
switch the server into a mode whereby everything they do henceforth
is permitted (unless the groups file changes to remove them from ADMIN).
This protects users from painting themselves into a corner.
