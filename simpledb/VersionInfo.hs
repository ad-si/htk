{- This module maintains the extra information that is maintained by the
   server about each version, such as parent versions, user-id of
   creator, and so on. -}
module VersionInfo(
   ObjectVersion(..),
   UserInfo(..),
   ServerInfo(..),
   VersionInfo(..),
   mkVersionInfo,  
   ) where

import System.IO.Unsafe

import Computation
import Broadcaster
import BinaryIO
import WBFiles

import qualified PasswordFile

-- ----------------------------------------------------------------------
-- The datatypes
-- ----------------------------------------------------------------------

newtype ObjectVersion = ObjectVersion Int deriving (Eq,Ord,HasBinaryIO)
   -- Type of handle referring to a version.


-- | The information that must be specified on each commit.
data UserInfo = UserInfo {
   label :: String, 
      -- ^ Label for this version in the graph.
   contents :: String, 
      -- ^ More detailed text about this version
   private :: String,
      -- ^ If set, do not send this version to other servers automatically.
   version :: ObjectVersion,
      -- ^ The objectVersion for this commit.
   parents :: [ObjectVersion]
      -- ^ Parents of this version.  The first parent, if any, is special
      -- as on commit we describe the entries by their difference from
      -- this first parent.
   }

-- | The information that can either be automatically constructed by the
-- server, or specified on commit.  Once constructed the ServerInfo value
-- is not supposed to change, even when we transmit the version to another
-- server.  Thus it provides, we hope, a reliable way of globally (for
-- all MMiSS servers in the world) distinguishing between different versions.
data ServerInfo = ServerInfo {
   serverId :: String, 
      -- ^ Globally unique id for the originating server, as generated by
      -- WBFiles.getServerId.
   timeStamp :: Int,
      -- ^ Unique integer for this server.  (Actually taken from the
      -- ObjectVersion of the commit, if no other integer is available.)
   userId :: String -- identifier of the committing user.
   }

data VersionInfo = VersionInfo {
   user :: UserInfo,
   server :: ServerInfo
   }   

-- ----------------------------------------------------------------------
-- Instances of HasBinaryIO
-- ----------------------------------------------------------------------
   
instance HasBinaryIO UserInfo where
   hPut = mapHPut 
      (\ (UserInfo {label = label,contents = contents,private = private,
            version = version,parents = parents}) 
         ->
         (label,contents,private,version,parents)
         )
   hGetIntWE = mapHGetIntWE 
      (\ (label,contents,private,version,parents) 
         ->
         (UserInfo {label = label,contents = contents,private = private,
            version = version,parents = parents}) 
         )

instance HasBinaryIO ServerInfo where
   hPut = mapHPut 
      (\ (ServerInfo {serverId = serverId,timeStamp = timeStamp,
            userId = userId})
         ->
         (serverId,timeStamp,userId)
         )
   hGetIntWE = mapHGetIntWE 
      (\ (serverId,timeStamp,userId)
         ->
         (ServerInfo {serverId = serverId,timeStamp = timeStamp,
            userId = userId})
         )

instance HasBinaryIO VersionInfo where
   hPut = mapHPut 
      (\ (VersionInfo {user = user,server = server})
         ->
         (user,server)
         )
   hGetIntWE = mapHGetIntWE 
      (\ (user,server)
         ->
         (VersionInfo {user = user,server = server})
         )

-- ----------------------------------------------------------------------
-- Code for filling in the ServerInfo, if necessary, also checking
-- that the user meets the appropriate criteria.
-- ----------------------------------------------------------------------

mkVersionInfo :: PasswordFile.User -> Either UserInfo VersionInfo 
   -> WithError VersionInfo
mkVersionInfo user (Left versionUser) =
   let
      ObjectVersion timeStamp = version versionUser
      userId = PasswordFile.userId user
      versionServer = ServerInfo {
         serverId = thisServerId,
         timeStamp = timeStamp,
         userId = userId
         }
   in
      hasValue (VersionInfo {
         user = versionUser,
         server = versionServer
         })
mkVersionInfo user (Right versionInfo) =
   let
      thisUser = userId (server versionInfo)
   in
      if thisUser == PasswordFile.userId user
            || PasswordFile.isAdmin user == True
         then
            hasValue versionInfo
         else
            hasError ("You cannot copy versions from " 
               ++ thisUser ++ " into this repository.")

thisServerId :: String
thisServerId = unsafePerformIO getServerId
{-# NOINLINE thisServerId #-}

-- ----------------------------------------------------------------------
-- Accessing the version data
-- ----------------------------------------------------------------------

versionInfos :: Broadcaster [VersionInfo] VersionInfo
versionInfos = unsafePerformIO mkVersionInfos

mkVersionInfos :: IO (Broadcaster [VersionInfo] VersionInfo)
mkVersionInfos =
   do
      error "TBD"