{- Module for generating unique names which correspond to given names -}
module NameMangle(
   NameMangler,
   newNameMangler, -- :: IO NameMangler
   MangledName, -- synonym for String.  MangledNames are generated by 
      -- UniqueString.
   newMangledName, -- :: NameMangler -> String -> IO MangledName
   readMangledName, -- :: NameMangler -> MangledName -> IO String
   ) where

import Registry
import UniqueString

-- ---------------------------------------------------------------------
-- Data types
-- ---------------------------------------------------------------------

type MangledName = String

---
-- For now we just do this naively, with a Registry.  Since the names are
-- generated sequentially a dynamic array would be more efficient, perhaps.
data NameMangler = NameMangler {
   nameSource :: UniqueStringSource,
   fromMangledName :: Registry MangledName String
   }

-- ---------------------------------------------------------------------
-- Functions
-- ---------------------------------------------------------------------

newNameMangler :: IO NameMangler
newNameMangler =
   do
      nameSource <- newUniqueStringSource
      fromMangledName <- newRegistry
      return (NameMangler {nameSource = nameSource,
         fromMangledName = fromMangledName})

newMangledName :: NameMangler -> String -> IO MangledName
newMangledName (NameMangler {nameSource = nameSource,
      fromMangledName = fromMangledName}) str =
   do
      name <- newUniqueString nameSource
      setValue fromMangledName name str
      return name

readMangledName :: NameMangler -> MangledName -> IO String
readMangledName (NameMangler {fromMangledName = fromMangledName}) name =
   do
      strOpt <- getValueOpt fromMangledName name
      case strOpt of
         Nothing -> error ("NameMangle: couldn't retrieve "++name)
         Just str -> return str