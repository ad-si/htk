{- Graph defines the Graph class, which defines the basic things a
   graph must do.  Peculiarities:
   (1) Graphs are directed with labelled nodes and
       arcs.  These nodes and arcs have types. 
   (2) The nodes and arcs are identified by values of type Node and Arc.
       These values are essentially strings.  The strings are provided by
       the user; there is no mechanism for generating new unique strings.
       (This is because this is easy in the applications I have in mind.)
   (3) A necessary feature of these graphs is that it is supposed to
       be easy generate copies, both on the same system and on others.
 -}
module Graph(
   Graph(..), -- the Graph class
   -- Instances are parameterised on 
   -- nodeLabel, nodeTypeLabel, arcLabel, arcTypeLabel.

   -- Nodes, Arc, NodeTypes, Arc
   Node, Arc, NodeType, ArcType,
   -- These are all instances of AtomString.StringClass (and so Read & Show).
   -- This means that they are essentially strings; the different types
   -- are just there to add a little abstraction.
   -- They are also all instances of Eq and Ord.  However there
   -- is no guarantee that the ordering will be the same as for the
   -- corresponding strings.

   -- Updates
   Update(..),
   -- datatype encoding update to shared graph
   -- Like instances of Graph, parameterised on 
   -- nodeLabel, nodeTypeLabel, arcLabel, arcTypeLabel.
   -- Derives Read and Show.

   CannedGraph(..),
   -- contains complete immutable contents of a Graph at some time
   -- Like instances of Graph, parameterised on
   -- nodeLabel, nodeTypeLabel, arcLabel, arcTypeLabel.
   -- Derives Read and Show.

   GraphConnection(..),
   -- A GraphConnection contains the information generated by one
   -- instance of Graph, which can be used to construct another,
   -- including a CannedGraph.
   -- Like instances of Graph, parameterised on 
   -- nodeLabel, nodeTypeLabel, arcLabel, arcTypeLabel.

   -- Utility functions.
   newEmptyGraph, 
   -- :: Graph graph =>
   --    IO (graph nodeLabel nodeTypeLabel arcLabel arcTypeLabel)

   ) where

import AtomString
import Computation(done)

import Selective(EV,inaction)

class Graph graph where
   -- access functions
   getNodes :: graph nodeLabel nodeTypeLabel arcLabel arcTypeLabel 
      -> IO [Node]

   getArcsOut :: graph nodeLabel nodeTypeLabel arcLabel arcTypeLabel 
      -> Node -> IO [Arc]
   getArcsIn :: graph nodeLabel nodeTypeLabel arcLabel arcTypeLabel 
      -> Node -> IO [Arc]
   getNodeLabel :: graph nodeLabel nodeTypeLabel arcLabel arcTypeLabel 
      -> Node -> IO nodeLabel
   getNodeType :: graph nodeLabel nodeTypeLabel arcLabel arcTypeLabel 
      -> Node -> IO NodeType
   getNodeTypeLabel :: graph nodeLabel nodeTypeLabel arcLabel arcTypeLabel 
      -> NodeType -> IO nodeTypeLabel

   getSource :: graph nodeLabel nodeTypeLabel arcLabel arcTypeLabel 
      -> Arc -> IO Node
   getTarget :: graph nodeLabel nodeTypeLabel arcLabel arcTypeLabel 
      -> Arc -> IO Node
   getArcLabel :: graph nodeLabel nodeTypeLabel arcLabel arcTypeLabel 
      -> Arc -> IO arcLabel
   getArcType :: graph nodeLabel nodeTypeLabel arcLabel arcTypeLabel 
      -> Arc -> IO ArcType
   getArcTypeLabel :: graph nodeLabel nodeTypeLabel arcLabel arcTypeLabel 
      -> ArcType -> IO arcTypeLabel

   shareGraph :: graph nodeLabel nodeTypeLabel arcLabel arcTypeLabel -> 
      IO (GraphConnection nodeLabel nodeTypeLabel arcLabel arcTypeLabel)
   newGraph :: GraphConnection nodeLabel nodeTypeLabel arcLabel arcTypeLabel 
      -> IO (graph nodeLabel nodeTypeLabel arcLabel arcTypeLabel)

   update :: graph nodeLabel nodeTypeLabel arcLabel arcTypeLabel 
      -> Update nodeLabel nodeTypeLabel arcLabel arcTypeLabel -> IO ()
      

------------------------------------------------------------------------
-- GraphConnection
------------------------------------------------------------------------

data GraphConnection nodeLabel nodeTypeLabel arcLabel arcTypeLabel = 
      GraphConnection {   
   graphState :: CannedGraph nodeLabel nodeTypeLabel arcLabel arcTypeLabel, 
      -- current state of graph
   graphUpdates :: EV(Update nodeLabel nodeTypeLabel arcLabel arcTypeLabel), 
      -- changes since the canned graph was made, apart from
      -- those communicated via the graphUpdate action.
      -- Becomes inaction after deRegister is called.
   deRegister :: IO (),
      -- disables graphUpdates
   graphUpdate :: Update nodeLabel nodeTypeLabel arcLabel arcTypeLabel 
      -> IO()
      -- Similar to update (in class definition) except that
      -- it doesn't get echoed on graphUpdates.
   }

------------------------------------------------------------------------
-- Nodes, Arcs, NodeTypes, ArcTypes.
------------------------------------------------------------------------

newtype Node = Node AtomString deriving (Eq,Ord)

instance StringClass Node where
   toString (Node atomString) = toString atomString
   fromString atomString = Node (fromString atomString)

newtype NodeType = NodeType AtomString deriving (Eq,Ord)

instance StringClass NodeType where
   toString (NodeType atomString) = toString atomString
   fromString atomString = NodeType (fromString atomString)

newtype Arc = Arc AtomString deriving (Eq,Ord)

instance StringClass Arc where
   toString (Arc atomString) = toString atomString
   fromString atomString = Arc (fromString atomString)

newtype ArcType = ArcType AtomString deriving (Eq,Ord)

instance StringClass ArcType where
   toString (ArcType atomString) = toString atomString
   fromString atomString = ArcType (fromString atomString)

------------------------------------------------------------------------
-- Update
------------------------------------------------------------------------

data Update nodeLabel nodeTypeLabel arcLabel arcTypeLabel =
      NewNodeType NodeType nodeTypeLabel
   |  SetNodeTypeLabel NodeType nodeTypeLabel
   |  NewNode Node NodeType nodeLabel 
   |  DeleteNode Node
   |  SetNodeLabel Node nodeLabel
   |  NewArcType ArcType arcTypeLabel
   |  SetArcTypeLabel ArcType arcTypeLabel
   |  NewArc Arc ArcType arcLabel Node Node
   |  DeleteArc Arc
   |  SetArcLabel Arc arcLabel
   deriving (Read,Show)

------------------------------------------------------------------------
-- CannedGraph
------------------------------------------------------------------------

data CannedGraph nodeLabel nodeTypeLabel arcLabel arcTypeLabel =
   CannedGraph {
      nodeTypes :: [(NodeType,nodeTypeLabel)],
      nodes :: [(Node,NodeType,nodeLabel)],
      arcTypes :: [(ArcType,arcTypeLabel)],
      arcs :: [(Arc,ArcType,arcLabel,Node,Node)]
      } deriving (Read,Show)


emptyCannedGraph :: CannedGraph nodeLabel nodeTypeLabel arcLabel arcTypeLabel
emptyCannedGraph = CannedGraph {
   nodeTypes = [],
   nodes = [],
   arcTypes = [],
   arcs = []
   }

------------------------------------------------------------------------
-- Utility functions
------------------------------------------------------------------------

newEmptyGraph :: Graph graph 
   => IO (graph nodeLabel nodeTypeLabel arcLabel arcTypeLabel)
newEmptyGraph =
   do
      let
         nullGraphConnection =
            GraphConnection {
               graphState = emptyCannedGraph,
               graphUpdates = inaction,
               deRegister = done,
               graphUpdate = (\ _ -> done)
               }
      newGraph nullGraphConnection  

